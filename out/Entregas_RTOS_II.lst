
MyCIAAPrograms/RTOS2_15CO/Entregas_RTOS_II/out/Entregas_RTOS_II.elf:     file format elf32-littlearm
MyCIAAPrograms/RTOS2_15CO/Entregas_RTOS_II/out/Entregas_RTOS_II.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000311

Program Header:
0x70000001 off    0x00018e80 vaddr 0x1a008e80 paddr 0x1a008e80 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000014d8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008e88 memsz 0x00008e88 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008e88 align 2**16
         filesz 0x000009ec memsz 0x000009ec flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e7c  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009ec  10000000  1a008e88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
  6 .bss          00000aec  100009ec  100009ec  000009ec  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
 11 .init_array   00000004  1a008e7c  1a008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a008e80  1a008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209ec  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
 18 .noinit       00000000  100014d8  100014d8  000209ec  2**2
                  CONTENTS
 19 .debug_info   000262aa  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000052d4  00000000  00000000  00046c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000de8  00000000  00000000  0004bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000fd8  00000000  00000000  0004cd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00009b92  00000000  00000000  0004dd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000180d9  00000000  00000000  000578bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00031989  00000000  00000000  0006f995  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      000000c1  00000000  00000000  000a131e  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  000a13df  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00003410  00000000  00000000  000a1414  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    0000bf14  00000000  00000000  000a4824  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009ec l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008e7c l    d  .init_array	00000000 .init_array
1a008e80 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100014d8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system.c
100009ec l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a000464 l     F .text	00000058 prvInsertBlockIntoFreeList
100009f0 l     O .bss	00000004 pxEnd
100009f4 l     O .bss	00000004 xBlockAllocatedBit
100009f8 l     O .bss	00000004 xFreeBytesRemaining
100009fc l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a00052c l     F .text	0000001e prvIsQueueFull
1a00054a l     F .text	0000001a prvIsQueueEmpty
1a000564 l     F .text	00000076 prvCopyDataToQueue
1a0005da l     F .text	00000024 prvCopyDataFromQueue
1a0005fe l     F .text	0000006e prvUnlockQueue
1a0006f0 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10000a04 l     O .bss	00000168 uxIdleTaskStack.10813
10000b6c l     O .bss	000005a0 uxTimerTaskStack.10820
1000110c l     O .bss	00000060 xIdleTaskTCB.10812
1000116c l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000cd0 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000cfc l     F .text	00000090 prvInitialiseNewTask
1a000d8c l     F .text	00000068 prvInitialiseTaskLists
1a000df4 l     F .text	000000ac prvAddNewTaskToReadyList
1a000ea0 l     F .text	00000038 prvDeleteTCB
1a000ed8 l     F .text	0000004c prvCheckTasksWaitingTermination
1a000f24 l     F .text	00000028 prvIdleTask
1a000f4c l     F .text	00000098 prvAddCurrentTaskToDelayedList
100011d0 l     O .bss	00000004 pxDelayedTaskList
100011d4 l     O .bss	00000004 pxOverflowDelayedTaskList
100011d8 l     O .bss	0000008c pxReadyTasksLists
10001264 l     O .bss	00000004 uxCurrentNumberOfTasks
10001268 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000126c l     O .bss	00000004 uxPendedTicks
10001270 l     O .bss	00000004 uxSchedulerSuspended
10001274 l     O .bss	00000004 uxTaskNumber
10001278 l     O .bss	00000004 uxTopReadyPriority
1000127c l     O .bss	00000014 xDelayedTaskList1
10001290 l     O .bss	00000014 xDelayedTaskList2
100012a4 l     O .bss	00000004 xNextTaskUnblockTime
100012a8 l     O .bss	00000004 xNumOfOverflows
100012ac l     O .bss	00000014 xPendingReadyList
100012c0 l     O .bss	00000004 xSchedulerRunning
100012c4 l     O .bss	00000014 xSuspendedTaskList
100012d8 l     O .bss	00000014 xTasksWaitingTermination
100012ec l     O .bss	00000004 xTickCount
100012f0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001658 l     F .text	00000020 prvGetNextExpireTime
1a001678 l     F .text	00000048 prvInsertTimerInActiveList
1a0016c0 l     F .text	00000070 prvCheckForValidListAndQueue
1a001a74 l     F .text	00000016 prvTimerTask
1a001800 l     F .text	00000078 prvSwitchTimerLists
1a001878 l     F .text	0000002c prvSampleTimeNow
1a0018a4 l     F .text	00000060 prvProcessExpiredTimer
1a001904 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001978 l     F .text	000000fc prvProcessReceivedCommands
100012f4 l     O .bss	00000004 pxCurrentTimerList
100012f8 l     O .bss	00000004 pxOverflowTimerList
100012fc l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
1000139c l     O .bss	00000014 xActiveTimerList1
100013b0 l     O .bss	00000014 xActiveTimerList2
100013c4 l     O .bss	00000004 xLastTime.11863
100013c8 l     O .bss	00000050 xStaticTimerQueue.11913
10001418 l     O .bss	00000004 xTimerQueue
1000141c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001a8c l     F .text	00000040 prvTaskExitError
1a001acc l     F .text	00000022 prvPortStartFirstTask
1a001af4 l     F .text	0000000e vPortEnableVFP
1a001b60 l       .text	00000000 pxCurrentTCBConst2
1a001c40 l       .text	00000000 pxCurrentTCBConst
10001420 l     O .bss	00000001 ucMaxSysCallPriority
10001424 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a001e34 l     F .text	00000044 Board_LED_Init
1a001e78 l     F .text	00000040 Board_TEC_Init
1a001eb8 l     F .text	00000040 Board_GPIO_Init
1a001ef8 l     F .text	00000030 Board_ADC_Init
1a001f28 l     F .text	00000038 Board_SPI_Init
1a001f60 l     F .text	00000024 Board_I2C_Init
1a008998 l     O .text	00000008 GpioButtons
1a0089a0 l     O .text	0000000c GpioLeds
1a0089ac l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0089c4 l     O .text	00000004 InitClkStates
1a0089c8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002150 l     F .text	0000002c Chip_UART_GetIndex
1a008a3c l     O .text	00000008 UART_BClock
1a008a44 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0022ac l     F .text	00000014 Chip_ADC_GetClockIndex
1a0022c0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002388 l     F .text	000000a0 pll_calc_divs
1a002428 l     F .text	0000010c pll_get_frac
1a002534 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0027a8 l     F .text	00000022 Chip_Clock_GetDivRate
1000142c l     O .bss	00000008 audio_usb_pll_freq
1a008a58 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008ac4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002a70 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002a84 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002b78 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10001434 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003c84 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a0064f4 l     F .text	00000084 __sbprintf
1a008d3c l     O .text	00000010 blanks.8693
1a008d4c l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a006648 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a008e60 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a0085a0 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000048 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a008e80 l       .init_array	00000000 __init_array_end
1a008e7c l       .bss_RAM5	00000000 __preinit_array_end
1a008e7c l       .init_array	00000000 __init_array_start
1a008e7c l       .bss_RAM5	00000000 __preinit_array_start
1a00368c g     F .text	0000002c .hidden __aeabi_dcmpun
1a0025cc g     F .text	0000001c Chip_Clock_GetDividerSource
1a0003b0 g     F .text	00000012 _isatty_r
1a003650 g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00358c g     F .text	0000007a .hidden __cmpdf2
1a0003c2 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00358c g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001ba8 g     F .text	0000002c vPortExitCritical
1a0030fc g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0047e0 g     F .text	00000028 printf
1a00201a g     F .text	00000008 __stdio_init
100014b4 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a008878 g     F .text	00000034 _wcrtomb_r
1a00486c g     F .text	00000020 __sseek
1a003ce0 g     F .text	00000054 __sinit
1a0087c8 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000b78 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a002366 g     F .text	0000000c Chip_ADC_SetResolution
1a0047d4 g     F .text	0000000c __malloc_unlock
1a001c44 g     F .text	0000002c SysTick_Handler
100014b8 g     O .bss	00000001 __lock___arc4random_mutex
1a00030e  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a001fbc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a007a70 g     F .text	000000ce memmove
1a001be0 g     F .text	00000064 PendSV_Handler
1a000924 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a007b40 g     F .text	0000004c _Balloc
1a008e88 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a00357c g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100011cc g     O .bss	00000004 pxCurrentTCB
1a0003a6 g     F .text	0000000a _fstat_r
53ff757e g       *ABS*	00000000 __valid_user_code_checksum
1a008e88 g       .ARM.exidx	00000000 _etext
1a003618 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0014dc g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00284a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001ca8 g     F .text	00000110 xPortStartScheduler
1a0045f4 g     F .text	00000134 memcpy
1a0013e8 g     F .text	00000030 vTaskPlaceOnEventList
1a003608 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003cd4 g     F .text	0000000c _cleanup_r
1a003084 g     F .text	00000022 .hidden __floatsidf
1a001c70  w    F .text	00000038 vPortSetupTimerInterrupt
1a003584 g     F .text	00000082 .hidden __ltdf2
1a003708 g     F .text	00000000 .hidden __aeabi_uldivmod
100014d8 g       .noinit	00000000 _noinit
1a0004bc g     F .text	00000070 vPortFree
100014ac g     O .bss	00000004 SystemCoreClock
1a00217c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001db8 g     F .text	0000005c vPortValidateInterruptPriority
1a008d98 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a0028c8 g     F .text	0000004c Chip_Clock_GetRate
1a000be6 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10001468 g     O .bss	00000004 __malloc_top_pad
1a00205c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003064 g     F .text	0000001e .hidden __aeabi_ui2d
1a0078cc g     F .text	00000008 _localeconv_r
1a007ccc g     F .text	00000012 __i2b
1a0075c4 g     F .text	00000308 __sfvwrite_r
1a003738 g     F .text	000002d0 .hidden __udivmoddi4
1a002de0 g     F .text	00000000 .hidden __aeabi_drsub
1a000444 g     F .text	00000020 _sbrk_r
1a008994 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0003cc g     F .text	0000004e _read_r
1a000be0 g     F .text	00000006 vListInitialiseItem
1a00363c g     F .text	00000012 .hidden __aeabi_dcmplt
1a003a0c g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0009f4 g     F .text	0000015c xQueueReceive
1000146c g     O .bss	00000040 xQueueRegistry
10001460 g     O .bss	00000004 __malloc_max_sbrked_mem
1a0030a8 g     F .text	00000042 .hidden __extendsfdf2
1a0033ac g     F .text	000001d0 .hidden __aeabi_ddiv
1a000c70 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002dec g     F .text	00000276 .hidden __adddf3
1a008e80 g       .ARM.exidx	00000000 __exidx_start
100014bc g     O .bss	00000001 __lock___env_recursive_mutex
1a003158 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
100014c0 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a008154 g     F .text	0000036c _realloc_r
1a00402c g     F .text	00000048 __libc_init_array
1a00872c g     F .text	00000064 _fputwc_r
1a008d70 g     O .text	00000028 __mprec_bigtens
1a003064 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a007f64 g     F .text	00000038 __mcmp
1a001fd8 g     F .text	00000030 Board_Init
1a00039a  w    F .text	00000002 _init
1a000bca g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0010fc g     F .text	0000000c xTaskGetTickCount
1a0007a4 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100014d8 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000310 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a007c2c g     F .text	00000040 __hi0bits
1a002118 g     F .text	00000038 Chip_I2C_SetClockRate
1a0036b8 g     F .text	0000004e .hidden __fixdfsi
1a0015a4 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002580 g     F .text	0000004c Chip_Clock_EnableCrystal
100014c4 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001450 g     F .text	0000008c xTaskRemoveFromEventList
1a002dec g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a003584 g     F .text	00000082 .hidden __ledf2
1a007e10 g     F .text	000000a0 __pow5mult
1a0030ec g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0020f4 g     F .text	00000024 Chip_I2C_Init
1a004080 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00273c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a008b0c g     O .text	000000e6 gpioPinsInit
1a000c88  w    F .text	0000002c vAssertCalled
1a002a9c g     F .text	00000012 Chip_SSP_SetClockRate
1a003678 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003d34 g     F .text	0000000c __sfp_lock_acquire
1a0079d0 g     F .text	00000000 memchr
1a0014f4 g     F .text	00000084 xTaskCheckForTimeOut
1a003dec g     F .text	000001ec _free_r
1a002824 g     F .text	00000026 Chip_Clock_GetBaseClock
1a008790 g     F .text	0000000c __locale_mb_cur_max
1a003664 g     F .text	00000012 .hidden __aeabi_dcmpge
100009ec g       .bss	00000000 _bss
1a002334 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002de8 g     F .text	0000027a .hidden __aeabi_dsub
10000878 g     O .data	00000004 __malloc_sbrk_base
10001428 g     O .bss	00000004 freeRtosInterruptCallback
1a0010ec g     F .text	00000010 vTaskSuspendAll
1a0030ec g     F .text	0000006a .hidden __floatundidf
1a007eb0 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002aae g     F .text	0000003e Chip_SSP_SetBitRate
1a000c30 g     F .text	00000026 uxListRemove
1a002a6c g     F .text	00000002 Chip_GPIO_Init
1a0089c0 g     O .text	00000004 OscRateIn
1a007ce0 g     F .text	00000130 __multiply
1a000fe4 g     F .text	00000072 xTaskCreateStatic
100014d8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00852c g     F .text	00000072 strncpy
10001438 g     O .bss	00000028 __malloc_current_mallinfo
1a008094 g     F .text	000000be __d2b
1a00131c g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000712 g     F .text	00000092 xQueueGenericCreateStatic
1a001418 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00039c g     F .text	0000000a _close_r
1a003084 g     F .text	00000022 .hidden __aeabi_i2d
1a002bac g     F .text	000001ac gpioInit
1a000c58 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a004078 g     F .text	00000002 __retarget_lock_close_recursive
1a001794 g     F .text	0000006c xTimerGenericCommand
1a006578 g     F .text	000000d0 __swsetup_r
1a000cb4  w    F .text	0000001c vApplicationStackOverflowHook
1a003a08  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0033ac g     F .text	000001d0 .hidden __divdf3
10000470 g     O .data	00000408 __malloc_av_
1a003158 g     F .text	00000254 .hidden __muldf3
1a004808 g     F .text	00000022 __sread
1a002d58 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0047c8 g     F .text	0000000c __malloc_lock
1a001fa8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003c28 g     F .text	0000005a _fflush_r
1a00862c g     F .text	0000005e _calloc_r
1a0025e8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00407c g     F .text	00000002 __retarget_lock_acquire_recursive
1a004728 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	0000000e main
10001464 g     O .bss	00000004 __malloc_max_total_mem
1a004074 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000bfc g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001b40 g     F .text	00000024 SVC_Handler
1a00488c g     F .text	00000008 __sclose
1a001730 g     F .text	00000064 xTimerCreateTimerTask
1a006770 g     F .text	00000e54 _dtoa_r
1a004084 g     F .text	00000570 _malloc_r
1a0088ac g     F .text	0000001a __ascii_wctomb
1a0030fc g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002858 g     F .text	0000003c Chip_Clock_EnableOpts
1a002012 g     F .text	00000008 __stdio_getchar
1a003d4c g     F .text	000000a0 _malloc_trim_r
1a002604 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0026bc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002b24 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00358c g     F .text	0000007a .hidden __nedf2
1a000398  w    F .text	00000002 _fini
1a001220 g     F .text	000000fc xTaskResumeAll
1a001058 g     F .text	00000094 vTaskStartScheduler
1a0022f4 g     F .text	00000040 Chip_ADC_Init
100014b0 g     O .bss	00000004 g_pUsbApi
1a002024 g     F .text	00000038 Board_SetupMuxing
1a0021d0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00041a g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 _impure_ptr
1a003adc g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00879c g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a001578 g     F .text	0000000c vTaskMissedYield
100014d8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002aec g     F .text	00000038 Chip_SSP_Init
1a000b50 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001108 g     F .text	00000118 xTaskIncrementTick
1a0078d4 g     F .text	0000005c __swhatbuf_r
1a001e14 g     F .text	00000020 DAC_IRQHandler
1a001f84 g     F .text	00000024 Board_Debug_Init
1a003628 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a002008 g     F .text	0000000a __stdio_putchar
1a00066c g     F .text	00000084 xQueueGenericReset
100009ec g       .data	00000000 _edata
1a0020d4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00868c g     F .text	0000009e __fputwc
100014c8 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a002914 g     F .text	00000158 Chip_SetupCoreClock
1a00482c g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1000087c g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a003fd8 g     F .text	00000052 _fwalk_reent
1a002374 g     F .text	00000014 SystemCoreClockUpdate
1a007f9c g     F .text	000000f8 __mdiff
1a0036b8 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003d40 g     F .text	0000000c __sfp_lock_release
1a001584 g     F .text	00000020 xTaskGetSchedulerState
1a008bf4 g     O .text	00000101 _ctype_
1a003a08  w    F .text	00000002 .hidden __aeabi_idiv0
1a00368c g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
100014cc g     O .bss	00000001 __lock___dd_hash_mutex
1a007930 g     F .text	00000094 __smakebuf_r
100014d0 g     O .bss	00000001 __lock___tz_mutex
1a0048c0 g     F .text	000000dc strlen
1a001b08 g     F .text	0000002c pxPortInitialiseStack
1a002894 g     F .text	00000034 Chip_Clock_Enable
1a003618 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a00357c g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a008618 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0030a8 g     F .text	00000042 .hidden __aeabi_f2d
1a002d74 g     F .text	0000006c boardInit
1a001b64 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002de8 g     F .text	0000027a .hidden __subdf3
1a0049a0 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a007c6c g     F .text	00000060 __lo0bits
1a0084c0 g     F .text	0000006c frexp
10000880 g     O .data	0000016c __global_locale
1a0027cc g     F .text	00000058 Chip_Clock_SetBaseClock
1a002b5c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100014d4 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0020c8 g     F .text	0000000c Board_SystemInit
1a007ba0 g     F .text	0000008a __multadd
1a007b8c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 11 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7e 75 ff 53     }...........~u.S
	...
1a00002c:	41 1b 00 1a 85 01 00 1a 00 00 00 00 e1 1b 00 1a     A...............
1a00003c:	45 1c 00 1a                                         E...

1a000040 <g_pfnVendorVectors>:
1a000040:	15 1e 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	59 2d 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     Y-..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a008e88 	.word	0x1a008e88
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009ec 	.word	0x000009ec
1a000120:	1a008e88 	.word	0x1a008e88
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a008e88 	.word	0x1a008e88
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a008e88 	.word	0x1a008e88
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a008e88 	.word	0x1a008e88
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009ec 	.word	0x100009ec
1a000154:	00000aec 	.word	0x00000aec
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*=====[Implementations of public functions]=================================*/



int main( void )
{
1a000300:	b508      	push	{r3, lr}
   /* Inicializar la placa */
   boardConfig();
1a000302:	f002 fd37 	bl	1a002d74 <boardInit>
   

   /* arranco el scheduler */
   vTaskStartScheduler();
1a000306:	f000 fea7 	bl	1a001058 <vTaskStartScheduler>
   return 0;
}
1a00030a:	2000      	movs	r0, #0
1a00030c:	bd08      	pop	{r3, pc}

1a00030e <initialise_monitor_handles>:
}
1a00030e:	4770      	bx	lr

1a000310 <Reset_Handler>:
void Reset_Handler(void) {
1a000310:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000312:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000314:	4b19      	ldr	r3, [pc, #100]	; (1a00037c <Reset_Handler+0x6c>)
1a000316:	4a1a      	ldr	r2, [pc, #104]	; (1a000380 <Reset_Handler+0x70>)
1a000318:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00031a:	3304      	adds	r3, #4
1a00031c:	4a19      	ldr	r2, [pc, #100]	; (1a000384 <Reset_Handler+0x74>)
1a00031e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000320:	2300      	movs	r3, #0
1a000322:	e005      	b.n	1a000330 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000324:	4a18      	ldr	r2, [pc, #96]	; (1a000388 <Reset_Handler+0x78>)
1a000326:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00032a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00032e:	3301      	adds	r3, #1
1a000330:	2b07      	cmp	r3, #7
1a000332:	d9f7      	bls.n	1a000324 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000334:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000336:	4b15      	ldr	r3, [pc, #84]	; (1a00038c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000338:	e007      	b.n	1a00034a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00033a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00033e:	689a      	ldr	r2, [r3, #8]
1a000340:	6859      	ldr	r1, [r3, #4]
1a000342:	6818      	ldr	r0, [r3, #0]
1a000344:	f7ff ff21 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000348:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00034a:	4a11      	ldr	r2, [pc, #68]	; (1a000390 <Reset_Handler+0x80>)
1a00034c:	4293      	cmp	r3, r2
1a00034e:	d3f4      	bcc.n	1a00033a <Reset_Handler+0x2a>
1a000350:	e006      	b.n	1a000360 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000352:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000354:	6859      	ldr	r1, [r3, #4]
1a000356:	f854 0b08 	ldr.w	r0, [r4], #8
1a00035a:	f7ff ff25 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00035e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000360:	4a0c      	ldr	r2, [pc, #48]	; (1a000394 <Reset_Handler+0x84>)
1a000362:	4293      	cmp	r3, r2
1a000364:	d3f5      	bcc.n	1a000352 <Reset_Handler+0x42>
    SystemInit();
1a000366:	f002 fbdd 	bl	1a002b24 <SystemInit>
    __libc_init_array();
1a00036a:	f003 fe5f 	bl	1a00402c <__libc_init_array>
    initialise_monitor_handles();
1a00036e:	f7ff ffce 	bl	1a00030e <initialise_monitor_handles>
    main();
1a000372:	f7ff ffc5 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000376:	bf30      	wfi
1a000378:	e7fd      	b.n	1a000376 <Reset_Handler+0x66>
1a00037a:	bf00      	nop
1a00037c:	40053100 	.word	0x40053100
1a000380:	10df1000 	.word	0x10df1000
1a000384:	01dff7ff 	.word	0x01dff7ff
1a000388:	e000e280 	.word	0xe000e280
1a00038c:	1a000114 	.word	0x1a000114
1a000390:	1a000150 	.word	0x1a000150
1a000394:	1a000178 	.word	0x1a000178

1a000398 <_fini>:
void _fini(void) {}
1a000398:	4770      	bx	lr

1a00039a <_init>:
void _init(void) {}
1a00039a:	4770      	bx	lr

1a00039c <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00039c:	2309      	movs	r3, #9
1a00039e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003a4:	4770      	bx	lr

1a0003a6 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0003a6:	2358      	movs	r3, #88	; 0x58
1a0003a8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003ae:	4770      	bx	lr

1a0003b0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0003b0:	2902      	cmp	r1, #2
1a0003b2:	d904      	bls.n	1a0003be <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0003b4:	2309      	movs	r3, #9
1a0003b6:	6003      	str	r3, [r0, #0]
       return -1;
1a0003b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003bc:	4770      	bx	lr
       return 1;
1a0003be:	2001      	movs	r0, #1
   }
}
1a0003c0:	4770      	bx	lr

1a0003c2 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0003c2:	2358      	movs	r3, #88	; 0x58
1a0003c4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003ca:	4770      	bx	lr

1a0003cc <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0003cc:	2902      	cmp	r1, #2
1a0003ce:	d81f      	bhi.n	1a000410 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0003d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0003d4:	461d      	mov	r5, r3
1a0003d6:	4617      	mov	r7, r2
1a0003d8:	4606      	mov	r6, r0
  size_t i = 0;
1a0003da:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0003dc:	42ac      	cmp	r4, r5
1a0003de:	d211      	bcs.n	1a000404 <_read_r+0x38>
         int c = __stdio_getchar();
1a0003e0:	f001 fe17 	bl	1a002012 <__stdio_getchar>
         if( c != -1 ){
1a0003e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0003e8:	d0f8      	beq.n	1a0003dc <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0003ea:	f104 0801 	add.w	r8, r4, #1
1a0003ee:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0003f0:	280d      	cmp	r0, #13
1a0003f2:	d003      	beq.n	1a0003fc <_read_r+0x30>
1a0003f4:	280a      	cmp	r0, #10
1a0003f6:	d001      	beq.n	1a0003fc <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0003f8:	4644      	mov	r4, r8
1a0003fa:	e7ef      	b.n	1a0003dc <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0003fc:	f001 fe09 	bl	1a002012 <__stdio_getchar>
               return i;
1a000400:	4640      	mov	r0, r8
1a000402:	e003      	b.n	1a00040c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000404:	2313      	movs	r3, #19
1a000406:	6033      	str	r3, [r6, #0]
      return -1;
1a000408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000410:	2313      	movs	r3, #19
1a000412:	6003      	str	r3, [r0, #0]
      return -1;
1a000414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000418:	4770      	bx	lr

1a00041a <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00041a:	2902      	cmp	r1, #2
1a00041c:	d80c      	bhi.n	1a000438 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00041e:	b570      	push	{r4, r5, r6, lr}
1a000420:	461d      	mov	r5, r3
1a000422:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000424:	2400      	movs	r4, #0
1a000426:	42ac      	cmp	r4, r5
1a000428:	d204      	bcs.n	1a000434 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a00042a:	5d30      	ldrb	r0, [r6, r4]
1a00042c:	f001 fdec 	bl	1a002008 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000430:	3401      	adds	r4, #1
1a000432:	e7f8      	b.n	1a000426 <_write_r+0xc>
       return n;
1a000434:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000436:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000438:	2313      	movs	r3, #19
1a00043a:	6003      	str	r3, [r0, #0]
       return -1;
1a00043c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000440:	4770      	bx	lr
1a000442:	Address 0x000000001a000442 is out of bounds.


1a000444 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000444:	4b05      	ldr	r3, [pc, #20]	; (1a00045c <_sbrk_r+0x18>)
1a000446:	681b      	ldr	r3, [r3, #0]
1a000448:	b123      	cbz	r3, 1a000454 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00044a:	4b04      	ldr	r3, [pc, #16]	; (1a00045c <_sbrk_r+0x18>)
1a00044c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00044e:	4401      	add	r1, r0
1a000450:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000452:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000454:	4b01      	ldr	r3, [pc, #4]	; (1a00045c <_sbrk_r+0x18>)
1a000456:	4a02      	ldr	r2, [pc, #8]	; (1a000460 <_sbrk_r+0x1c>)
1a000458:	601a      	str	r2, [r3, #0]
1a00045a:	e7f6      	b.n	1a00044a <_sbrk_r+0x6>
1a00045c:	100009ec 	.word	0x100009ec
1a000460:	100014d8 	.word	0x100014d8

1a000464 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000464:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000466:	4a13      	ldr	r2, [pc, #76]	; (1a0004b4 <prvInsertBlockIntoFreeList+0x50>)
1a000468:	e000      	b.n	1a00046c <prvInsertBlockIntoFreeList+0x8>
1a00046a:	461a      	mov	r2, r3
1a00046c:	6813      	ldr	r3, [r2, #0]
1a00046e:	4283      	cmp	r3, r0
1a000470:	d3fb      	bcc.n	1a00046a <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000472:	6851      	ldr	r1, [r2, #4]
1a000474:	1854      	adds	r4, r2, r1
1a000476:	4284      	cmp	r4, r0
1a000478:	d00a      	beq.n	1a000490 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a00047a:	6841      	ldr	r1, [r0, #4]
1a00047c:	1844      	adds	r4, r0, r1
1a00047e:	42a3      	cmp	r3, r4
1a000480:	d00b      	beq.n	1a00049a <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000482:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000484:	4290      	cmp	r0, r2
1a000486:	d000      	beq.n	1a00048a <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000488:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a00048a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00048e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000490:	6840      	ldr	r0, [r0, #4]
1a000492:	4401      	add	r1, r0
1a000494:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a000496:	4610      	mov	r0, r2
1a000498:	e7ef      	b.n	1a00047a <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00049a:	4c07      	ldr	r4, [pc, #28]	; (1a0004b8 <prvInsertBlockIntoFreeList+0x54>)
1a00049c:	6824      	ldr	r4, [r4, #0]
1a00049e:	42a3      	cmp	r3, r4
1a0004a0:	d006      	beq.n	1a0004b0 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0004a2:	685b      	ldr	r3, [r3, #4]
1a0004a4:	4419      	add	r1, r3
1a0004a6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0004a8:	6813      	ldr	r3, [r2, #0]
1a0004aa:	681b      	ldr	r3, [r3, #0]
1a0004ac:	6003      	str	r3, [r0, #0]
1a0004ae:	e7e9      	b.n	1a000484 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0004b0:	6004      	str	r4, [r0, #0]
1a0004b2:	e7e7      	b.n	1a000484 <prvInsertBlockIntoFreeList+0x20>
1a0004b4:	100009fc 	.word	0x100009fc
1a0004b8:	100009f0 	.word	0x100009f0

1a0004bc <vPortFree>:
	if( pv != NULL )
1a0004bc:	b380      	cbz	r0, 1a000520 <vPortFree+0x64>
{
1a0004be:	b538      	push	{r3, r4, r5, lr}
1a0004c0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0004c2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0004c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0004ca:	4916      	ldr	r1, [pc, #88]	; (1a000524 <vPortFree+0x68>)
1a0004cc:	6809      	ldr	r1, [r1, #0]
1a0004ce:	420a      	tst	r2, r1
1a0004d0:	d108      	bne.n	1a0004e4 <vPortFree+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0004d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004d6:	f383 8811 	msr	BASEPRI, r3
1a0004da:	f3bf 8f6f 	isb	sy
1a0004de:	f3bf 8f4f 	dsb	sy
1a0004e2:	e7fe      	b.n	1a0004e2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a0004e4:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0004e8:	b140      	cbz	r0, 1a0004fc <vPortFree+0x40>
1a0004ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004ee:	f383 8811 	msr	BASEPRI, r3
1a0004f2:	f3bf 8f6f 	isb	sy
1a0004f6:	f3bf 8f4f 	dsb	sy
1a0004fa:	e7fe      	b.n	1a0004fa <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a0004fc:	ea22 0201 	bic.w	r2, r2, r1
1a000500:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000504:	f000 fdf2 	bl	1a0010ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000508:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a00050c:	4a06      	ldr	r2, [pc, #24]	; (1a000528 <vPortFree+0x6c>)
1a00050e:	6813      	ldr	r3, [r2, #0]
1a000510:	440b      	add	r3, r1
1a000512:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000514:	4628      	mov	r0, r5
1a000516:	f7ff ffa5 	bl	1a000464 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00051a:	f000 fe81 	bl	1a001220 <xTaskResumeAll>
}
1a00051e:	bd38      	pop	{r3, r4, r5, pc}
1a000520:	4770      	bx	lr
1a000522:	bf00      	nop
1a000524:	100009f4 	.word	0x100009f4
1a000528:	100009f8 	.word	0x100009f8

1a00052c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00052c:	b510      	push	{r4, lr}
1a00052e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000530:	f001 fb18 	bl	1a001b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000534:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000536:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000538:	429a      	cmp	r2, r3
1a00053a:	d004      	beq.n	1a000546 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00053c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00053e:	f001 fb33 	bl	1a001ba8 <vPortExitCritical>

	return xReturn;
}
1a000542:	4620      	mov	r0, r4
1a000544:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000546:	2401      	movs	r4, #1
1a000548:	e7f9      	b.n	1a00053e <prvIsQueueFull+0x12>

1a00054a <prvIsQueueEmpty>:
{
1a00054a:	b510      	push	{r4, lr}
1a00054c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00054e:	f001 fb09 	bl	1a001b64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000554:	b923      	cbnz	r3, 1a000560 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000556:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000558:	f001 fb26 	bl	1a001ba8 <vPortExitCritical>
}
1a00055c:	4620      	mov	r0, r4
1a00055e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000560:	2400      	movs	r4, #0
1a000562:	e7f9      	b.n	1a000558 <prvIsQueueEmpty+0xe>

1a000564 <prvCopyDataToQueue>:
{
1a000564:	b570      	push	{r4, r5, r6, lr}
1a000566:	4604      	mov	r4, r0
1a000568:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00056a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00056c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00056e:	b95a      	cbnz	r2, 1a000588 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000570:	6803      	ldr	r3, [r0, #0]
1a000572:	b11b      	cbz	r3, 1a00057c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000574:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000576:	3501      	adds	r5, #1
1a000578:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a00057a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00057c:	6840      	ldr	r0, [r0, #4]
1a00057e:	f001 f811 	bl	1a0015a4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000582:	2300      	movs	r3, #0
1a000584:	6063      	str	r3, [r4, #4]
1a000586:	e7f6      	b.n	1a000576 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000588:	b96e      	cbnz	r6, 1a0005a6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00058a:	6880      	ldr	r0, [r0, #8]
1a00058c:	f004 f832 	bl	1a0045f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000590:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000592:	68a3      	ldr	r3, [r4, #8]
1a000594:	4413      	add	r3, r2
1a000596:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000598:	6862      	ldr	r2, [r4, #4]
1a00059a:	4293      	cmp	r3, r2
1a00059c:	d319      	bcc.n	1a0005d2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a00059e:	6823      	ldr	r3, [r4, #0]
1a0005a0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0005a2:	2000      	movs	r0, #0
1a0005a4:	e7e7      	b.n	1a000576 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0005a6:	68c0      	ldr	r0, [r0, #12]
1a0005a8:	f004 f824 	bl	1a0045f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0005ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0005ae:	4252      	negs	r2, r2
1a0005b0:	68e3      	ldr	r3, [r4, #12]
1a0005b2:	4413      	add	r3, r2
1a0005b4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0005b6:	6821      	ldr	r1, [r4, #0]
1a0005b8:	428b      	cmp	r3, r1
1a0005ba:	d202      	bcs.n	1a0005c2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0005bc:	6863      	ldr	r3, [r4, #4]
1a0005be:	441a      	add	r2, r3
1a0005c0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0005c2:	2e02      	cmp	r6, #2
1a0005c4:	d001      	beq.n	1a0005ca <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0005c6:	2000      	movs	r0, #0
1a0005c8:	e7d5      	b.n	1a000576 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0005ca:	b125      	cbz	r5, 1a0005d6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0005cc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0005ce:	2000      	movs	r0, #0
1a0005d0:	e7d1      	b.n	1a000576 <prvCopyDataToQueue+0x12>
1a0005d2:	2000      	movs	r0, #0
1a0005d4:	e7cf      	b.n	1a000576 <prvCopyDataToQueue+0x12>
1a0005d6:	2000      	movs	r0, #0
1a0005d8:	e7cd      	b.n	1a000576 <prvCopyDataToQueue+0x12>

1a0005da <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0005da:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0005dc:	b172      	cbz	r2, 1a0005fc <prvCopyDataFromQueue+0x22>
{
1a0005de:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0005e0:	68c3      	ldr	r3, [r0, #12]
1a0005e2:	4413      	add	r3, r2
1a0005e4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0005e6:	6844      	ldr	r4, [r0, #4]
1a0005e8:	42a3      	cmp	r3, r4
1a0005ea:	d301      	bcc.n	1a0005f0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0005ec:	6803      	ldr	r3, [r0, #0]
1a0005ee:	60c3      	str	r3, [r0, #12]
1a0005f0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0005f2:	68c1      	ldr	r1, [r0, #12]
1a0005f4:	4620      	mov	r0, r4
1a0005f6:	f003 fffd 	bl	1a0045f4 <memcpy>
}
1a0005fa:	bd10      	pop	{r4, pc}
1a0005fc:	4770      	bx	lr

1a0005fe <prvUnlockQueue>:
{
1a0005fe:	b538      	push	{r3, r4, r5, lr}
1a000600:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000602:	f001 faaf 	bl	1a001b64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000606:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00060a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00060c:	e003      	b.n	1a000616 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00060e:	f000 ffb3 	bl	1a001578 <vTaskMissedYield>
			--cTxLock;
1a000612:	3c01      	subs	r4, #1
1a000614:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000616:	2c00      	cmp	r4, #0
1a000618:	dd08      	ble.n	1a00062c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00061a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00061c:	b133      	cbz	r3, 1a00062c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00061e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000622:	f000 ff15 	bl	1a001450 <xTaskRemoveFromEventList>
1a000626:	2800      	cmp	r0, #0
1a000628:	d0f3      	beq.n	1a000612 <prvUnlockQueue+0x14>
1a00062a:	e7f0      	b.n	1a00060e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a00062c:	23ff      	movs	r3, #255	; 0xff
1a00062e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000632:	f001 fab9 	bl	1a001ba8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000636:	f001 fa95 	bl	1a001b64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00063a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00063e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000640:	e003      	b.n	1a00064a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000642:	f000 ff99 	bl	1a001578 <vTaskMissedYield>
				--cRxLock;
1a000646:	3c01      	subs	r4, #1
1a000648:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00064a:	2c00      	cmp	r4, #0
1a00064c:	dd08      	ble.n	1a000660 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00064e:	692b      	ldr	r3, [r5, #16]
1a000650:	b133      	cbz	r3, 1a000660 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000652:	f105 0010 	add.w	r0, r5, #16
1a000656:	f000 fefb 	bl	1a001450 <xTaskRemoveFromEventList>
1a00065a:	2800      	cmp	r0, #0
1a00065c:	d0f3      	beq.n	1a000646 <prvUnlockQueue+0x48>
1a00065e:	e7f0      	b.n	1a000642 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000660:	23ff      	movs	r3, #255	; 0xff
1a000662:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000666:	f001 fa9f 	bl	1a001ba8 <vPortExitCritical>
}
1a00066a:	bd38      	pop	{r3, r4, r5, pc}

1a00066c <xQueueGenericReset>:
{
1a00066c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00066e:	b1e0      	cbz	r0, 1a0006aa <xQueueGenericReset+0x3e>
1a000670:	4604      	mov	r4, r0
1a000672:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000674:	f001 fa76 	bl	1a001b64 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000678:	6821      	ldr	r1, [r4, #0]
1a00067a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00067c:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00067e:	fb03 1002 	mla	r0, r3, r2, r1
1a000682:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000684:	2000      	movs	r0, #0
1a000686:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000688:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a00068a:	3a01      	subs	r2, #1
1a00068c:	fb02 1303 	mla	r3, r2, r3, r1
1a000690:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000692:	23ff      	movs	r3, #255	; 0xff
1a000694:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a00069c:	b9ed      	cbnz	r5, 1a0006da <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00069e:	6923      	ldr	r3, [r4, #16]
1a0006a0:	b963      	cbnz	r3, 1a0006bc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0006a2:	f001 fa81 	bl	1a001ba8 <vPortExitCritical>
}
1a0006a6:	2001      	movs	r0, #1
1a0006a8:	bd38      	pop	{r3, r4, r5, pc}
1a0006aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006ae:	f383 8811 	msr	BASEPRI, r3
1a0006b2:	f3bf 8f6f 	isb	sy
1a0006b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0006ba:	e7fe      	b.n	1a0006ba <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0006bc:	f104 0010 	add.w	r0, r4, #16
1a0006c0:	f000 fec6 	bl	1a001450 <xTaskRemoveFromEventList>
1a0006c4:	2800      	cmp	r0, #0
1a0006c6:	d0ec      	beq.n	1a0006a2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a0006c8:	4b08      	ldr	r3, [pc, #32]	; (1a0006ec <xQueueGenericReset+0x80>)
1a0006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0006ce:	601a      	str	r2, [r3, #0]
1a0006d0:	f3bf 8f4f 	dsb	sy
1a0006d4:	f3bf 8f6f 	isb	sy
1a0006d8:	e7e3      	b.n	1a0006a2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0006da:	f104 0010 	add.w	r0, r4, #16
1a0006de:	f000 fa74 	bl	1a000bca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0006e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0006e6:	f000 fa70 	bl	1a000bca <vListInitialise>
1a0006ea:	e7da      	b.n	1a0006a2 <xQueueGenericReset+0x36>
1a0006ec:	e000ed04 	.word	0xe000ed04

1a0006f0 <prvInitialiseNewQueue>:
{
1a0006f0:	b538      	push	{r3, r4, r5, lr}
1a0006f2:	461d      	mov	r5, r3
1a0006f4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0006f6:	460b      	mov	r3, r1
1a0006f8:	b949      	cbnz	r1, 1a00070e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0006fa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0006fc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0006fe:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000700:	2101      	movs	r1, #1
1a000702:	4620      	mov	r0, r4
1a000704:	f7ff ffb2 	bl	1a00066c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000708:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a00070c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00070e:	6022      	str	r2, [r4, #0]
1a000710:	e7f4      	b.n	1a0006fc <prvInitialiseNewQueue+0xc>

1a000712 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000712:	b940      	cbnz	r0, 1a000726 <xQueueGenericCreateStatic+0x14>
1a000714:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000718:	f383 8811 	msr	BASEPRI, r3
1a00071c:	f3bf 8f6f 	isb	sy
1a000720:	f3bf 8f4f 	dsb	sy
1a000724:	e7fe      	b.n	1a000724 <xQueueGenericCreateStatic+0x12>
	{
1a000726:	b510      	push	{r4, lr}
1a000728:	b084      	sub	sp, #16
1a00072a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a00072c:	b153      	cbz	r3, 1a000744 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00072e:	b192      	cbz	r2, 1a000756 <xQueueGenericCreateStatic+0x44>
1a000730:	b989      	cbnz	r1, 1a000756 <xQueueGenericCreateStatic+0x44>
1a000732:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000736:	f383 8811 	msr	BASEPRI, r3
1a00073a:	f3bf 8f6f 	isb	sy
1a00073e:	f3bf 8f4f 	dsb	sy
1a000742:	e7fe      	b.n	1a000742 <xQueueGenericCreateStatic+0x30>
1a000744:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000748:	f383 8811 	msr	BASEPRI, r3
1a00074c:	f3bf 8f6f 	isb	sy
1a000750:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a000754:	e7fe      	b.n	1a000754 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000756:	b16a      	cbz	r2, 1a000774 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000758:	2050      	movs	r0, #80	; 0x50
1a00075a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a00075c:	9803      	ldr	r0, [sp, #12]
1a00075e:	2850      	cmp	r0, #80	; 0x50
1a000760:	d013      	beq.n	1a00078a <xQueueGenericCreateStatic+0x78>
1a000762:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000766:	f383 8811 	msr	BASEPRI, r3
1a00076a:	f3bf 8f6f 	isb	sy
1a00076e:	f3bf 8f4f 	dsb	sy
1a000772:	e7fe      	b.n	1a000772 <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000774:	2900      	cmp	r1, #0
1a000776:	d0ef      	beq.n	1a000758 <xQueueGenericCreateStatic+0x46>
1a000778:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00077c:	f383 8811 	msr	BASEPRI, r3
1a000780:	f3bf 8f6f 	isb	sy
1a000784:	f3bf 8f4f 	dsb	sy
1a000788:	e7fe      	b.n	1a000788 <xQueueGenericCreateStatic+0x76>
1a00078a:	4620      	mov	r0, r4
1a00078c:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a00078e:	2301      	movs	r3, #1
1a000790:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000794:	9400      	str	r4, [sp, #0]
1a000796:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00079a:	f7ff ffa9 	bl	1a0006f0 <prvInitialiseNewQueue>
	}
1a00079e:	4620      	mov	r0, r4
1a0007a0:	b004      	add	sp, #16
1a0007a2:	bd10      	pop	{r4, pc}

1a0007a4 <xQueueGenericSend>:
{
1a0007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007a6:	b085      	sub	sp, #20
1a0007a8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0007aa:	b178      	cbz	r0, 1a0007cc <xQueueGenericSend+0x28>
1a0007ac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0007ae:	b1b1      	cbz	r1, 1a0007de <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0007b0:	2b02      	cmp	r3, #2
1a0007b2:	d120      	bne.n	1a0007f6 <xQueueGenericSend+0x52>
1a0007b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0007b6:	2a01      	cmp	r2, #1
1a0007b8:	d01d      	beq.n	1a0007f6 <xQueueGenericSend+0x52>
1a0007ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007be:	f383 8811 	msr	BASEPRI, r3
1a0007c2:	f3bf 8f6f 	isb	sy
1a0007c6:	f3bf 8f4f 	dsb	sy
1a0007ca:	e7fe      	b.n	1a0007ca <xQueueGenericSend+0x26>
1a0007cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007d0:	f383 8811 	msr	BASEPRI, r3
1a0007d4:	f3bf 8f6f 	isb	sy
1a0007d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0007dc:	e7fe      	b.n	1a0007dc <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0007de:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007e0:	2a00      	cmp	r2, #0
1a0007e2:	d0e5      	beq.n	1a0007b0 <xQueueGenericSend+0xc>
1a0007e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007e8:	f383 8811 	msr	BASEPRI, r3
1a0007ec:	f3bf 8f6f 	isb	sy
1a0007f0:	f3bf 8f4f 	dsb	sy
1a0007f4:	e7fe      	b.n	1a0007f4 <xQueueGenericSend+0x50>
1a0007f6:	461e      	mov	r6, r3
1a0007f8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0007fa:	f000 fec3 	bl	1a001584 <xTaskGetSchedulerState>
1a0007fe:	b950      	cbnz	r0, 1a000816 <xQueueGenericSend+0x72>
1a000800:	9b01      	ldr	r3, [sp, #4]
1a000802:	b153      	cbz	r3, 1a00081a <xQueueGenericSend+0x76>
1a000804:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000808:	f383 8811 	msr	BASEPRI, r3
1a00080c:	f3bf 8f6f 	isb	sy
1a000810:	f3bf 8f4f 	dsb	sy
1a000814:	e7fe      	b.n	1a000814 <xQueueGenericSend+0x70>
1a000816:	2500      	movs	r5, #0
1a000818:	e03b      	b.n	1a000892 <xQueueGenericSend+0xee>
1a00081a:	2500      	movs	r5, #0
1a00081c:	e039      	b.n	1a000892 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00081e:	4632      	mov	r2, r6
1a000820:	4639      	mov	r1, r7
1a000822:	4620      	mov	r0, r4
1a000824:	f7ff fe9e 	bl	1a000564 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000828:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00082a:	b96b      	cbnz	r3, 1a000848 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a00082c:	b138      	cbz	r0, 1a00083e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a00082e:	4b3c      	ldr	r3, [pc, #240]	; (1a000920 <xQueueGenericSend+0x17c>)
1a000830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000834:	601a      	str	r2, [r3, #0]
1a000836:	f3bf 8f4f 	dsb	sy
1a00083a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00083e:	f001 f9b3 	bl	1a001ba8 <vPortExitCritical>
				return pdPASS;
1a000842:	2001      	movs	r0, #1
}
1a000844:	b005      	add	sp, #20
1a000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000848:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00084c:	f000 fe00 	bl	1a001450 <xTaskRemoveFromEventList>
1a000850:	2800      	cmp	r0, #0
1a000852:	d0f4      	beq.n	1a00083e <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000854:	4b32      	ldr	r3, [pc, #200]	; (1a000920 <xQueueGenericSend+0x17c>)
1a000856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00085a:	601a      	str	r2, [r3, #0]
1a00085c:	f3bf 8f4f 	dsb	sy
1a000860:	f3bf 8f6f 	isb	sy
1a000864:	e7eb      	b.n	1a00083e <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000866:	f001 f99f 	bl	1a001ba8 <vPortExitCritical>
					return errQUEUE_FULL;
1a00086a:	2000      	movs	r0, #0
1a00086c:	e7ea      	b.n	1a000844 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00086e:	a802      	add	r0, sp, #8
1a000870:	f000 fe34 	bl	1a0014dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000874:	2501      	movs	r5, #1
1a000876:	e019      	b.n	1a0008ac <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000878:	2300      	movs	r3, #0
1a00087a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00087e:	e021      	b.n	1a0008c4 <xQueueGenericSend+0x120>
1a000880:	2300      	movs	r3, #0
1a000882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000886:	e023      	b.n	1a0008d0 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000888:	4620      	mov	r0, r4
1a00088a:	f7ff feb8 	bl	1a0005fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00088e:	f000 fcc7 	bl	1a001220 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000892:	f001 f967 	bl	1a001b64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000896:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00089a:	429a      	cmp	r2, r3
1a00089c:	d3bf      	bcc.n	1a00081e <xQueueGenericSend+0x7a>
1a00089e:	2e02      	cmp	r6, #2
1a0008a0:	d0bd      	beq.n	1a00081e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0008a2:	9b01      	ldr	r3, [sp, #4]
1a0008a4:	2b00      	cmp	r3, #0
1a0008a6:	d0de      	beq.n	1a000866 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a0008a8:	2d00      	cmp	r5, #0
1a0008aa:	d0e0      	beq.n	1a00086e <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a0008ac:	f001 f97c 	bl	1a001ba8 <vPortExitCritical>
		vTaskSuspendAll();
1a0008b0:	f000 fc1c 	bl	1a0010ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0008b4:	f001 f956 	bl	1a001b64 <vPortEnterCritical>
1a0008b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0008bc:	b25b      	sxtb	r3, r3
1a0008be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0008c2:	d0d9      	beq.n	1a000878 <xQueueGenericSend+0xd4>
1a0008c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0008c8:	b25b      	sxtb	r3, r3
1a0008ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0008ce:	d0d7      	beq.n	1a000880 <xQueueGenericSend+0xdc>
1a0008d0:	f001 f96a 	bl	1a001ba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0008d4:	a901      	add	r1, sp, #4
1a0008d6:	a802      	add	r0, sp, #8
1a0008d8:	f000 fe0c 	bl	1a0014f4 <xTaskCheckForTimeOut>
1a0008dc:	b9c8      	cbnz	r0, 1a000912 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0008de:	4620      	mov	r0, r4
1a0008e0:	f7ff fe24 	bl	1a00052c <prvIsQueueFull>
1a0008e4:	2800      	cmp	r0, #0
1a0008e6:	d0cf      	beq.n	1a000888 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0008e8:	9901      	ldr	r1, [sp, #4]
1a0008ea:	f104 0010 	add.w	r0, r4, #16
1a0008ee:	f000 fd7b 	bl	1a0013e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0008f2:	4620      	mov	r0, r4
1a0008f4:	f7ff fe83 	bl	1a0005fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0008f8:	f000 fc92 	bl	1a001220 <xTaskResumeAll>
1a0008fc:	2800      	cmp	r0, #0
1a0008fe:	d1c8      	bne.n	1a000892 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000900:	4b07      	ldr	r3, [pc, #28]	; (1a000920 <xQueueGenericSend+0x17c>)
1a000902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000906:	601a      	str	r2, [r3, #0]
1a000908:	f3bf 8f4f 	dsb	sy
1a00090c:	f3bf 8f6f 	isb	sy
1a000910:	e7bf      	b.n	1a000892 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000912:	4620      	mov	r0, r4
1a000914:	f7ff fe73 	bl	1a0005fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000918:	f000 fc82 	bl	1a001220 <xTaskResumeAll>
			return errQUEUE_FULL;
1a00091c:	2000      	movs	r0, #0
1a00091e:	e791      	b.n	1a000844 <xQueueGenericSend+0xa0>
1a000920:	e000ed04 	.word	0xe000ed04

1a000924 <xQueueGenericSendFromISR>:
{
1a000924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000928:	b178      	cbz	r0, 1a00094a <xQueueGenericSendFromISR+0x26>
1a00092a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00092c:	b1b1      	cbz	r1, 1a00095c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00092e:	2b02      	cmp	r3, #2
1a000930:	d120      	bne.n	1a000974 <xQueueGenericSendFromISR+0x50>
1a000932:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000934:	2801      	cmp	r0, #1
1a000936:	d01d      	beq.n	1a000974 <xQueueGenericSendFromISR+0x50>
1a000938:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00093c:	f383 8811 	msr	BASEPRI, r3
1a000940:	f3bf 8f6f 	isb	sy
1a000944:	f3bf 8f4f 	dsb	sy
1a000948:	e7fe      	b.n	1a000948 <xQueueGenericSendFromISR+0x24>
1a00094a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00094e:	f383 8811 	msr	BASEPRI, r3
1a000952:	f3bf 8f6f 	isb	sy
1a000956:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a00095a:	e7fe      	b.n	1a00095a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00095c:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a00095e:	2800      	cmp	r0, #0
1a000960:	d0e5      	beq.n	1a00092e <xQueueGenericSendFromISR+0xa>
1a000962:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000966:	f383 8811 	msr	BASEPRI, r3
1a00096a:	f3bf 8f6f 	isb	sy
1a00096e:	f3bf 8f4f 	dsb	sy
1a000972:	e7fe      	b.n	1a000972 <xQueueGenericSendFromISR+0x4e>
1a000974:	461f      	mov	r7, r3
1a000976:	4690      	mov	r8, r2
1a000978:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00097a:	f001 fa1d 	bl	1a001db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00097e:	f3ef 8611 	mrs	r6, BASEPRI
1a000982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000986:	f383 8811 	msr	BASEPRI, r3
1a00098a:	f3bf 8f6f 	isb	sy
1a00098e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000992:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000994:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000996:	429a      	cmp	r2, r3
1a000998:	d306      	bcc.n	1a0009a8 <xQueueGenericSendFromISR+0x84>
1a00099a:	2f02      	cmp	r7, #2
1a00099c:	d004      	beq.n	1a0009a8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a00099e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0009a0:	f386 8811 	msr	BASEPRI, r6
}
1a0009a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a0009a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0009ac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0009ae:	463a      	mov	r2, r7
1a0009b0:	4649      	mov	r1, r9
1a0009b2:	4620      	mov	r0, r4
1a0009b4:	f7ff fdd6 	bl	1a000564 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0009b8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0009bc:	d005      	beq.n	1a0009ca <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0009be:	1c6b      	adds	r3, r5, #1
1a0009c0:	b25b      	sxtb	r3, r3
1a0009c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0009c6:	2001      	movs	r0, #1
1a0009c8:	e7ea      	b.n	1a0009a0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0009ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0009cc:	b90b      	cbnz	r3, 1a0009d2 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a0009ce:	2001      	movs	r0, #1
1a0009d0:	e7e6      	b.n	1a0009a0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0009d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0009d6:	f000 fd3b 	bl	1a001450 <xTaskRemoveFromEventList>
1a0009da:	b130      	cbz	r0, 1a0009ea <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a0009dc:	f1b8 0f00 	cmp.w	r8, #0
1a0009e0:	d005      	beq.n	1a0009ee <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0009e2:	2001      	movs	r0, #1
1a0009e4:	f8c8 0000 	str.w	r0, [r8]
1a0009e8:	e7da      	b.n	1a0009a0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a0009ea:	2001      	movs	r0, #1
1a0009ec:	e7d8      	b.n	1a0009a0 <xQueueGenericSendFromISR+0x7c>
1a0009ee:	2001      	movs	r0, #1
1a0009f0:	e7d6      	b.n	1a0009a0 <xQueueGenericSendFromISR+0x7c>
1a0009f2:	Address 0x000000001a0009f2 is out of bounds.


1a0009f4 <xQueueReceive>:
{
1a0009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0009f6:	b085      	sub	sp, #20
1a0009f8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0009fa:	b180      	cbz	r0, 1a000a1e <xQueueReceive+0x2a>
1a0009fc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0009fe:	b1b9      	cbz	r1, 1a000a30 <xQueueReceive+0x3c>
1a000a00:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000a02:	f000 fdbf 	bl	1a001584 <xTaskGetSchedulerState>
1a000a06:	b9f8      	cbnz	r0, 1a000a48 <xQueueReceive+0x54>
1a000a08:	9b01      	ldr	r3, [sp, #4]
1a000a0a:	b1fb      	cbz	r3, 1a000a4c <xQueueReceive+0x58>
	__asm volatile
1a000a0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a10:	f383 8811 	msr	BASEPRI, r3
1a000a14:	f3bf 8f6f 	isb	sy
1a000a18:	f3bf 8f4f 	dsb	sy
1a000a1c:	e7fe      	b.n	1a000a1c <xQueueReceive+0x28>
1a000a1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a22:	f383 8811 	msr	BASEPRI, r3
1a000a26:	f3bf 8f6f 	isb	sy
1a000a2a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000a2e:	e7fe      	b.n	1a000a2e <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000a30:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000a32:	2b00      	cmp	r3, #0
1a000a34:	d0e4      	beq.n	1a000a00 <xQueueReceive+0xc>
1a000a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a3a:	f383 8811 	msr	BASEPRI, r3
1a000a3e:	f3bf 8f6f 	isb	sy
1a000a42:	f3bf 8f4f 	dsb	sy
1a000a46:	e7fe      	b.n	1a000a46 <xQueueReceive+0x52>
1a000a48:	2600      	movs	r6, #0
1a000a4a:	e03e      	b.n	1a000aca <xQueueReceive+0xd6>
1a000a4c:	2600      	movs	r6, #0
1a000a4e:	e03c      	b.n	1a000aca <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000a50:	4639      	mov	r1, r7
1a000a52:	4620      	mov	r0, r4
1a000a54:	f7ff fdc1 	bl	1a0005da <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000a58:	3d01      	subs	r5, #1
1a000a5a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000a5c:	6923      	ldr	r3, [r4, #16]
1a000a5e:	b923      	cbnz	r3, 1a000a6a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a000a60:	f001 f8a2 	bl	1a001ba8 <vPortExitCritical>
				return pdPASS;
1a000a64:	2001      	movs	r0, #1
}
1a000a66:	b005      	add	sp, #20
1a000a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a6a:	f104 0010 	add.w	r0, r4, #16
1a000a6e:	f000 fcef 	bl	1a001450 <xTaskRemoveFromEventList>
1a000a72:	2800      	cmp	r0, #0
1a000a74:	d0f4      	beq.n	1a000a60 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a000a76:	4b35      	ldr	r3, [pc, #212]	; (1a000b4c <xQueueReceive+0x158>)
1a000a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a7c:	601a      	str	r2, [r3, #0]
1a000a7e:	f3bf 8f4f 	dsb	sy
1a000a82:	f3bf 8f6f 	isb	sy
1a000a86:	e7eb      	b.n	1a000a60 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a000a88:	f001 f88e 	bl	1a001ba8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000a8c:	2000      	movs	r0, #0
1a000a8e:	e7ea      	b.n	1a000a66 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000a90:	a802      	add	r0, sp, #8
1a000a92:	f000 fd23 	bl	1a0014dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000a96:	2601      	movs	r6, #1
1a000a98:	e021      	b.n	1a000ade <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a000a9a:	2300      	movs	r3, #0
1a000a9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000aa0:	e029      	b.n	1a000af6 <xQueueReceive+0x102>
1a000aa2:	2300      	movs	r3, #0
1a000aa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000aa8:	e02b      	b.n	1a000b02 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a000aaa:	4620      	mov	r0, r4
1a000aac:	f7ff fda7 	bl	1a0005fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000ab0:	f000 fbb6 	bl	1a001220 <xTaskResumeAll>
1a000ab4:	e009      	b.n	1a000aca <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a000ab6:	4620      	mov	r0, r4
1a000ab8:	f7ff fda1 	bl	1a0005fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000abc:	f000 fbb0 	bl	1a001220 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000ac0:	4620      	mov	r0, r4
1a000ac2:	f7ff fd42 	bl	1a00054a <prvIsQueueEmpty>
1a000ac6:	2800      	cmp	r0, #0
1a000ac8:	d13d      	bne.n	1a000b46 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a000aca:	f001 f84b 	bl	1a001b64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000ace:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000ad0:	2d00      	cmp	r5, #0
1a000ad2:	d1bd      	bne.n	1a000a50 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000ad4:	9b01      	ldr	r3, [sp, #4]
1a000ad6:	2b00      	cmp	r3, #0
1a000ad8:	d0d6      	beq.n	1a000a88 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a000ada:	2e00      	cmp	r6, #0
1a000adc:	d0d8      	beq.n	1a000a90 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a000ade:	f001 f863 	bl	1a001ba8 <vPortExitCritical>
		vTaskSuspendAll();
1a000ae2:	f000 fb03 	bl	1a0010ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ae6:	f001 f83d 	bl	1a001b64 <vPortEnterCritical>
1a000aea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000aee:	b25b      	sxtb	r3, r3
1a000af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000af4:	d0d1      	beq.n	1a000a9a <xQueueReceive+0xa6>
1a000af6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000afa:	b25b      	sxtb	r3, r3
1a000afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b00:	d0cf      	beq.n	1a000aa2 <xQueueReceive+0xae>
1a000b02:	f001 f851 	bl	1a001ba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000b06:	a901      	add	r1, sp, #4
1a000b08:	a802      	add	r0, sp, #8
1a000b0a:	f000 fcf3 	bl	1a0014f4 <xTaskCheckForTimeOut>
1a000b0e:	2800      	cmp	r0, #0
1a000b10:	d1d1      	bne.n	1a000ab6 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000b12:	4620      	mov	r0, r4
1a000b14:	f7ff fd19 	bl	1a00054a <prvIsQueueEmpty>
1a000b18:	2800      	cmp	r0, #0
1a000b1a:	d0c6      	beq.n	1a000aaa <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000b1c:	9901      	ldr	r1, [sp, #4]
1a000b1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b22:	f000 fc61 	bl	1a0013e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000b26:	4620      	mov	r0, r4
1a000b28:	f7ff fd69 	bl	1a0005fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000b2c:	f000 fb78 	bl	1a001220 <xTaskResumeAll>
1a000b30:	2800      	cmp	r0, #0
1a000b32:	d1ca      	bne.n	1a000aca <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a000b34:	4b05      	ldr	r3, [pc, #20]	; (1a000b4c <xQueueReceive+0x158>)
1a000b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b3a:	601a      	str	r2, [r3, #0]
1a000b3c:	f3bf 8f4f 	dsb	sy
1a000b40:	f3bf 8f6f 	isb	sy
1a000b44:	e7c1      	b.n	1a000aca <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a000b46:	2000      	movs	r0, #0
1a000b48:	e78d      	b.n	1a000a66 <xQueueReceive+0x72>
1a000b4a:	bf00      	nop
1a000b4c:	e000ed04 	.word	0xe000ed04

1a000b50 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000b50:	2300      	movs	r3, #0
1a000b52:	2b07      	cmp	r3, #7
1a000b54:	d80c      	bhi.n	1a000b70 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000b56:	4a07      	ldr	r2, [pc, #28]	; (1a000b74 <vQueueAddToRegistry+0x24>)
1a000b58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000b5c:	b10a      	cbz	r2, 1a000b62 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000b5e:	3301      	adds	r3, #1
1a000b60:	e7f7      	b.n	1a000b52 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000b62:	4a04      	ldr	r2, [pc, #16]	; (1a000b74 <vQueueAddToRegistry+0x24>)
1a000b64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000b68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000b6c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000b6e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000b70:	4770      	bx	lr
1a000b72:	bf00      	nop
1a000b74:	1000146c 	.word	0x1000146c

1a000b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000b78:	b570      	push	{r4, r5, r6, lr}
1a000b7a:	4604      	mov	r4, r0
1a000b7c:	460d      	mov	r5, r1
1a000b7e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000b80:	f000 fff0 	bl	1a001b64 <vPortEnterCritical>
1a000b84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000b88:	b25b      	sxtb	r3, r3
1a000b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b8e:	d00d      	beq.n	1a000bac <vQueueWaitForMessageRestricted+0x34>
1a000b90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000b94:	b25b      	sxtb	r3, r3
1a000b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b9a:	d00b      	beq.n	1a000bb4 <vQueueWaitForMessageRestricted+0x3c>
1a000b9c:	f001 f804 	bl	1a001ba8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000ba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000ba2:	b15b      	cbz	r3, 1a000bbc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000ba4:	4620      	mov	r0, r4
1a000ba6:	f7ff fd2a 	bl	1a0005fe <prvUnlockQueue>
	}
1a000baa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000bac:	2300      	movs	r3, #0
1a000bae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000bb2:	e7ed      	b.n	1a000b90 <vQueueWaitForMessageRestricted+0x18>
1a000bb4:	2300      	movs	r3, #0
1a000bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000bba:	e7ef      	b.n	1a000b9c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000bbc:	4632      	mov	r2, r6
1a000bbe:	4629      	mov	r1, r5
1a000bc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bc4:	f000 fc28 	bl	1a001418 <vTaskPlaceOnEventListRestricted>
1a000bc8:	e7ec      	b.n	1a000ba4 <vQueueWaitForMessageRestricted+0x2c>

1a000bca <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000bca:	f100 0308 	add.w	r3, r0, #8
1a000bce:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000bd4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000bd6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000bd8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000bda:	2300      	movs	r3, #0
1a000bdc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000bde:	4770      	bx	lr

1a000be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000be0:	2300      	movs	r3, #0
1a000be2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000be4:	4770      	bx	lr

1a000be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000be6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000be8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000bea:	689a      	ldr	r2, [r3, #8]
1a000bec:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000bee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000bf0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000bf2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000bf4:	6803      	ldr	r3, [r0, #0]
1a000bf6:	3301      	adds	r3, #1
1a000bf8:	6003      	str	r3, [r0, #0]
}
1a000bfa:	4770      	bx	lr

1a000bfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000bfc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000bfe:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000c00:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000c04:	d002      	beq.n	1a000c0c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000c06:	f100 0208 	add.w	r2, r0, #8
1a000c0a:	e002      	b.n	1a000c12 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000c0c:	6902      	ldr	r2, [r0, #16]
1a000c0e:	e004      	b.n	1a000c1a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000c10:	461a      	mov	r2, r3
1a000c12:	6853      	ldr	r3, [r2, #4]
1a000c14:	681c      	ldr	r4, [r3, #0]
1a000c16:	42ac      	cmp	r4, r5
1a000c18:	d9fa      	bls.n	1a000c10 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000c1a:	6853      	ldr	r3, [r2, #4]
1a000c1c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000c1e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000c20:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000c22:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000c24:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000c26:	6803      	ldr	r3, [r0, #0]
1a000c28:	3301      	adds	r3, #1
1a000c2a:	6003      	str	r3, [r0, #0]
}
1a000c2c:	bc30      	pop	{r4, r5}
1a000c2e:	4770      	bx	lr

1a000c30 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000c30:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000c32:	6841      	ldr	r1, [r0, #4]
1a000c34:	6882      	ldr	r2, [r0, #8]
1a000c36:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000c38:	6841      	ldr	r1, [r0, #4]
1a000c3a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000c3c:	685a      	ldr	r2, [r3, #4]
1a000c3e:	4282      	cmp	r2, r0
1a000c40:	d006      	beq.n	1a000c50 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000c42:	2200      	movs	r2, #0
1a000c44:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000c46:	681a      	ldr	r2, [r3, #0]
1a000c48:	3a01      	subs	r2, #1
1a000c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000c4c:	6818      	ldr	r0, [r3, #0]
}
1a000c4e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000c50:	6882      	ldr	r2, [r0, #8]
1a000c52:	605a      	str	r2, [r3, #4]
1a000c54:	e7f5      	b.n	1a000c42 <uxListRemove+0x12>
1a000c56:	Address 0x000000001a000c56 is out of bounds.


1a000c58 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000c58:	4b03      	ldr	r3, [pc, #12]	; (1a000c68 <vApplicationGetIdleTaskMemory+0x10>)
1a000c5a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000c5c:	4b03      	ldr	r3, [pc, #12]	; (1a000c6c <vApplicationGetIdleTaskMemory+0x14>)
1a000c5e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000c60:	235a      	movs	r3, #90	; 0x5a
1a000c62:	6013      	str	r3, [r2, #0]
}
1a000c64:	4770      	bx	lr
1a000c66:	bf00      	nop
1a000c68:	1000110c 	.word	0x1000110c
1a000c6c:	10000a04 	.word	0x10000a04

1a000c70 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000c70:	4b03      	ldr	r3, [pc, #12]	; (1a000c80 <vApplicationGetTimerTaskMemory+0x10>)
1a000c72:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000c74:	4b03      	ldr	r3, [pc, #12]	; (1a000c84 <vApplicationGetTimerTaskMemory+0x14>)
1a000c76:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000c78:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000c7c:	6013      	str	r3, [r2, #0]
1a000c7e:	4770      	bx	lr
1a000c80:	1000116c 	.word	0x1000116c
1a000c84:	10000b6c 	.word	0x10000b6c

1a000c88 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a000c88:	b510      	push	{r4, lr}
1a000c8a:	b082      	sub	sp, #8
1a000c8c:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a000c8e:	9001      	str	r0, [sp, #4]
1a000c90:	2300      	movs	r3, #0
1a000c92:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a000c94:	f000 ff66 	bl	1a001b64 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a000c98:	9901      	ldr	r1, [sp, #4]
1a000c9a:	4622      	mov	r2, r4
1a000c9c:	4804      	ldr	r0, [pc, #16]	; (1a000cb0 <vAssertCalled+0x28>)
1a000c9e:	f003 fd9f 	bl	1a0047e0 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a000ca2:	9b00      	ldr	r3, [sp, #0]
1a000ca4:	2b00      	cmp	r3, #0
1a000ca6:	d0fc      	beq.n	1a000ca2 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a000ca8:	f000 ff7e 	bl	1a001ba8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a000cac:	b002      	add	sp, #8
1a000cae:	bd10      	pop	{r4, pc}
1a000cb0:	1a00893c 	.word	0x1a00893c

1a000cb4 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a000cb4:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a000cb6:	4804      	ldr	r0, [pc, #16]	; (1a000cc8 <vApplicationStackOverflowHook+0x14>)
1a000cb8:	f003 fd92 	bl	1a0047e0 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a000cbc:	4903      	ldr	r1, [pc, #12]	; (1a000ccc <vApplicationStackOverflowHook+0x18>)
1a000cbe:	2050      	movs	r0, #80	; 0x50
1a000cc0:	f7ff ffe2 	bl	1a000c88 <vAssertCalled>
}
1a000cc4:	bd08      	pop	{r3, pc}
1a000cc6:	bf00      	nop
1a000cc8:	1a00890c 	.word	0x1a00890c
1a000ccc:	1a0088ec 	.word	0x1a0088ec

1a000cd0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000cd0:	4b08      	ldr	r3, [pc, #32]	; (1a000cf4 <prvResetNextTaskUnblockTime+0x24>)
1a000cd2:	681b      	ldr	r3, [r3, #0]
1a000cd4:	681b      	ldr	r3, [r3, #0]
1a000cd6:	b923      	cbnz	r3, 1a000ce2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a000cd8:	4b07      	ldr	r3, [pc, #28]	; (1a000cf8 <prvResetNextTaskUnblockTime+0x28>)
1a000cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cde:	601a      	str	r2, [r3, #0]
1a000ce0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000ce2:	4b04      	ldr	r3, [pc, #16]	; (1a000cf4 <prvResetNextTaskUnblockTime+0x24>)
1a000ce4:	681b      	ldr	r3, [r3, #0]
1a000ce6:	68db      	ldr	r3, [r3, #12]
1a000ce8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000cea:	685a      	ldr	r2, [r3, #4]
1a000cec:	4b02      	ldr	r3, [pc, #8]	; (1a000cf8 <prvResetNextTaskUnblockTime+0x28>)
1a000cee:	601a      	str	r2, [r3, #0]
	}
}
1a000cf0:	4770      	bx	lr
1a000cf2:	bf00      	nop
1a000cf4:	100011d0 	.word	0x100011d0
1a000cf8:	100012a4 	.word	0x100012a4

1a000cfc <prvInitialiseNewTask>:
{
1a000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000d00:	4681      	mov	r9, r0
1a000d02:	460d      	mov	r5, r1
1a000d04:	4617      	mov	r7, r2
1a000d06:	469a      	mov	sl, r3
1a000d08:	9e08      	ldr	r6, [sp, #32]
1a000d0a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000d0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000d10:	0092      	lsls	r2, r2, #2
1a000d12:	21a5      	movs	r1, #165	; 0xa5
1a000d14:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000d16:	f003 fd07 	bl	1a004728 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000d1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000d1c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000d20:	3a01      	subs	r2, #1
1a000d22:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000d26:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000d2a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000d2c:	2300      	movs	r3, #0
1a000d2e:	2b0f      	cmp	r3, #15
1a000d30:	d806      	bhi.n	1a000d40 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000d32:	5cea      	ldrb	r2, [r5, r3]
1a000d34:	18e1      	adds	r1, r4, r3
1a000d36:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000d3a:	b10a      	cbz	r2, 1a000d40 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000d3c:	3301      	adds	r3, #1
1a000d3e:	e7f6      	b.n	1a000d2e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000d40:	2300      	movs	r3, #0
1a000d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000d46:	2e06      	cmp	r6, #6
1a000d48:	d900      	bls.n	1a000d4c <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000d4a:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000d4c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000d4e:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000d50:	2500      	movs	r5, #0
1a000d52:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000d54:	1d20      	adds	r0, r4, #4
1a000d56:	f7ff ff43 	bl	1a000be0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000d5a:	f104 0018 	add.w	r0, r4, #24
1a000d5e:	f7ff ff3f 	bl	1a000be0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000d62:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000d64:	f1c6 0607 	rsb	r6, r6, #7
1a000d68:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000d6a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000d6c:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000d6e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000d72:	4652      	mov	r2, sl
1a000d74:	4649      	mov	r1, r9
1a000d76:	4638      	mov	r0, r7
1a000d78:	f000 fec6 	bl	1a001b08 <pxPortInitialiseStack>
1a000d7c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000d7e:	f1b8 0f00 	cmp.w	r8, #0
1a000d82:	d001      	beq.n	1a000d88 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000d84:	f8c8 4000 	str.w	r4, [r8]
}
1a000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a000d8c <prvInitialiseTaskLists>:
{
1a000d8c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000d8e:	2400      	movs	r4, #0
1a000d90:	2c06      	cmp	r4, #6
1a000d92:	d808      	bhi.n	1a000da6 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000d94:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000d98:	0093      	lsls	r3, r2, #2
1a000d9a:	480e      	ldr	r0, [pc, #56]	; (1a000dd4 <prvInitialiseTaskLists+0x48>)
1a000d9c:	4418      	add	r0, r3
1a000d9e:	f7ff ff14 	bl	1a000bca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000da2:	3401      	adds	r4, #1
1a000da4:	e7f4      	b.n	1a000d90 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a000da6:	4d0c      	ldr	r5, [pc, #48]	; (1a000dd8 <prvInitialiseTaskLists+0x4c>)
1a000da8:	4628      	mov	r0, r5
1a000daa:	f7ff ff0e 	bl	1a000bca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000dae:	4c0b      	ldr	r4, [pc, #44]	; (1a000ddc <prvInitialiseTaskLists+0x50>)
1a000db0:	4620      	mov	r0, r4
1a000db2:	f7ff ff0a 	bl	1a000bca <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000db6:	480a      	ldr	r0, [pc, #40]	; (1a000de0 <prvInitialiseTaskLists+0x54>)
1a000db8:	f7ff ff07 	bl	1a000bca <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000dbc:	4809      	ldr	r0, [pc, #36]	; (1a000de4 <prvInitialiseTaskLists+0x58>)
1a000dbe:	f7ff ff04 	bl	1a000bca <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000dc2:	4809      	ldr	r0, [pc, #36]	; (1a000de8 <prvInitialiseTaskLists+0x5c>)
1a000dc4:	f7ff ff01 	bl	1a000bca <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000dc8:	4b08      	ldr	r3, [pc, #32]	; (1a000dec <prvInitialiseTaskLists+0x60>)
1a000dca:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000dcc:	4b08      	ldr	r3, [pc, #32]	; (1a000df0 <prvInitialiseTaskLists+0x64>)
1a000dce:	601c      	str	r4, [r3, #0]
}
1a000dd0:	bd38      	pop	{r3, r4, r5, pc}
1a000dd2:	bf00      	nop
1a000dd4:	100011d8 	.word	0x100011d8
1a000dd8:	1000127c 	.word	0x1000127c
1a000ddc:	10001290 	.word	0x10001290
1a000de0:	100012ac 	.word	0x100012ac
1a000de4:	100012d8 	.word	0x100012d8
1a000de8:	100012c4 	.word	0x100012c4
1a000dec:	100011d0 	.word	0x100011d0
1a000df0:	100011d4 	.word	0x100011d4

1a000df4 <prvAddNewTaskToReadyList>:
{
1a000df4:	b510      	push	{r4, lr}
1a000df6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000df8:	f000 feb4 	bl	1a001b64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000dfc:	4a21      	ldr	r2, [pc, #132]	; (1a000e84 <prvAddNewTaskToReadyList+0x90>)
1a000dfe:	6813      	ldr	r3, [r2, #0]
1a000e00:	3301      	adds	r3, #1
1a000e02:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000e04:	4b20      	ldr	r3, [pc, #128]	; (1a000e88 <prvAddNewTaskToReadyList+0x94>)
1a000e06:	681b      	ldr	r3, [r3, #0]
1a000e08:	b15b      	cbz	r3, 1a000e22 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a000e0a:	4b20      	ldr	r3, [pc, #128]	; (1a000e8c <prvAddNewTaskToReadyList+0x98>)
1a000e0c:	681b      	ldr	r3, [r3, #0]
1a000e0e:	b96b      	cbnz	r3, 1a000e2c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000e10:	4b1d      	ldr	r3, [pc, #116]	; (1a000e88 <prvAddNewTaskToReadyList+0x94>)
1a000e12:	681b      	ldr	r3, [r3, #0]
1a000e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000e18:	429a      	cmp	r2, r3
1a000e1a:	d807      	bhi.n	1a000e2c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000e1c:	4b1a      	ldr	r3, [pc, #104]	; (1a000e88 <prvAddNewTaskToReadyList+0x94>)
1a000e1e:	601c      	str	r4, [r3, #0]
1a000e20:	e004      	b.n	1a000e2c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000e22:	4b19      	ldr	r3, [pc, #100]	; (1a000e88 <prvAddNewTaskToReadyList+0x94>)
1a000e24:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000e26:	6813      	ldr	r3, [r2, #0]
1a000e28:	2b01      	cmp	r3, #1
1a000e2a:	d027      	beq.n	1a000e7c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a000e2c:	4a18      	ldr	r2, [pc, #96]	; (1a000e90 <prvAddNewTaskToReadyList+0x9c>)
1a000e2e:	6813      	ldr	r3, [r2, #0]
1a000e30:	3301      	adds	r3, #1
1a000e32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000e34:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a000e36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000e38:	2201      	movs	r2, #1
1a000e3a:	409a      	lsls	r2, r3
1a000e3c:	4915      	ldr	r1, [pc, #84]	; (1a000e94 <prvAddNewTaskToReadyList+0xa0>)
1a000e3e:	6808      	ldr	r0, [r1, #0]
1a000e40:	4302      	orrs	r2, r0
1a000e42:	600a      	str	r2, [r1, #0]
1a000e44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000e48:	009a      	lsls	r2, r3, #2
1a000e4a:	1d21      	adds	r1, r4, #4
1a000e4c:	4812      	ldr	r0, [pc, #72]	; (1a000e98 <prvAddNewTaskToReadyList+0xa4>)
1a000e4e:	4410      	add	r0, r2
1a000e50:	f7ff fec9 	bl	1a000be6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a000e54:	f000 fea8 	bl	1a001ba8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a000e58:	4b0c      	ldr	r3, [pc, #48]	; (1a000e8c <prvAddNewTaskToReadyList+0x98>)
1a000e5a:	681b      	ldr	r3, [r3, #0]
1a000e5c:	b16b      	cbz	r3, 1a000e7a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000e5e:	4b0a      	ldr	r3, [pc, #40]	; (1a000e88 <prvAddNewTaskToReadyList+0x94>)
1a000e60:	681b      	ldr	r3, [r3, #0]
1a000e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000e66:	429a      	cmp	r2, r3
1a000e68:	d207      	bcs.n	1a000e7a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a000e6a:	4b0c      	ldr	r3, [pc, #48]	; (1a000e9c <prvAddNewTaskToReadyList+0xa8>)
1a000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e70:	601a      	str	r2, [r3, #0]
1a000e72:	f3bf 8f4f 	dsb	sy
1a000e76:	f3bf 8f6f 	isb	sy
}
1a000e7a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a000e7c:	f7ff ff86 	bl	1a000d8c <prvInitialiseTaskLists>
1a000e80:	e7d4      	b.n	1a000e2c <prvAddNewTaskToReadyList+0x38>
1a000e82:	bf00      	nop
1a000e84:	10001264 	.word	0x10001264
1a000e88:	100011cc 	.word	0x100011cc
1a000e8c:	100012c0 	.word	0x100012c0
1a000e90:	10001274 	.word	0x10001274
1a000e94:	10001278 	.word	0x10001278
1a000e98:	100011d8 	.word	0x100011d8
1a000e9c:	e000ed04 	.word	0xe000ed04

1a000ea0 <prvDeleteTCB>:
	{
1a000ea0:	b510      	push	{r4, lr}
1a000ea2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a000ea4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a000ea8:	b163      	cbz	r3, 1a000ec4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a000eaa:	2b01      	cmp	r3, #1
1a000eac:	d011      	beq.n	1a000ed2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a000eae:	2b02      	cmp	r3, #2
1a000eb0:	d00e      	beq.n	1a000ed0 <prvDeleteTCB+0x30>
1a000eb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eb6:	f383 8811 	msr	BASEPRI, r3
1a000eba:	f3bf 8f6f 	isb	sy
1a000ebe:	f3bf 8f4f 	dsb	sy
1a000ec2:	e7fe      	b.n	1a000ec2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a000ec4:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000ec6:	f7ff faf9 	bl	1a0004bc <vPortFree>
				vPortFree( pxTCB );
1a000eca:	4620      	mov	r0, r4
1a000ecc:	f7ff faf6 	bl	1a0004bc <vPortFree>
	}
1a000ed0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a000ed2:	f7ff faf3 	bl	1a0004bc <vPortFree>
1a000ed6:	e7fb      	b.n	1a000ed0 <prvDeleteTCB+0x30>

1a000ed8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000ed8:	4b0f      	ldr	r3, [pc, #60]	; (1a000f18 <prvCheckTasksWaitingTermination+0x40>)
1a000eda:	681b      	ldr	r3, [r3, #0]
1a000edc:	b1d3      	cbz	r3, 1a000f14 <prvCheckTasksWaitingTermination+0x3c>
{
1a000ede:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a000ee0:	f000 fe40 	bl	1a001b64 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000ee4:	4b0d      	ldr	r3, [pc, #52]	; (1a000f1c <prvCheckTasksWaitingTermination+0x44>)
1a000ee6:	68db      	ldr	r3, [r3, #12]
1a000ee8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000eea:	1d20      	adds	r0, r4, #4
1a000eec:	f7ff fea0 	bl	1a000c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000ef0:	4a0b      	ldr	r2, [pc, #44]	; (1a000f20 <prvCheckTasksWaitingTermination+0x48>)
1a000ef2:	6813      	ldr	r3, [r2, #0]
1a000ef4:	3b01      	subs	r3, #1
1a000ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000ef8:	4a07      	ldr	r2, [pc, #28]	; (1a000f18 <prvCheckTasksWaitingTermination+0x40>)
1a000efa:	6813      	ldr	r3, [r2, #0]
1a000efc:	3b01      	subs	r3, #1
1a000efe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a000f00:	f000 fe52 	bl	1a001ba8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a000f04:	4620      	mov	r0, r4
1a000f06:	f7ff ffcb 	bl	1a000ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000f0a:	4b03      	ldr	r3, [pc, #12]	; (1a000f18 <prvCheckTasksWaitingTermination+0x40>)
1a000f0c:	681b      	ldr	r3, [r3, #0]
1a000f0e:	2b00      	cmp	r3, #0
1a000f10:	d1e6      	bne.n	1a000ee0 <prvCheckTasksWaitingTermination+0x8>
}
1a000f12:	bd10      	pop	{r4, pc}
1a000f14:	4770      	bx	lr
1a000f16:	bf00      	nop
1a000f18:	10001268 	.word	0x10001268
1a000f1c:	100012d8 	.word	0x100012d8
1a000f20:	10001264 	.word	0x10001264

1a000f24 <prvIdleTask>:
{
1a000f24:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a000f26:	f7ff ffd7 	bl	1a000ed8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000f2a:	4b06      	ldr	r3, [pc, #24]	; (1a000f44 <prvIdleTask+0x20>)
1a000f2c:	681b      	ldr	r3, [r3, #0]
1a000f2e:	2b01      	cmp	r3, #1
1a000f30:	d9f9      	bls.n	1a000f26 <prvIdleTask+0x2>
				taskYIELD();
1a000f32:	4b05      	ldr	r3, [pc, #20]	; (1a000f48 <prvIdleTask+0x24>)
1a000f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f38:	601a      	str	r2, [r3, #0]
1a000f3a:	f3bf 8f4f 	dsb	sy
1a000f3e:	f3bf 8f6f 	isb	sy
1a000f42:	e7f0      	b.n	1a000f26 <prvIdleTask+0x2>
1a000f44:	100011d8 	.word	0x100011d8
1a000f48:	e000ed04 	.word	0xe000ed04

1a000f4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000f4c:	b570      	push	{r4, r5, r6, lr}
1a000f4e:	4604      	mov	r4, r0
1a000f50:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000f52:	4b1d      	ldr	r3, [pc, #116]	; (1a000fc8 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f54:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000f56:	4b1d      	ldr	r3, [pc, #116]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x80>)
1a000f58:	6818      	ldr	r0, [r3, #0]
1a000f5a:	3004      	adds	r0, #4
1a000f5c:	f7ff fe68 	bl	1a000c30 <uxListRemove>
1a000f60:	b950      	cbnz	r0, 1a000f78 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000f62:	4b1a      	ldr	r3, [pc, #104]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x80>)
1a000f64:	681b      	ldr	r3, [r3, #0]
1a000f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000f68:	2301      	movs	r3, #1
1a000f6a:	fa03 f202 	lsl.w	r2, r3, r2
1a000f6e:	4918      	ldr	r1, [pc, #96]	; (1a000fd0 <prvAddCurrentTaskToDelayedList+0x84>)
1a000f70:	680b      	ldr	r3, [r1, #0]
1a000f72:	ea23 0302 	bic.w	r3, r3, r2
1a000f76:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000f78:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a000f7c:	d00d      	beq.n	1a000f9a <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a000f7e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000f80:	4b12      	ldr	r3, [pc, #72]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x80>)
1a000f82:	681b      	ldr	r3, [r3, #0]
1a000f84:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a000f86:	42a5      	cmp	r5, r4
1a000f88:	d910      	bls.n	1a000fac <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000f8a:	4b12      	ldr	r3, [pc, #72]	; (1a000fd4 <prvAddCurrentTaskToDelayedList+0x88>)
1a000f8c:	6818      	ldr	r0, [r3, #0]
1a000f8e:	4b0f      	ldr	r3, [pc, #60]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x80>)
1a000f90:	6819      	ldr	r1, [r3, #0]
1a000f92:	3104      	adds	r1, #4
1a000f94:	f7ff fe32 	bl	1a000bfc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a000f98:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000f9a:	2e00      	cmp	r6, #0
1a000f9c:	d0ef      	beq.n	1a000f7e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000f9e:	4b0b      	ldr	r3, [pc, #44]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x80>)
1a000fa0:	6819      	ldr	r1, [r3, #0]
1a000fa2:	3104      	adds	r1, #4
1a000fa4:	480c      	ldr	r0, [pc, #48]	; (1a000fd8 <prvAddCurrentTaskToDelayedList+0x8c>)
1a000fa6:	f7ff fe1e 	bl	1a000be6 <vListInsertEnd>
1a000faa:	e7f5      	b.n	1a000f98 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000fac:	4b0b      	ldr	r3, [pc, #44]	; (1a000fdc <prvAddCurrentTaskToDelayedList+0x90>)
1a000fae:	6818      	ldr	r0, [r3, #0]
1a000fb0:	4b06      	ldr	r3, [pc, #24]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x80>)
1a000fb2:	6819      	ldr	r1, [r3, #0]
1a000fb4:	3104      	adds	r1, #4
1a000fb6:	f7ff fe21 	bl	1a000bfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a000fba:	4b09      	ldr	r3, [pc, #36]	; (1a000fe0 <prvAddCurrentTaskToDelayedList+0x94>)
1a000fbc:	681b      	ldr	r3, [r3, #0]
1a000fbe:	42a3      	cmp	r3, r4
1a000fc0:	d9ea      	bls.n	1a000f98 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a000fc2:	4b07      	ldr	r3, [pc, #28]	; (1a000fe0 <prvAddCurrentTaskToDelayedList+0x94>)
1a000fc4:	601c      	str	r4, [r3, #0]
}
1a000fc6:	e7e7      	b.n	1a000f98 <prvAddCurrentTaskToDelayedList+0x4c>
1a000fc8:	100012ec 	.word	0x100012ec
1a000fcc:	100011cc 	.word	0x100011cc
1a000fd0:	10001278 	.word	0x10001278
1a000fd4:	100011d4 	.word	0x100011d4
1a000fd8:	100012c4 	.word	0x100012c4
1a000fdc:	100011d0 	.word	0x100011d0
1a000fe0:	100012a4 	.word	0x100012a4

1a000fe4 <xTaskCreateStatic>:
	{
1a000fe4:	b570      	push	{r4, r5, r6, lr}
1a000fe6:	b086      	sub	sp, #24
1a000fe8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a000fea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a000fec:	b175      	cbz	r5, 1a00100c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a000fee:	b1b4      	cbz	r4, 1a00101e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a000ff0:	2660      	movs	r6, #96	; 0x60
1a000ff2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a000ff4:	9e04      	ldr	r6, [sp, #16]
1a000ff6:	2e60      	cmp	r6, #96	; 0x60
1a000ff8:	d01a      	beq.n	1a001030 <xTaskCreateStatic+0x4c>
1a000ffa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ffe:	f383 8811 	msr	BASEPRI, r3
1a001002:	f3bf 8f6f 	isb	sy
1a001006:	f3bf 8f4f 	dsb	sy
1a00100a:	e7fe      	b.n	1a00100a <xTaskCreateStatic+0x26>
1a00100c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001010:	f383 8811 	msr	BASEPRI, r3
1a001014:	f3bf 8f6f 	isb	sy
1a001018:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a00101c:	e7fe      	b.n	1a00101c <xTaskCreateStatic+0x38>
1a00101e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001022:	f383 8811 	msr	BASEPRI, r3
1a001026:	f3bf 8f6f 	isb	sy
1a00102a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a00102e:	e7fe      	b.n	1a00102e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001030:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001032:	2502      	movs	r5, #2
1a001034:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001038:	2500      	movs	r5, #0
1a00103a:	9503      	str	r5, [sp, #12]
1a00103c:	9402      	str	r4, [sp, #8]
1a00103e:	ad05      	add	r5, sp, #20
1a001040:	9501      	str	r5, [sp, #4]
1a001042:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001044:	9500      	str	r5, [sp, #0]
1a001046:	f7ff fe59 	bl	1a000cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00104a:	4620      	mov	r0, r4
1a00104c:	f7ff fed2 	bl	1a000df4 <prvAddNewTaskToReadyList>
	}
1a001050:	9805      	ldr	r0, [sp, #20]
1a001052:	b006      	add	sp, #24
1a001054:	bd70      	pop	{r4, r5, r6, pc}
1a001056:	Address 0x000000001a001056 is out of bounds.


1a001058 <vTaskStartScheduler>:
{
1a001058:	b510      	push	{r4, lr}
1a00105a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a00105c:	2400      	movs	r4, #0
1a00105e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001060:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001062:	aa07      	add	r2, sp, #28
1a001064:	a906      	add	r1, sp, #24
1a001066:	a805      	add	r0, sp, #20
1a001068:	f7ff fdf6 	bl	1a000c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00106c:	9b05      	ldr	r3, [sp, #20]
1a00106e:	9302      	str	r3, [sp, #8]
1a001070:	9b06      	ldr	r3, [sp, #24]
1a001072:	9301      	str	r3, [sp, #4]
1a001074:	9400      	str	r4, [sp, #0]
1a001076:	4623      	mov	r3, r4
1a001078:	9a07      	ldr	r2, [sp, #28]
1a00107a:	4917      	ldr	r1, [pc, #92]	; (1a0010d8 <vTaskStartScheduler+0x80>)
1a00107c:	4817      	ldr	r0, [pc, #92]	; (1a0010dc <vTaskStartScheduler+0x84>)
1a00107e:	f7ff ffb1 	bl	1a000fe4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001082:	b140      	cbz	r0, 1a001096 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001084:	f000 fb54 	bl	1a001730 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001088:	2801      	cmp	r0, #1
1a00108a:	d006      	beq.n	1a00109a <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00108c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001090:	d018      	beq.n	1a0010c4 <vTaskStartScheduler+0x6c>
}
1a001092:	b008      	add	sp, #32
1a001094:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001096:	2000      	movs	r0, #0
1a001098:	e7f6      	b.n	1a001088 <vTaskStartScheduler+0x30>
1a00109a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00109e:	f383 8811 	msr	BASEPRI, r3
1a0010a2:	f3bf 8f6f 	isb	sy
1a0010a6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0010aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0010e0 <vTaskStartScheduler+0x88>)
1a0010ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0010b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0010b2:	4b0c      	ldr	r3, [pc, #48]	; (1a0010e4 <vTaskStartScheduler+0x8c>)
1a0010b4:	2201      	movs	r2, #1
1a0010b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0010b8:	4b0b      	ldr	r3, [pc, #44]	; (1a0010e8 <vTaskStartScheduler+0x90>)
1a0010ba:	2200      	movs	r2, #0
1a0010bc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0010be:	f000 fdf3 	bl	1a001ca8 <xPortStartScheduler>
1a0010c2:	e7e6      	b.n	1a001092 <vTaskStartScheduler+0x3a>
1a0010c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c8:	f383 8811 	msr	BASEPRI, r3
1a0010cc:	f3bf 8f6f 	isb	sy
1a0010d0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0010d4:	e7fe      	b.n	1a0010d4 <vTaskStartScheduler+0x7c>
1a0010d6:	bf00      	nop
1a0010d8:	1a00897c 	.word	0x1a00897c
1a0010dc:	1a000f25 	.word	0x1a000f25
1a0010e0:	100012a4 	.word	0x100012a4
1a0010e4:	100012c0 	.word	0x100012c0
1a0010e8:	100012ec 	.word	0x100012ec

1a0010ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0010ec:	4a02      	ldr	r2, [pc, #8]	; (1a0010f8 <vTaskSuspendAll+0xc>)
1a0010ee:	6813      	ldr	r3, [r2, #0]
1a0010f0:	3301      	adds	r3, #1
1a0010f2:	6013      	str	r3, [r2, #0]
}
1a0010f4:	4770      	bx	lr
1a0010f6:	bf00      	nop
1a0010f8:	10001270 	.word	0x10001270

1a0010fc <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0010fc:	4b01      	ldr	r3, [pc, #4]	; (1a001104 <xTaskGetTickCount+0x8>)
1a0010fe:	6818      	ldr	r0, [r3, #0]
}
1a001100:	4770      	bx	lr
1a001102:	bf00      	nop
1a001104:	100012ec 	.word	0x100012ec

1a001108 <xTaskIncrementTick>:
{
1a001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00110a:	4b3a      	ldr	r3, [pc, #232]	; (1a0011f4 <xTaskIncrementTick+0xec>)
1a00110c:	681b      	ldr	r3, [r3, #0]
1a00110e:	2b00      	cmp	r3, #0
1a001110:	d164      	bne.n	1a0011dc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001112:	4b39      	ldr	r3, [pc, #228]	; (1a0011f8 <xTaskIncrementTick+0xf0>)
1a001114:	681d      	ldr	r5, [r3, #0]
1a001116:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001118:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00111a:	b9c5      	cbnz	r5, 1a00114e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00111c:	4b37      	ldr	r3, [pc, #220]	; (1a0011fc <xTaskIncrementTick+0xf4>)
1a00111e:	681b      	ldr	r3, [r3, #0]
1a001120:	681b      	ldr	r3, [r3, #0]
1a001122:	b143      	cbz	r3, 1a001136 <xTaskIncrementTick+0x2e>
1a001124:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001128:	f383 8811 	msr	BASEPRI, r3
1a00112c:	f3bf 8f6f 	isb	sy
1a001130:	f3bf 8f4f 	dsb	sy
1a001134:	e7fe      	b.n	1a001134 <xTaskIncrementTick+0x2c>
1a001136:	4a31      	ldr	r2, [pc, #196]	; (1a0011fc <xTaskIncrementTick+0xf4>)
1a001138:	6811      	ldr	r1, [r2, #0]
1a00113a:	4b31      	ldr	r3, [pc, #196]	; (1a001200 <xTaskIncrementTick+0xf8>)
1a00113c:	6818      	ldr	r0, [r3, #0]
1a00113e:	6010      	str	r0, [r2, #0]
1a001140:	6019      	str	r1, [r3, #0]
1a001142:	4a30      	ldr	r2, [pc, #192]	; (1a001204 <xTaskIncrementTick+0xfc>)
1a001144:	6813      	ldr	r3, [r2, #0]
1a001146:	3301      	adds	r3, #1
1a001148:	6013      	str	r3, [r2, #0]
1a00114a:	f7ff fdc1 	bl	1a000cd0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00114e:	4b2e      	ldr	r3, [pc, #184]	; (1a001208 <xTaskIncrementTick+0x100>)
1a001150:	681b      	ldr	r3, [r3, #0]
1a001152:	42ab      	cmp	r3, r5
1a001154:	d938      	bls.n	1a0011c8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001156:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001158:	4b2c      	ldr	r3, [pc, #176]	; (1a00120c <xTaskIncrementTick+0x104>)
1a00115a:	681b      	ldr	r3, [r3, #0]
1a00115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00115e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001162:	009a      	lsls	r2, r3, #2
1a001164:	4b2a      	ldr	r3, [pc, #168]	; (1a001210 <xTaskIncrementTick+0x108>)
1a001166:	589b      	ldr	r3, [r3, r2]
1a001168:	2b01      	cmp	r3, #1
1a00116a:	d93c      	bls.n	1a0011e6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a00116c:	2401      	movs	r4, #1
1a00116e:	e03a      	b.n	1a0011e6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001170:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001172:	4b22      	ldr	r3, [pc, #136]	; (1a0011fc <xTaskIncrementTick+0xf4>)
1a001174:	681b      	ldr	r3, [r3, #0]
1a001176:	681b      	ldr	r3, [r3, #0]
1a001178:	b343      	cbz	r3, 1a0011cc <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00117a:	4b20      	ldr	r3, [pc, #128]	; (1a0011fc <xTaskIncrementTick+0xf4>)
1a00117c:	681b      	ldr	r3, [r3, #0]
1a00117e:	68db      	ldr	r3, [r3, #12]
1a001180:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001182:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001184:	429d      	cmp	r5, r3
1a001186:	d326      	bcc.n	1a0011d6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001188:	1d37      	adds	r7, r6, #4
1a00118a:	4638      	mov	r0, r7
1a00118c:	f7ff fd50 	bl	1a000c30 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001190:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001192:	b11b      	cbz	r3, 1a00119c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001194:	f106 0018 	add.w	r0, r6, #24
1a001198:	f7ff fd4a 	bl	1a000c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00119c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00119e:	2201      	movs	r2, #1
1a0011a0:	409a      	lsls	r2, r3
1a0011a2:	491c      	ldr	r1, [pc, #112]	; (1a001214 <xTaskIncrementTick+0x10c>)
1a0011a4:	6808      	ldr	r0, [r1, #0]
1a0011a6:	4302      	orrs	r2, r0
1a0011a8:	600a      	str	r2, [r1, #0]
1a0011aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0011ae:	009a      	lsls	r2, r3, #2
1a0011b0:	4639      	mov	r1, r7
1a0011b2:	4817      	ldr	r0, [pc, #92]	; (1a001210 <xTaskIncrementTick+0x108>)
1a0011b4:	4410      	add	r0, r2
1a0011b6:	f7ff fd16 	bl	1a000be6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0011ba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0011bc:	4b13      	ldr	r3, [pc, #76]	; (1a00120c <xTaskIncrementTick+0x104>)
1a0011be:	681b      	ldr	r3, [r3, #0]
1a0011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0011c2:	429a      	cmp	r2, r3
1a0011c4:	d2d4      	bcs.n	1a001170 <xTaskIncrementTick+0x68>
1a0011c6:	e7d4      	b.n	1a001172 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0011c8:	2400      	movs	r4, #0
1a0011ca:	e7d2      	b.n	1a001172 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011cc:	4b0e      	ldr	r3, [pc, #56]	; (1a001208 <xTaskIncrementTick+0x100>)
1a0011ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011d2:	601a      	str	r2, [r3, #0]
					break;
1a0011d4:	e7c0      	b.n	1a001158 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0011d6:	4a0c      	ldr	r2, [pc, #48]	; (1a001208 <xTaskIncrementTick+0x100>)
1a0011d8:	6013      	str	r3, [r2, #0]
						break;
1a0011da:	e7bd      	b.n	1a001158 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0011dc:	4a0e      	ldr	r2, [pc, #56]	; (1a001218 <xTaskIncrementTick+0x110>)
1a0011de:	6813      	ldr	r3, [r2, #0]
1a0011e0:	3301      	adds	r3, #1
1a0011e2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0011e4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0011e6:	4b0d      	ldr	r3, [pc, #52]	; (1a00121c <xTaskIncrementTick+0x114>)
1a0011e8:	681b      	ldr	r3, [r3, #0]
1a0011ea:	b103      	cbz	r3, 1a0011ee <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0011ec:	2401      	movs	r4, #1
}
1a0011ee:	4620      	mov	r0, r4
1a0011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0011f2:	bf00      	nop
1a0011f4:	10001270 	.word	0x10001270
1a0011f8:	100012ec 	.word	0x100012ec
1a0011fc:	100011d0 	.word	0x100011d0
1a001200:	100011d4 	.word	0x100011d4
1a001204:	100012a8 	.word	0x100012a8
1a001208:	100012a4 	.word	0x100012a4
1a00120c:	100011cc 	.word	0x100011cc
1a001210:	100011d8 	.word	0x100011d8
1a001214:	10001278 	.word	0x10001278
1a001218:	1000126c 	.word	0x1000126c
1a00121c:	100012f0 	.word	0x100012f0

1a001220 <xTaskResumeAll>:
{
1a001220:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001222:	4b35      	ldr	r3, [pc, #212]	; (1a0012f8 <xTaskResumeAll+0xd8>)
1a001224:	681b      	ldr	r3, [r3, #0]
1a001226:	b943      	cbnz	r3, 1a00123a <xTaskResumeAll+0x1a>
1a001228:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00122c:	f383 8811 	msr	BASEPRI, r3
1a001230:	f3bf 8f6f 	isb	sy
1a001234:	f3bf 8f4f 	dsb	sy
1a001238:	e7fe      	b.n	1a001238 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00123a:	f000 fc93 	bl	1a001b64 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00123e:	4b2e      	ldr	r3, [pc, #184]	; (1a0012f8 <xTaskResumeAll+0xd8>)
1a001240:	681a      	ldr	r2, [r3, #0]
1a001242:	3a01      	subs	r2, #1
1a001244:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001246:	681b      	ldr	r3, [r3, #0]
1a001248:	2b00      	cmp	r3, #0
1a00124a:	d14d      	bne.n	1a0012e8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00124c:	4b2b      	ldr	r3, [pc, #172]	; (1a0012fc <xTaskResumeAll+0xdc>)
1a00124e:	681b      	ldr	r3, [r3, #0]
1a001250:	b90b      	cbnz	r3, 1a001256 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a001252:	2400      	movs	r4, #0
1a001254:	e049      	b.n	1a0012ea <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a001256:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001258:	4b29      	ldr	r3, [pc, #164]	; (1a001300 <xTaskResumeAll+0xe0>)
1a00125a:	681b      	ldr	r3, [r3, #0]
1a00125c:	b31b      	cbz	r3, 1a0012a6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00125e:	4b28      	ldr	r3, [pc, #160]	; (1a001300 <xTaskResumeAll+0xe0>)
1a001260:	68db      	ldr	r3, [r3, #12]
1a001262:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001264:	f104 0018 	add.w	r0, r4, #24
1a001268:	f7ff fce2 	bl	1a000c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00126c:	1d25      	adds	r5, r4, #4
1a00126e:	4628      	mov	r0, r5
1a001270:	f7ff fcde 	bl	1a000c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001274:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001276:	2201      	movs	r2, #1
1a001278:	409a      	lsls	r2, r3
1a00127a:	4922      	ldr	r1, [pc, #136]	; (1a001304 <xTaskResumeAll+0xe4>)
1a00127c:	6808      	ldr	r0, [r1, #0]
1a00127e:	4302      	orrs	r2, r0
1a001280:	600a      	str	r2, [r1, #0]
1a001282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001286:	009a      	lsls	r2, r3, #2
1a001288:	4629      	mov	r1, r5
1a00128a:	481f      	ldr	r0, [pc, #124]	; (1a001308 <xTaskResumeAll+0xe8>)
1a00128c:	4410      	add	r0, r2
1a00128e:	f7ff fcaa 	bl	1a000be6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001294:	4b1d      	ldr	r3, [pc, #116]	; (1a00130c <xTaskResumeAll+0xec>)
1a001296:	681b      	ldr	r3, [r3, #0]
1a001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00129a:	429a      	cmp	r2, r3
1a00129c:	d3dc      	bcc.n	1a001258 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a00129e:	4b1c      	ldr	r3, [pc, #112]	; (1a001310 <xTaskResumeAll+0xf0>)
1a0012a0:	2201      	movs	r2, #1
1a0012a2:	601a      	str	r2, [r3, #0]
1a0012a4:	e7d8      	b.n	1a001258 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0012a6:	b10c      	cbz	r4, 1a0012ac <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0012a8:	f7ff fd12 	bl	1a000cd0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0012ac:	4b19      	ldr	r3, [pc, #100]	; (1a001314 <xTaskResumeAll+0xf4>)
1a0012ae:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0012b0:	b974      	cbnz	r4, 1a0012d0 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0012b2:	4b17      	ldr	r3, [pc, #92]	; (1a001310 <xTaskResumeAll+0xf0>)
1a0012b4:	681b      	ldr	r3, [r3, #0]
1a0012b6:	b1e3      	cbz	r3, 1a0012f2 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a0012b8:	4b17      	ldr	r3, [pc, #92]	; (1a001318 <xTaskResumeAll+0xf8>)
1a0012ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012be:	601a      	str	r2, [r3, #0]
1a0012c0:	f3bf 8f4f 	dsb	sy
1a0012c4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0012c8:	2401      	movs	r4, #1
1a0012ca:	e00e      	b.n	1a0012ea <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0012cc:	3c01      	subs	r4, #1
1a0012ce:	d007      	beq.n	1a0012e0 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0012d0:	f7ff ff1a 	bl	1a001108 <xTaskIncrementTick>
1a0012d4:	2800      	cmp	r0, #0
1a0012d6:	d0f9      	beq.n	1a0012cc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0012d8:	4b0d      	ldr	r3, [pc, #52]	; (1a001310 <xTaskResumeAll+0xf0>)
1a0012da:	2201      	movs	r2, #1
1a0012dc:	601a      	str	r2, [r3, #0]
1a0012de:	e7f5      	b.n	1a0012cc <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0012e0:	4b0c      	ldr	r3, [pc, #48]	; (1a001314 <xTaskResumeAll+0xf4>)
1a0012e2:	2200      	movs	r2, #0
1a0012e4:	601a      	str	r2, [r3, #0]
1a0012e6:	e7e4      	b.n	1a0012b2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a0012e8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0012ea:	f000 fc5d 	bl	1a001ba8 <vPortExitCritical>
}
1a0012ee:	4620      	mov	r0, r4
1a0012f0:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a0012f2:	2400      	movs	r4, #0
1a0012f4:	e7f9      	b.n	1a0012ea <xTaskResumeAll+0xca>
1a0012f6:	bf00      	nop
1a0012f8:	10001270 	.word	0x10001270
1a0012fc:	10001264 	.word	0x10001264
1a001300:	100012ac 	.word	0x100012ac
1a001304:	10001278 	.word	0x10001278
1a001308:	100011d8 	.word	0x100011d8
1a00130c:	100011cc 	.word	0x100011cc
1a001310:	100012f0 	.word	0x100012f0
1a001314:	1000126c 	.word	0x1000126c
1a001318:	e000ed04 	.word	0xe000ed04

1a00131c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00131c:	4b2d      	ldr	r3, [pc, #180]	; (1a0013d4 <vTaskSwitchContext+0xb8>)
1a00131e:	681b      	ldr	r3, [r3, #0]
1a001320:	b11b      	cbz	r3, 1a00132a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001322:	4b2d      	ldr	r3, [pc, #180]	; (1a0013d8 <vTaskSwitchContext+0xbc>)
1a001324:	2201      	movs	r2, #1
1a001326:	601a      	str	r2, [r3, #0]
1a001328:	4770      	bx	lr
{
1a00132a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00132c:	4b2a      	ldr	r3, [pc, #168]	; (1a0013d8 <vTaskSwitchContext+0xbc>)
1a00132e:	2200      	movs	r2, #0
1a001330:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001332:	4b2a      	ldr	r3, [pc, #168]	; (1a0013dc <vTaskSwitchContext+0xc0>)
1a001334:	681b      	ldr	r3, [r3, #0]
1a001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001338:	681a      	ldr	r2, [r3, #0]
1a00133a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00133e:	d103      	bne.n	1a001348 <vTaskSwitchContext+0x2c>
1a001340:	685a      	ldr	r2, [r3, #4]
1a001342:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001346:	d01b      	beq.n	1a001380 <vTaskSwitchContext+0x64>
1a001348:	4b24      	ldr	r3, [pc, #144]	; (1a0013dc <vTaskSwitchContext+0xc0>)
1a00134a:	6818      	ldr	r0, [r3, #0]
1a00134c:	6819      	ldr	r1, [r3, #0]
1a00134e:	3134      	adds	r1, #52	; 0x34
1a001350:	f7ff fcb0 	bl	1a000cb4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001354:	4b22      	ldr	r3, [pc, #136]	; (1a0013e0 <vTaskSwitchContext+0xc4>)
1a001356:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001358:	fab3 f383 	clz	r3, r3
1a00135c:	b2db      	uxtb	r3, r3
1a00135e:	f1c3 031f 	rsb	r3, r3, #31
1a001362:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001366:	008a      	lsls	r2, r1, #2
1a001368:	491e      	ldr	r1, [pc, #120]	; (1a0013e4 <vTaskSwitchContext+0xc8>)
1a00136a:	588a      	ldr	r2, [r1, r2]
1a00136c:	b98a      	cbnz	r2, 1a001392 <vTaskSwitchContext+0x76>
	__asm volatile
1a00136e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001372:	f383 8811 	msr	BASEPRI, r3
1a001376:	f3bf 8f6f 	isb	sy
1a00137a:	f3bf 8f4f 	dsb	sy
1a00137e:	e7fe      	b.n	1a00137e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001380:	689a      	ldr	r2, [r3, #8]
1a001382:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001386:	d1df      	bne.n	1a001348 <vTaskSwitchContext+0x2c>
1a001388:	68db      	ldr	r3, [r3, #12]
1a00138a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00138e:	d1db      	bne.n	1a001348 <vTaskSwitchContext+0x2c>
1a001390:	e7e0      	b.n	1a001354 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001392:	4814      	ldr	r0, [pc, #80]	; (1a0013e4 <vTaskSwitchContext+0xc8>)
1a001394:	009a      	lsls	r2, r3, #2
1a001396:	18d4      	adds	r4, r2, r3
1a001398:	00a1      	lsls	r1, r4, #2
1a00139a:	4401      	add	r1, r0
1a00139c:	684c      	ldr	r4, [r1, #4]
1a00139e:	6864      	ldr	r4, [r4, #4]
1a0013a0:	604c      	str	r4, [r1, #4]
1a0013a2:	441a      	add	r2, r3
1a0013a4:	0091      	lsls	r1, r2, #2
1a0013a6:	3108      	adds	r1, #8
1a0013a8:	4408      	add	r0, r1
1a0013aa:	4284      	cmp	r4, r0
1a0013ac:	d009      	beq.n	1a0013c2 <vTaskSwitchContext+0xa6>
1a0013ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0013b2:	009a      	lsls	r2, r3, #2
1a0013b4:	4b0b      	ldr	r3, [pc, #44]	; (1a0013e4 <vTaskSwitchContext+0xc8>)
1a0013b6:	4413      	add	r3, r2
1a0013b8:	685b      	ldr	r3, [r3, #4]
1a0013ba:	68da      	ldr	r2, [r3, #12]
1a0013bc:	4b07      	ldr	r3, [pc, #28]	; (1a0013dc <vTaskSwitchContext+0xc0>)
1a0013be:	601a      	str	r2, [r3, #0]
}
1a0013c0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0013c2:	6860      	ldr	r0, [r4, #4]
1a0013c4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a0013c8:	0091      	lsls	r1, r2, #2
1a0013ca:	4a06      	ldr	r2, [pc, #24]	; (1a0013e4 <vTaskSwitchContext+0xc8>)
1a0013cc:	440a      	add	r2, r1
1a0013ce:	6050      	str	r0, [r2, #4]
1a0013d0:	e7ed      	b.n	1a0013ae <vTaskSwitchContext+0x92>
1a0013d2:	bf00      	nop
1a0013d4:	10001270 	.word	0x10001270
1a0013d8:	100012f0 	.word	0x100012f0
1a0013dc:	100011cc 	.word	0x100011cc
1a0013e0:	10001278 	.word	0x10001278
1a0013e4:	100011d8 	.word	0x100011d8

1a0013e8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0013e8:	b158      	cbz	r0, 1a001402 <vTaskPlaceOnEventList+0x1a>
{
1a0013ea:	b510      	push	{r4, lr}
1a0013ec:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0013ee:	4b09      	ldr	r3, [pc, #36]	; (1a001414 <vTaskPlaceOnEventList+0x2c>)
1a0013f0:	6819      	ldr	r1, [r3, #0]
1a0013f2:	3118      	adds	r1, #24
1a0013f4:	f7ff fc02 	bl	1a000bfc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0013f8:	2101      	movs	r1, #1
1a0013fa:	4620      	mov	r0, r4
1a0013fc:	f7ff fda6 	bl	1a000f4c <prvAddCurrentTaskToDelayedList>
}
1a001400:	bd10      	pop	{r4, pc}
1a001402:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001406:	f383 8811 	msr	BASEPRI, r3
1a00140a:	f3bf 8f6f 	isb	sy
1a00140e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a001412:	e7fe      	b.n	1a001412 <vTaskPlaceOnEventList+0x2a>
1a001414:	100011cc 	.word	0x100011cc

1a001418 <vTaskPlaceOnEventListRestricted>:
	{
1a001418:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00141a:	b170      	cbz	r0, 1a00143a <vTaskPlaceOnEventListRestricted+0x22>
1a00141c:	460c      	mov	r4, r1
1a00141e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001420:	4a0a      	ldr	r2, [pc, #40]	; (1a00144c <vTaskPlaceOnEventListRestricted+0x34>)
1a001422:	6811      	ldr	r1, [r2, #0]
1a001424:	3118      	adds	r1, #24
1a001426:	f7ff fbde 	bl	1a000be6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00142a:	b10d      	cbz	r5, 1a001430 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a00142c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001430:	4629      	mov	r1, r5
1a001432:	4620      	mov	r0, r4
1a001434:	f7ff fd8a 	bl	1a000f4c <prvAddCurrentTaskToDelayedList>
	}
1a001438:	bd38      	pop	{r3, r4, r5, pc}
1a00143a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00143e:	f383 8811 	msr	BASEPRI, r3
1a001442:	f3bf 8f6f 	isb	sy
1a001446:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a00144a:	e7fe      	b.n	1a00144a <vTaskPlaceOnEventListRestricted+0x32>
1a00144c:	100011cc 	.word	0x100011cc

1a001450 <xTaskRemoveFromEventList>:
{
1a001450:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001452:	68c3      	ldr	r3, [r0, #12]
1a001454:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001456:	b324      	cbz	r4, 1a0014a2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001458:	f104 0518 	add.w	r5, r4, #24
1a00145c:	4628      	mov	r0, r5
1a00145e:	f7ff fbe7 	bl	1a000c30 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001462:	4b18      	ldr	r3, [pc, #96]	; (1a0014c4 <xTaskRemoveFromEventList+0x74>)
1a001464:	681b      	ldr	r3, [r3, #0]
1a001466:	bb2b      	cbnz	r3, 1a0014b4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001468:	1d25      	adds	r5, r4, #4
1a00146a:	4628      	mov	r0, r5
1a00146c:	f7ff fbe0 	bl	1a000c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001472:	2201      	movs	r2, #1
1a001474:	409a      	lsls	r2, r3
1a001476:	4914      	ldr	r1, [pc, #80]	; (1a0014c8 <xTaskRemoveFromEventList+0x78>)
1a001478:	6808      	ldr	r0, [r1, #0]
1a00147a:	4302      	orrs	r2, r0
1a00147c:	600a      	str	r2, [r1, #0]
1a00147e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001482:	009a      	lsls	r2, r3, #2
1a001484:	4629      	mov	r1, r5
1a001486:	4811      	ldr	r0, [pc, #68]	; (1a0014cc <xTaskRemoveFromEventList+0x7c>)
1a001488:	4410      	add	r0, r2
1a00148a:	f7ff fbac 	bl	1a000be6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00148e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001490:	4b0f      	ldr	r3, [pc, #60]	; (1a0014d0 <xTaskRemoveFromEventList+0x80>)
1a001492:	681b      	ldr	r3, [r3, #0]
1a001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001496:	429a      	cmp	r2, r3
1a001498:	d911      	bls.n	1a0014be <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a00149a:	2001      	movs	r0, #1
1a00149c:	4b0d      	ldr	r3, [pc, #52]	; (1a0014d4 <xTaskRemoveFromEventList+0x84>)
1a00149e:	6018      	str	r0, [r3, #0]
1a0014a0:	e00e      	b.n	1a0014c0 <xTaskRemoveFromEventList+0x70>
1a0014a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014a6:	f383 8811 	msr	BASEPRI, r3
1a0014aa:	f3bf 8f6f 	isb	sy
1a0014ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0014b2:	e7fe      	b.n	1a0014b2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0014b4:	4629      	mov	r1, r5
1a0014b6:	4808      	ldr	r0, [pc, #32]	; (1a0014d8 <xTaskRemoveFromEventList+0x88>)
1a0014b8:	f7ff fb95 	bl	1a000be6 <vListInsertEnd>
1a0014bc:	e7e7      	b.n	1a00148e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a0014be:	2000      	movs	r0, #0
}
1a0014c0:	bd38      	pop	{r3, r4, r5, pc}
1a0014c2:	bf00      	nop
1a0014c4:	10001270 	.word	0x10001270
1a0014c8:	10001278 	.word	0x10001278
1a0014cc:	100011d8 	.word	0x100011d8
1a0014d0:	100011cc 	.word	0x100011cc
1a0014d4:	100012f0 	.word	0x100012f0
1a0014d8:	100012ac 	.word	0x100012ac

1a0014dc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0014dc:	4b03      	ldr	r3, [pc, #12]	; (1a0014ec <vTaskInternalSetTimeOutState+0x10>)
1a0014de:	681b      	ldr	r3, [r3, #0]
1a0014e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0014e2:	4b03      	ldr	r3, [pc, #12]	; (1a0014f0 <vTaskInternalSetTimeOutState+0x14>)
1a0014e4:	681b      	ldr	r3, [r3, #0]
1a0014e6:	6043      	str	r3, [r0, #4]
}
1a0014e8:	4770      	bx	lr
1a0014ea:	bf00      	nop
1a0014ec:	100012a8 	.word	0x100012a8
1a0014f0:	100012ec 	.word	0x100012ec

1a0014f4 <xTaskCheckForTimeOut>:
{
1a0014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0014f6:	b1c8      	cbz	r0, 1a00152c <xTaskCheckForTimeOut+0x38>
1a0014f8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0014fa:	b301      	cbz	r1, 1a00153e <xTaskCheckForTimeOut+0x4a>
1a0014fc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0014fe:	f000 fb31 	bl	1a001b64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001502:	4b1b      	ldr	r3, [pc, #108]	; (1a001570 <xTaskCheckForTimeOut+0x7c>)
1a001504:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001506:	686b      	ldr	r3, [r5, #4]
1a001508:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a00150a:	6822      	ldr	r2, [r4, #0]
1a00150c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a001510:	d026      	beq.n	1a001560 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001512:	682f      	ldr	r7, [r5, #0]
1a001514:	4e17      	ldr	r6, [pc, #92]	; (1a001574 <xTaskCheckForTimeOut+0x80>)
1a001516:	6836      	ldr	r6, [r6, #0]
1a001518:	42b7      	cmp	r7, r6
1a00151a:	d001      	beq.n	1a001520 <xTaskCheckForTimeOut+0x2c>
1a00151c:	428b      	cmp	r3, r1
1a00151e:	d924      	bls.n	1a00156a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001520:	4282      	cmp	r2, r0
1a001522:	d815      	bhi.n	1a001550 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001524:	2300      	movs	r3, #0
1a001526:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001528:	2401      	movs	r4, #1
1a00152a:	e01a      	b.n	1a001562 <xTaskCheckForTimeOut+0x6e>
1a00152c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001530:	f383 8811 	msr	BASEPRI, r3
1a001534:	f3bf 8f6f 	isb	sy
1a001538:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a00153c:	e7fe      	b.n	1a00153c <xTaskCheckForTimeOut+0x48>
1a00153e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001542:	f383 8811 	msr	BASEPRI, r3
1a001546:	f3bf 8f6f 	isb	sy
1a00154a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a00154e:	e7fe      	b.n	1a00154e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001550:	1a5b      	subs	r3, r3, r1
1a001552:	4413      	add	r3, r2
1a001554:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001556:	4628      	mov	r0, r5
1a001558:	f7ff ffc0 	bl	1a0014dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00155c:	2400      	movs	r4, #0
1a00155e:	e000      	b.n	1a001562 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a001560:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001562:	f000 fb21 	bl	1a001ba8 <vPortExitCritical>
}
1a001566:	4620      	mov	r0, r4
1a001568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a00156a:	2401      	movs	r4, #1
1a00156c:	e7f9      	b.n	1a001562 <xTaskCheckForTimeOut+0x6e>
1a00156e:	bf00      	nop
1a001570:	100012ec 	.word	0x100012ec
1a001574:	100012a8 	.word	0x100012a8

1a001578 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001578:	4b01      	ldr	r3, [pc, #4]	; (1a001580 <vTaskMissedYield+0x8>)
1a00157a:	2201      	movs	r2, #1
1a00157c:	601a      	str	r2, [r3, #0]
}
1a00157e:	4770      	bx	lr
1a001580:	100012f0 	.word	0x100012f0

1a001584 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001584:	4b05      	ldr	r3, [pc, #20]	; (1a00159c <xTaskGetSchedulerState+0x18>)
1a001586:	681b      	ldr	r3, [r3, #0]
1a001588:	b133      	cbz	r3, 1a001598 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00158a:	4b05      	ldr	r3, [pc, #20]	; (1a0015a0 <xTaskGetSchedulerState+0x1c>)
1a00158c:	681b      	ldr	r3, [r3, #0]
1a00158e:	b10b      	cbz	r3, 1a001594 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001590:	2000      	movs	r0, #0
	}
1a001592:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001594:	2002      	movs	r0, #2
1a001596:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001598:	2001      	movs	r0, #1
1a00159a:	4770      	bx	lr
1a00159c:	100012c0 	.word	0x100012c0
1a0015a0:	10001270 	.word	0x10001270

1a0015a4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0015a4:	2800      	cmp	r0, #0
1a0015a6:	d04c      	beq.n	1a001642 <xTaskPriorityDisinherit+0x9e>
	{
1a0015a8:	b538      	push	{r3, r4, r5, lr}
1a0015aa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0015ac:	4a27      	ldr	r2, [pc, #156]	; (1a00164c <xTaskPriorityDisinherit+0xa8>)
1a0015ae:	6812      	ldr	r2, [r2, #0]
1a0015b0:	4282      	cmp	r2, r0
1a0015b2:	d008      	beq.n	1a0015c6 <xTaskPriorityDisinherit+0x22>
1a0015b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015b8:	f383 8811 	msr	BASEPRI, r3
1a0015bc:	f3bf 8f6f 	isb	sy
1a0015c0:	f3bf 8f4f 	dsb	sy
1a0015c4:	e7fe      	b.n	1a0015c4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0015c6:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0015c8:	b942      	cbnz	r2, 1a0015dc <xTaskPriorityDisinherit+0x38>
1a0015ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ce:	f383 8811 	msr	BASEPRI, r3
1a0015d2:	f3bf 8f6f 	isb	sy
1a0015d6:	f3bf 8f4f 	dsb	sy
1a0015da:	e7fe      	b.n	1a0015da <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0015dc:	3a01      	subs	r2, #1
1a0015de:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0015e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0015e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0015e4:	4288      	cmp	r0, r1
1a0015e6:	d02e      	beq.n	1a001646 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0015e8:	b10a      	cbz	r2, 1a0015ee <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a0015ea:	2000      	movs	r0, #0
	}
1a0015ec:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0015ee:	1d25      	adds	r5, r4, #4
1a0015f0:	4628      	mov	r0, r5
1a0015f2:	f7ff fb1d 	bl	1a000c30 <uxListRemove>
1a0015f6:	b970      	cbnz	r0, 1a001616 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0015f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015fa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0015fe:	008b      	lsls	r3, r1, #2
1a001600:	4913      	ldr	r1, [pc, #76]	; (1a001650 <xTaskPriorityDisinherit+0xac>)
1a001602:	58cb      	ldr	r3, [r1, r3]
1a001604:	b93b      	cbnz	r3, 1a001616 <xTaskPriorityDisinherit+0x72>
1a001606:	2301      	movs	r3, #1
1a001608:	fa03 f202 	lsl.w	r2, r3, r2
1a00160c:	4911      	ldr	r1, [pc, #68]	; (1a001654 <xTaskPriorityDisinherit+0xb0>)
1a00160e:	680b      	ldr	r3, [r1, #0]
1a001610:	ea23 0302 	bic.w	r3, r3, r2
1a001614:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001616:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001618:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00161a:	f1c3 0207 	rsb	r2, r3, #7
1a00161e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001620:	2401      	movs	r4, #1
1a001622:	fa04 f203 	lsl.w	r2, r4, r3
1a001626:	490b      	ldr	r1, [pc, #44]	; (1a001654 <xTaskPriorityDisinherit+0xb0>)
1a001628:	6808      	ldr	r0, [r1, #0]
1a00162a:	4302      	orrs	r2, r0
1a00162c:	600a      	str	r2, [r1, #0]
1a00162e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001632:	009a      	lsls	r2, r3, #2
1a001634:	4629      	mov	r1, r5
1a001636:	4806      	ldr	r0, [pc, #24]	; (1a001650 <xTaskPriorityDisinherit+0xac>)
1a001638:	4410      	add	r0, r2
1a00163a:	f7ff fad4 	bl	1a000be6 <vListInsertEnd>
					xReturn = pdTRUE;
1a00163e:	4620      	mov	r0, r4
1a001640:	e7d4      	b.n	1a0015ec <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a001642:	2000      	movs	r0, #0
	}
1a001644:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001646:	2000      	movs	r0, #0
1a001648:	e7d0      	b.n	1a0015ec <xTaskPriorityDisinherit+0x48>
1a00164a:	bf00      	nop
1a00164c:	100011cc 	.word	0x100011cc
1a001650:	100011d8 	.word	0x100011d8
1a001654:	10001278 	.word	0x10001278

1a001658 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001658:	4b06      	ldr	r3, [pc, #24]	; (1a001674 <prvGetNextExpireTime+0x1c>)
1a00165a:	681a      	ldr	r2, [r3, #0]
1a00165c:	6813      	ldr	r3, [r2, #0]
1a00165e:	fab3 f383 	clz	r3, r3
1a001662:	095b      	lsrs	r3, r3, #5
1a001664:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001666:	b913      	cbnz	r3, 1a00166e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001668:	68d3      	ldr	r3, [r2, #12]
1a00166a:	6818      	ldr	r0, [r3, #0]
1a00166c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00166e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001670:	4770      	bx	lr
1a001672:	bf00      	nop
1a001674:	100012f4 	.word	0x100012f4

1a001678 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001678:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00167a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00167c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00167e:	4291      	cmp	r1, r2
1a001680:	d80c      	bhi.n	1a00169c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001682:	1ad2      	subs	r2, r2, r3
1a001684:	6983      	ldr	r3, [r0, #24]
1a001686:	429a      	cmp	r2, r3
1a001688:	d301      	bcc.n	1a00168e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00168a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a00168c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00168e:	1d01      	adds	r1, r0, #4
1a001690:	4b09      	ldr	r3, [pc, #36]	; (1a0016b8 <prvInsertTimerInActiveList+0x40>)
1a001692:	6818      	ldr	r0, [r3, #0]
1a001694:	f7ff fab2 	bl	1a000bfc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001698:	2000      	movs	r0, #0
1a00169a:	e7f7      	b.n	1a00168c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00169c:	429a      	cmp	r2, r3
1a00169e:	d201      	bcs.n	1a0016a4 <prvInsertTimerInActiveList+0x2c>
1a0016a0:	4299      	cmp	r1, r3
1a0016a2:	d206      	bcs.n	1a0016b2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0016a4:	1d01      	adds	r1, r0, #4
1a0016a6:	4b05      	ldr	r3, [pc, #20]	; (1a0016bc <prvInsertTimerInActiveList+0x44>)
1a0016a8:	6818      	ldr	r0, [r3, #0]
1a0016aa:	f7ff faa7 	bl	1a000bfc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0016ae:	2000      	movs	r0, #0
1a0016b0:	e7ec      	b.n	1a00168c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a0016b2:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0016b4:	e7ea      	b.n	1a00168c <prvInsertTimerInActiveList+0x14>
1a0016b6:	bf00      	nop
1a0016b8:	100012f8 	.word	0x100012f8
1a0016bc:	100012f4 	.word	0x100012f4

1a0016c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0016c0:	b530      	push	{r4, r5, lr}
1a0016c2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0016c4:	f000 fa4e 	bl	1a001b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0016c8:	4b11      	ldr	r3, [pc, #68]	; (1a001710 <prvCheckForValidListAndQueue+0x50>)
1a0016ca:	681b      	ldr	r3, [r3, #0]
1a0016cc:	b11b      	cbz	r3, 1a0016d6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0016ce:	f000 fa6b 	bl	1a001ba8 <vPortExitCritical>
}
1a0016d2:	b003      	add	sp, #12
1a0016d4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0016d6:	4d0f      	ldr	r5, [pc, #60]	; (1a001714 <prvCheckForValidListAndQueue+0x54>)
1a0016d8:	4628      	mov	r0, r5
1a0016da:	f7ff fa76 	bl	1a000bca <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0016de:	4c0e      	ldr	r4, [pc, #56]	; (1a001718 <prvCheckForValidListAndQueue+0x58>)
1a0016e0:	4620      	mov	r0, r4
1a0016e2:	f7ff fa72 	bl	1a000bca <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0016e6:	4b0d      	ldr	r3, [pc, #52]	; (1a00171c <prvCheckForValidListAndQueue+0x5c>)
1a0016e8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0016ea:	4b0d      	ldr	r3, [pc, #52]	; (1a001720 <prvCheckForValidListAndQueue+0x60>)
1a0016ec:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0016ee:	2300      	movs	r3, #0
1a0016f0:	9300      	str	r3, [sp, #0]
1a0016f2:	4b0c      	ldr	r3, [pc, #48]	; (1a001724 <prvCheckForValidListAndQueue+0x64>)
1a0016f4:	4a0c      	ldr	r2, [pc, #48]	; (1a001728 <prvCheckForValidListAndQueue+0x68>)
1a0016f6:	2110      	movs	r1, #16
1a0016f8:	200a      	movs	r0, #10
1a0016fa:	f7ff f80a 	bl	1a000712 <xQueueGenericCreateStatic>
1a0016fe:	4b04      	ldr	r3, [pc, #16]	; (1a001710 <prvCheckForValidListAndQueue+0x50>)
1a001700:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001702:	2800      	cmp	r0, #0
1a001704:	d0e3      	beq.n	1a0016ce <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001706:	4909      	ldr	r1, [pc, #36]	; (1a00172c <prvCheckForValidListAndQueue+0x6c>)
1a001708:	f7ff fa22 	bl	1a000b50 <vQueueAddToRegistry>
1a00170c:	e7df      	b.n	1a0016ce <prvCheckForValidListAndQueue+0xe>
1a00170e:	bf00      	nop
1a001710:	10001418 	.word	0x10001418
1a001714:	1000139c 	.word	0x1000139c
1a001718:	100013b0 	.word	0x100013b0
1a00171c:	100012f4 	.word	0x100012f4
1a001720:	100012f8 	.word	0x100012f8
1a001724:	100013c8 	.word	0x100013c8
1a001728:	100012fc 	.word	0x100012fc
1a00172c:	1a008984 	.word	0x1a008984

1a001730 <xTimerCreateTimerTask>:
{
1a001730:	b510      	push	{r4, lr}
1a001732:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001734:	f7ff ffc4 	bl	1a0016c0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001738:	4b12      	ldr	r3, [pc, #72]	; (1a001784 <xTimerCreateTimerTask+0x54>)
1a00173a:	681b      	ldr	r3, [r3, #0]
1a00173c:	b1cb      	cbz	r3, 1a001772 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00173e:	2400      	movs	r4, #0
1a001740:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001742:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001744:	aa07      	add	r2, sp, #28
1a001746:	a906      	add	r1, sp, #24
1a001748:	a805      	add	r0, sp, #20
1a00174a:	f7ff fa91 	bl	1a000c70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00174e:	9b05      	ldr	r3, [sp, #20]
1a001750:	9302      	str	r3, [sp, #8]
1a001752:	9b06      	ldr	r3, [sp, #24]
1a001754:	9301      	str	r3, [sp, #4]
1a001756:	2304      	movs	r3, #4
1a001758:	9300      	str	r3, [sp, #0]
1a00175a:	4623      	mov	r3, r4
1a00175c:	9a07      	ldr	r2, [sp, #28]
1a00175e:	490a      	ldr	r1, [pc, #40]	; (1a001788 <xTimerCreateTimerTask+0x58>)
1a001760:	480a      	ldr	r0, [pc, #40]	; (1a00178c <xTimerCreateTimerTask+0x5c>)
1a001762:	f7ff fc3f 	bl	1a000fe4 <xTaskCreateStatic>
1a001766:	4b0a      	ldr	r3, [pc, #40]	; (1a001790 <xTimerCreateTimerTask+0x60>)
1a001768:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00176a:	b110      	cbz	r0, 1a001772 <xTimerCreateTimerTask+0x42>
}
1a00176c:	2001      	movs	r0, #1
1a00176e:	b008      	add	sp, #32
1a001770:	bd10      	pop	{r4, pc}
1a001772:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001776:	f383 8811 	msr	BASEPRI, r3
1a00177a:	f3bf 8f6f 	isb	sy
1a00177e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a001782:	e7fe      	b.n	1a001782 <xTimerCreateTimerTask+0x52>
1a001784:	10001418 	.word	0x10001418
1a001788:	1a00898c 	.word	0x1a00898c
1a00178c:	1a001a75 	.word	0x1a001a75
1a001790:	1000141c 	.word	0x1000141c

1a001794 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001794:	b1c0      	cbz	r0, 1a0017c8 <xTimerGenericCommand+0x34>
{
1a001796:	b530      	push	{r4, r5, lr}
1a001798:	b085      	sub	sp, #20
1a00179a:	4615      	mov	r5, r2
1a00179c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00179e:	4a17      	ldr	r2, [pc, #92]	; (1a0017fc <xTimerGenericCommand+0x68>)
1a0017a0:	6810      	ldr	r0, [r2, #0]
1a0017a2:	b340      	cbz	r0, 1a0017f6 <xTimerGenericCommand+0x62>
1a0017a4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0017a6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0017a8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0017aa:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0017ac:	2905      	cmp	r1, #5
1a0017ae:	dc1c      	bgt.n	1a0017ea <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0017b0:	f7ff fee8 	bl	1a001584 <xTaskGetSchedulerState>
1a0017b4:	2802      	cmp	r0, #2
1a0017b6:	d010      	beq.n	1a0017da <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0017b8:	2300      	movs	r3, #0
1a0017ba:	461a      	mov	r2, r3
1a0017bc:	4669      	mov	r1, sp
1a0017be:	480f      	ldr	r0, [pc, #60]	; (1a0017fc <xTimerGenericCommand+0x68>)
1a0017c0:	6800      	ldr	r0, [r0, #0]
1a0017c2:	f7fe ffef 	bl	1a0007a4 <xQueueGenericSend>
1a0017c6:	e014      	b.n	1a0017f2 <xTimerGenericCommand+0x5e>
1a0017c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017cc:	f383 8811 	msr	BASEPRI, r3
1a0017d0:	f3bf 8f6f 	isb	sy
1a0017d4:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a0017d8:	e7fe      	b.n	1a0017d8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0017da:	2300      	movs	r3, #0
1a0017dc:	9a08      	ldr	r2, [sp, #32]
1a0017de:	4669      	mov	r1, sp
1a0017e0:	4806      	ldr	r0, [pc, #24]	; (1a0017fc <xTimerGenericCommand+0x68>)
1a0017e2:	6800      	ldr	r0, [r0, #0]
1a0017e4:	f7fe ffde 	bl	1a0007a4 <xQueueGenericSend>
1a0017e8:	e003      	b.n	1a0017f2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0017ea:	2300      	movs	r3, #0
1a0017ec:	4669      	mov	r1, sp
1a0017ee:	f7ff f899 	bl	1a000924 <xQueueGenericSendFromISR>
}
1a0017f2:	b005      	add	sp, #20
1a0017f4:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a0017f6:	2000      	movs	r0, #0
	return xReturn;
1a0017f8:	e7fb      	b.n	1a0017f2 <xTimerGenericCommand+0x5e>
1a0017fa:	bf00      	nop
1a0017fc:	10001418 	.word	0x10001418

1a001800 <prvSwitchTimerLists>:
{
1a001800:	b570      	push	{r4, r5, r6, lr}
1a001802:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001804:	4b1a      	ldr	r3, [pc, #104]	; (1a001870 <prvSwitchTimerLists+0x70>)
1a001806:	681b      	ldr	r3, [r3, #0]
1a001808:	681a      	ldr	r2, [r3, #0]
1a00180a:	b352      	cbz	r2, 1a001862 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00180c:	68db      	ldr	r3, [r3, #12]
1a00180e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001810:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001812:	1d25      	adds	r5, r4, #4
1a001814:	4628      	mov	r0, r5
1a001816:	f7ff fa0b 	bl	1a000c30 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00181a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00181c:	4620      	mov	r0, r4
1a00181e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001820:	69e3      	ldr	r3, [r4, #28]
1a001822:	2b01      	cmp	r3, #1
1a001824:	d1ee      	bne.n	1a001804 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001826:	69a3      	ldr	r3, [r4, #24]
1a001828:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00182a:	429e      	cmp	r6, r3
1a00182c:	d207      	bcs.n	1a00183e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00182e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001830:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001832:	4629      	mov	r1, r5
1a001834:	4b0e      	ldr	r3, [pc, #56]	; (1a001870 <prvSwitchTimerLists+0x70>)
1a001836:	6818      	ldr	r0, [r3, #0]
1a001838:	f7ff f9e0 	bl	1a000bfc <vListInsert>
1a00183c:	e7e2      	b.n	1a001804 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00183e:	2100      	movs	r1, #0
1a001840:	9100      	str	r1, [sp, #0]
1a001842:	460b      	mov	r3, r1
1a001844:	4632      	mov	r2, r6
1a001846:	4620      	mov	r0, r4
1a001848:	f7ff ffa4 	bl	1a001794 <xTimerGenericCommand>
				configASSERT( xResult );
1a00184c:	2800      	cmp	r0, #0
1a00184e:	d1d9      	bne.n	1a001804 <prvSwitchTimerLists+0x4>
1a001850:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001854:	f383 8811 	msr	BASEPRI, r3
1a001858:	f3bf 8f6f 	isb	sy
1a00185c:	f3bf 8f4f 	dsb	sy
1a001860:	e7fe      	b.n	1a001860 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001862:	4a04      	ldr	r2, [pc, #16]	; (1a001874 <prvSwitchTimerLists+0x74>)
1a001864:	6810      	ldr	r0, [r2, #0]
1a001866:	4902      	ldr	r1, [pc, #8]	; (1a001870 <prvSwitchTimerLists+0x70>)
1a001868:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00186a:	6013      	str	r3, [r2, #0]
}
1a00186c:	b002      	add	sp, #8
1a00186e:	bd70      	pop	{r4, r5, r6, pc}
1a001870:	100012f4 	.word	0x100012f4
1a001874:	100012f8 	.word	0x100012f8

1a001878 <prvSampleTimeNow>:
{
1a001878:	b538      	push	{r3, r4, r5, lr}
1a00187a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00187c:	f7ff fc3e 	bl	1a0010fc <xTaskGetTickCount>
1a001880:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001882:	4b07      	ldr	r3, [pc, #28]	; (1a0018a0 <prvSampleTimeNow+0x28>)
1a001884:	681b      	ldr	r3, [r3, #0]
1a001886:	4283      	cmp	r3, r0
1a001888:	d805      	bhi.n	1a001896 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00188a:	2300      	movs	r3, #0
1a00188c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00188e:	4b04      	ldr	r3, [pc, #16]	; (1a0018a0 <prvSampleTimeNow+0x28>)
1a001890:	601c      	str	r4, [r3, #0]
}
1a001892:	4620      	mov	r0, r4
1a001894:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001896:	f7ff ffb3 	bl	1a001800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00189a:	2301      	movs	r3, #1
1a00189c:	602b      	str	r3, [r5, #0]
1a00189e:	e7f6      	b.n	1a00188e <prvSampleTimeNow+0x16>
1a0018a0:	100013c4 	.word	0x100013c4

1a0018a4 <prvProcessExpiredTimer>:
{
1a0018a4:	b570      	push	{r4, r5, r6, lr}
1a0018a6:	b082      	sub	sp, #8
1a0018a8:	4605      	mov	r5, r0
1a0018aa:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0018ac:	4b14      	ldr	r3, [pc, #80]	; (1a001900 <prvProcessExpiredTimer+0x5c>)
1a0018ae:	681b      	ldr	r3, [r3, #0]
1a0018b0:	68db      	ldr	r3, [r3, #12]
1a0018b2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0018b4:	1d20      	adds	r0, r4, #4
1a0018b6:	f7ff f9bb 	bl	1a000c30 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0018ba:	69e3      	ldr	r3, [r4, #28]
1a0018bc:	2b01      	cmp	r3, #1
1a0018be:	d004      	beq.n	1a0018ca <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0018c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0018c2:	4620      	mov	r0, r4
1a0018c4:	4798      	blx	r3
}
1a0018c6:	b002      	add	sp, #8
1a0018c8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0018ca:	69a1      	ldr	r1, [r4, #24]
1a0018cc:	462b      	mov	r3, r5
1a0018ce:	4632      	mov	r2, r6
1a0018d0:	4429      	add	r1, r5
1a0018d2:	4620      	mov	r0, r4
1a0018d4:	f7ff fed0 	bl	1a001678 <prvInsertTimerInActiveList>
1a0018d8:	2800      	cmp	r0, #0
1a0018da:	d0f1      	beq.n	1a0018c0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0018dc:	2100      	movs	r1, #0
1a0018de:	9100      	str	r1, [sp, #0]
1a0018e0:	460b      	mov	r3, r1
1a0018e2:	462a      	mov	r2, r5
1a0018e4:	4620      	mov	r0, r4
1a0018e6:	f7ff ff55 	bl	1a001794 <xTimerGenericCommand>
			configASSERT( xResult );
1a0018ea:	2800      	cmp	r0, #0
1a0018ec:	d1e8      	bne.n	1a0018c0 <prvProcessExpiredTimer+0x1c>
1a0018ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018f2:	f383 8811 	msr	BASEPRI, r3
1a0018f6:	f3bf 8f6f 	isb	sy
1a0018fa:	f3bf 8f4f 	dsb	sy
1a0018fe:	e7fe      	b.n	1a0018fe <prvProcessExpiredTimer+0x5a>
1a001900:	100012f4 	.word	0x100012f4

1a001904 <prvProcessTimerOrBlockTask>:
{
1a001904:	b570      	push	{r4, r5, r6, lr}
1a001906:	b082      	sub	sp, #8
1a001908:	4606      	mov	r6, r0
1a00190a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00190c:	f7ff fbee 	bl	1a0010ec <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001910:	a801      	add	r0, sp, #4
1a001912:	f7ff ffb1 	bl	1a001878 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001916:	9b01      	ldr	r3, [sp, #4]
1a001918:	bb1b      	cbnz	r3, 1a001962 <prvProcessTimerOrBlockTask+0x5e>
1a00191a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00191c:	b90c      	cbnz	r4, 1a001922 <prvProcessTimerOrBlockTask+0x1e>
1a00191e:	42b0      	cmp	r0, r6
1a001920:	d218      	bcs.n	1a001954 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001922:	b12c      	cbz	r4, 1a001930 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001924:	4b11      	ldr	r3, [pc, #68]	; (1a00196c <prvProcessTimerOrBlockTask+0x68>)
1a001926:	681b      	ldr	r3, [r3, #0]
1a001928:	681c      	ldr	r4, [r3, #0]
1a00192a:	fab4 f484 	clz	r4, r4
1a00192e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001930:	4622      	mov	r2, r4
1a001932:	1b71      	subs	r1, r6, r5
1a001934:	4b0e      	ldr	r3, [pc, #56]	; (1a001970 <prvProcessTimerOrBlockTask+0x6c>)
1a001936:	6818      	ldr	r0, [r3, #0]
1a001938:	f7ff f91e 	bl	1a000b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00193c:	f7ff fc70 	bl	1a001220 <xTaskResumeAll>
1a001940:	b988      	cbnz	r0, 1a001966 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001942:	4b0c      	ldr	r3, [pc, #48]	; (1a001974 <prvProcessTimerOrBlockTask+0x70>)
1a001944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001948:	601a      	str	r2, [r3, #0]
1a00194a:	f3bf 8f4f 	dsb	sy
1a00194e:	f3bf 8f6f 	isb	sy
1a001952:	e008      	b.n	1a001966 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001954:	f7ff fc64 	bl	1a001220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001958:	4629      	mov	r1, r5
1a00195a:	4630      	mov	r0, r6
1a00195c:	f7ff ffa2 	bl	1a0018a4 <prvProcessExpiredTimer>
1a001960:	e001      	b.n	1a001966 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001962:	f7ff fc5d 	bl	1a001220 <xTaskResumeAll>
}
1a001966:	b002      	add	sp, #8
1a001968:	bd70      	pop	{r4, r5, r6, pc}
1a00196a:	bf00      	nop
1a00196c:	100012f8 	.word	0x100012f8
1a001970:	10001418 	.word	0x10001418
1a001974:	e000ed04 	.word	0xe000ed04

1a001978 <prvProcessReceivedCommands>:
{
1a001978:	b530      	push	{r4, r5, lr}
1a00197a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00197c:	e006      	b.n	1a00198c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00197e:	9907      	ldr	r1, [sp, #28]
1a001980:	9806      	ldr	r0, [sp, #24]
1a001982:	9b05      	ldr	r3, [sp, #20]
1a001984:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001986:	9b04      	ldr	r3, [sp, #16]
1a001988:	2b00      	cmp	r3, #0
1a00198a:	da0b      	bge.n	1a0019a4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00198c:	2200      	movs	r2, #0
1a00198e:	a904      	add	r1, sp, #16
1a001990:	4b37      	ldr	r3, [pc, #220]	; (1a001a70 <prvProcessReceivedCommands+0xf8>)
1a001992:	6818      	ldr	r0, [r3, #0]
1a001994:	f7ff f82e 	bl	1a0009f4 <xQueueReceive>
1a001998:	2800      	cmp	r0, #0
1a00199a:	d066      	beq.n	1a001a6a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00199c:	9b04      	ldr	r3, [sp, #16]
1a00199e:	2b00      	cmp	r3, #0
1a0019a0:	daf1      	bge.n	1a001986 <prvProcessReceivedCommands+0xe>
1a0019a2:	e7ec      	b.n	1a00197e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0019a4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0019a6:	6963      	ldr	r3, [r4, #20]
1a0019a8:	b113      	cbz	r3, 1a0019b0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0019aa:	1d20      	adds	r0, r4, #4
1a0019ac:	f7ff f940 	bl	1a000c30 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0019b0:	a803      	add	r0, sp, #12
1a0019b2:	f7ff ff61 	bl	1a001878 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0019b6:	9b04      	ldr	r3, [sp, #16]
1a0019b8:	2b09      	cmp	r3, #9
1a0019ba:	d8e7      	bhi.n	1a00198c <prvProcessReceivedCommands+0x14>
1a0019bc:	a201      	add	r2, pc, #4	; (adr r2, 1a0019c4 <prvProcessReceivedCommands+0x4c>)
1a0019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0019c2:	bf00      	nop
1a0019c4:	1a0019ed 	.word	0x1a0019ed
1a0019c8:	1a0019ed 	.word	0x1a0019ed
1a0019cc:	1a0019ed 	.word	0x1a0019ed
1a0019d0:	1a00198d 	.word	0x1a00198d
1a0019d4:	1a001a35 	.word	0x1a001a35
1a0019d8:	1a001a5b 	.word	0x1a001a5b
1a0019dc:	1a0019ed 	.word	0x1a0019ed
1a0019e0:	1a0019ed 	.word	0x1a0019ed
1a0019e4:	1a00198d 	.word	0x1a00198d
1a0019e8:	1a001a35 	.word	0x1a001a35
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0019ec:	9905      	ldr	r1, [sp, #20]
1a0019ee:	69a5      	ldr	r5, [r4, #24]
1a0019f0:	460b      	mov	r3, r1
1a0019f2:	4602      	mov	r2, r0
1a0019f4:	4429      	add	r1, r5
1a0019f6:	4620      	mov	r0, r4
1a0019f8:	f7ff fe3e 	bl	1a001678 <prvInsertTimerInActiveList>
1a0019fc:	2800      	cmp	r0, #0
1a0019fe:	d0c5      	beq.n	1a00198c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a02:	4620      	mov	r0, r4
1a001a04:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001a06:	69e3      	ldr	r3, [r4, #28]
1a001a08:	2b01      	cmp	r3, #1
1a001a0a:	d1bf      	bne.n	1a00198c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001a0c:	69a2      	ldr	r2, [r4, #24]
1a001a0e:	2100      	movs	r1, #0
1a001a10:	9100      	str	r1, [sp, #0]
1a001a12:	460b      	mov	r3, r1
1a001a14:	9805      	ldr	r0, [sp, #20]
1a001a16:	4402      	add	r2, r0
1a001a18:	4620      	mov	r0, r4
1a001a1a:	f7ff febb 	bl	1a001794 <xTimerGenericCommand>
							configASSERT( xResult );
1a001a1e:	2800      	cmp	r0, #0
1a001a20:	d1b4      	bne.n	1a00198c <prvProcessReceivedCommands+0x14>
1a001a22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a26:	f383 8811 	msr	BASEPRI, r3
1a001a2a:	f3bf 8f6f 	isb	sy
1a001a2e:	f3bf 8f4f 	dsb	sy
1a001a32:	e7fe      	b.n	1a001a32 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001a34:	9905      	ldr	r1, [sp, #20]
1a001a36:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001a38:	b131      	cbz	r1, 1a001a48 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001a3a:	4603      	mov	r3, r0
1a001a3c:	4602      	mov	r2, r0
1a001a3e:	4401      	add	r1, r0
1a001a40:	4620      	mov	r0, r4
1a001a42:	f7ff fe19 	bl	1a001678 <prvInsertTimerInActiveList>
					break;
1a001a46:	e7a1      	b.n	1a00198c <prvProcessReceivedCommands+0x14>
1a001a48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a4c:	f383 8811 	msr	BASEPRI, r3
1a001a50:	f3bf 8f6f 	isb	sy
1a001a54:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001a58:	e7fe      	b.n	1a001a58 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001a5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001a5e:	2b00      	cmp	r3, #0
1a001a60:	d194      	bne.n	1a00198c <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a001a62:	4620      	mov	r0, r4
1a001a64:	f7fe fd2a 	bl	1a0004bc <vPortFree>
1a001a68:	e790      	b.n	1a00198c <prvProcessReceivedCommands+0x14>
}
1a001a6a:	b009      	add	sp, #36	; 0x24
1a001a6c:	bd30      	pop	{r4, r5, pc}
1a001a6e:	bf00      	nop
1a001a70:	10001418 	.word	0x10001418

1a001a74 <prvTimerTask>:
{
1a001a74:	b500      	push	{lr}
1a001a76:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001a78:	a801      	add	r0, sp, #4
1a001a7a:	f7ff fded 	bl	1a001658 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001a7e:	9901      	ldr	r1, [sp, #4]
1a001a80:	f7ff ff40 	bl	1a001904 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001a84:	f7ff ff78 	bl	1a001978 <prvProcessReceivedCommands>
1a001a88:	e7f6      	b.n	1a001a78 <prvTimerTask+0x4>
1a001a8a:	Address 0x000000001a001a8a is out of bounds.


1a001a8c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001a8c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001a8e:	2300      	movs	r3, #0
1a001a90:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001a92:	4b0d      	ldr	r3, [pc, #52]	; (1a001ac8 <prvTaskExitError+0x3c>)
1a001a94:	681b      	ldr	r3, [r3, #0]
1a001a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a9a:	d008      	beq.n	1a001aae <prvTaskExitError+0x22>
1a001a9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa0:	f383 8811 	msr	BASEPRI, r3
1a001aa4:	f3bf 8f6f 	isb	sy
1a001aa8:	f3bf 8f4f 	dsb	sy
1a001aac:	e7fe      	b.n	1a001aac <prvTaskExitError+0x20>
1a001aae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ab2:	f383 8811 	msr	BASEPRI, r3
1a001ab6:	f3bf 8f6f 	isb	sy
1a001aba:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001abe:	9b01      	ldr	r3, [sp, #4]
1a001ac0:	2b00      	cmp	r3, #0
1a001ac2:	d0fc      	beq.n	1a001abe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001ac4:	b002      	add	sp, #8
1a001ac6:	4770      	bx	lr
1a001ac8:	10000000 	.word	0x10000000

1a001acc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001acc:	4808      	ldr	r0, [pc, #32]	; (1a001af0 <prvPortStartFirstTask+0x24>)
1a001ace:	6800      	ldr	r0, [r0, #0]
1a001ad0:	6800      	ldr	r0, [r0, #0]
1a001ad2:	f380 8808 	msr	MSP, r0
1a001ad6:	f04f 0000 	mov.w	r0, #0
1a001ada:	f380 8814 	msr	CONTROL, r0
1a001ade:	b662      	cpsie	i
1a001ae0:	b661      	cpsie	f
1a001ae2:	f3bf 8f4f 	dsb	sy
1a001ae6:	f3bf 8f6f 	isb	sy
1a001aea:	df00      	svc	0
1a001aec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a001aee:	0000      	.short	0x0000
1a001af0:	e000ed08 	.word	0xe000ed08

1a001af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001b04 <vPortEnableVFP+0x10>
1a001af8:	6801      	ldr	r1, [r0, #0]
1a001afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001afe:	6001      	str	r1, [r0, #0]
1a001b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a001b02:	0000      	.short	0x0000
1a001b04:	e000ed88 	.word	0xe000ed88

1a001b08 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001b0c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001b10:	f021 0101 	bic.w	r1, r1, #1
1a001b14:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001b18:	4b05      	ldr	r3, [pc, #20]	; (1a001b30 <pxPortInitialiseStack+0x28>)
1a001b1a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001b1e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001b22:	f06f 0302 	mvn.w	r3, #2
1a001b26:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001b2a:	3844      	subs	r0, #68	; 0x44
1a001b2c:	4770      	bx	lr
1a001b2e:	bf00      	nop
1a001b30:	1a001a8d 	.word	0x1a001a8d
1a001b34:	ffffffff 	.word	0xffffffff
1a001b38:	ffffffff 	.word	0xffffffff
1a001b3c:	ffffffff 	.word	0xffffffff

1a001b40 <SVC_Handler>:
	__asm volatile (
1a001b40:	4b07      	ldr	r3, [pc, #28]	; (1a001b60 <pxCurrentTCBConst2>)
1a001b42:	6819      	ldr	r1, [r3, #0]
1a001b44:	6808      	ldr	r0, [r1, #0]
1a001b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001b4a:	f380 8809 	msr	PSP, r0
1a001b4e:	f3bf 8f6f 	isb	sy
1a001b52:	f04f 0000 	mov.w	r0, #0
1a001b56:	f380 8811 	msr	BASEPRI, r0
1a001b5a:	4770      	bx	lr
1a001b5c:	f3af 8000 	nop.w

1a001b60 <pxCurrentTCBConst2>:
1a001b60:	100011cc 	.word	0x100011cc

1a001b64 <vPortEnterCritical>:
1a001b64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b68:	f383 8811 	msr	BASEPRI, r3
1a001b6c:	f3bf 8f6f 	isb	sy
1a001b70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001b74:	4a0a      	ldr	r2, [pc, #40]	; (1a001ba0 <vPortEnterCritical+0x3c>)
1a001b76:	6813      	ldr	r3, [r2, #0]
1a001b78:	3301      	adds	r3, #1
1a001b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001b7c:	2b01      	cmp	r3, #1
1a001b7e:	d000      	beq.n	1a001b82 <vPortEnterCritical+0x1e>
}
1a001b80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001b82:	4b08      	ldr	r3, [pc, #32]	; (1a001ba4 <vPortEnterCritical+0x40>)
1a001b84:	681b      	ldr	r3, [r3, #0]
1a001b86:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001b8a:	d0f9      	beq.n	1a001b80 <vPortEnterCritical+0x1c>
1a001b8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b90:	f383 8811 	msr	BASEPRI, r3
1a001b94:	f3bf 8f6f 	isb	sy
1a001b98:	f3bf 8f4f 	dsb	sy
1a001b9c:	e7fe      	b.n	1a001b9c <vPortEnterCritical+0x38>
1a001b9e:	bf00      	nop
1a001ba0:	10000000 	.word	0x10000000
1a001ba4:	e000ed04 	.word	0xe000ed04

1a001ba8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001ba8:	4b09      	ldr	r3, [pc, #36]	; (1a001bd0 <vPortExitCritical+0x28>)
1a001baa:	681b      	ldr	r3, [r3, #0]
1a001bac:	b943      	cbnz	r3, 1a001bc0 <vPortExitCritical+0x18>
1a001bae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb2:	f383 8811 	msr	BASEPRI, r3
1a001bb6:	f3bf 8f6f 	isb	sy
1a001bba:	f3bf 8f4f 	dsb	sy
1a001bbe:	e7fe      	b.n	1a001bbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001bc0:	3b01      	subs	r3, #1
1a001bc2:	4a03      	ldr	r2, [pc, #12]	; (1a001bd0 <vPortExitCritical+0x28>)
1a001bc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001bc6:	b90b      	cbnz	r3, 1a001bcc <vPortExitCritical+0x24>
	__asm volatile
1a001bc8:	f383 8811 	msr	BASEPRI, r3
}
1a001bcc:	4770      	bx	lr
1a001bce:	bf00      	nop
1a001bd0:	10000000 	.word	0x10000000
1a001bd4:	ffffffff 	.word	0xffffffff
1a001bd8:	ffffffff 	.word	0xffffffff
1a001bdc:	ffffffff 	.word	0xffffffff

1a001be0 <PendSV_Handler>:
	__asm volatile
1a001be0:	f3ef 8009 	mrs	r0, PSP
1a001be4:	f3bf 8f6f 	isb	sy
1a001be8:	4b15      	ldr	r3, [pc, #84]	; (1a001c40 <pxCurrentTCBConst>)
1a001bea:	681a      	ldr	r2, [r3, #0]
1a001bec:	f01e 0f10 	tst.w	lr, #16
1a001bf0:	bf08      	it	eq
1a001bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001bfa:	6010      	str	r0, [r2, #0]
1a001bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001c00:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001c04:	f380 8811 	msr	BASEPRI, r0
1a001c08:	f3bf 8f4f 	dsb	sy
1a001c0c:	f3bf 8f6f 	isb	sy
1a001c10:	f7ff fb84 	bl	1a00131c <vTaskSwitchContext>
1a001c14:	f04f 0000 	mov.w	r0, #0
1a001c18:	f380 8811 	msr	BASEPRI, r0
1a001c1c:	bc09      	pop	{r0, r3}
1a001c1e:	6819      	ldr	r1, [r3, #0]
1a001c20:	6808      	ldr	r0, [r1, #0]
1a001c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c26:	f01e 0f10 	tst.w	lr, #16
1a001c2a:	bf08      	it	eq
1a001c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001c30:	f380 8809 	msr	PSP, r0
1a001c34:	f3bf 8f6f 	isb	sy
1a001c38:	4770      	bx	lr
1a001c3a:	bf00      	nop
1a001c3c:	f3af 8000 	nop.w

1a001c40 <pxCurrentTCBConst>:
1a001c40:	100011cc 	.word	0x100011cc

1a001c44 <SysTick_Handler>:
{
1a001c44:	b508      	push	{r3, lr}
	__asm volatile
1a001c46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c4a:	f383 8811 	msr	BASEPRI, r3
1a001c4e:	f3bf 8f6f 	isb	sy
1a001c52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001c56:	f7ff fa57 	bl	1a001108 <xTaskIncrementTick>
1a001c5a:	b118      	cbz	r0, 1a001c64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001c5c:	4b03      	ldr	r3, [pc, #12]	; (1a001c6c <SysTick_Handler+0x28>)
1a001c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c62:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001c64:	2300      	movs	r3, #0
1a001c66:	f383 8811 	msr	BASEPRI, r3
}
1a001c6a:	bd08      	pop	{r3, pc}
1a001c6c:	e000ed04 	.word	0xe000ed04

1a001c70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001c70:	4a08      	ldr	r2, [pc, #32]	; (1a001c94 <vPortSetupTimerInterrupt+0x24>)
1a001c72:	2300      	movs	r3, #0
1a001c74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001c76:	4908      	ldr	r1, [pc, #32]	; (1a001c98 <vPortSetupTimerInterrupt+0x28>)
1a001c78:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001c7a:	4b08      	ldr	r3, [pc, #32]	; (1a001c9c <vPortSetupTimerInterrupt+0x2c>)
1a001c7c:	681b      	ldr	r3, [r3, #0]
1a001c7e:	4908      	ldr	r1, [pc, #32]	; (1a001ca0 <vPortSetupTimerInterrupt+0x30>)
1a001c80:	fba1 1303 	umull	r1, r3, r1, r3
1a001c84:	099b      	lsrs	r3, r3, #6
1a001c86:	3b01      	subs	r3, #1
1a001c88:	4906      	ldr	r1, [pc, #24]	; (1a001ca4 <vPortSetupTimerInterrupt+0x34>)
1a001c8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a001c8c:	2307      	movs	r3, #7
1a001c8e:	6013      	str	r3, [r2, #0]
}
1a001c90:	4770      	bx	lr
1a001c92:	bf00      	nop
1a001c94:	e000e010 	.word	0xe000e010
1a001c98:	e000e018 	.word	0xe000e018
1a001c9c:	100014ac 	.word	0x100014ac
1a001ca0:	10624dd3 	.word	0x10624dd3
1a001ca4:	e000e014 	.word	0xe000e014

1a001ca8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001ca8:	4b3a      	ldr	r3, [pc, #232]	; (1a001d94 <xPortStartScheduler+0xec>)
1a001caa:	681a      	ldr	r2, [r3, #0]
1a001cac:	4b3a      	ldr	r3, [pc, #232]	; (1a001d98 <xPortStartScheduler+0xf0>)
1a001cae:	429a      	cmp	r2, r3
1a001cb0:	d029      	beq.n	1a001d06 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001cb2:	4b38      	ldr	r3, [pc, #224]	; (1a001d94 <xPortStartScheduler+0xec>)
1a001cb4:	681a      	ldr	r2, [r3, #0]
1a001cb6:	4b39      	ldr	r3, [pc, #228]	; (1a001d9c <xPortStartScheduler+0xf4>)
1a001cb8:	429a      	cmp	r2, r3
1a001cba:	d02d      	beq.n	1a001d18 <xPortStartScheduler+0x70>
{
1a001cbc:	b510      	push	{r4, lr}
1a001cbe:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001cc0:	4b37      	ldr	r3, [pc, #220]	; (1a001da0 <xPortStartScheduler+0xf8>)
1a001cc2:	781a      	ldrb	r2, [r3, #0]
1a001cc4:	b2d2      	uxtb	r2, r2
1a001cc6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001cc8:	22ff      	movs	r2, #255	; 0xff
1a001cca:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a001ccc:	781b      	ldrb	r3, [r3, #0]
1a001cce:	b2db      	uxtb	r3, r3
1a001cd0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001cd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001cd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a001cdc:	4a31      	ldr	r2, [pc, #196]	; (1a001da4 <xPortStartScheduler+0xfc>)
1a001cde:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001ce0:	4b31      	ldr	r3, [pc, #196]	; (1a001da8 <xPortStartScheduler+0x100>)
1a001ce2:	2207      	movs	r2, #7
1a001ce4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001ce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001cea:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001cee:	d01c      	beq.n	1a001d2a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a001cf0:	4a2d      	ldr	r2, [pc, #180]	; (1a001da8 <xPortStartScheduler+0x100>)
1a001cf2:	6813      	ldr	r3, [r2, #0]
1a001cf4:	3b01      	subs	r3, #1
1a001cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001cf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001cfc:	005b      	lsls	r3, r3, #1
1a001cfe:	b2db      	uxtb	r3, r3
1a001d00:	f88d 3003 	strb.w	r3, [sp, #3]
1a001d04:	e7ef      	b.n	1a001ce6 <xPortStartScheduler+0x3e>
	__asm volatile
1a001d06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d0a:	f383 8811 	msr	BASEPRI, r3
1a001d0e:	f3bf 8f6f 	isb	sy
1a001d12:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001d16:	e7fe      	b.n	1a001d16 <xPortStartScheduler+0x6e>
1a001d18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d1c:	f383 8811 	msr	BASEPRI, r3
1a001d20:	f3bf 8f6f 	isb	sy
1a001d24:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001d28:	e7fe      	b.n	1a001d28 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a001d2a:	4b1f      	ldr	r3, [pc, #124]	; (1a001da8 <xPortStartScheduler+0x100>)
1a001d2c:	681b      	ldr	r3, [r3, #0]
1a001d2e:	2b04      	cmp	r3, #4
1a001d30:	d008      	beq.n	1a001d44 <xPortStartScheduler+0x9c>
1a001d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d36:	f383 8811 	msr	BASEPRI, r3
1a001d3a:	f3bf 8f6f 	isb	sy
1a001d3e:	f3bf 8f4f 	dsb	sy
1a001d42:	e7fe      	b.n	1a001d42 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a001d44:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a001d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001d4a:	4a17      	ldr	r2, [pc, #92]	; (1a001da8 <xPortStartScheduler+0x100>)
1a001d4c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a001d4e:	9b01      	ldr	r3, [sp, #4]
1a001d50:	b2db      	uxtb	r3, r3
1a001d52:	4a13      	ldr	r2, [pc, #76]	; (1a001da0 <xPortStartScheduler+0xf8>)
1a001d54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a001d56:	4b15      	ldr	r3, [pc, #84]	; (1a001dac <xPortStartScheduler+0x104>)
1a001d58:	681a      	ldr	r2, [r3, #0]
1a001d5a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001d5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a001d60:	681a      	ldr	r2, [r3, #0]
1a001d62:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a001d66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a001d68:	f7ff ff82 	bl	1a001c70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a001d6c:	2400      	movs	r4, #0
1a001d6e:	4b10      	ldr	r3, [pc, #64]	; (1a001db0 <xPortStartScheduler+0x108>)
1a001d70:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a001d72:	f7ff febf 	bl	1a001af4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a001d76:	4a0f      	ldr	r2, [pc, #60]	; (1a001db4 <xPortStartScheduler+0x10c>)
1a001d78:	6813      	ldr	r3, [r2, #0]
1a001d7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001d7e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a001d80:	f7ff fea4 	bl	1a001acc <prvPortStartFirstTask>
	vTaskSwitchContext();
1a001d84:	f7ff faca 	bl	1a00131c <vTaskSwitchContext>
	prvTaskExitError();
1a001d88:	f7ff fe80 	bl	1a001a8c <prvTaskExitError>
}
1a001d8c:	4620      	mov	r0, r4
1a001d8e:	b002      	add	sp, #8
1a001d90:	bd10      	pop	{r4, pc}
1a001d92:	bf00      	nop
1a001d94:	e000ed00 	.word	0xe000ed00
1a001d98:	410fc271 	.word	0x410fc271
1a001d9c:	410fc270 	.word	0x410fc270
1a001da0:	e000e400 	.word	0xe000e400
1a001da4:	10001420 	.word	0x10001420
1a001da8:	10001424 	.word	0x10001424
1a001dac:	e000ed20 	.word	0xe000ed20
1a001db0:	10000000 	.word	0x10000000
1a001db4:	e000ef34 	.word	0xe000ef34

1a001db8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a001db8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a001dbc:	2b0f      	cmp	r3, #15
1a001dbe:	d90f      	bls.n	1a001de0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a001dc0:	4a10      	ldr	r2, [pc, #64]	; (1a001e04 <vPortValidateInterruptPriority+0x4c>)
1a001dc2:	5c9b      	ldrb	r3, [r3, r2]
1a001dc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a001dc6:	4a10      	ldr	r2, [pc, #64]	; (1a001e08 <vPortValidateInterruptPriority+0x50>)
1a001dc8:	7812      	ldrb	r2, [r2, #0]
1a001dca:	429a      	cmp	r2, r3
1a001dcc:	d908      	bls.n	1a001de0 <vPortValidateInterruptPriority+0x28>
1a001dce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dd2:	f383 8811 	msr	BASEPRI, r3
1a001dd6:	f3bf 8f6f 	isb	sy
1a001dda:	f3bf 8f4f 	dsb	sy
1a001dde:	e7fe      	b.n	1a001dde <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a001de0:	4b0a      	ldr	r3, [pc, #40]	; (1a001e0c <vPortValidateInterruptPriority+0x54>)
1a001de2:	681b      	ldr	r3, [r3, #0]
1a001de4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001de8:	4a09      	ldr	r2, [pc, #36]	; (1a001e10 <vPortValidateInterruptPriority+0x58>)
1a001dea:	6812      	ldr	r2, [r2, #0]
1a001dec:	4293      	cmp	r3, r2
1a001dee:	d908      	bls.n	1a001e02 <vPortValidateInterruptPriority+0x4a>
1a001df0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001df4:	f383 8811 	msr	BASEPRI, r3
1a001df8:	f3bf 8f6f 	isb	sy
1a001dfc:	f3bf 8f4f 	dsb	sy
1a001e00:	e7fe      	b.n	1a001e00 <vPortValidateInterruptPriority+0x48>
	}
1a001e02:	4770      	bx	lr
1a001e04:	e000e3f0 	.word	0xe000e3f0
1a001e08:	10001420 	.word	0x10001420
1a001e0c:	e000ed0c 	.word	0xe000ed0c
1a001e10:	10001424 	.word	0x10001424

1a001e14 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a001e14:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001e16:	4b05      	ldr	r3, [pc, #20]	; (1a001e2c <DAC_IRQHandler+0x18>)
1a001e18:	2201      	movs	r2, #1
1a001e1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a001e1e:	4b04      	ldr	r3, [pc, #16]	; (1a001e30 <DAC_IRQHandler+0x1c>)
1a001e20:	681b      	ldr	r3, [r3, #0]
1a001e22:	b113      	cbz	r3, 1a001e2a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a001e24:	4b02      	ldr	r3, [pc, #8]	; (1a001e30 <DAC_IRQHandler+0x1c>)
1a001e26:	681b      	ldr	r3, [r3, #0]
1a001e28:	4798      	blx	r3
   }
}
1a001e2a:	bd08      	pop	{r3, pc}
1a001e2c:	e000e100 	.word	0xe000e100
1a001e30:	10001428 	.word	0x10001428

1a001e34 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001e34:	2200      	movs	r2, #0
1a001e36:	2a05      	cmp	r2, #5
1a001e38:	d819      	bhi.n	1a001e6e <Board_LED_Init+0x3a>
{
1a001e3a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001e3c:	490c      	ldr	r1, [pc, #48]	; (1a001e70 <Board_LED_Init+0x3c>)
1a001e3e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a001e42:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a001e46:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a001e48:	4b0a      	ldr	r3, [pc, #40]	; (1a001e74 <Board_LED_Init+0x40>)
1a001e4a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001e4e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a001e52:	2001      	movs	r0, #1
1a001e54:	40a0      	lsls	r0, r4
1a001e56:	4301      	orrs	r1, r0
1a001e58:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001e5c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001e60:	2100      	movs	r1, #0
1a001e62:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001e64:	3201      	adds	r2, #1
1a001e66:	2a05      	cmp	r2, #5
1a001e68:	d9e8      	bls.n	1a001e3c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a001e6a:	bc70      	pop	{r4, r5, r6}
1a001e6c:	4770      	bx	lr
1a001e6e:	4770      	bx	lr
1a001e70:	1a0089a0 	.word	0x1a0089a0
1a001e74:	400f4000 	.word	0x400f4000

1a001e78 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001e78:	2300      	movs	r3, #0
1a001e7a:	2b03      	cmp	r3, #3
1a001e7c:	d816      	bhi.n	1a001eac <Board_TEC_Init+0x34>
{
1a001e7e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001e80:	490b      	ldr	r1, [pc, #44]	; (1a001eb0 <Board_TEC_Init+0x38>)
1a001e82:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001e86:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001e8a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001e8c:	4c09      	ldr	r4, [pc, #36]	; (1a001eb4 <Board_TEC_Init+0x3c>)
1a001e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001e92:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001e96:	2001      	movs	r0, #1
1a001e98:	40a8      	lsls	r0, r5
1a001e9a:	ea21 0100 	bic.w	r1, r1, r0
1a001e9e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001ea2:	3301      	adds	r3, #1
1a001ea4:	2b03      	cmp	r3, #3
1a001ea6:	d9eb      	bls.n	1a001e80 <Board_TEC_Init+0x8>
   }
}
1a001ea8:	bc30      	pop	{r4, r5}
1a001eaa:	4770      	bx	lr
1a001eac:	4770      	bx	lr
1a001eae:	bf00      	nop
1a001eb0:	1a008998 	.word	0x1a008998
1a001eb4:	400f4000 	.word	0x400f4000

1a001eb8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001eb8:	2300      	movs	r3, #0
1a001eba:	2b08      	cmp	r3, #8
1a001ebc:	d816      	bhi.n	1a001eec <Board_GPIO_Init+0x34>
{
1a001ebe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001ec0:	490b      	ldr	r1, [pc, #44]	; (1a001ef0 <Board_GPIO_Init+0x38>)
1a001ec2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001ec6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001eca:	784d      	ldrb	r5, [r1, #1]
1a001ecc:	4c09      	ldr	r4, [pc, #36]	; (1a001ef4 <Board_GPIO_Init+0x3c>)
1a001ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001ed2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001ed6:	2001      	movs	r0, #1
1a001ed8:	40a8      	lsls	r0, r5
1a001eda:	ea21 0100 	bic.w	r1, r1, r0
1a001ede:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001ee2:	3301      	adds	r3, #1
1a001ee4:	2b08      	cmp	r3, #8
1a001ee6:	d9eb      	bls.n	1a001ec0 <Board_GPIO_Init+0x8>
   }
}
1a001ee8:	bc30      	pop	{r4, r5}
1a001eea:	4770      	bx	lr
1a001eec:	4770      	bx	lr
1a001eee:	bf00      	nop
1a001ef0:	1a0089ac 	.word	0x1a0089ac
1a001ef4:	400f4000 	.word	0x400f4000

1a001ef8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001ef8:	b510      	push	{r4, lr}
1a001efa:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a001efc:	4c08      	ldr	r4, [pc, #32]	; (1a001f20 <Board_ADC_Init+0x28>)
1a001efe:	4669      	mov	r1, sp
1a001f00:	4620      	mov	r0, r4
1a001f02:	f000 f9f7 	bl	1a0022f4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a001f06:	4a07      	ldr	r2, [pc, #28]	; (1a001f24 <Board_ADC_Init+0x2c>)
1a001f08:	4669      	mov	r1, sp
1a001f0a:	4620      	mov	r0, r4
1a001f0c:	f000 fa12 	bl	1a002334 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001f10:	2200      	movs	r2, #0
1a001f12:	4669      	mov	r1, sp
1a001f14:	4620      	mov	r0, r4
1a001f16:	f000 fa26 	bl	1a002366 <Chip_ADC_SetResolution>
}
1a001f1a:	b002      	add	sp, #8
1a001f1c:	bd10      	pop	{r4, pc}
1a001f1e:	bf00      	nop
1a001f20:	400e3000 	.word	0x400e3000
1a001f24:	00061a80 	.word	0x00061a80

1a001f28 <Board_SPI_Init>:
{
1a001f28:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a001f2a:	4c0b      	ldr	r4, [pc, #44]	; (1a001f58 <Board_SPI_Init+0x30>)
1a001f2c:	4620      	mov	r0, r4
1a001f2e:	f000 fddd 	bl	1a002aec <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001f32:	6863      	ldr	r3, [r4, #4]
1a001f34:	f023 0304 	bic.w	r3, r3, #4
1a001f38:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001f3a:	6823      	ldr	r3, [r4, #0]
1a001f3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001f40:	f043 0307 	orr.w	r3, r3, #7
1a001f44:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a001f46:	4905      	ldr	r1, [pc, #20]	; (1a001f5c <Board_SPI_Init+0x34>)
1a001f48:	4620      	mov	r0, r4
1a001f4a:	f000 fdb0 	bl	1a002aae <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001f4e:	6863      	ldr	r3, [r4, #4]
1a001f50:	f043 0302 	orr.w	r3, r3, #2
1a001f54:	6063      	str	r3, [r4, #4]
}
1a001f56:	bd10      	pop	{r4, pc}
1a001f58:	400c5000 	.word	0x400c5000
1a001f5c:	000186a0 	.word	0x000186a0

1a001f60 <Board_I2C_Init>:
{
1a001f60:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a001f62:	2000      	movs	r0, #0
1a001f64:	f000 f8c6 	bl	1a0020f4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001f68:	4b04      	ldr	r3, [pc, #16]	; (1a001f7c <Board_I2C_Init+0x1c>)
1a001f6a:	f640 0208 	movw	r2, #2056	; 0x808
1a001f6e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001f72:	4903      	ldr	r1, [pc, #12]	; (1a001f80 <Board_I2C_Init+0x20>)
1a001f74:	2000      	movs	r0, #0
1a001f76:	f000 f8cf 	bl	1a002118 <Chip_I2C_SetClockRate>
}
1a001f7a:	bd08      	pop	{r3, pc}
1a001f7c:	40086000 	.word	0x40086000
1a001f80:	000f4240 	.word	0x000f4240

1a001f84 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001f84:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a001f86:	4c07      	ldr	r4, [pc, #28]	; (1a001fa4 <Board_Debug_Init+0x20>)
1a001f88:	4620      	mov	r0, r4
1a001f8a:	f000 f8f7 	bl	1a00217c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001f8e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001f92:	4620      	mov	r0, r4
1a001f94:	f000 f91c 	bl	1a0021d0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001f98:	2303      	movs	r3, #3
1a001f9a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001f9c:	2301      	movs	r3, #1
1a001f9e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a001fa0:	bd10      	pop	{r4, pc}
1a001fa2:	bf00      	nop
1a001fa4:	400c1000 	.word	0x400c1000

1a001fa8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001fa8:	4b03      	ldr	r3, [pc, #12]	; (1a001fb8 <Board_UARTPutChar+0x10>)
1a001faa:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a001fac:	f013 0f20 	tst.w	r3, #32
1a001fb0:	d0fa      	beq.n	1a001fa8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a001fb2:	4b01      	ldr	r3, [pc, #4]	; (1a001fb8 <Board_UARTPutChar+0x10>)
1a001fb4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a001fb6:	4770      	bx	lr
1a001fb8:	400c1000 	.word	0x400c1000

1a001fbc <Board_UARTGetChar>:
	return pUART->LSR;
1a001fbc:	4b05      	ldr	r3, [pc, #20]	; (1a001fd4 <Board_UARTGetChar+0x18>)
1a001fbe:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a001fc0:	f013 0f01 	tst.w	r3, #1
1a001fc4:	d003      	beq.n	1a001fce <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001fc6:	4b03      	ldr	r3, [pc, #12]	; (1a001fd4 <Board_UARTGetChar+0x18>)
1a001fc8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a001fca:	b2c0      	uxtb	r0, r0
1a001fcc:	4770      	bx	lr
   }
   return EOF;
1a001fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001fd2:	4770      	bx	lr
1a001fd4:	400c1000 	.word	0x400c1000

1a001fd8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001fd8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001fda:	f7ff ffd3 	bl	1a001f84 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001fde:	4809      	ldr	r0, [pc, #36]	; (1a002004 <Board_Init+0x2c>)
1a001fe0:	f000 fd44 	bl	1a002a6c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a001fe4:	f7ff ff68 	bl	1a001eb8 <Board_GPIO_Init>
   Board_ADC_Init();
1a001fe8:	f7ff ff86 	bl	1a001ef8 <Board_ADC_Init>
   Board_SPI_Init();
1a001fec:	f7ff ff9c 	bl	1a001f28 <Board_SPI_Init>
   Board_I2C_Init();
1a001ff0:	f7ff ffb6 	bl	1a001f60 <Board_I2C_Init>

   Board_LED_Init();
1a001ff4:	f7ff ff1e 	bl	1a001e34 <Board_LED_Init>
   Board_TEC_Init();
1a001ff8:	f7ff ff3e 	bl	1a001e78 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a001ffc:	f000 f9ba 	bl	1a002374 <SystemCoreClockUpdate>
}
1a002000:	bd08      	pop	{r3, pc}
1a002002:	bf00      	nop
1a002004:	400f4000 	.word	0x400f4000

1a002008 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002008:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00200a:	b2c0      	uxtb	r0, r0
1a00200c:	f7ff ffcc 	bl	1a001fa8 <Board_UARTPutChar>
}
1a002010:	bd08      	pop	{r3, pc}

1a002012 <__stdio_getchar>:

int __stdio_getchar()
{
1a002012:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002014:	f7ff ffd2 	bl	1a001fbc <Board_UARTGetChar>
}
1a002018:	bd08      	pop	{r3, pc}

1a00201a <__stdio_init>:

void __stdio_init()
{
1a00201a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00201c:	f7ff ffb2 	bl	1a001f84 <Board_Debug_Init>
1a002020:	bd08      	pop	{r3, pc}
1a002022:	Address 0x000000001a002022 is out of bounds.


1a002024 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002024:	2300      	movs	r3, #0
1a002026:	2b1c      	cmp	r3, #28
1a002028:	d812      	bhi.n	1a002050 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00202a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00202c:	4a09      	ldr	r2, [pc, #36]	; (1a002054 <Board_SetupMuxing+0x30>)
1a00202e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002032:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002036:	784a      	ldrb	r2, [r1, #1]
1a002038:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00203a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00203e:	4906      	ldr	r1, [pc, #24]	; (1a002058 <Board_SetupMuxing+0x34>)
1a002040:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002044:	3301      	adds	r3, #1
1a002046:	2b1c      	cmp	r3, #28
1a002048:	d9f0      	bls.n	1a00202c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00204a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00204e:	4770      	bx	lr
1a002050:	4770      	bx	lr
1a002052:	bf00      	nop
1a002054:	1a0089c8 	.word	0x1a0089c8
1a002058:	40086000 	.word	0x40086000

1a00205c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00205c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00205e:	4a17      	ldr	r2, [pc, #92]	; (1a0020bc <Board_SetupClocking+0x60>)
1a002060:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002068:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00206c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002070:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002078:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00207c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002080:	2201      	movs	r2, #1
1a002082:	490f      	ldr	r1, [pc, #60]	; (1a0020c0 <Board_SetupClocking+0x64>)
1a002084:	2006      	movs	r0, #6
1a002086:	f000 fc45 	bl	1a002914 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00208a:	2400      	movs	r4, #0
1a00208c:	b14c      	cbz	r4, 1a0020a2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00208e:	4b0b      	ldr	r3, [pc, #44]	; (1a0020bc <Board_SetupClocking+0x60>)
1a002090:	685a      	ldr	r2, [r3, #4]
1a002092:	f022 020c 	bic.w	r2, r2, #12
1a002096:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002098:	685a      	ldr	r2, [r3, #4]
1a00209a:	f042 0203 	orr.w	r2, r2, #3
1a00209e:	605a      	str	r2, [r3, #4]
}
1a0020a0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0020a2:	4808      	ldr	r0, [pc, #32]	; (1a0020c4 <Board_SetupClocking+0x68>)
1a0020a4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0020a8:	2301      	movs	r3, #1
1a0020aa:	788a      	ldrb	r2, [r1, #2]
1a0020ac:	7849      	ldrb	r1, [r1, #1]
1a0020ae:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0020b2:	f000 fb8b 	bl	1a0027cc <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0020b6:	3401      	adds	r4, #1
1a0020b8:	e7e8      	b.n	1a00208c <Board_SetupClocking+0x30>
1a0020ba:	bf00      	nop
1a0020bc:	40043000 	.word	0x40043000
1a0020c0:	0c28cb00 	.word	0x0c28cb00
1a0020c4:	1a0089c4 	.word	0x1a0089c4

1a0020c8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0020c8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0020ca:	f7ff ffab 	bl	1a002024 <Board_SetupMuxing>
    Board_SetupClocking();
1a0020ce:	f7ff ffc5 	bl	1a00205c <Board_SetupClocking>
}
1a0020d2:	bd08      	pop	{r3, pc}

1a0020d4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0020d4:	2901      	cmp	r1, #1
1a0020d6:	d109      	bne.n	1a0020ec <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0020d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0020dc:	0082      	lsls	r2, r0, #2
1a0020de:	4b04      	ldr	r3, [pc, #16]	; (1a0020f0 <Chip_I2C_EventHandler+0x1c>)
1a0020e0:	4413      	add	r3, r2
1a0020e2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0020e4:	7d13      	ldrb	r3, [r2, #20]
1a0020e6:	b2db      	uxtb	r3, r3
1a0020e8:	2b04      	cmp	r3, #4
1a0020ea:	d0fb      	beq.n	1a0020e4 <Chip_I2C_EventHandler+0x10>
}
1a0020ec:	4770      	bx	lr
1a0020ee:	bf00      	nop
1a0020f0:	10000004 	.word	0x10000004

1a0020f4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0020f4:	b570      	push	{r4, r5, r6, lr}
1a0020f6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0020f8:	4e06      	ldr	r6, [pc, #24]	; (1a002114 <Chip_I2C_Init+0x20>)
1a0020fa:	00c4      	lsls	r4, r0, #3
1a0020fc:	1a22      	subs	r2, r4, r0
1a0020fe:	0093      	lsls	r3, r2, #2
1a002100:	4433      	add	r3, r6
1a002102:	8898      	ldrh	r0, [r3, #4]
1a002104:	f000 fbc6 	bl	1a002894 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002108:	1b64      	subs	r4, r4, r5
1a00210a:	00a3      	lsls	r3, r4, #2
1a00210c:	58f3      	ldr	r3, [r6, r3]
1a00210e:	226c      	movs	r2, #108	; 0x6c
1a002110:	619a      	str	r2, [r3, #24]
}
1a002112:	bd70      	pop	{r4, r5, r6, pc}
1a002114:	10000004 	.word	0x10000004

1a002118 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00211c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00211e:	4e0b      	ldr	r6, [pc, #44]	; (1a00214c <Chip_I2C_SetClockRate+0x34>)
1a002120:	00c5      	lsls	r5, r0, #3
1a002122:	1a2b      	subs	r3, r5, r0
1a002124:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002128:	eb06 0308 	add.w	r3, r6, r8
1a00212c:	8898      	ldrh	r0, [r3, #4]
1a00212e:	f000 fbcb 	bl	1a0028c8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002132:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002136:	f856 3008 	ldr.w	r3, [r6, r8]
1a00213a:	0842      	lsrs	r2, r0, #1
1a00213c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00213e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002142:	691a      	ldr	r2, [r3, #16]
1a002144:	1a80      	subs	r0, r0, r2
1a002146:	6158      	str	r0, [r3, #20]
}
1a002148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00214c:	10000004 	.word	0x10000004

1a002150 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002150:	4b09      	ldr	r3, [pc, #36]	; (1a002178 <Chip_UART_GetIndex+0x28>)
1a002152:	4298      	cmp	r0, r3
1a002154:	d009      	beq.n	1a00216a <Chip_UART_GetIndex+0x1a>
1a002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00215a:	4298      	cmp	r0, r3
1a00215c:	d007      	beq.n	1a00216e <Chip_UART_GetIndex+0x1e>
1a00215e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002162:	4298      	cmp	r0, r3
1a002164:	d005      	beq.n	1a002172 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002166:	2000      	movs	r0, #0
1a002168:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00216a:	2002      	movs	r0, #2
1a00216c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00216e:	2003      	movs	r0, #3
1a002170:	4770      	bx	lr
			return 1;
1a002172:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002174:	4770      	bx	lr
1a002176:	bf00      	nop
1a002178:	400c1000 	.word	0x400c1000

1a00217c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00217c:	b530      	push	{r4, r5, lr}
1a00217e:	b083      	sub	sp, #12
1a002180:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002182:	f7ff ffe5 	bl	1a002150 <Chip_UART_GetIndex>
1a002186:	2301      	movs	r3, #1
1a002188:	461a      	mov	r2, r3
1a00218a:	4619      	mov	r1, r3
1a00218c:	4d0e      	ldr	r5, [pc, #56]	; (1a0021c8 <Chip_UART_Init+0x4c>)
1a00218e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002192:	f000 fb61 	bl	1a002858 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002196:	2307      	movs	r3, #7
1a002198:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00219a:	2300      	movs	r3, #0
1a00219c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00219e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0021a0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0021a2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0021a4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0021a6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0021a8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0021aa:	4b08      	ldr	r3, [pc, #32]	; (1a0021cc <Chip_UART_Init+0x50>)
1a0021ac:	429c      	cmp	r4, r3
1a0021ae:	d006      	beq.n	1a0021be <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0021b0:	2303      	movs	r3, #3
1a0021b2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0021b4:	2310      	movs	r3, #16
1a0021b6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0021b8:	9b01      	ldr	r3, [sp, #4]
}
1a0021ba:	b003      	add	sp, #12
1a0021bc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0021be:	2300      	movs	r3, #0
1a0021c0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0021c2:	69a3      	ldr	r3, [r4, #24]
1a0021c4:	9301      	str	r3, [sp, #4]
1a0021c6:	e7f3      	b.n	1a0021b0 <Chip_UART_Init+0x34>
1a0021c8:	1a008a44 	.word	0x1a008a44
1a0021cc:	40082000 	.word	0x40082000

1a0021d0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0021d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0021d4:	b083      	sub	sp, #12
1a0021d6:	9001      	str	r0, [sp, #4]
1a0021d8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0021da:	f7ff ffb9 	bl	1a002150 <Chip_UART_GetIndex>
1a0021de:	4b32      	ldr	r3, [pc, #200]	; (1a0022a8 <Chip_UART_SetBaudFDR+0xd8>)
1a0021e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0021e4:	f000 fb70 	bl	1a0028c8 <Chip_Clock_GetRate>
1a0021e8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0021ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0021ee:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0021f0:	f04f 0b00 	mov.w	fp, #0
1a0021f4:	46a2      	mov	sl, r4
1a0021f6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0021f8:	e02a      	b.n	1a002250 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0021fa:	4242      	negs	r2, r0
				div ++;
1a0021fc:	1c4b      	adds	r3, r1, #1
1a0021fe:	e017      	b.n	1a002230 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002200:	b30a      	cbz	r2, 1a002246 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002202:	4617      	mov	r7, r2
			sd = d;
1a002204:	46ab      	mov	fp, r5
			sm = m;
1a002206:	46a2      	mov	sl, r4
			sdiv = div;
1a002208:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00220a:	3501      	adds	r5, #1
1a00220c:	42ac      	cmp	r4, r5
1a00220e:	d91e      	bls.n	1a00224e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002210:	0933      	lsrs	r3, r6, #4
1a002212:	0730      	lsls	r0, r6, #28
1a002214:	fba4 0100 	umull	r0, r1, r4, r0
1a002218:	fb04 1103 	mla	r1, r4, r3, r1
1a00221c:	1962      	adds	r2, r4, r5
1a00221e:	fb08 f202 	mul.w	r2, r8, r2
1a002222:	2300      	movs	r3, #0
1a002224:	f001 fa70 	bl	1a003708 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002228:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00222a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00222c:	2800      	cmp	r0, #0
1a00222e:	dbe4      	blt.n	1a0021fa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002230:	4297      	cmp	r7, r2
1a002232:	d3ea      	bcc.n	1a00220a <Chip_UART_SetBaudFDR+0x3a>
1a002234:	2b00      	cmp	r3, #0
1a002236:	d0e8      	beq.n	1a00220a <Chip_UART_SetBaudFDR+0x3a>
1a002238:	0c19      	lsrs	r1, r3, #16
1a00223a:	d1e6      	bne.n	1a00220a <Chip_UART_SetBaudFDR+0x3a>
1a00223c:	2b02      	cmp	r3, #2
1a00223e:	d8df      	bhi.n	1a002200 <Chip_UART_SetBaudFDR+0x30>
1a002240:	2d00      	cmp	r5, #0
1a002242:	d0dd      	beq.n	1a002200 <Chip_UART_SetBaudFDR+0x30>
1a002244:	e7e1      	b.n	1a00220a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002246:	4617      	mov	r7, r2
			sd = d;
1a002248:	46ab      	mov	fp, r5
			sm = m;
1a00224a:	46a2      	mov	sl, r4
			sdiv = div;
1a00224c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00224e:	3401      	adds	r4, #1
1a002250:	b11f      	cbz	r7, 1a00225a <Chip_UART_SetBaudFDR+0x8a>
1a002252:	2c0f      	cmp	r4, #15
1a002254:	d801      	bhi.n	1a00225a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002256:	2500      	movs	r5, #0
1a002258:	e7d8      	b.n	1a00220c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00225a:	f1b9 0f00 	cmp.w	r9, #0
1a00225e:	d01e      	beq.n	1a00229e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002260:	9a01      	ldr	r2, [sp, #4]
1a002262:	4611      	mov	r1, r2
1a002264:	68d3      	ldr	r3, [r2, #12]
1a002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00226a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00226c:	fa5f f389 	uxtb.w	r3, r9
1a002270:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002272:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002276:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002278:	68d3      	ldr	r3, [r2, #12]
1a00227a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00227e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002280:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002284:	b2db      	uxtb	r3, r3
1a002286:	f00b 020f 	and.w	r2, fp, #15
1a00228a:	4313      	orrs	r3, r2
1a00228c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00228e:	0933      	lsrs	r3, r6, #4
1a002290:	fb0a f303 	mul.w	r3, sl, r3
1a002294:	44da      	add	sl, fp
1a002296:	fb09 f90a 	mul.w	r9, r9, sl
1a00229a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00229e:	4648      	mov	r0, r9
1a0022a0:	b003      	add	sp, #12
1a0022a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0022a6:	bf00      	nop
1a0022a8:	1a008a3c 	.word	0x1a008a3c

1a0022ac <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0022ac:	4b03      	ldr	r3, [pc, #12]	; (1a0022bc <Chip_ADC_GetClockIndex+0x10>)
1a0022ae:	4298      	cmp	r0, r3
1a0022b0:	d001      	beq.n	1a0022b6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0022b2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0022b4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0022b6:	2004      	movs	r0, #4
1a0022b8:	4770      	bx	lr
1a0022ba:	bf00      	nop
1a0022bc:	400e4000 	.word	0x400e4000

1a0022c0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0022c0:	b570      	push	{r4, r5, r6, lr}
1a0022c2:	460d      	mov	r5, r1
1a0022c4:	4614      	mov	r4, r2
1a0022c6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0022c8:	f7ff fff0 	bl	1a0022ac <Chip_ADC_GetClockIndex>
1a0022cc:	f000 fafc 	bl	1a0028c8 <Chip_Clock_GetRate>
	if (burstMode) {
1a0022d0:	b155      	cbz	r5, 1a0022e8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0022d2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0022d6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0022da:	0064      	lsls	r4, r4, #1
1a0022dc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0022e0:	b2c0      	uxtb	r0, r0
1a0022e2:	3801      	subs	r0, #1
	return div;
}
1a0022e4:	b2c0      	uxtb	r0, r0
1a0022e6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0022e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0022ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0022f0:	e7f1      	b.n	1a0022d6 <getClkDiv+0x16>
1a0022f2:	Address 0x000000001a0022f2 is out of bounds.


1a0022f4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0022f4:	b538      	push	{r3, r4, r5, lr}
1a0022f6:	4605      	mov	r5, r0
1a0022f8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0022fa:	f7ff ffd7 	bl	1a0022ac <Chip_ADC_GetClockIndex>
1a0022fe:	2301      	movs	r3, #1
1a002300:	461a      	mov	r2, r3
1a002302:	4619      	mov	r1, r3
1a002304:	f000 faa8 	bl	1a002858 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002308:	2100      	movs	r1, #0
1a00230a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00230c:	4a08      	ldr	r2, [pc, #32]	; (1a002330 <Chip_ADC_Init+0x3c>)
1a00230e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002310:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002312:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002314:	230b      	movs	r3, #11
1a002316:	4628      	mov	r0, r5
1a002318:	f7ff ffd2 	bl	1a0022c0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00231c:	0200      	lsls	r0, r0, #8
1a00231e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002322:	7920      	ldrb	r0, [r4, #4]
1a002324:	0440      	lsls	r0, r0, #17
1a002326:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00232a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00232c:	6028      	str	r0, [r5, #0]
}
1a00232e:	bd38      	pop	{r3, r4, r5, pc}
1a002330:	00061a80 	.word	0x00061a80

1a002334 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002334:	b570      	push	{r4, r5, r6, lr}
1a002336:	4605      	mov	r5, r0
1a002338:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00233a:	6804      	ldr	r4, [r0, #0]
1a00233c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002340:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002344:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002346:	790b      	ldrb	r3, [r1, #4]
1a002348:	f1c3 030b 	rsb	r3, r3, #11
1a00234c:	b2db      	uxtb	r3, r3
1a00234e:	7949      	ldrb	r1, [r1, #5]
1a002350:	f7ff ffb6 	bl	1a0022c0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002354:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002358:	7933      	ldrb	r3, [r6, #4]
1a00235a:	045b      	lsls	r3, r3, #17
1a00235c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002360:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002362:	602b      	str	r3, [r5, #0]
}
1a002364:	bd70      	pop	{r4, r5, r6, pc}

1a002366 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002366:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002368:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00236a:	680a      	ldr	r2, [r1, #0]
1a00236c:	f7ff ffe2 	bl	1a002334 <Chip_ADC_SetSampleRate>
}
1a002370:	bd08      	pop	{r3, pc}
1a002372:	Address 0x000000001a002372 is out of bounds.


1a002374 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002374:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002376:	2069      	movs	r0, #105	; 0x69
1a002378:	f000 faa6 	bl	1a0028c8 <Chip_Clock_GetRate>
1a00237c:	4b01      	ldr	r3, [pc, #4]	; (1a002384 <SystemCoreClockUpdate+0x10>)
1a00237e:	6018      	str	r0, [r3, #0]
}
1a002380:	bd08      	pop	{r3, pc}
1a002382:	bf00      	nop
1a002384:	100014ac 	.word	0x100014ac

1a002388 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002388:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00238a:	680b      	ldr	r3, [r1, #0]
1a00238c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002390:	d002      	beq.n	1a002398 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002396:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002398:	4607      	mov	r7, r0
1a00239a:	2501      	movs	r5, #1
1a00239c:	e03a      	b.n	1a002414 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00239e:	694b      	ldr	r3, [r1, #20]
1a0023a0:	fb03 f302 	mul.w	r3, r3, r2
1a0023a4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0023a8:	e01c      	b.n	1a0023e4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0023aa:	461c      	mov	r4, r3
	if (val < 0)
1a0023ac:	ebb0 0c04 	subs.w	ip, r0, r4
1a0023b0:	d427      	bmi.n	1a002402 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0023b2:	4567      	cmp	r7, ip
1a0023b4:	d906      	bls.n	1a0023c4 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0023b6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0023b8:	1c77      	adds	r7, r6, #1
1a0023ba:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0023bc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0023be:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0023c0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0023c2:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0023c4:	3201      	adds	r2, #1
1a0023c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0023ca:	dc1d      	bgt.n	1a002408 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0023cc:	680c      	ldr	r4, [r1, #0]
1a0023ce:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0023d2:	d0e4      	beq.n	1a00239e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0023d4:	1c73      	adds	r3, r6, #1
1a0023d6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0023da:	694b      	ldr	r3, [r1, #20]
1a0023dc:	fb03 f30c 	mul.w	r3, r3, ip
1a0023e0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0023e4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002420 <pll_calc_divs+0x98>
1a0023e8:	4563      	cmp	r3, ip
1a0023ea:	d9eb      	bls.n	1a0023c4 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0023ec:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002424 <pll_calc_divs+0x9c>
1a0023f0:	4563      	cmp	r3, ip
1a0023f2:	d809      	bhi.n	1a002408 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0023f4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0023f8:	d1d7      	bne.n	1a0023aa <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0023fa:	1c74      	adds	r4, r6, #1
1a0023fc:	fa23 f404 	lsr.w	r4, r3, r4
1a002400:	e7d4      	b.n	1a0023ac <pll_calc_divs+0x24>
		return -val;
1a002402:	f1cc 0c00 	rsb	ip, ip, #0
1a002406:	e7d4      	b.n	1a0023b2 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002408:	3601      	adds	r6, #1
1a00240a:	2e03      	cmp	r6, #3
1a00240c:	dc01      	bgt.n	1a002412 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00240e:	2201      	movs	r2, #1
1a002410:	e7d9      	b.n	1a0023c6 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002412:	3501      	adds	r5, #1
1a002414:	2d04      	cmp	r5, #4
1a002416:	dc01      	bgt.n	1a00241c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002418:	2600      	movs	r6, #0
1a00241a:	e7f6      	b.n	1a00240a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00241c:	bcf0      	pop	{r4, r5, r6, r7}
1a00241e:	4770      	bx	lr
1a002420:	094c5eff 	.word	0x094c5eff
1a002424:	1312d000 	.word	0x1312d000

1a002428 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002428:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00242a:	b099      	sub	sp, #100	; 0x64
1a00242c:	4605      	mov	r5, r0
1a00242e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002430:	225c      	movs	r2, #92	; 0x5c
1a002432:	2100      	movs	r1, #0
1a002434:	a801      	add	r0, sp, #4
1a002436:	f002 f977 	bl	1a004728 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00243a:	2380      	movs	r3, #128	; 0x80
1a00243c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00243e:	6963      	ldr	r3, [r4, #20]
1a002440:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002442:	7923      	ldrb	r3, [r4, #4]
1a002444:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002448:	4669      	mov	r1, sp
1a00244a:	4628      	mov	r0, r5
1a00244c:	f7ff ff9c 	bl	1a002388 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002450:	9b06      	ldr	r3, [sp, #24]
1a002452:	42ab      	cmp	r3, r5
1a002454:	d027      	beq.n	1a0024a6 <pll_get_frac+0x7e>
	if (val < 0)
1a002456:	1aeb      	subs	r3, r5, r3
1a002458:	d42e      	bmi.n	1a0024b8 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00245a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00245c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00245e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002462:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002464:	6963      	ldr	r3, [r4, #20]
1a002466:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002468:	7923      	ldrb	r3, [r4, #4]
1a00246a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00246e:	a910      	add	r1, sp, #64	; 0x40
1a002470:	4628      	mov	r0, r5
1a002472:	f7ff ff89 	bl	1a002388 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002476:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002478:	42ab      	cmp	r3, r5
1a00247a:	d01f      	beq.n	1a0024bc <pll_get_frac+0x94>
	if (val < 0)
1a00247c:	1aeb      	subs	r3, r5, r3
1a00247e:	d425      	bmi.n	1a0024cc <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002480:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002482:	4b2b      	ldr	r3, [pc, #172]	; (1a002530 <pll_get_frac+0x108>)
1a002484:	429d      	cmp	r5, r3
1a002486:	d923      	bls.n	1a0024d0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00248a:	1aed      	subs	r5, r5, r3
1a00248c:	d433      	bmi.n	1a0024f6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00248e:	42ae      	cmp	r6, r5
1a002490:	dc3b      	bgt.n	1a00250a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002492:	42be      	cmp	r6, r7
1a002494:	dc31      	bgt.n	1a0024fa <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002496:	466d      	mov	r5, sp
1a002498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00249c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0024a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0024a4:	e006      	b.n	1a0024b4 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0024a6:	466d      	mov	r5, sp
1a0024a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0024aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0024ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0024b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0024b4:	b019      	add	sp, #100	; 0x64
1a0024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0024b8:	425b      	negs	r3, r3
1a0024ba:	e7ce      	b.n	1a00245a <pll_get_frac+0x32>
		*ppll = pll[2];
1a0024bc:	ad10      	add	r5, sp, #64	; 0x40
1a0024be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0024c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0024c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0024c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0024ca:	e7f3      	b.n	1a0024b4 <pll_get_frac+0x8c>
		return -val;
1a0024cc:	425b      	negs	r3, r3
1a0024ce:	e7d7      	b.n	1a002480 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0024d0:	2340      	movs	r3, #64	; 0x40
1a0024d2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0024d4:	6963      	ldr	r3, [r4, #20]
1a0024d6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0024d8:	a908      	add	r1, sp, #32
1a0024da:	4628      	mov	r0, r5
1a0024dc:	f7ff ff54 	bl	1a002388 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0024e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0024e2:	42ab      	cmp	r3, r5
1a0024e4:	d1d0      	bne.n	1a002488 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0024e6:	ad08      	add	r5, sp, #32
1a0024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0024ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0024f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0024f4:	e7de      	b.n	1a0024b4 <pll_get_frac+0x8c>
		return -val;
1a0024f6:	426d      	negs	r5, r5
1a0024f8:	e7c9      	b.n	1a00248e <pll_get_frac+0x66>
			*ppll = pll[2];
1a0024fa:	ad10      	add	r5, sp, #64	; 0x40
1a0024fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0024fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002500:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002508:	e7d4      	b.n	1a0024b4 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00250a:	42af      	cmp	r7, r5
1a00250c:	db07      	blt.n	1a00251e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00250e:	ad08      	add	r5, sp, #32
1a002510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00251c:	e7ca      	b.n	1a0024b4 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00251e:	ad10      	add	r5, sp, #64	; 0x40
1a002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00252c:	e7c2      	b.n	1a0024b4 <pll_get_frac+0x8c>
1a00252e:	bf00      	nop
1a002530:	068e7780 	.word	0x068e7780

1a002534 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002534:	b430      	push	{r4, r5}
1a002536:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002538:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00253a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00253c:	e000      	b.n	1a002540 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00253e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002540:	281c      	cmp	r0, #28
1a002542:	d118      	bne.n	1a002576 <Chip_Clock_FindBaseClock+0x42>
1a002544:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002548:	0051      	lsls	r1, r2, #1
1a00254a:	4a0c      	ldr	r2, [pc, #48]	; (1a00257c <Chip_Clock_FindBaseClock+0x48>)
1a00254c:	440a      	add	r2, r1
1a00254e:	7914      	ldrb	r4, [r2, #4]
1a002550:	4284      	cmp	r4, r0
1a002552:	d010      	beq.n	1a002576 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002554:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002558:	004a      	lsls	r2, r1, #1
1a00255a:	4908      	ldr	r1, [pc, #32]	; (1a00257c <Chip_Clock_FindBaseClock+0x48>)
1a00255c:	5a8a      	ldrh	r2, [r1, r2]
1a00255e:	42aa      	cmp	r2, r5
1a002560:	d8ed      	bhi.n	1a00253e <Chip_Clock_FindBaseClock+0xa>
1a002562:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002566:	0051      	lsls	r1, r2, #1
1a002568:	4a04      	ldr	r2, [pc, #16]	; (1a00257c <Chip_Clock_FindBaseClock+0x48>)
1a00256a:	440a      	add	r2, r1
1a00256c:	8852      	ldrh	r2, [r2, #2]
1a00256e:	42aa      	cmp	r2, r5
1a002570:	d3e5      	bcc.n	1a00253e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002572:	4620      	mov	r0, r4
1a002574:	e7e4      	b.n	1a002540 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002576:	bc30      	pop	{r4, r5}
1a002578:	4770      	bx	lr
1a00257a:	bf00      	nop
1a00257c:	1a008a58 	.word	0x1a008a58

1a002580 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002580:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002586:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002588:	4a0d      	ldr	r2, [pc, #52]	; (1a0025c0 <Chip_Clock_EnableCrystal+0x40>)
1a00258a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00258c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002590:	6992      	ldr	r2, [r2, #24]
1a002592:	428a      	cmp	r2, r1
1a002594:	d001      	beq.n	1a00259a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002596:	4a0a      	ldr	r2, [pc, #40]	; (1a0025c0 <Chip_Clock_EnableCrystal+0x40>)
1a002598:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00259a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00259e:	4a09      	ldr	r2, [pc, #36]	; (1a0025c4 <Chip_Clock_EnableCrystal+0x44>)
1a0025a0:	6811      	ldr	r1, [r2, #0]
1a0025a2:	4a09      	ldr	r2, [pc, #36]	; (1a0025c8 <Chip_Clock_EnableCrystal+0x48>)
1a0025a4:	4291      	cmp	r1, r2
1a0025a6:	d901      	bls.n	1a0025ac <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0025a8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0025ac:	4a04      	ldr	r2, [pc, #16]	; (1a0025c0 <Chip_Clock_EnableCrystal+0x40>)
1a0025ae:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0025b0:	9b01      	ldr	r3, [sp, #4]
1a0025b2:	1e5a      	subs	r2, r3, #1
1a0025b4:	9201      	str	r2, [sp, #4]
1a0025b6:	2b00      	cmp	r3, #0
1a0025b8:	d1fa      	bne.n	1a0025b0 <Chip_Clock_EnableCrystal+0x30>
}
1a0025ba:	b002      	add	sp, #8
1a0025bc:	4770      	bx	lr
1a0025be:	bf00      	nop
1a0025c0:	40050000 	.word	0x40050000
1a0025c4:	1a0089c0 	.word	0x1a0089c0
1a0025c8:	01312cff 	.word	0x01312cff

1a0025cc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0025cc:	3012      	adds	r0, #18
1a0025ce:	4b05      	ldr	r3, [pc, #20]	; (1a0025e4 <Chip_Clock_GetDividerSource+0x18>)
1a0025d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0025d4:	f010 0f01 	tst.w	r0, #1
1a0025d8:	d102      	bne.n	1a0025e0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0025da:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0025de:	4770      	bx	lr
		return CLKINPUT_PD;
1a0025e0:	2011      	movs	r0, #17
}
1a0025e2:	4770      	bx	lr
1a0025e4:	40050000 	.word	0x40050000

1a0025e8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0025e8:	f100 0212 	add.w	r2, r0, #18
1a0025ec:	4b03      	ldr	r3, [pc, #12]	; (1a0025fc <Chip_Clock_GetDividerDivisor+0x14>)
1a0025ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0025f2:	4b03      	ldr	r3, [pc, #12]	; (1a002600 <Chip_Clock_GetDividerDivisor+0x18>)
1a0025f4:	5c18      	ldrb	r0, [r3, r0]
}
1a0025f6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0025fa:	4770      	bx	lr
1a0025fc:	40050000 	.word	0x40050000
1a002600:	1a008a50 	.word	0x1a008a50

1a002604 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002604:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002606:	2810      	cmp	r0, #16
1a002608:	d80a      	bhi.n	1a002620 <Chip_Clock_GetClockInputHz+0x1c>
1a00260a:	e8df f000 	tbb	[pc, r0]
1a00260e:	0b44      	.short	0x0b44
1a002610:	0921180d 	.word	0x0921180d
1a002614:	2d2a2724 	.word	0x2d2a2724
1a002618:	34300909 	.word	0x34300909
1a00261c:	3c38      	.short	0x3c38
1a00261e:	40          	.byte	0x40
1a00261f:	00          	.byte	0x00
	uint32_t rate = 0;
1a002620:	2000      	movs	r0, #0
1a002622:	e03a      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002624:	481e      	ldr	r0, [pc, #120]	; (1a0026a0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002626:	e038      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002628:	4b1e      	ldr	r3, [pc, #120]	; (1a0026a4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00262a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00262e:	f003 0307 	and.w	r3, r3, #7
1a002632:	2b04      	cmp	r3, #4
1a002634:	d001      	beq.n	1a00263a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002636:	481c      	ldr	r0, [pc, #112]	; (1a0026a8 <Chip_Clock_GetClockInputHz+0xa4>)
1a002638:	e02f      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00263a:	2000      	movs	r0, #0
1a00263c:	e02d      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00263e:	4b19      	ldr	r3, [pc, #100]	; (1a0026a4 <Chip_Clock_GetClockInputHz+0xa0>)
1a002640:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002644:	f003 0307 	and.w	r3, r3, #7
1a002648:	2b04      	cmp	r3, #4
1a00264a:	d027      	beq.n	1a00269c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00264c:	4816      	ldr	r0, [pc, #88]	; (1a0026a8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00264e:	e024      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002650:	4b16      	ldr	r3, [pc, #88]	; (1a0026ac <Chip_Clock_GetClockInputHz+0xa8>)
1a002652:	6818      	ldr	r0, [r3, #0]
		break;
1a002654:	e021      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002656:	4b16      	ldr	r3, [pc, #88]	; (1a0026b0 <Chip_Clock_GetClockInputHz+0xac>)
1a002658:	6818      	ldr	r0, [r3, #0]
		break;
1a00265a:	e01e      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00265c:	4b15      	ldr	r3, [pc, #84]	; (1a0026b4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00265e:	6818      	ldr	r0, [r3, #0]
		break;
1a002660:	e01b      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002662:	4b14      	ldr	r3, [pc, #80]	; (1a0026b4 <Chip_Clock_GetClockInputHz+0xb0>)
1a002664:	6858      	ldr	r0, [r3, #4]
		break;
1a002666:	e018      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002668:	f000 f868 	bl	1a00273c <Chip_Clock_GetMainPLLHz>
		break;
1a00266c:	e015      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00266e:	2100      	movs	r1, #0
1a002670:	f000 f89a 	bl	1a0027a8 <Chip_Clock_GetDivRate>
		break;
1a002674:	e011      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002676:	2101      	movs	r1, #1
1a002678:	f000 f896 	bl	1a0027a8 <Chip_Clock_GetDivRate>
		break;
1a00267c:	e00d      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00267e:	2102      	movs	r1, #2
1a002680:	f000 f892 	bl	1a0027a8 <Chip_Clock_GetDivRate>
		break;
1a002684:	e009      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002686:	2103      	movs	r1, #3
1a002688:	f000 f88e 	bl	1a0027a8 <Chip_Clock_GetDivRate>
		break;
1a00268c:	e005      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00268e:	2104      	movs	r1, #4
1a002690:	f000 f88a 	bl	1a0027a8 <Chip_Clock_GetDivRate>
		break;
1a002694:	e001      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002696:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00269a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a00269c:	4806      	ldr	r0, [pc, #24]	; (1a0026b8 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00269e:	e7fc      	b.n	1a00269a <Chip_Clock_GetClockInputHz+0x96>
1a0026a0:	00b71b00 	.word	0x00b71b00
1a0026a4:	40043000 	.word	0x40043000
1a0026a8:	017d7840 	.word	0x017d7840
1a0026ac:	1a008994 	.word	0x1a008994
1a0026b0:	1a0089c0 	.word	0x1a0089c0
1a0026b4:	1000142c 	.word	0x1000142c
1a0026b8:	02faf080 	.word	0x02faf080

1a0026bc <Chip_Clock_CalcMainPLLValue>:
{
1a0026bc:	b538      	push	{r3, r4, r5, lr}
1a0026be:	4605      	mov	r5, r0
1a0026c0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0026c2:	7908      	ldrb	r0, [r1, #4]
1a0026c4:	f7ff ff9e 	bl	1a002604 <Chip_Clock_GetClockInputHz>
1a0026c8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0026ca:	4b19      	ldr	r3, [pc, #100]	; (1a002730 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0026cc:	442b      	add	r3, r5
1a0026ce:	4a19      	ldr	r2, [pc, #100]	; (1a002734 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0026d0:	4293      	cmp	r3, r2
1a0026d2:	d821      	bhi.n	1a002718 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0026d4:	b318      	cbz	r0, 1a00271e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0026d6:	2380      	movs	r3, #128	; 0x80
1a0026d8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0026da:	2300      	movs	r3, #0
1a0026dc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0026de:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0026e0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0026e4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0026e6:	4a14      	ldr	r2, [pc, #80]	; (1a002738 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0026e8:	4295      	cmp	r5, r2
1a0026ea:	d903      	bls.n	1a0026f4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0026ec:	fb03 f000 	mul.w	r0, r3, r0
1a0026f0:	42a8      	cmp	r0, r5
1a0026f2:	d007      	beq.n	1a002704 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0026f4:	4621      	mov	r1, r4
1a0026f6:	4628      	mov	r0, r5
1a0026f8:	f7ff fe96 	bl	1a002428 <pll_get_frac>
		if (!ppll->nsel) {
1a0026fc:	68a3      	ldr	r3, [r4, #8]
1a0026fe:	b18b      	cbz	r3, 1a002724 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002700:	3b01      	subs	r3, #1
1a002702:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002704:	6923      	ldr	r3, [r4, #16]
1a002706:	b183      	cbz	r3, 1a00272a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002708:	68e2      	ldr	r2, [r4, #12]
1a00270a:	b10a      	cbz	r2, 1a002710 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00270c:	3a01      	subs	r2, #1
1a00270e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002710:	3b01      	subs	r3, #1
1a002712:	6123      	str	r3, [r4, #16]
	return 0;
1a002714:	2000      	movs	r0, #0
}
1a002716:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00271c:	e7fb      	b.n	1a002716 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00271e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002722:	e7f8      	b.n	1a002716 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002728:	e7f5      	b.n	1a002716 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00272a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00272e:	e7f2      	b.n	1a002716 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002730:	ff6b3a10 	.word	0xff6b3a10
1a002734:	0b940510 	.word	0x0b940510
1a002738:	094c5eff 	.word	0x094c5eff

1a00273c <Chip_Clock_GetMainPLLHz>:
{
1a00273c:	b530      	push	{r4, r5, lr}
1a00273e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002740:	4d17      	ldr	r5, [pc, #92]	; (1a0027a0 <Chip_Clock_GetMainPLLHz+0x64>)
1a002742:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002744:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002748:	f7ff ff5c 	bl	1a002604 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00274c:	4b15      	ldr	r3, [pc, #84]	; (1a0027a4 <Chip_Clock_GetMainPLLHz+0x68>)
1a00274e:	681b      	ldr	r3, [r3, #0]
1a002750:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002752:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002754:	f013 0f01 	tst.w	r3, #1
1a002758:	d020      	beq.n	1a00279c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00275a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00275e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002762:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002766:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00276a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00276c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00276e:	f10d 0c08 	add.w	ip, sp, #8
1a002772:	4461      	add	r1, ip
1a002774:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002778:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00277c:	d108      	bne.n	1a002790 <Chip_Clock_GetMainPLLHz+0x54>
1a00277e:	b93d      	cbnz	r5, 1a002790 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002780:	0049      	lsls	r1, r1, #1
1a002782:	fbb3 f3f1 	udiv	r3, r3, r1
1a002786:	fbb0 f0f2 	udiv	r0, r0, r2
1a00278a:	fb00 f003 	mul.w	r0, r0, r3
1a00278e:	e003      	b.n	1a002798 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002790:	fbb0 f0f2 	udiv	r0, r0, r2
1a002794:	fb03 f000 	mul.w	r0, r3, r0
}
1a002798:	b003      	add	sp, #12
1a00279a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a00279c:	2000      	movs	r0, #0
1a00279e:	e7fb      	b.n	1a002798 <Chip_Clock_GetMainPLLHz+0x5c>
1a0027a0:	40050000 	.word	0x40050000
1a0027a4:	1a008a4c 	.word	0x1a008a4c

1a0027a8 <Chip_Clock_GetDivRate>:
{
1a0027a8:	b538      	push	{r3, r4, r5, lr}
1a0027aa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0027ac:	4608      	mov	r0, r1
1a0027ae:	f7ff ff0d 	bl	1a0025cc <Chip_Clock_GetDividerSource>
1a0027b2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0027b4:	4620      	mov	r0, r4
1a0027b6:	f7ff ff17 	bl	1a0025e8 <Chip_Clock_GetDividerDivisor>
1a0027ba:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0027bc:	4628      	mov	r0, r5
1a0027be:	f7ff ff21 	bl	1a002604 <Chip_Clock_GetClockInputHz>
1a0027c2:	3401      	adds	r4, #1
}
1a0027c4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0027c8:	bd38      	pop	{r3, r4, r5, pc}
1a0027ca:	Address 0x000000001a0027ca is out of bounds.


1a0027cc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0027cc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0027ce:	f100 0416 	add.w	r4, r0, #22
1a0027d2:	00a4      	lsls	r4, r4, #2
1a0027d4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0027d8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0027dc:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0027de:	281b      	cmp	r0, #27
1a0027e0:	d813      	bhi.n	1a00280a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0027e2:	2911      	cmp	r1, #17
1a0027e4:	d01a      	beq.n	1a00281c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0027e6:	4d0e      	ldr	r5, [pc, #56]	; (1a002820 <Chip_Clock_SetBaseClock+0x54>)
1a0027e8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0027ea:	b10a      	cbz	r2, 1a0027f0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0027ec:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0027f0:	b10b      	cbz	r3, 1a0027f6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0027f2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0027f6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0027fa:	3016      	adds	r0, #22
1a0027fc:	0080      	lsls	r0, r0, #2
1a0027fe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002802:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002806:	6045      	str	r5, [r0, #4]
1a002808:	e008      	b.n	1a00281c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00280a:	f044 0401 	orr.w	r4, r4, #1
1a00280e:	3016      	adds	r0, #22
1a002810:	0080      	lsls	r0, r0, #2
1a002812:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002816:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00281a:	6044      	str	r4, [r0, #4]
	}
}
1a00281c:	bc30      	pop	{r4, r5}
1a00281e:	4770      	bx	lr
1a002820:	e0fff7fe 	.word	0xe0fff7fe

1a002824 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002824:	281b      	cmp	r0, #27
1a002826:	d80c      	bhi.n	1a002842 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002828:	3016      	adds	r0, #22
1a00282a:	0080      	lsls	r0, r0, #2
1a00282c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002830:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002834:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002836:	f010 0f01 	tst.w	r0, #1
1a00283a:	d104      	bne.n	1a002846 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00283c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002840:	4770      	bx	lr
		return CLKINPUT_PD;
1a002842:	2011      	movs	r0, #17
1a002844:	4770      	bx	lr
		return CLKINPUT_PD;
1a002846:	2011      	movs	r0, #17
}
1a002848:	4770      	bx	lr

1a00284a <Chip_Clock_GetBaseClocktHz>:
{
1a00284a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00284c:	f7ff ffea 	bl	1a002824 <Chip_Clock_GetBaseClock>
1a002850:	f7ff fed8 	bl	1a002604 <Chip_Clock_GetClockInputHz>
}
1a002854:	bd08      	pop	{r3, pc}
1a002856:	Address 0x000000001a002856 is out of bounds.


1a002858 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002858:	b971      	cbnz	r1, 1a002878 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00285a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00285c:	b10a      	cbz	r2, 1a002862 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00285e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002862:	2b02      	cmp	r3, #2
1a002864:	d00a      	beq.n	1a00287c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002866:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00286a:	d30a      	bcc.n	1a002882 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00286c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002870:	4b06      	ldr	r3, [pc, #24]	; (1a00288c <Chip_Clock_EnableOpts+0x34>)
1a002872:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002876:	4770      	bx	lr
		reg |= (1 << 1);
1a002878:	2103      	movs	r1, #3
1a00287a:	e7ef      	b.n	1a00285c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00287c:	f041 0120 	orr.w	r1, r1, #32
1a002880:	e7f1      	b.n	1a002866 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002882:	3020      	adds	r0, #32
1a002884:	4b02      	ldr	r3, [pc, #8]	; (1a002890 <Chip_Clock_EnableOpts+0x38>)
1a002886:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00288a:	4770      	bx	lr
1a00288c:	40052000 	.word	0x40052000
1a002890:	40051000 	.word	0x40051000

1a002894 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002894:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002898:	d309      	bcc.n	1a0028ae <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00289a:	4a09      	ldr	r2, [pc, #36]	; (1a0028c0 <Chip_Clock_Enable+0x2c>)
1a00289c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0028a0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0028a4:	f043 0301 	orr.w	r3, r3, #1
1a0028a8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0028ac:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0028ae:	4a05      	ldr	r2, [pc, #20]	; (1a0028c4 <Chip_Clock_Enable+0x30>)
1a0028b0:	3020      	adds	r0, #32
1a0028b2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0028b6:	f043 0301 	orr.w	r3, r3, #1
1a0028ba:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0028be:	4770      	bx	lr
1a0028c0:	40052000 	.word	0x40052000
1a0028c4:	40051000 	.word	0x40051000

1a0028c8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0028c8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0028ca:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0028ce:	d309      	bcc.n	1a0028e4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0028d0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0028d4:	4a0d      	ldr	r2, [pc, #52]	; (1a00290c <Chip_Clock_GetRate+0x44>)
1a0028d6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0028da:	f014 0f01 	tst.w	r4, #1
1a0028de:	d107      	bne.n	1a0028f0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0028e0:	2000      	movs	r0, #0
	}

	return rate;
}
1a0028e2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0028e4:	f100 0320 	add.w	r3, r0, #32
1a0028e8:	4a09      	ldr	r2, [pc, #36]	; (1a002910 <Chip_Clock_GetRate+0x48>)
1a0028ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0028ee:	e7f4      	b.n	1a0028da <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0028f0:	f7ff fe20 	bl	1a002534 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0028f4:	f7ff ffa9 	bl	1a00284a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0028f8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0028fc:	d103      	bne.n	1a002906 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0028fe:	2301      	movs	r3, #1
		rate = rate / div;
1a002900:	fbb0 f0f3 	udiv	r0, r0, r3
1a002904:	e7ed      	b.n	1a0028e2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002906:	2302      	movs	r3, #2
1a002908:	e7fa      	b.n	1a002900 <Chip_Clock_GetRate+0x38>
1a00290a:	bf00      	nop
1a00290c:	40052000 	.word	0x40052000
1a002910:	40051000 	.word	0x40051000

1a002914 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002914:	b570      	push	{r4, r5, r6, lr}
1a002916:	b08a      	sub	sp, #40	; 0x28
1a002918:	4605      	mov	r5, r0
1a00291a:	460e      	mov	r6, r1
1a00291c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00291e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002922:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002924:	2806      	cmp	r0, #6
1a002926:	d018      	beq.n	1a00295a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002928:	2300      	movs	r3, #0
1a00292a:	2201      	movs	r2, #1
1a00292c:	4629      	mov	r1, r5
1a00292e:	2004      	movs	r0, #4
1a002930:	f7ff ff4c 	bl	1a0027cc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002934:	4a4a      	ldr	r2, [pc, #296]	; (1a002a60 <Chip_SetupCoreClock+0x14c>)
1a002936:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002938:	f043 0301 	orr.w	r3, r3, #1
1a00293c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00293e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002942:	a901      	add	r1, sp, #4
1a002944:	4630      	mov	r0, r6
1a002946:	f7ff feb9 	bl	1a0026bc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00294a:	4b46      	ldr	r3, [pc, #280]	; (1a002a64 <Chip_SetupCoreClock+0x150>)
1a00294c:	429e      	cmp	r6, r3
1a00294e:	d916      	bls.n	1a00297e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002950:	9b01      	ldr	r3, [sp, #4]
1a002952:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002956:	d003      	beq.n	1a002960 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002958:	e7fe      	b.n	1a002958 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00295a:	f7ff fe11 	bl	1a002580 <Chip_Clock_EnableCrystal>
1a00295e:	e7e3      	b.n	1a002928 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002960:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002964:	d005      	beq.n	1a002972 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00296a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00296c:	2500      	movs	r5, #0
			direct = 1;
1a00296e:	2601      	movs	r6, #1
1a002970:	e007      	b.n	1a002982 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002972:	9b04      	ldr	r3, [sp, #16]
1a002974:	3301      	adds	r3, #1
1a002976:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002978:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00297a:	2600      	movs	r6, #0
1a00297c:	e001      	b.n	1a002982 <Chip_SetupCoreClock+0x6e>
1a00297e:	2500      	movs	r5, #0
1a002980:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002982:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002986:	9b01      	ldr	r3, [sp, #4]
1a002988:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00298c:	9a05      	ldr	r2, [sp, #20]
1a00298e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002992:	9a03      	ldr	r2, [sp, #12]
1a002994:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002998:	9a04      	ldr	r2, [sp, #16]
1a00299a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00299e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0029a2:	4a2f      	ldr	r2, [pc, #188]	; (1a002a60 <Chip_SetupCoreClock+0x14c>)
1a0029a4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0029a6:	4b2e      	ldr	r3, [pc, #184]	; (1a002a60 <Chip_SetupCoreClock+0x14c>)
1a0029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0029aa:	f013 0f01 	tst.w	r3, #1
1a0029ae:	d0fa      	beq.n	1a0029a6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0029b0:	2300      	movs	r3, #0
1a0029b2:	2201      	movs	r2, #1
1a0029b4:	2109      	movs	r1, #9
1a0029b6:	2004      	movs	r0, #4
1a0029b8:	f7ff ff08 	bl	1a0027cc <Chip_Clock_SetBaseClock>

	if (direct) {
1a0029bc:	b306      	cbz	r6, 1a002a00 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0029be:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0029c2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0029c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0029c6:	1e5a      	subs	r2, r3, #1
1a0029c8:	9209      	str	r2, [sp, #36]	; 0x24
1a0029ca:	2b00      	cmp	r3, #0
1a0029cc:	d1fa      	bne.n	1a0029c4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0029ce:	9b01      	ldr	r3, [sp, #4]
1a0029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0029d4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0029d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0029da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0029de:	9a05      	ldr	r2, [sp, #20]
1a0029e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0029e4:	9a03      	ldr	r2, [sp, #12]
1a0029e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0029ea:	9a04      	ldr	r2, [sp, #16]
1a0029ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0029f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0029f4:	4a1a      	ldr	r2, [pc, #104]	; (1a002a60 <Chip_SetupCoreClock+0x14c>)
1a0029f6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0029f8:	2c00      	cmp	r4, #0
1a0029fa:	d12e      	bne.n	1a002a5a <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0029fc:	b00a      	add	sp, #40	; 0x28
1a0029fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002a00:	2d00      	cmp	r5, #0
1a002a02:	d0f9      	beq.n	1a0029f8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002a04:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002a08:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002a0c:	1e5a      	subs	r2, r3, #1
1a002a0e:	9209      	str	r2, [sp, #36]	; 0x24
1a002a10:	2b00      	cmp	r3, #0
1a002a12:	d1fa      	bne.n	1a002a0a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002a14:	9b04      	ldr	r3, [sp, #16]
1a002a16:	1e5a      	subs	r2, r3, #1
1a002a18:	9204      	str	r2, [sp, #16]
1a002a1a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002a1e:	9b01      	ldr	r3, [sp, #4]
1a002a20:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002a24:	9905      	ldr	r1, [sp, #20]
1a002a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002a2a:	9903      	ldr	r1, [sp, #12]
1a002a2c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002a38:	4a09      	ldr	r2, [pc, #36]	; (1a002a60 <Chip_SetupCoreClock+0x14c>)
1a002a3a:	6453      	str	r3, [r2, #68]	; 0x44
1a002a3c:	e7dc      	b.n	1a0029f8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002a3e:	480a      	ldr	r0, [pc, #40]	; (1a002a68 <Chip_SetupCoreClock+0x154>)
1a002a40:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002a44:	78cb      	ldrb	r3, [r1, #3]
1a002a46:	788a      	ldrb	r2, [r1, #2]
1a002a48:	7849      	ldrb	r1, [r1, #1]
1a002a4a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002a4e:	f7ff febd 	bl	1a0027cc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002a52:	3401      	adds	r4, #1
1a002a54:	2c11      	cmp	r4, #17
1a002a56:	d9f2      	bls.n	1a002a3e <Chip_SetupCoreClock+0x12a>
1a002a58:	e7d0      	b.n	1a0029fc <Chip_SetupCoreClock+0xe8>
1a002a5a:	2400      	movs	r4, #0
1a002a5c:	e7fa      	b.n	1a002a54 <Chip_SetupCoreClock+0x140>
1a002a5e:	bf00      	nop
1a002a60:	40050000 	.word	0x40050000
1a002a64:	068e7780 	.word	0x068e7780
1a002a68:	1a008ac4 	.word	0x1a008ac4

1a002a6c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002a6c:	4770      	bx	lr
1a002a6e:	Address 0x000000001a002a6e is out of bounds.


1a002a70 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002a70:	4b03      	ldr	r3, [pc, #12]	; (1a002a80 <Chip_SSP_GetClockIndex+0x10>)
1a002a72:	4298      	cmp	r0, r3
1a002a74:	d001      	beq.n	1a002a7a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002a76:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002a78:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002a7a:	20a5      	movs	r0, #165	; 0xa5
1a002a7c:	4770      	bx	lr
1a002a7e:	bf00      	nop
1a002a80:	400c5000 	.word	0x400c5000

1a002a84 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002a84:	4b04      	ldr	r3, [pc, #16]	; (1a002a98 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002a86:	4298      	cmp	r0, r3
1a002a88:	d002      	beq.n	1a002a90 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002a8a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002a8e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002a90:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002a94:	4770      	bx	lr
1a002a96:	bf00      	nop
1a002a98:	400c5000 	.word	0x400c5000

1a002a9c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002a9c:	6803      	ldr	r3, [r0, #0]
1a002a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002aa2:	0209      	lsls	r1, r1, #8
1a002aa4:	b289      	uxth	r1, r1
1a002aa6:	4319      	orrs	r1, r3
1a002aa8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002aaa:	6102      	str	r2, [r0, #16]
}
1a002aac:	4770      	bx	lr

1a002aae <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002aae:	b570      	push	{r4, r5, r6, lr}
1a002ab0:	4606      	mov	r6, r0
1a002ab2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002ab4:	f7ff ffe6 	bl	1a002a84 <Chip_SSP_GetPeriphClockIndex>
1a002ab8:	f7ff ff06 	bl	1a0028c8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002abc:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002ac2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002ac4:	e000      	b.n	1a002ac8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002ac6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002ac8:	42ab      	cmp	r3, r5
1a002aca:	d90b      	bls.n	1a002ae4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002acc:	1c4c      	adds	r4, r1, #1
1a002ace:	fb02 f304 	mul.w	r3, r2, r4
1a002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002ad6:	429d      	cmp	r5, r3
1a002ad8:	d2f6      	bcs.n	1a002ac8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002ada:	2cff      	cmp	r4, #255	; 0xff
1a002adc:	d9f3      	bls.n	1a002ac6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002ade:	3202      	adds	r2, #2
				cr0_div = 0;
1a002ae0:	2100      	movs	r1, #0
1a002ae2:	e7f1      	b.n	1a002ac8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002ae4:	4630      	mov	r0, r6
1a002ae6:	f7ff ffd9 	bl	1a002a9c <Chip_SSP_SetClockRate>
}
1a002aea:	bd70      	pop	{r4, r5, r6, pc}

1a002aec <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002aec:	b510      	push	{r4, lr}
1a002aee:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002af0:	f7ff ffbe 	bl	1a002a70 <Chip_SSP_GetClockIndex>
1a002af4:	f7ff fece 	bl	1a002894 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002af8:	4620      	mov	r0, r4
1a002afa:	f7ff ffc3 	bl	1a002a84 <Chip_SSP_GetPeriphClockIndex>
1a002afe:	f7ff fec9 	bl	1a002894 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002b02:	6863      	ldr	r3, [r4, #4]
1a002b04:	f023 0304 	bic.w	r3, r3, #4
1a002b08:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002b0a:	6823      	ldr	r3, [r4, #0]
1a002b0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002b10:	f043 0307 	orr.w	r3, r3, #7
1a002b14:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002b16:	4902      	ldr	r1, [pc, #8]	; (1a002b20 <Chip_SSP_Init+0x34>)
1a002b18:	4620      	mov	r0, r4
1a002b1a:	f7ff ffc8 	bl	1a002aae <Chip_SSP_SetBitRate>
}
1a002b1e:	bd10      	pop	{r4, pc}
1a002b20:	000186a0 	.word	0x000186a0

1a002b24 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002b24:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002b26:	4a0b      	ldr	r2, [pc, #44]	; (1a002b54 <SystemInit+0x30>)
1a002b28:	4b0b      	ldr	r3, [pc, #44]	; (1a002b58 <SystemInit+0x34>)
1a002b2a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002b2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002b30:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002b32:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002b36:	2b20      	cmp	r3, #32
1a002b38:	d004      	beq.n	1a002b44 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a002b3a:	f7ff fac5 	bl	1a0020c8 <Board_SystemInit>
   Board_Init();
1a002b3e:	f7ff fa4b 	bl	1a001fd8 <Board_Init>
#endif
}
1a002b42:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002b44:	4a04      	ldr	r2, [pc, #16]	; (1a002b58 <SystemInit+0x34>)
1a002b46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002b4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002b4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002b52:	e7f2      	b.n	1a002b3a <SystemInit+0x16>
1a002b54:	1a000000 	.word	0x1a000000
1a002b58:	e000ed00 	.word	0xe000ed00

1a002b5c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002b5c:	4b04      	ldr	r3, [pc, #16]	; (1a002b70 <cyclesCounterInit+0x14>)
1a002b5e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002b60:	4a04      	ldr	r2, [pc, #16]	; (1a002b74 <cyclesCounterInit+0x18>)
1a002b62:	6813      	ldr	r3, [r2, #0]
1a002b64:	f043 0301 	orr.w	r3, r3, #1
1a002b68:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002b6a:	2001      	movs	r0, #1
1a002b6c:	4770      	bx	lr
1a002b6e:	bf00      	nop
1a002b70:	1000003c 	.word	0x1000003c
1a002b74:	e0001000 	.word	0xe0001000

1a002b78 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002b78:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002b7a:	4d0b      	ldr	r5, [pc, #44]	; (1a002ba8 <gpioObtainPinInit+0x30>)
1a002b7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002b80:	182c      	adds	r4, r5, r0
1a002b82:	5628      	ldrsb	r0, [r5, r0]
1a002b84:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002b86:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002b8a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002b8c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002b90:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002b92:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002b96:	9b02      	ldr	r3, [sp, #8]
1a002b98:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002b9a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002b9e:	9b03      	ldr	r3, [sp, #12]
1a002ba0:	701a      	strb	r2, [r3, #0]
}
1a002ba2:	bc30      	pop	{r4, r5}
1a002ba4:	4770      	bx	lr
1a002ba6:	bf00      	nop
1a002ba8:	1a008b0c 	.word	0x1a008b0c

1a002bac <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002bac:	f110 0f02 	cmn.w	r0, #2
1a002bb0:	f000 80c7 	beq.w	1a002d42 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002bb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002bb8:	f000 80c5 	beq.w	1a002d46 <gpioInit+0x19a>
{
1a002bbc:	b570      	push	{r4, r5, r6, lr}
1a002bbe:	b084      	sub	sp, #16
1a002bc0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002bc2:	2300      	movs	r3, #0
1a002bc4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002bc8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002bcc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002bd0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002bd4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002bd8:	f10d 030b 	add.w	r3, sp, #11
1a002bdc:	9301      	str	r3, [sp, #4]
1a002bde:	ab03      	add	r3, sp, #12
1a002be0:	9300      	str	r3, [sp, #0]
1a002be2:	f10d 030d 	add.w	r3, sp, #13
1a002be6:	f10d 020e 	add.w	r2, sp, #14
1a002bea:	f10d 010f 	add.w	r1, sp, #15
1a002bee:	f7ff ffc3 	bl	1a002b78 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002bf2:	2c05      	cmp	r4, #5
1a002bf4:	f200 80a9 	bhi.w	1a002d4a <gpioInit+0x19e>
1a002bf8:	e8df f004 	tbb	[pc, r4]
1a002bfc:	45278109 	.word	0x45278109
1a002c00:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002c02:	4853      	ldr	r0, [pc, #332]	; (1a002d50 <gpioInit+0x1a4>)
1a002c04:	f7ff ff32 	bl	1a002a6c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002c08:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a002c0a:	b004      	add	sp, #16
1a002c0c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002c0e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c12:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c16:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002c1a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002c1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c22:	494c      	ldr	r1, [pc, #304]	; (1a002d54 <gpioInit+0x1a8>)
1a002c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002c28:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c2c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c30:	2001      	movs	r0, #1
1a002c32:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002c36:	4c46      	ldr	r4, [pc, #280]	; (1a002d50 <gpioInit+0x1a4>)
1a002c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002c3c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002c40:	ea22 0201 	bic.w	r2, r2, r1
1a002c44:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002c48:	e7df      	b.n	1a002c0a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002c4a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c52:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002c56:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002c5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c5e:	493d      	ldr	r1, [pc, #244]	; (1a002d54 <gpioInit+0x1a8>)
1a002c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002c64:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002c68:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002c6c:	2001      	movs	r0, #1
1a002c6e:	fa00 f102 	lsl.w	r1, r0, r2
1a002c72:	4c37      	ldr	r4, [pc, #220]	; (1a002d50 <gpioInit+0x1a4>)
1a002c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002c78:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002c7c:	ea22 0201 	bic.w	r2, r2, r1
1a002c80:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002c84:	e7c1      	b.n	1a002c0a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002c86:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002c8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002c8e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002c92:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002c96:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002c9a:	492e      	ldr	r1, [pc, #184]	; (1a002d54 <gpioInit+0x1a8>)
1a002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002ca0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002ca4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002ca8:	2001      	movs	r0, #1
1a002caa:	fa00 f102 	lsl.w	r1, r0, r2
1a002cae:	4c28      	ldr	r4, [pc, #160]	; (1a002d50 <gpioInit+0x1a4>)
1a002cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002cb4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002cb8:	ea22 0201 	bic.w	r2, r2, r1
1a002cbc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002cc0:	e7a3      	b.n	1a002c0a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002cc2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002cc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002cca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002cce:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002cd2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002cd6:	491f      	ldr	r1, [pc, #124]	; (1a002d54 <gpioInit+0x1a8>)
1a002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002cdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002ce0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002ce4:	2001      	movs	r0, #1
1a002ce6:	fa00 f102 	lsl.w	r1, r0, r2
1a002cea:	4c19      	ldr	r4, [pc, #100]	; (1a002d50 <gpioInit+0x1a4>)
1a002cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002cf0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002cf4:	ea22 0201 	bic.w	r2, r2, r1
1a002cf8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002cfc:	e785      	b.n	1a002c0a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002cfe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002d02:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002d06:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002d0a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002d0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002d12:	4910      	ldr	r1, [pc, #64]	; (1a002d54 <gpioInit+0x1a8>)
1a002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002d18:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002d1c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002d20:	2001      	movs	r0, #1
1a002d22:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002d26:	4b0a      	ldr	r3, [pc, #40]	; (1a002d50 <gpioInit+0x1a4>)
1a002d28:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002d2c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002d30:	4331      	orrs	r1, r6
1a002d32:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002d36:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a002d38:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002d3c:	2100      	movs	r1, #0
1a002d3e:	5499      	strb	r1, [r3, r2]
1a002d40:	e763      	b.n	1a002c0a <gpioInit+0x5e>
	  return FALSE;
1a002d42:	2000      	movs	r0, #0
1a002d44:	4770      	bx	lr
	  return FALSE;
1a002d46:	2000      	movs	r0, #0
}
1a002d48:	4770      	bx	lr
      ret_val = 0;
1a002d4a:	2000      	movs	r0, #0
1a002d4c:	e75d      	b.n	1a002c0a <gpioInit+0x5e>
1a002d4e:	bf00      	nop
1a002d50:	400f4000 	.word	0x400f4000
1a002d54:	40086000 	.word	0x40086000

1a002d58 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002d58:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002d5a:	4b04      	ldr	r3, [pc, #16]	; (1a002d6c <USB0_IRQHandler+0x14>)
1a002d5c:	681b      	ldr	r3, [r3, #0]
1a002d5e:	681b      	ldr	r3, [r3, #0]
1a002d60:	68db      	ldr	r3, [r3, #12]
1a002d62:	4a03      	ldr	r2, [pc, #12]	; (1a002d70 <USB0_IRQHandler+0x18>)
1a002d64:	6810      	ldr	r0, [r2, #0]
1a002d66:	4798      	blx	r3
}
1a002d68:	bd08      	pop	{r3, pc}
1a002d6a:	bf00      	nop
1a002d6c:	100014b0 	.word	0x100014b0
1a002d70:	10001434 	.word	0x10001434

1a002d74 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002d74:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002d76:	f7ff fafd 	bl	1a002374 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002d7a:	4b18      	ldr	r3, [pc, #96]	; (1a002ddc <boardInit+0x68>)
1a002d7c:	6818      	ldr	r0, [r3, #0]
1a002d7e:	f7ff feed 	bl	1a002b5c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a002d82:	2105      	movs	r1, #5
1a002d84:	2000      	movs	r0, #0
1a002d86:	f7ff ff11 	bl	1a002bac <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a002d8a:	2100      	movs	r1, #0
1a002d8c:	2024      	movs	r0, #36	; 0x24
1a002d8e:	f7ff ff0d 	bl	1a002bac <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a002d92:	2100      	movs	r1, #0
1a002d94:	2025      	movs	r0, #37	; 0x25
1a002d96:	f7ff ff09 	bl	1a002bac <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a002d9a:	2100      	movs	r1, #0
1a002d9c:	2026      	movs	r0, #38	; 0x26
1a002d9e:	f7ff ff05 	bl	1a002bac <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a002da2:	2100      	movs	r1, #0
1a002da4:	2027      	movs	r0, #39	; 0x27
1a002da6:	f7ff ff01 	bl	1a002bac <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002daa:	2101      	movs	r1, #1
1a002dac:	2028      	movs	r0, #40	; 0x28
1a002dae:	f7ff fefd 	bl	1a002bac <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a002db2:	2101      	movs	r1, #1
1a002db4:	2029      	movs	r0, #41	; 0x29
1a002db6:	f7ff fef9 	bl	1a002bac <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002dba:	2101      	movs	r1, #1
1a002dbc:	202a      	movs	r0, #42	; 0x2a
1a002dbe:	f7ff fef5 	bl	1a002bac <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a002dc2:	2101      	movs	r1, #1
1a002dc4:	202b      	movs	r0, #43	; 0x2b
1a002dc6:	f7ff fef1 	bl	1a002bac <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002dca:	2101      	movs	r1, #1
1a002dcc:	202c      	movs	r0, #44	; 0x2c
1a002dce:	f7ff feed 	bl	1a002bac <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a002dd2:	2101      	movs	r1, #1
1a002dd4:	202d      	movs	r0, #45	; 0x2d
1a002dd6:	f7ff fee9 	bl	1a002bac <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a002dda:	bd08      	pop	{r3, pc}
1a002ddc:	100014ac 	.word	0x100014ac

1a002de0 <__aeabi_drsub>:
1a002de0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002de4:	e002      	b.n	1a002dec <__adddf3>
1a002de6:	bf00      	nop

1a002de8 <__aeabi_dsub>:
1a002de8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002dec <__adddf3>:
1a002dec:	b530      	push	{r4, r5, lr}
1a002dee:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a002df2:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002df6:	ea94 0f05 	teq	r4, r5
1a002dfa:	bf08      	it	eq
1a002dfc:	ea90 0f02 	teqeq	r0, r2
1a002e00:	bf1f      	itttt	ne
1a002e02:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002e06:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002e0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002e0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002e12:	f000 80e2 	beq.w	1a002fda <__adddf3+0x1ee>
1a002e16:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002e1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002e1e:	bfb8      	it	lt
1a002e20:	426d      	neglt	r5, r5
1a002e22:	dd0c      	ble.n	1a002e3e <__adddf3+0x52>
1a002e24:	442c      	add	r4, r5
1a002e26:	ea80 0202 	eor.w	r2, r0, r2
1a002e2a:	ea81 0303 	eor.w	r3, r1, r3
1a002e2e:	ea82 0000 	eor.w	r0, r2, r0
1a002e32:	ea83 0101 	eor.w	r1, r3, r1
1a002e36:	ea80 0202 	eor.w	r2, r0, r2
1a002e3a:	ea81 0303 	eor.w	r3, r1, r3
1a002e3e:	2d36      	cmp	r5, #54	; 0x36
1a002e40:	bf88      	it	hi
1a002e42:	bd30      	pophi	{r4, r5, pc}
1a002e44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002e48:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002e4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002e50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002e54:	d002      	beq.n	1a002e5c <__adddf3+0x70>
1a002e56:	4240      	negs	r0, r0
1a002e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002e5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002e60:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002e64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002e68:	d002      	beq.n	1a002e70 <__adddf3+0x84>
1a002e6a:	4252      	negs	r2, r2
1a002e6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002e70:	ea94 0f05 	teq	r4, r5
1a002e74:	f000 80a7 	beq.w	1a002fc6 <__adddf3+0x1da>
1a002e78:	f1a4 0401 	sub.w	r4, r4, #1
1a002e7c:	f1d5 0e20 	rsbs	lr, r5, #32
1a002e80:	db0d      	blt.n	1a002e9e <__adddf3+0xb2>
1a002e82:	fa02 fc0e 	lsl.w	ip, r2, lr
1a002e86:	fa22 f205 	lsr.w	r2, r2, r5
1a002e8a:	1880      	adds	r0, r0, r2
1a002e8c:	f141 0100 	adc.w	r1, r1, #0
1a002e90:	fa03 f20e 	lsl.w	r2, r3, lr
1a002e94:	1880      	adds	r0, r0, r2
1a002e96:	fa43 f305 	asr.w	r3, r3, r5
1a002e9a:	4159      	adcs	r1, r3
1a002e9c:	e00e      	b.n	1a002ebc <__adddf3+0xd0>
1a002e9e:	f1a5 0520 	sub.w	r5, r5, #32
1a002ea2:	f10e 0e20 	add.w	lr, lr, #32
1a002ea6:	2a01      	cmp	r2, #1
1a002ea8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002eac:	bf28      	it	cs
1a002eae:	f04c 0c02 	orrcs.w	ip, ip, #2
1a002eb2:	fa43 f305 	asr.w	r3, r3, r5
1a002eb6:	18c0      	adds	r0, r0, r3
1a002eb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002ec0:	d507      	bpl.n	1a002ed2 <__adddf3+0xe6>
1a002ec2:	f04f 0e00 	mov.w	lr, #0
1a002ec6:	f1dc 0c00 	rsbs	ip, ip, #0
1a002eca:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002ece:	eb6e 0101 	sbc.w	r1, lr, r1
1a002ed2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002ed6:	d31b      	bcc.n	1a002f10 <__adddf3+0x124>
1a002ed8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002edc:	d30c      	bcc.n	1a002ef8 <__adddf3+0x10c>
1a002ede:	0849      	lsrs	r1, r1, #1
1a002ee0:	ea5f 0030 	movs.w	r0, r0, rrx
1a002ee4:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002ee8:	f104 0401 	add.w	r4, r4, #1
1a002eec:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002ef0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002ef4:	f080 809a 	bcs.w	1a00302c <__adddf3+0x240>
1a002ef8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002efc:	bf08      	it	eq
1a002efe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002f02:	f150 0000 	adcs.w	r0, r0, #0
1a002f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002f0a:	ea41 0105 	orr.w	r1, r1, r5
1a002f0e:	bd30      	pop	{r4, r5, pc}
1a002f10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002f14:	4140      	adcs	r0, r0
1a002f16:	eb41 0101 	adc.w	r1, r1, r1
1a002f1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002f1e:	f1a4 0401 	sub.w	r4, r4, #1
1a002f22:	d1e9      	bne.n	1a002ef8 <__adddf3+0x10c>
1a002f24:	f091 0f00 	teq	r1, #0
1a002f28:	bf04      	itt	eq
1a002f2a:	4601      	moveq	r1, r0
1a002f2c:	2000      	moveq	r0, #0
1a002f2e:	fab1 f381 	clz	r3, r1
1a002f32:	bf08      	it	eq
1a002f34:	3320      	addeq	r3, #32
1a002f36:	f1a3 030b 	sub.w	r3, r3, #11
1a002f3a:	f1b3 0220 	subs.w	r2, r3, #32
1a002f3e:	da0c      	bge.n	1a002f5a <__adddf3+0x16e>
1a002f40:	320c      	adds	r2, #12
1a002f42:	dd08      	ble.n	1a002f56 <__adddf3+0x16a>
1a002f44:	f102 0c14 	add.w	ip, r2, #20
1a002f48:	f1c2 020c 	rsb	r2, r2, #12
1a002f4c:	fa01 f00c 	lsl.w	r0, r1, ip
1a002f50:	fa21 f102 	lsr.w	r1, r1, r2
1a002f54:	e00c      	b.n	1a002f70 <__adddf3+0x184>
1a002f56:	f102 0214 	add.w	r2, r2, #20
1a002f5a:	bfd8      	it	le
1a002f5c:	f1c2 0c20 	rsble	ip, r2, #32
1a002f60:	fa01 f102 	lsl.w	r1, r1, r2
1a002f64:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002f68:	bfdc      	itt	le
1a002f6a:	ea41 010c 	orrle.w	r1, r1, ip
1a002f6e:	4090      	lslle	r0, r2
1a002f70:	1ae4      	subs	r4, r4, r3
1a002f72:	bfa2      	ittt	ge
1a002f74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002f78:	4329      	orrge	r1, r5
1a002f7a:	bd30      	popge	{r4, r5, pc}
1a002f7c:	ea6f 0404 	mvn.w	r4, r4
1a002f80:	3c1f      	subs	r4, #31
1a002f82:	da1c      	bge.n	1a002fbe <__adddf3+0x1d2>
1a002f84:	340c      	adds	r4, #12
1a002f86:	dc0e      	bgt.n	1a002fa6 <__adddf3+0x1ba>
1a002f88:	f104 0414 	add.w	r4, r4, #20
1a002f8c:	f1c4 0220 	rsb	r2, r4, #32
1a002f90:	fa20 f004 	lsr.w	r0, r0, r4
1a002f94:	fa01 f302 	lsl.w	r3, r1, r2
1a002f98:	ea40 0003 	orr.w	r0, r0, r3
1a002f9c:	fa21 f304 	lsr.w	r3, r1, r4
1a002fa0:	ea45 0103 	orr.w	r1, r5, r3
1a002fa4:	bd30      	pop	{r4, r5, pc}
1a002fa6:	f1c4 040c 	rsb	r4, r4, #12
1a002faa:	f1c4 0220 	rsb	r2, r4, #32
1a002fae:	fa20 f002 	lsr.w	r0, r0, r2
1a002fb2:	fa01 f304 	lsl.w	r3, r1, r4
1a002fb6:	ea40 0003 	orr.w	r0, r0, r3
1a002fba:	4629      	mov	r1, r5
1a002fbc:	bd30      	pop	{r4, r5, pc}
1a002fbe:	fa21 f004 	lsr.w	r0, r1, r4
1a002fc2:	4629      	mov	r1, r5
1a002fc4:	bd30      	pop	{r4, r5, pc}
1a002fc6:	f094 0f00 	teq	r4, #0
1a002fca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002fce:	bf06      	itte	eq
1a002fd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002fd4:	3401      	addeq	r4, #1
1a002fd6:	3d01      	subne	r5, #1
1a002fd8:	e74e      	b.n	1a002e78 <__adddf3+0x8c>
1a002fda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002fde:	bf18      	it	ne
1a002fe0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002fe4:	d029      	beq.n	1a00303a <__adddf3+0x24e>
1a002fe6:	ea94 0f05 	teq	r4, r5
1a002fea:	bf08      	it	eq
1a002fec:	ea90 0f02 	teqeq	r0, r2
1a002ff0:	d005      	beq.n	1a002ffe <__adddf3+0x212>
1a002ff2:	ea54 0c00 	orrs.w	ip, r4, r0
1a002ff6:	bf04      	itt	eq
1a002ff8:	4619      	moveq	r1, r3
1a002ffa:	4610      	moveq	r0, r2
1a002ffc:	bd30      	pop	{r4, r5, pc}
1a002ffe:	ea91 0f03 	teq	r1, r3
1a003002:	bf1e      	ittt	ne
1a003004:	2100      	movne	r1, #0
1a003006:	2000      	movne	r0, #0
1a003008:	bd30      	popne	{r4, r5, pc}
1a00300a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00300e:	d105      	bne.n	1a00301c <__adddf3+0x230>
1a003010:	0040      	lsls	r0, r0, #1
1a003012:	4149      	adcs	r1, r1
1a003014:	bf28      	it	cs
1a003016:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00301a:	bd30      	pop	{r4, r5, pc}
1a00301c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a003020:	bf3c      	itt	cc
1a003022:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a003026:	bd30      	popcc	{r4, r5, pc}
1a003028:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00302c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a003030:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003034:	f04f 0000 	mov.w	r0, #0
1a003038:	bd30      	pop	{r4, r5, pc}
1a00303a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00303e:	bf1a      	itte	ne
1a003040:	4619      	movne	r1, r3
1a003042:	4610      	movne	r0, r2
1a003044:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a003048:	bf1c      	itt	ne
1a00304a:	460b      	movne	r3, r1
1a00304c:	4602      	movne	r2, r0
1a00304e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003052:	bf06      	itte	eq
1a003054:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a003058:	ea91 0f03 	teqeq	r1, r3
1a00305c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a003060:	bd30      	pop	{r4, r5, pc}
1a003062:	bf00      	nop

1a003064 <__aeabi_ui2d>:
1a003064:	f090 0f00 	teq	r0, #0
1a003068:	bf04      	itt	eq
1a00306a:	2100      	moveq	r1, #0
1a00306c:	4770      	bxeq	lr
1a00306e:	b530      	push	{r4, r5, lr}
1a003070:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003074:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003078:	f04f 0500 	mov.w	r5, #0
1a00307c:	f04f 0100 	mov.w	r1, #0
1a003080:	e750      	b.n	1a002f24 <__adddf3+0x138>
1a003082:	bf00      	nop

1a003084 <__aeabi_i2d>:
1a003084:	f090 0f00 	teq	r0, #0
1a003088:	bf04      	itt	eq
1a00308a:	2100      	moveq	r1, #0
1a00308c:	4770      	bxeq	lr
1a00308e:	b530      	push	{r4, r5, lr}
1a003090:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003094:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003098:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a00309c:	bf48      	it	mi
1a00309e:	4240      	negmi	r0, r0
1a0030a0:	f04f 0100 	mov.w	r1, #0
1a0030a4:	e73e      	b.n	1a002f24 <__adddf3+0x138>
1a0030a6:	bf00      	nop

1a0030a8 <__aeabi_f2d>:
1a0030a8:	0042      	lsls	r2, r0, #1
1a0030aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0030ae:	ea4f 0131 	mov.w	r1, r1, rrx
1a0030b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0030b6:	bf1f      	itttt	ne
1a0030b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0030bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0030c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0030c4:	4770      	bxne	lr
1a0030c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0030ca:	bf08      	it	eq
1a0030cc:	4770      	bxeq	lr
1a0030ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0030d2:	bf04      	itt	eq
1a0030d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0030d8:	4770      	bxeq	lr
1a0030da:	b530      	push	{r4, r5, lr}
1a0030dc:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0030e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0030e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0030e8:	e71c      	b.n	1a002f24 <__adddf3+0x138>
1a0030ea:	bf00      	nop

1a0030ec <__aeabi_ul2d>:
1a0030ec:	ea50 0201 	orrs.w	r2, r0, r1
1a0030f0:	bf08      	it	eq
1a0030f2:	4770      	bxeq	lr
1a0030f4:	b530      	push	{r4, r5, lr}
1a0030f6:	f04f 0500 	mov.w	r5, #0
1a0030fa:	e00a      	b.n	1a003112 <__aeabi_l2d+0x16>

1a0030fc <__aeabi_l2d>:
1a0030fc:	ea50 0201 	orrs.w	r2, r0, r1
1a003100:	bf08      	it	eq
1a003102:	4770      	bxeq	lr
1a003104:	b530      	push	{r4, r5, lr}
1a003106:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00310a:	d502      	bpl.n	1a003112 <__aeabi_l2d+0x16>
1a00310c:	4240      	negs	r0, r0
1a00310e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003112:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003116:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00311a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00311e:	f43f aed8 	beq.w	1a002ed2 <__adddf3+0xe6>
1a003122:	f04f 0203 	mov.w	r2, #3
1a003126:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00312a:	bf18      	it	ne
1a00312c:	3203      	addne	r2, #3
1a00312e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003132:	bf18      	it	ne
1a003134:	3203      	addne	r2, #3
1a003136:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00313a:	f1c2 0320 	rsb	r3, r2, #32
1a00313e:	fa00 fc03 	lsl.w	ip, r0, r3
1a003142:	fa20 f002 	lsr.w	r0, r0, r2
1a003146:	fa01 fe03 	lsl.w	lr, r1, r3
1a00314a:	ea40 000e 	orr.w	r0, r0, lr
1a00314e:	fa21 f102 	lsr.w	r1, r1, r2
1a003152:	4414      	add	r4, r2
1a003154:	e6bd      	b.n	1a002ed2 <__adddf3+0xe6>
1a003156:	bf00      	nop

1a003158 <__aeabi_dmul>:
1a003158:	b570      	push	{r4, r5, r6, lr}
1a00315a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00315e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003162:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003166:	bf1d      	ittte	ne
1a003168:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00316c:	ea94 0f0c 	teqne	r4, ip
1a003170:	ea95 0f0c 	teqne	r5, ip
1a003174:	f000 f8de 	bleq	1a003334 <__aeabi_dmul+0x1dc>
1a003178:	442c      	add	r4, r5
1a00317a:	ea81 0603 	eor.w	r6, r1, r3
1a00317e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a003182:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a003186:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a00318a:	bf18      	it	ne
1a00318c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a003190:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a003198:	d038      	beq.n	1a00320c <__aeabi_dmul+0xb4>
1a00319a:	fba0 ce02 	umull	ip, lr, r0, r2
1a00319e:	f04f 0500 	mov.w	r5, #0
1a0031a2:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0031a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0031aa:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0031ae:	f04f 0600 	mov.w	r6, #0
1a0031b2:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0031b6:	f09c 0f00 	teq	ip, #0
1a0031ba:	bf18      	it	ne
1a0031bc:	f04e 0e01 	orrne.w	lr, lr, #1
1a0031c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0031c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0031c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0031cc:	d204      	bcs.n	1a0031d8 <__aeabi_dmul+0x80>
1a0031ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0031d2:	416d      	adcs	r5, r5
1a0031d4:	eb46 0606 	adc.w	r6, r6, r6
1a0031d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0031dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0031e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0031e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0031e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0031ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0031f0:	bf88      	it	hi
1a0031f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0031f6:	d81e      	bhi.n	1a003236 <__aeabi_dmul+0xde>
1a0031f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0031fc:	bf08      	it	eq
1a0031fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a003202:	f150 0000 	adcs.w	r0, r0, #0
1a003206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00320a:	bd70      	pop	{r4, r5, r6, pc}
1a00320c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a003210:	ea46 0101 	orr.w	r1, r6, r1
1a003214:	ea40 0002 	orr.w	r0, r0, r2
1a003218:	ea81 0103 	eor.w	r1, r1, r3
1a00321c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a003220:	bfc2      	ittt	gt
1a003222:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003226:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00322a:	bd70      	popgt	{r4, r5, r6, pc}
1a00322c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003230:	f04f 0e00 	mov.w	lr, #0
1a003234:	3c01      	subs	r4, #1
1a003236:	f300 80ab 	bgt.w	1a003390 <__aeabi_dmul+0x238>
1a00323a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00323e:	bfde      	ittt	le
1a003240:	2000      	movle	r0, #0
1a003242:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a003246:	bd70      	pople	{r4, r5, r6, pc}
1a003248:	f1c4 0400 	rsb	r4, r4, #0
1a00324c:	3c20      	subs	r4, #32
1a00324e:	da35      	bge.n	1a0032bc <__aeabi_dmul+0x164>
1a003250:	340c      	adds	r4, #12
1a003252:	dc1b      	bgt.n	1a00328c <__aeabi_dmul+0x134>
1a003254:	f104 0414 	add.w	r4, r4, #20
1a003258:	f1c4 0520 	rsb	r5, r4, #32
1a00325c:	fa00 f305 	lsl.w	r3, r0, r5
1a003260:	fa20 f004 	lsr.w	r0, r0, r4
1a003264:	fa01 f205 	lsl.w	r2, r1, r5
1a003268:	ea40 0002 	orr.w	r0, r0, r2
1a00326c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a003270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003274:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003278:	fa21 f604 	lsr.w	r6, r1, r4
1a00327c:	eb42 0106 	adc.w	r1, r2, r6
1a003280:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003284:	bf08      	it	eq
1a003286:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00328a:	bd70      	pop	{r4, r5, r6, pc}
1a00328c:	f1c4 040c 	rsb	r4, r4, #12
1a003290:	f1c4 0520 	rsb	r5, r4, #32
1a003294:	fa00 f304 	lsl.w	r3, r0, r4
1a003298:	fa20 f005 	lsr.w	r0, r0, r5
1a00329c:	fa01 f204 	lsl.w	r2, r1, r4
1a0032a0:	ea40 0002 	orr.w	r0, r0, r2
1a0032a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0032a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0032ac:	f141 0100 	adc.w	r1, r1, #0
1a0032b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0032b4:	bf08      	it	eq
1a0032b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0032ba:	bd70      	pop	{r4, r5, r6, pc}
1a0032bc:	f1c4 0520 	rsb	r5, r4, #32
1a0032c0:	fa00 f205 	lsl.w	r2, r0, r5
1a0032c4:	ea4e 0e02 	orr.w	lr, lr, r2
1a0032c8:	fa20 f304 	lsr.w	r3, r0, r4
1a0032cc:	fa01 f205 	lsl.w	r2, r1, r5
1a0032d0:	ea43 0302 	orr.w	r3, r3, r2
1a0032d4:	fa21 f004 	lsr.w	r0, r1, r4
1a0032d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0032dc:	fa21 f204 	lsr.w	r2, r1, r4
1a0032e0:	ea20 0002 	bic.w	r0, r0, r2
1a0032e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0032e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0032ec:	bf08      	it	eq
1a0032ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0032f2:	bd70      	pop	{r4, r5, r6, pc}
1a0032f4:	f094 0f00 	teq	r4, #0
1a0032f8:	d10f      	bne.n	1a00331a <__aeabi_dmul+0x1c2>
1a0032fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0032fe:	0040      	lsls	r0, r0, #1
1a003300:	eb41 0101 	adc.w	r1, r1, r1
1a003304:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003308:	bf08      	it	eq
1a00330a:	3c01      	subeq	r4, #1
1a00330c:	d0f7      	beq.n	1a0032fe <__aeabi_dmul+0x1a6>
1a00330e:	ea41 0106 	orr.w	r1, r1, r6
1a003312:	f095 0f00 	teq	r5, #0
1a003316:	bf18      	it	ne
1a003318:	4770      	bxne	lr
1a00331a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00331e:	0052      	lsls	r2, r2, #1
1a003320:	eb43 0303 	adc.w	r3, r3, r3
1a003324:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003328:	bf08      	it	eq
1a00332a:	3d01      	subeq	r5, #1
1a00332c:	d0f7      	beq.n	1a00331e <__aeabi_dmul+0x1c6>
1a00332e:	ea43 0306 	orr.w	r3, r3, r6
1a003332:	4770      	bx	lr
1a003334:	ea94 0f0c 	teq	r4, ip
1a003338:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00333c:	bf18      	it	ne
1a00333e:	ea95 0f0c 	teqne	r5, ip
1a003342:	d00c      	beq.n	1a00335e <__aeabi_dmul+0x206>
1a003344:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003348:	bf18      	it	ne
1a00334a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00334e:	d1d1      	bne.n	1a0032f4 <__aeabi_dmul+0x19c>
1a003350:	ea81 0103 	eor.w	r1, r1, r3
1a003354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003358:	f04f 0000 	mov.w	r0, #0
1a00335c:	bd70      	pop	{r4, r5, r6, pc}
1a00335e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003362:	bf06      	itte	eq
1a003364:	4610      	moveq	r0, r2
1a003366:	4619      	moveq	r1, r3
1a003368:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00336c:	d019      	beq.n	1a0033a2 <__aeabi_dmul+0x24a>
1a00336e:	ea94 0f0c 	teq	r4, ip
1a003372:	d102      	bne.n	1a00337a <__aeabi_dmul+0x222>
1a003374:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a003378:	d113      	bne.n	1a0033a2 <__aeabi_dmul+0x24a>
1a00337a:	ea95 0f0c 	teq	r5, ip
1a00337e:	d105      	bne.n	1a00338c <__aeabi_dmul+0x234>
1a003380:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a003384:	bf1c      	itt	ne
1a003386:	4610      	movne	r0, r2
1a003388:	4619      	movne	r1, r3
1a00338a:	d10a      	bne.n	1a0033a2 <__aeabi_dmul+0x24a>
1a00338c:	ea81 0103 	eor.w	r1, r1, r3
1a003390:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003394:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00339c:	f04f 0000 	mov.w	r0, #0
1a0033a0:	bd70      	pop	{r4, r5, r6, pc}
1a0033a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0033a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0033aa:	bd70      	pop	{r4, r5, r6, pc}

1a0033ac <__aeabi_ddiv>:
1a0033ac:	b570      	push	{r4, r5, r6, lr}
1a0033ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0033b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0033b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0033ba:	bf1d      	ittte	ne
1a0033bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0033c0:	ea94 0f0c 	teqne	r4, ip
1a0033c4:	ea95 0f0c 	teqne	r5, ip
1a0033c8:	f000 f8a7 	bleq	1a00351a <__aeabi_ddiv+0x16e>
1a0033cc:	eba4 0405 	sub.w	r4, r4, r5
1a0033d0:	ea81 0e03 	eor.w	lr, r1, r3
1a0033d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0033d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0033dc:	f000 8088 	beq.w	1a0034f0 <__aeabi_ddiv+0x144>
1a0033e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0033e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0033e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0033ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0033f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0033f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0033f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0033fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a003400:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003404:	429d      	cmp	r5, r3
1a003406:	bf08      	it	eq
1a003408:	4296      	cmpeq	r6, r2
1a00340a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00340e:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a003412:	d202      	bcs.n	1a00341a <__aeabi_ddiv+0x6e>
1a003414:	085b      	lsrs	r3, r3, #1
1a003416:	ea4f 0232 	mov.w	r2, r2, rrx
1a00341a:	1ab6      	subs	r6, r6, r2
1a00341c:	eb65 0503 	sbc.w	r5, r5, r3
1a003420:	085b      	lsrs	r3, r3, #1
1a003422:	ea4f 0232 	mov.w	r2, r2, rrx
1a003426:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00342a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00342e:	ebb6 0e02 	subs.w	lr, r6, r2
1a003432:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003436:	bf22      	ittt	cs
1a003438:	1ab6      	subcs	r6, r6, r2
1a00343a:	4675      	movcs	r5, lr
1a00343c:	ea40 000c 	orrcs.w	r0, r0, ip
1a003440:	085b      	lsrs	r3, r3, #1
1a003442:	ea4f 0232 	mov.w	r2, r2, rrx
1a003446:	ebb6 0e02 	subs.w	lr, r6, r2
1a00344a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00344e:	bf22      	ittt	cs
1a003450:	1ab6      	subcs	r6, r6, r2
1a003452:	4675      	movcs	r5, lr
1a003454:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003458:	085b      	lsrs	r3, r3, #1
1a00345a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00345e:	ebb6 0e02 	subs.w	lr, r6, r2
1a003462:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003466:	bf22      	ittt	cs
1a003468:	1ab6      	subcs	r6, r6, r2
1a00346a:	4675      	movcs	r5, lr
1a00346c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003470:	085b      	lsrs	r3, r3, #1
1a003472:	ea4f 0232 	mov.w	r2, r2, rrx
1a003476:	ebb6 0e02 	subs.w	lr, r6, r2
1a00347a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00347e:	bf22      	ittt	cs
1a003480:	1ab6      	subcs	r6, r6, r2
1a003482:	4675      	movcs	r5, lr
1a003484:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a003488:	ea55 0e06 	orrs.w	lr, r5, r6
1a00348c:	d018      	beq.n	1a0034c0 <__aeabi_ddiv+0x114>
1a00348e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a003492:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a003496:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a00349a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00349e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0034a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0034a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0034aa:	d1c0      	bne.n	1a00342e <__aeabi_ddiv+0x82>
1a0034ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0034b0:	d10b      	bne.n	1a0034ca <__aeabi_ddiv+0x11e>
1a0034b2:	ea41 0100 	orr.w	r1, r1, r0
1a0034b6:	f04f 0000 	mov.w	r0, #0
1a0034ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0034be:	e7b6      	b.n	1a00342e <__aeabi_ddiv+0x82>
1a0034c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0034c4:	bf04      	itt	eq
1a0034c6:	4301      	orreq	r1, r0
1a0034c8:	2000      	moveq	r0, #0
1a0034ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0034ce:	bf88      	it	hi
1a0034d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0034d4:	f63f aeaf 	bhi.w	1a003236 <__aeabi_dmul+0xde>
1a0034d8:	ebb5 0c03 	subs.w	ip, r5, r3
1a0034dc:	bf04      	itt	eq
1a0034de:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0034e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0034e6:	f150 0000 	adcs.w	r0, r0, #0
1a0034ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0034ee:	bd70      	pop	{r4, r5, r6, pc}
1a0034f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0034f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0034f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0034fc:	bfc2      	ittt	gt
1a0034fe:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003502:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003506:	bd70      	popgt	{r4, r5, r6, pc}
1a003508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00350c:	f04f 0e00 	mov.w	lr, #0
1a003510:	3c01      	subs	r4, #1
1a003512:	e690      	b.n	1a003236 <__aeabi_dmul+0xde>
1a003514:	ea45 0e06 	orr.w	lr, r5, r6
1a003518:	e68d      	b.n	1a003236 <__aeabi_dmul+0xde>
1a00351a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00351e:	ea94 0f0c 	teq	r4, ip
1a003522:	bf08      	it	eq
1a003524:	ea95 0f0c 	teqeq	r5, ip
1a003528:	f43f af3b 	beq.w	1a0033a2 <__aeabi_dmul+0x24a>
1a00352c:	ea94 0f0c 	teq	r4, ip
1a003530:	d10a      	bne.n	1a003548 <__aeabi_ddiv+0x19c>
1a003532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003536:	f47f af34 	bne.w	1a0033a2 <__aeabi_dmul+0x24a>
1a00353a:	ea95 0f0c 	teq	r5, ip
1a00353e:	f47f af25 	bne.w	1a00338c <__aeabi_dmul+0x234>
1a003542:	4610      	mov	r0, r2
1a003544:	4619      	mov	r1, r3
1a003546:	e72c      	b.n	1a0033a2 <__aeabi_dmul+0x24a>
1a003548:	ea95 0f0c 	teq	r5, ip
1a00354c:	d106      	bne.n	1a00355c <__aeabi_ddiv+0x1b0>
1a00354e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003552:	f43f aefd 	beq.w	1a003350 <__aeabi_dmul+0x1f8>
1a003556:	4610      	mov	r0, r2
1a003558:	4619      	mov	r1, r3
1a00355a:	e722      	b.n	1a0033a2 <__aeabi_dmul+0x24a>
1a00355c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003560:	bf18      	it	ne
1a003562:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003566:	f47f aec5 	bne.w	1a0032f4 <__aeabi_dmul+0x19c>
1a00356a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00356e:	f47f af0d 	bne.w	1a00338c <__aeabi_dmul+0x234>
1a003572:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003576:	f47f aeeb 	bne.w	1a003350 <__aeabi_dmul+0x1f8>
1a00357a:	e712      	b.n	1a0033a2 <__aeabi_dmul+0x24a>

1a00357c <__gedf2>:
1a00357c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a003580:	e006      	b.n	1a003590 <__cmpdf2+0x4>
1a003582:	bf00      	nop

1a003584 <__ledf2>:
1a003584:	f04f 0c01 	mov.w	ip, #1
1a003588:	e002      	b.n	1a003590 <__cmpdf2+0x4>
1a00358a:	bf00      	nop

1a00358c <__cmpdf2>:
1a00358c:	f04f 0c01 	mov.w	ip, #1
1a003590:	f84d cd04 	str.w	ip, [sp, #-4]!
1a003594:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00359c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0035a0:	bf18      	it	ne
1a0035a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a0035a6:	d01b      	beq.n	1a0035e0 <__cmpdf2+0x54>
1a0035a8:	b001      	add	sp, #4
1a0035aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a0035ae:	bf0c      	ite	eq
1a0035b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a0035b4:	ea91 0f03 	teqne	r1, r3
1a0035b8:	bf02      	ittt	eq
1a0035ba:	ea90 0f02 	teqeq	r0, r2
1a0035be:	2000      	moveq	r0, #0
1a0035c0:	4770      	bxeq	lr
1a0035c2:	f110 0f00 	cmn.w	r0, #0
1a0035c6:	ea91 0f03 	teq	r1, r3
1a0035ca:	bf58      	it	pl
1a0035cc:	4299      	cmppl	r1, r3
1a0035ce:	bf08      	it	eq
1a0035d0:	4290      	cmpeq	r0, r2
1a0035d2:	bf2c      	ite	cs
1a0035d4:	17d8      	asrcs	r0, r3, #31
1a0035d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a0035da:	f040 0001 	orr.w	r0, r0, #1
1a0035de:	4770      	bx	lr
1a0035e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0035e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0035e8:	d102      	bne.n	1a0035f0 <__cmpdf2+0x64>
1a0035ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a0035ee:	d107      	bne.n	1a003600 <__cmpdf2+0x74>
1a0035f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0035f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0035f8:	d1d6      	bne.n	1a0035a8 <__cmpdf2+0x1c>
1a0035fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0035fe:	d0d3      	beq.n	1a0035a8 <__cmpdf2+0x1c>
1a003600:	f85d 0b04 	ldr.w	r0, [sp], #4
1a003604:	4770      	bx	lr
1a003606:	bf00      	nop

1a003608 <__aeabi_cdrcmple>:
1a003608:	4684      	mov	ip, r0
1a00360a:	4610      	mov	r0, r2
1a00360c:	4662      	mov	r2, ip
1a00360e:	468c      	mov	ip, r1
1a003610:	4619      	mov	r1, r3
1a003612:	4663      	mov	r3, ip
1a003614:	e000      	b.n	1a003618 <__aeabi_cdcmpeq>
1a003616:	bf00      	nop

1a003618 <__aeabi_cdcmpeq>:
1a003618:	b501      	push	{r0, lr}
1a00361a:	f7ff ffb7 	bl	1a00358c <__cmpdf2>
1a00361e:	2800      	cmp	r0, #0
1a003620:	bf48      	it	mi
1a003622:	f110 0f00 	cmnmi.w	r0, #0
1a003626:	bd01      	pop	{r0, pc}

1a003628 <__aeabi_dcmpeq>:
1a003628:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00362c:	f7ff fff4 	bl	1a003618 <__aeabi_cdcmpeq>
1a003630:	bf0c      	ite	eq
1a003632:	2001      	moveq	r0, #1
1a003634:	2000      	movne	r0, #0
1a003636:	f85d fb08 	ldr.w	pc, [sp], #8
1a00363a:	bf00      	nop

1a00363c <__aeabi_dcmplt>:
1a00363c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003640:	f7ff ffea 	bl	1a003618 <__aeabi_cdcmpeq>
1a003644:	bf34      	ite	cc
1a003646:	2001      	movcc	r0, #1
1a003648:	2000      	movcs	r0, #0
1a00364a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00364e:	bf00      	nop

1a003650 <__aeabi_dcmple>:
1a003650:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003654:	f7ff ffe0 	bl	1a003618 <__aeabi_cdcmpeq>
1a003658:	bf94      	ite	ls
1a00365a:	2001      	movls	r0, #1
1a00365c:	2000      	movhi	r0, #0
1a00365e:	f85d fb08 	ldr.w	pc, [sp], #8
1a003662:	bf00      	nop

1a003664 <__aeabi_dcmpge>:
1a003664:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003668:	f7ff ffce 	bl	1a003608 <__aeabi_cdrcmple>
1a00366c:	bf94      	ite	ls
1a00366e:	2001      	movls	r0, #1
1a003670:	2000      	movhi	r0, #0
1a003672:	f85d fb08 	ldr.w	pc, [sp], #8
1a003676:	bf00      	nop

1a003678 <__aeabi_dcmpgt>:
1a003678:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00367c:	f7ff ffc4 	bl	1a003608 <__aeabi_cdrcmple>
1a003680:	bf34      	ite	cc
1a003682:	2001      	movcc	r0, #1
1a003684:	2000      	movcs	r0, #0
1a003686:	f85d fb08 	ldr.w	pc, [sp], #8
1a00368a:	bf00      	nop

1a00368c <__aeabi_dcmpun>:
1a00368c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003694:	d102      	bne.n	1a00369c <__aeabi_dcmpun+0x10>
1a003696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00369a:	d10a      	bne.n	1a0036b2 <__aeabi_dcmpun+0x26>
1a00369c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0036a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0036a4:	d102      	bne.n	1a0036ac <__aeabi_dcmpun+0x20>
1a0036a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0036aa:	d102      	bne.n	1a0036b2 <__aeabi_dcmpun+0x26>
1a0036ac:	f04f 0000 	mov.w	r0, #0
1a0036b0:	4770      	bx	lr
1a0036b2:	f04f 0001 	mov.w	r0, #1
1a0036b6:	4770      	bx	lr

1a0036b8 <__aeabi_d2iz>:
1a0036b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0036bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0036c0:	d215      	bcs.n	1a0036ee <__aeabi_d2iz+0x36>
1a0036c2:	d511      	bpl.n	1a0036e8 <__aeabi_d2iz+0x30>
1a0036c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0036c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0036cc:	d912      	bls.n	1a0036f4 <__aeabi_d2iz+0x3c>
1a0036ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0036d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0036d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0036da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0036de:	fa23 f002 	lsr.w	r0, r3, r2
1a0036e2:	bf18      	it	ne
1a0036e4:	4240      	negne	r0, r0
1a0036e6:	4770      	bx	lr
1a0036e8:	f04f 0000 	mov.w	r0, #0
1a0036ec:	4770      	bx	lr
1a0036ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0036f2:	d105      	bne.n	1a003700 <__aeabi_d2iz+0x48>
1a0036f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a0036f8:	bf08      	it	eq
1a0036fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a0036fe:	4770      	bx	lr
1a003700:	f04f 0000 	mov.w	r0, #0
1a003704:	4770      	bx	lr
1a003706:	bf00      	nop

1a003708 <__aeabi_uldivmod>:
1a003708:	b953      	cbnz	r3, 1a003720 <__aeabi_uldivmod+0x18>
1a00370a:	b94a      	cbnz	r2, 1a003720 <__aeabi_uldivmod+0x18>
1a00370c:	2900      	cmp	r1, #0
1a00370e:	bf08      	it	eq
1a003710:	2800      	cmpeq	r0, #0
1a003712:	bf1c      	itt	ne
1a003714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00371c:	f000 b974 	b.w	1a003a08 <__aeabi_idiv0>
1a003720:	f1ad 0c08 	sub.w	ip, sp, #8
1a003724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003728:	f000 f806 	bl	1a003738 <__udivmoddi4>
1a00372c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003734:	b004      	add	sp, #16
1a003736:	4770      	bx	lr

1a003738 <__udivmoddi4>:
1a003738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00373c:	9e08      	ldr	r6, [sp, #32]
1a00373e:	4604      	mov	r4, r0
1a003740:	4688      	mov	r8, r1
1a003742:	2b00      	cmp	r3, #0
1a003744:	f040 8085 	bne.w	1a003852 <__udivmoddi4+0x11a>
1a003748:	428a      	cmp	r2, r1
1a00374a:	4615      	mov	r5, r2
1a00374c:	d948      	bls.n	1a0037e0 <__udivmoddi4+0xa8>
1a00374e:	fab2 f282 	clz	r2, r2
1a003752:	b14a      	cbz	r2, 1a003768 <__udivmoddi4+0x30>
1a003754:	f1c2 0720 	rsb	r7, r2, #32
1a003758:	fa01 f302 	lsl.w	r3, r1, r2
1a00375c:	fa20 f707 	lsr.w	r7, r0, r7
1a003760:	4095      	lsls	r5, r2
1a003762:	ea47 0803 	orr.w	r8, r7, r3
1a003766:	4094      	lsls	r4, r2
1a003768:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00376c:	0c23      	lsrs	r3, r4, #16
1a00376e:	fbb8 f7fe 	udiv	r7, r8, lr
1a003772:	fa1f fc85 	uxth.w	ip, r5
1a003776:	fb0e 8817 	mls	r8, lr, r7, r8
1a00377a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00377e:	fb07 f10c 	mul.w	r1, r7, ip
1a003782:	4299      	cmp	r1, r3
1a003784:	d909      	bls.n	1a00379a <__udivmoddi4+0x62>
1a003786:	18eb      	adds	r3, r5, r3
1a003788:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00378c:	f080 80e3 	bcs.w	1a003956 <__udivmoddi4+0x21e>
1a003790:	4299      	cmp	r1, r3
1a003792:	f240 80e0 	bls.w	1a003956 <__udivmoddi4+0x21e>
1a003796:	3f02      	subs	r7, #2
1a003798:	442b      	add	r3, r5
1a00379a:	1a5b      	subs	r3, r3, r1
1a00379c:	b2a4      	uxth	r4, r4
1a00379e:	fbb3 f0fe 	udiv	r0, r3, lr
1a0037a2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0037a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0037aa:	fb00 fc0c 	mul.w	ip, r0, ip
1a0037ae:	45a4      	cmp	ip, r4
1a0037b0:	d909      	bls.n	1a0037c6 <__udivmoddi4+0x8e>
1a0037b2:	192c      	adds	r4, r5, r4
1a0037b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0037b8:	f080 80cb 	bcs.w	1a003952 <__udivmoddi4+0x21a>
1a0037bc:	45a4      	cmp	ip, r4
1a0037be:	f240 80c8 	bls.w	1a003952 <__udivmoddi4+0x21a>
1a0037c2:	3802      	subs	r0, #2
1a0037c4:	442c      	add	r4, r5
1a0037c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0037ca:	eba4 040c 	sub.w	r4, r4, ip
1a0037ce:	2700      	movs	r7, #0
1a0037d0:	b11e      	cbz	r6, 1a0037da <__udivmoddi4+0xa2>
1a0037d2:	40d4      	lsrs	r4, r2
1a0037d4:	2300      	movs	r3, #0
1a0037d6:	e9c6 4300 	strd	r4, r3, [r6]
1a0037da:	4639      	mov	r1, r7
1a0037dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0037e0:	2a00      	cmp	r2, #0
1a0037e2:	d053      	beq.n	1a00388c <__udivmoddi4+0x154>
1a0037e4:	fab2 f282 	clz	r2, r2
1a0037e8:	2a00      	cmp	r2, #0
1a0037ea:	f040 80b6 	bne.w	1a00395a <__udivmoddi4+0x222>
1a0037ee:	1b49      	subs	r1, r1, r5
1a0037f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0037f4:	fa1f f885 	uxth.w	r8, r5
1a0037f8:	2701      	movs	r7, #1
1a0037fa:	fbb1 fcfe 	udiv	ip, r1, lr
1a0037fe:	0c23      	lsrs	r3, r4, #16
1a003800:	fb0e 111c 	mls	r1, lr, ip, r1
1a003804:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003808:	fb08 f10c 	mul.w	r1, r8, ip
1a00380c:	4299      	cmp	r1, r3
1a00380e:	d907      	bls.n	1a003820 <__udivmoddi4+0xe8>
1a003810:	18eb      	adds	r3, r5, r3
1a003812:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003816:	d202      	bcs.n	1a00381e <__udivmoddi4+0xe6>
1a003818:	4299      	cmp	r1, r3
1a00381a:	f200 80ec 	bhi.w	1a0039f6 <__udivmoddi4+0x2be>
1a00381e:	4684      	mov	ip, r0
1a003820:	1a59      	subs	r1, r3, r1
1a003822:	b2a3      	uxth	r3, r4
1a003824:	fbb1 f0fe 	udiv	r0, r1, lr
1a003828:	fb0e 1410 	mls	r4, lr, r0, r1
1a00382c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003830:	fb08 f800 	mul.w	r8, r8, r0
1a003834:	45a0      	cmp	r8, r4
1a003836:	d907      	bls.n	1a003848 <__udivmoddi4+0x110>
1a003838:	192c      	adds	r4, r5, r4
1a00383a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00383e:	d202      	bcs.n	1a003846 <__udivmoddi4+0x10e>
1a003840:	45a0      	cmp	r8, r4
1a003842:	f200 80dc 	bhi.w	1a0039fe <__udivmoddi4+0x2c6>
1a003846:	4618      	mov	r0, r3
1a003848:	eba4 0408 	sub.w	r4, r4, r8
1a00384c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003850:	e7be      	b.n	1a0037d0 <__udivmoddi4+0x98>
1a003852:	428b      	cmp	r3, r1
1a003854:	d908      	bls.n	1a003868 <__udivmoddi4+0x130>
1a003856:	2e00      	cmp	r6, #0
1a003858:	d078      	beq.n	1a00394c <__udivmoddi4+0x214>
1a00385a:	2700      	movs	r7, #0
1a00385c:	e9c6 0100 	strd	r0, r1, [r6]
1a003860:	4638      	mov	r0, r7
1a003862:	4639      	mov	r1, r7
1a003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003868:	fab3 f783 	clz	r7, r3
1a00386c:	b97f      	cbnz	r7, 1a00388e <__udivmoddi4+0x156>
1a00386e:	428b      	cmp	r3, r1
1a003870:	d302      	bcc.n	1a003878 <__udivmoddi4+0x140>
1a003872:	4282      	cmp	r2, r0
1a003874:	f200 80bd 	bhi.w	1a0039f2 <__udivmoddi4+0x2ba>
1a003878:	1a84      	subs	r4, r0, r2
1a00387a:	eb61 0303 	sbc.w	r3, r1, r3
1a00387e:	2001      	movs	r0, #1
1a003880:	4698      	mov	r8, r3
1a003882:	2e00      	cmp	r6, #0
1a003884:	d0a9      	beq.n	1a0037da <__udivmoddi4+0xa2>
1a003886:	e9c6 4800 	strd	r4, r8, [r6]
1a00388a:	e7a6      	b.n	1a0037da <__udivmoddi4+0xa2>
1a00388c:	deff      	udf	#255	; 0xff
1a00388e:	f1c7 0520 	rsb	r5, r7, #32
1a003892:	40bb      	lsls	r3, r7
1a003894:	fa22 fc05 	lsr.w	ip, r2, r5
1a003898:	ea4c 0c03 	orr.w	ip, ip, r3
1a00389c:	fa01 f407 	lsl.w	r4, r1, r7
1a0038a0:	fa20 f805 	lsr.w	r8, r0, r5
1a0038a4:	fa21 f305 	lsr.w	r3, r1, r5
1a0038a8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0038ac:	ea48 0404 	orr.w	r4, r8, r4
1a0038b0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0038b4:	0c21      	lsrs	r1, r4, #16
1a0038b6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0038ba:	fa1f f88c 	uxth.w	r8, ip
1a0038be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0038c2:	fb09 fa08 	mul.w	sl, r9, r8
1a0038c6:	459a      	cmp	sl, r3
1a0038c8:	fa02 f207 	lsl.w	r2, r2, r7
1a0038cc:	fa00 f107 	lsl.w	r1, r0, r7
1a0038d0:	d90b      	bls.n	1a0038ea <__udivmoddi4+0x1b2>
1a0038d2:	eb1c 0303 	adds.w	r3, ip, r3
1a0038d6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0038da:	f080 8088 	bcs.w	1a0039ee <__udivmoddi4+0x2b6>
1a0038de:	459a      	cmp	sl, r3
1a0038e0:	f240 8085 	bls.w	1a0039ee <__udivmoddi4+0x2b6>
1a0038e4:	f1a9 0902 	sub.w	r9, r9, #2
1a0038e8:	4463      	add	r3, ip
1a0038ea:	eba3 030a 	sub.w	r3, r3, sl
1a0038ee:	b2a4      	uxth	r4, r4
1a0038f0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0038f4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0038f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0038fc:	fb00 f808 	mul.w	r8, r0, r8
1a003900:	45a0      	cmp	r8, r4
1a003902:	d908      	bls.n	1a003916 <__udivmoddi4+0x1de>
1a003904:	eb1c 0404 	adds.w	r4, ip, r4
1a003908:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00390c:	d26b      	bcs.n	1a0039e6 <__udivmoddi4+0x2ae>
1a00390e:	45a0      	cmp	r8, r4
1a003910:	d969      	bls.n	1a0039e6 <__udivmoddi4+0x2ae>
1a003912:	3802      	subs	r0, #2
1a003914:	4464      	add	r4, ip
1a003916:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00391a:	eba4 0408 	sub.w	r4, r4, r8
1a00391e:	fba0 8902 	umull	r8, r9, r0, r2
1a003922:	454c      	cmp	r4, r9
1a003924:	46c6      	mov	lr, r8
1a003926:	464b      	mov	r3, r9
1a003928:	d354      	bcc.n	1a0039d4 <__udivmoddi4+0x29c>
1a00392a:	d051      	beq.n	1a0039d0 <__udivmoddi4+0x298>
1a00392c:	2e00      	cmp	r6, #0
1a00392e:	d069      	beq.n	1a003a04 <__udivmoddi4+0x2cc>
1a003930:	ebb1 020e 	subs.w	r2, r1, lr
1a003934:	eb64 0403 	sbc.w	r4, r4, r3
1a003938:	fa04 f505 	lsl.w	r5, r4, r5
1a00393c:	fa22 f307 	lsr.w	r3, r2, r7
1a003940:	40fc      	lsrs	r4, r7
1a003942:	431d      	orrs	r5, r3
1a003944:	e9c6 5400 	strd	r5, r4, [r6]
1a003948:	2700      	movs	r7, #0
1a00394a:	e746      	b.n	1a0037da <__udivmoddi4+0xa2>
1a00394c:	4637      	mov	r7, r6
1a00394e:	4630      	mov	r0, r6
1a003950:	e743      	b.n	1a0037da <__udivmoddi4+0xa2>
1a003952:	4618      	mov	r0, r3
1a003954:	e737      	b.n	1a0037c6 <__udivmoddi4+0x8e>
1a003956:	4607      	mov	r7, r0
1a003958:	e71f      	b.n	1a00379a <__udivmoddi4+0x62>
1a00395a:	f1c2 0320 	rsb	r3, r2, #32
1a00395e:	fa20 f703 	lsr.w	r7, r0, r3
1a003962:	4095      	lsls	r5, r2
1a003964:	fa01 f002 	lsl.w	r0, r1, r2
1a003968:	fa21 f303 	lsr.w	r3, r1, r3
1a00396c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003970:	4338      	orrs	r0, r7
1a003972:	0c01      	lsrs	r1, r0, #16
1a003974:	fbb3 f7fe 	udiv	r7, r3, lr
1a003978:	fa1f f885 	uxth.w	r8, r5
1a00397c:	fb0e 3317 	mls	r3, lr, r7, r3
1a003980:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003984:	fb07 f308 	mul.w	r3, r7, r8
1a003988:	428b      	cmp	r3, r1
1a00398a:	fa04 f402 	lsl.w	r4, r4, r2
1a00398e:	d907      	bls.n	1a0039a0 <__udivmoddi4+0x268>
1a003990:	1869      	adds	r1, r5, r1
1a003992:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003996:	d228      	bcs.n	1a0039ea <__udivmoddi4+0x2b2>
1a003998:	428b      	cmp	r3, r1
1a00399a:	d926      	bls.n	1a0039ea <__udivmoddi4+0x2b2>
1a00399c:	3f02      	subs	r7, #2
1a00399e:	4429      	add	r1, r5
1a0039a0:	1acb      	subs	r3, r1, r3
1a0039a2:	b281      	uxth	r1, r0
1a0039a4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0039a8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0039ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0039b0:	fb00 f308 	mul.w	r3, r0, r8
1a0039b4:	428b      	cmp	r3, r1
1a0039b6:	d907      	bls.n	1a0039c8 <__udivmoddi4+0x290>
1a0039b8:	1869      	adds	r1, r5, r1
1a0039ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0039be:	d210      	bcs.n	1a0039e2 <__udivmoddi4+0x2aa>
1a0039c0:	428b      	cmp	r3, r1
1a0039c2:	d90e      	bls.n	1a0039e2 <__udivmoddi4+0x2aa>
1a0039c4:	3802      	subs	r0, #2
1a0039c6:	4429      	add	r1, r5
1a0039c8:	1ac9      	subs	r1, r1, r3
1a0039ca:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0039ce:	e714      	b.n	1a0037fa <__udivmoddi4+0xc2>
1a0039d0:	4541      	cmp	r1, r8
1a0039d2:	d2ab      	bcs.n	1a00392c <__udivmoddi4+0x1f4>
1a0039d4:	ebb8 0e02 	subs.w	lr, r8, r2
1a0039d8:	eb69 020c 	sbc.w	r2, r9, ip
1a0039dc:	3801      	subs	r0, #1
1a0039de:	4613      	mov	r3, r2
1a0039e0:	e7a4      	b.n	1a00392c <__udivmoddi4+0x1f4>
1a0039e2:	4660      	mov	r0, ip
1a0039e4:	e7f0      	b.n	1a0039c8 <__udivmoddi4+0x290>
1a0039e6:	4618      	mov	r0, r3
1a0039e8:	e795      	b.n	1a003916 <__udivmoddi4+0x1de>
1a0039ea:	4667      	mov	r7, ip
1a0039ec:	e7d8      	b.n	1a0039a0 <__udivmoddi4+0x268>
1a0039ee:	4681      	mov	r9, r0
1a0039f0:	e77b      	b.n	1a0038ea <__udivmoddi4+0x1b2>
1a0039f2:	4638      	mov	r0, r7
1a0039f4:	e745      	b.n	1a003882 <__udivmoddi4+0x14a>
1a0039f6:	f1ac 0c02 	sub.w	ip, ip, #2
1a0039fa:	442b      	add	r3, r5
1a0039fc:	e710      	b.n	1a003820 <__udivmoddi4+0xe8>
1a0039fe:	3802      	subs	r0, #2
1a003a00:	442c      	add	r4, r5
1a003a02:	e721      	b.n	1a003848 <__udivmoddi4+0x110>
1a003a04:	4637      	mov	r7, r6
1a003a06:	e6e8      	b.n	1a0037da <__udivmoddi4+0xa2>

1a003a08 <__aeabi_idiv0>:
1a003a08:	4770      	bx	lr
1a003a0a:	bf00      	nop

1a003a0c <_fclose_r>:
1a003a0c:	b570      	push	{r4, r5, r6, lr}
1a003a0e:	2900      	cmp	r1, #0
1a003a10:	d04a      	beq.n	1a003aa8 <_fclose_r+0x9c>
1a003a12:	4605      	mov	r5, r0
1a003a14:	460c      	mov	r4, r1
1a003a16:	b110      	cbz	r0, 1a003a1e <_fclose_r+0x12>
1a003a18:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a003a1a:	2b00      	cmp	r3, #0
1a003a1c:	d047      	beq.n	1a003aae <_fclose_r+0xa2>
1a003a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003a24:	07d8      	lsls	r0, r3, #31
1a003a26:	d532      	bpl.n	1a003a8e <_fclose_r+0x82>
1a003a28:	2a00      	cmp	r2, #0
1a003a2a:	d03d      	beq.n	1a003aa8 <_fclose_r+0x9c>
1a003a2c:	4621      	mov	r1, r4
1a003a2e:	4628      	mov	r0, r5
1a003a30:	f000 f854 	bl	1a003adc <__sflush_r>
1a003a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003a36:	4606      	mov	r6, r0
1a003a38:	b133      	cbz	r3, 1a003a48 <_fclose_r+0x3c>
1a003a3a:	69e1      	ldr	r1, [r4, #28]
1a003a3c:	4628      	mov	r0, r5
1a003a3e:	4798      	blx	r3
1a003a40:	2800      	cmp	r0, #0
1a003a42:	bfb8      	it	lt
1a003a44:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a003a48:	89a3      	ldrh	r3, [r4, #12]
1a003a4a:	061a      	lsls	r2, r3, #24
1a003a4c:	d43c      	bmi.n	1a003ac8 <_fclose_r+0xbc>
1a003a4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a003a50:	b141      	cbz	r1, 1a003a64 <_fclose_r+0x58>
1a003a52:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a003a56:	4299      	cmp	r1, r3
1a003a58:	d002      	beq.n	1a003a60 <_fclose_r+0x54>
1a003a5a:	4628      	mov	r0, r5
1a003a5c:	f000 f9c6 	bl	1a003dec <_free_r>
1a003a60:	2300      	movs	r3, #0
1a003a62:	6323      	str	r3, [r4, #48]	; 0x30
1a003a64:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a003a66:	b121      	cbz	r1, 1a003a72 <_fclose_r+0x66>
1a003a68:	4628      	mov	r0, r5
1a003a6a:	f000 f9bf 	bl	1a003dec <_free_r>
1a003a6e:	2300      	movs	r3, #0
1a003a70:	6463      	str	r3, [r4, #68]	; 0x44
1a003a72:	f000 f95f 	bl	1a003d34 <__sfp_lock_acquire>
1a003a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003a78:	2200      	movs	r2, #0
1a003a7a:	07db      	lsls	r3, r3, #31
1a003a7c:	81a2      	strh	r2, [r4, #12]
1a003a7e:	d528      	bpl.n	1a003ad2 <_fclose_r+0xc6>
1a003a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003a82:	f000 faf9 	bl	1a004078 <__retarget_lock_close_recursive>
1a003a86:	f000 f95b 	bl	1a003d40 <__sfp_lock_release>
1a003a8a:	4630      	mov	r0, r6
1a003a8c:	bd70      	pop	{r4, r5, r6, pc}
1a003a8e:	0591      	lsls	r1, r2, #22
1a003a90:	d4cc      	bmi.n	1a003a2c <_fclose_r+0x20>
1a003a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003a94:	f000 faf2 	bl	1a00407c <__retarget_lock_acquire_recursive>
1a003a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003a9c:	2b00      	cmp	r3, #0
1a003a9e:	d1c5      	bne.n	1a003a2c <_fclose_r+0x20>
1a003aa0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a003aa2:	f016 0601 	ands.w	r6, r6, #1
1a003aa6:	d00a      	beq.n	1a003abe <_fclose_r+0xb2>
1a003aa8:	2600      	movs	r6, #0
1a003aaa:	4630      	mov	r0, r6
1a003aac:	bd70      	pop	{r4, r5, r6, pc}
1a003aae:	f000 f917 	bl	1a003ce0 <__sinit>
1a003ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003ab8:	07d8      	lsls	r0, r3, #31
1a003aba:	d4b5      	bmi.n	1a003a28 <_fclose_r+0x1c>
1a003abc:	e7e7      	b.n	1a003a8e <_fclose_r+0x82>
1a003abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003ac0:	f000 fade 	bl	1a004080 <__retarget_lock_release_recursive>
1a003ac4:	4630      	mov	r0, r6
1a003ac6:	bd70      	pop	{r4, r5, r6, pc}
1a003ac8:	6921      	ldr	r1, [r4, #16]
1a003aca:	4628      	mov	r0, r5
1a003acc:	f000 f98e 	bl	1a003dec <_free_r>
1a003ad0:	e7bd      	b.n	1a003a4e <_fclose_r+0x42>
1a003ad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003ad4:	f000 fad4 	bl	1a004080 <__retarget_lock_release_recursive>
1a003ad8:	e7d2      	b.n	1a003a80 <_fclose_r+0x74>
1a003ada:	bf00      	nop

1a003adc <__sflush_r>:
1a003adc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a003ae0:	b29a      	uxth	r2, r3
1a003ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003ae6:	460c      	mov	r4, r1
1a003ae8:	0711      	lsls	r1, r2, #28
1a003aea:	4680      	mov	r8, r0
1a003aec:	d448      	bmi.n	1a003b80 <__sflush_r+0xa4>
1a003aee:	6862      	ldr	r2, [r4, #4]
1a003af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003af4:	2a00      	cmp	r2, #0
1a003af6:	81a3      	strh	r3, [r4, #12]
1a003af8:	dd5d      	ble.n	1a003bb6 <__sflush_r+0xda>
1a003afa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a003afc:	2d00      	cmp	r5, #0
1a003afe:	d057      	beq.n	1a003bb0 <__sflush_r+0xd4>
1a003b00:	2200      	movs	r2, #0
1a003b02:	b29b      	uxth	r3, r3
1a003b04:	f8d8 6000 	ldr.w	r6, [r8]
1a003b08:	69e1      	ldr	r1, [r4, #28]
1a003b0a:	f8c8 2000 	str.w	r2, [r8]
1a003b0e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a003b12:	d154      	bne.n	1a003bbe <__sflush_r+0xe2>
1a003b14:	2301      	movs	r3, #1
1a003b16:	4640      	mov	r0, r8
1a003b18:	47a8      	blx	r5
1a003b1a:	1c43      	adds	r3, r0, #1
1a003b1c:	4602      	mov	r2, r0
1a003b1e:	d065      	beq.n	1a003bec <__sflush_r+0x110>
1a003b20:	89a3      	ldrh	r3, [r4, #12]
1a003b22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a003b24:	69e1      	ldr	r1, [r4, #28]
1a003b26:	075f      	lsls	r7, r3, #29
1a003b28:	d505      	bpl.n	1a003b36 <__sflush_r+0x5a>
1a003b2a:	6860      	ldr	r0, [r4, #4]
1a003b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a003b2e:	1a12      	subs	r2, r2, r0
1a003b30:	b10b      	cbz	r3, 1a003b36 <__sflush_r+0x5a>
1a003b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003b34:	1ad2      	subs	r2, r2, r3
1a003b36:	2300      	movs	r3, #0
1a003b38:	4640      	mov	r0, r8
1a003b3a:	47a8      	blx	r5
1a003b3c:	1c45      	adds	r5, r0, #1
1a003b3e:	d148      	bne.n	1a003bd2 <__sflush_r+0xf6>
1a003b40:	f8d8 2000 	ldr.w	r2, [r8]
1a003b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003b48:	2a00      	cmp	r2, #0
1a003b4a:	d05c      	beq.n	1a003c06 <__sflush_r+0x12a>
1a003b4c:	2a1d      	cmp	r2, #29
1a003b4e:	d001      	beq.n	1a003b54 <__sflush_r+0x78>
1a003b50:	2a16      	cmp	r2, #22
1a003b52:	d164      	bne.n	1a003c1e <__sflush_r+0x142>
1a003b54:	6922      	ldr	r2, [r4, #16]
1a003b56:	2100      	movs	r1, #0
1a003b58:	e9c4 2100 	strd	r2, r1, [r4]
1a003b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a003b60:	81a3      	strh	r3, [r4, #12]
1a003b62:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a003b64:	f8c8 6000 	str.w	r6, [r8]
1a003b68:	b311      	cbz	r1, 1a003bb0 <__sflush_r+0xd4>
1a003b6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a003b6e:	4299      	cmp	r1, r3
1a003b70:	d002      	beq.n	1a003b78 <__sflush_r+0x9c>
1a003b72:	4640      	mov	r0, r8
1a003b74:	f000 f93a 	bl	1a003dec <_free_r>
1a003b78:	2000      	movs	r0, #0
1a003b7a:	6320      	str	r0, [r4, #48]	; 0x30
1a003b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003b80:	6926      	ldr	r6, [r4, #16]
1a003b82:	b1ae      	cbz	r6, 1a003bb0 <__sflush_r+0xd4>
1a003b84:	6825      	ldr	r5, [r4, #0]
1a003b86:	6026      	str	r6, [r4, #0]
1a003b88:	0791      	lsls	r1, r2, #30
1a003b8a:	bf0c      	ite	eq
1a003b8c:	6963      	ldreq	r3, [r4, #20]
1a003b8e:	2300      	movne	r3, #0
1a003b90:	1bad      	subs	r5, r5, r6
1a003b92:	60a3      	str	r3, [r4, #8]
1a003b94:	e00a      	b.n	1a003bac <__sflush_r+0xd0>
1a003b96:	462b      	mov	r3, r5
1a003b98:	4632      	mov	r2, r6
1a003b9a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a003b9c:	69e1      	ldr	r1, [r4, #28]
1a003b9e:	4640      	mov	r0, r8
1a003ba0:	47b8      	blx	r7
1a003ba2:	2800      	cmp	r0, #0
1a003ba4:	eba5 0500 	sub.w	r5, r5, r0
1a003ba8:	4406      	add	r6, r0
1a003baa:	dd0a      	ble.n	1a003bc2 <__sflush_r+0xe6>
1a003bac:	2d00      	cmp	r5, #0
1a003bae:	dcf2      	bgt.n	1a003b96 <__sflush_r+0xba>
1a003bb0:	2000      	movs	r0, #0
1a003bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003bb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003bb8:	2a00      	cmp	r2, #0
1a003bba:	dc9e      	bgt.n	1a003afa <__sflush_r+0x1e>
1a003bbc:	e7f8      	b.n	1a003bb0 <__sflush_r+0xd4>
1a003bbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a003bc0:	e7b1      	b.n	1a003b26 <__sflush_r+0x4a>
1a003bc2:	89a3      	ldrh	r3, [r4, #12]
1a003bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003bc8:	81a3      	strh	r3, [r4, #12]
1a003bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003bd6:	6922      	ldr	r2, [r4, #16]
1a003bd8:	6022      	str	r2, [r4, #0]
1a003bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a003bde:	2200      	movs	r2, #0
1a003be0:	6062      	str	r2, [r4, #4]
1a003be2:	04da      	lsls	r2, r3, #19
1a003be4:	81a3      	strh	r3, [r4, #12]
1a003be6:	d5bc      	bpl.n	1a003b62 <__sflush_r+0x86>
1a003be8:	6520      	str	r0, [r4, #80]	; 0x50
1a003bea:	e7ba      	b.n	1a003b62 <__sflush_r+0x86>
1a003bec:	f8d8 3000 	ldr.w	r3, [r8]
1a003bf0:	2b00      	cmp	r3, #0
1a003bf2:	d095      	beq.n	1a003b20 <__sflush_r+0x44>
1a003bf4:	2b1d      	cmp	r3, #29
1a003bf6:	d00f      	beq.n	1a003c18 <__sflush_r+0x13c>
1a003bf8:	2b16      	cmp	r3, #22
1a003bfa:	d00d      	beq.n	1a003c18 <__sflush_r+0x13c>
1a003bfc:	89a3      	ldrh	r3, [r4, #12]
1a003bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003c02:	81a3      	strh	r3, [r4, #12]
1a003c04:	e7d5      	b.n	1a003bb2 <__sflush_r+0xd6>
1a003c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a003c0a:	6921      	ldr	r1, [r4, #16]
1a003c0c:	81a3      	strh	r3, [r4, #12]
1a003c0e:	04db      	lsls	r3, r3, #19
1a003c10:	e9c4 1200 	strd	r1, r2, [r4]
1a003c14:	d5a5      	bpl.n	1a003b62 <__sflush_r+0x86>
1a003c16:	e7e7      	b.n	1a003be8 <__sflush_r+0x10c>
1a003c18:	f8c8 6000 	str.w	r6, [r8]
1a003c1c:	e7c8      	b.n	1a003bb0 <__sflush_r+0xd4>
1a003c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003c22:	81a3      	strh	r3, [r4, #12]
1a003c24:	e7c5      	b.n	1a003bb2 <__sflush_r+0xd6>
1a003c26:	bf00      	nop

1a003c28 <_fflush_r>:
1a003c28:	b538      	push	{r3, r4, r5, lr}
1a003c2a:	460d      	mov	r5, r1
1a003c2c:	4604      	mov	r4, r0
1a003c2e:	b108      	cbz	r0, 1a003c34 <_fflush_r+0xc>
1a003c30:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a003c32:	b1a3      	cbz	r3, 1a003c5e <_fflush_r+0x36>
1a003c34:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a003c38:	b1b8      	cbz	r0, 1a003c6a <_fflush_r+0x42>
1a003c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003c3c:	07db      	lsls	r3, r3, #31
1a003c3e:	d401      	bmi.n	1a003c44 <_fflush_r+0x1c>
1a003c40:	0581      	lsls	r1, r0, #22
1a003c42:	d515      	bpl.n	1a003c70 <_fflush_r+0x48>
1a003c44:	4620      	mov	r0, r4
1a003c46:	4629      	mov	r1, r5
1a003c48:	f7ff ff48 	bl	1a003adc <__sflush_r>
1a003c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003c4e:	07da      	lsls	r2, r3, #31
1a003c50:	4604      	mov	r4, r0
1a003c52:	d402      	bmi.n	1a003c5a <_fflush_r+0x32>
1a003c54:	89ab      	ldrh	r3, [r5, #12]
1a003c56:	059b      	lsls	r3, r3, #22
1a003c58:	d50e      	bpl.n	1a003c78 <_fflush_r+0x50>
1a003c5a:	4620      	mov	r0, r4
1a003c5c:	bd38      	pop	{r3, r4, r5, pc}
1a003c5e:	f000 f83f 	bl	1a003ce0 <__sinit>
1a003c62:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a003c66:	2800      	cmp	r0, #0
1a003c68:	d1e7      	bne.n	1a003c3a <_fflush_r+0x12>
1a003c6a:	4604      	mov	r4, r0
1a003c6c:	4620      	mov	r0, r4
1a003c6e:	bd38      	pop	{r3, r4, r5, pc}
1a003c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003c72:	f000 fa03 	bl	1a00407c <__retarget_lock_acquire_recursive>
1a003c76:	e7e5      	b.n	1a003c44 <_fflush_r+0x1c>
1a003c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003c7a:	f000 fa01 	bl	1a004080 <__retarget_lock_release_recursive>
1a003c7e:	4620      	mov	r0, r4
1a003c80:	bd38      	pop	{r3, r4, r5, pc}
1a003c82:	bf00      	nop

1a003c84 <std>:
1a003c84:	b510      	push	{r4, lr}
1a003c86:	2300      	movs	r3, #0
1a003c88:	4604      	mov	r4, r0
1a003c8a:	8181      	strh	r1, [r0, #12]
1a003c8c:	81c2      	strh	r2, [r0, #14]
1a003c8e:	e9c0 3300 	strd	r3, r3, [r0]
1a003c92:	6083      	str	r3, [r0, #8]
1a003c94:	6643      	str	r3, [r0, #100]	; 0x64
1a003c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003c9a:	6183      	str	r3, [r0, #24]
1a003c9c:	4619      	mov	r1, r3
1a003c9e:	2208      	movs	r2, #8
1a003ca0:	305c      	adds	r0, #92	; 0x5c
1a003ca2:	f000 fd41 	bl	1a004728 <memset>
1a003ca6:	4807      	ldr	r0, [pc, #28]	; (1a003cc4 <std+0x40>)
1a003ca8:	4907      	ldr	r1, [pc, #28]	; (1a003cc8 <std+0x44>)
1a003caa:	4a08      	ldr	r2, [pc, #32]	; (1a003ccc <std+0x48>)
1a003cac:	4b08      	ldr	r3, [pc, #32]	; (1a003cd0 <std+0x4c>)
1a003cae:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003cb0:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a003cb4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a003cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003cc0:	f000 b9d8 	b.w	1a004074 <__retarget_lock_init_recursive>
1a003cc4:	1a004809 	.word	0x1a004809
1a003cc8:	1a00482d 	.word	0x1a00482d
1a003ccc:	1a00486d 	.word	0x1a00486d
1a003cd0:	1a00488d 	.word	0x1a00488d

1a003cd4 <_cleanup_r>:
1a003cd4:	4901      	ldr	r1, [pc, #4]	; (1a003cdc <_cleanup_r+0x8>)
1a003cd6:	f000 b97f 	b.w	1a003fd8 <_fwalk_reent>
1a003cda:	bf00      	nop
1a003cdc:	1a003a0d 	.word	0x1a003a0d

1a003ce0 <__sinit>:
1a003ce0:	b510      	push	{r4, lr}
1a003ce2:	4604      	mov	r4, r0
1a003ce4:	4811      	ldr	r0, [pc, #68]	; (1a003d2c <__sinit+0x4c>)
1a003ce6:	f000 f9c9 	bl	1a00407c <__retarget_lock_acquire_recursive>
1a003cea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003cec:	b9c2      	cbnz	r2, 1a003d20 <__sinit+0x40>
1a003cee:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a003cf2:	480f      	ldr	r0, [pc, #60]	; (1a003d30 <__sinit+0x50>)
1a003cf4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a003cf8:	2103      	movs	r1, #3
1a003cfa:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a003cfe:	63e0      	str	r0, [r4, #60]	; 0x3c
1a003d00:	2104      	movs	r1, #4
1a003d02:	6860      	ldr	r0, [r4, #4]
1a003d04:	f7ff ffbe 	bl	1a003c84 <std>
1a003d08:	2201      	movs	r2, #1
1a003d0a:	2109      	movs	r1, #9
1a003d0c:	68a0      	ldr	r0, [r4, #8]
1a003d0e:	f7ff ffb9 	bl	1a003c84 <std>
1a003d12:	2202      	movs	r2, #2
1a003d14:	2112      	movs	r1, #18
1a003d16:	68e0      	ldr	r0, [r4, #12]
1a003d18:	f7ff ffb4 	bl	1a003c84 <std>
1a003d1c:	2301      	movs	r3, #1
1a003d1e:	63a3      	str	r3, [r4, #56]	; 0x38
1a003d20:	4802      	ldr	r0, [pc, #8]	; (1a003d2c <__sinit+0x4c>)
1a003d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003d26:	f000 b9ab 	b.w	1a004080 <__retarget_lock_release_recursive>
1a003d2a:	bf00      	nop
1a003d2c:	100014c0 	.word	0x100014c0
1a003d30:	1a003cd5 	.word	0x1a003cd5

1a003d34 <__sfp_lock_acquire>:
1a003d34:	4801      	ldr	r0, [pc, #4]	; (1a003d3c <__sfp_lock_acquire+0x8>)
1a003d36:	f000 b9a1 	b.w	1a00407c <__retarget_lock_acquire_recursive>
1a003d3a:	bf00      	nop
1a003d3c:	100014d4 	.word	0x100014d4

1a003d40 <__sfp_lock_release>:
1a003d40:	4801      	ldr	r0, [pc, #4]	; (1a003d48 <__sfp_lock_release+0x8>)
1a003d42:	f000 b99d 	b.w	1a004080 <__retarget_lock_release_recursive>
1a003d46:	bf00      	nop
1a003d48:	100014d4 	.word	0x100014d4

1a003d4c <_malloc_trim_r>:
1a003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003d4e:	4f24      	ldr	r7, [pc, #144]	; (1a003de0 <_malloc_trim_r+0x94>)
1a003d50:	460c      	mov	r4, r1
1a003d52:	4606      	mov	r6, r0
1a003d54:	f000 fd38 	bl	1a0047c8 <__malloc_lock>
1a003d58:	68bb      	ldr	r3, [r7, #8]
1a003d5a:	685d      	ldr	r5, [r3, #4]
1a003d5c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a003d60:	310f      	adds	r1, #15
1a003d62:	f025 0503 	bic.w	r5, r5, #3
1a003d66:	4429      	add	r1, r5
1a003d68:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a003d6c:	f021 010f 	bic.w	r1, r1, #15
1a003d70:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a003d74:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a003d78:	db07      	blt.n	1a003d8a <_malloc_trim_r+0x3e>
1a003d7a:	2100      	movs	r1, #0
1a003d7c:	4630      	mov	r0, r6
1a003d7e:	f7fc fb61 	bl	1a000444 <_sbrk_r>
1a003d82:	68bb      	ldr	r3, [r7, #8]
1a003d84:	442b      	add	r3, r5
1a003d86:	4298      	cmp	r0, r3
1a003d88:	d004      	beq.n	1a003d94 <_malloc_trim_r+0x48>
1a003d8a:	4630      	mov	r0, r6
1a003d8c:	f000 fd22 	bl	1a0047d4 <__malloc_unlock>
1a003d90:	2000      	movs	r0, #0
1a003d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d94:	4261      	negs	r1, r4
1a003d96:	4630      	mov	r0, r6
1a003d98:	f7fc fb54 	bl	1a000444 <_sbrk_r>
1a003d9c:	3001      	adds	r0, #1
1a003d9e:	d00d      	beq.n	1a003dbc <_malloc_trim_r+0x70>
1a003da0:	4b10      	ldr	r3, [pc, #64]	; (1a003de4 <_malloc_trim_r+0x98>)
1a003da2:	68ba      	ldr	r2, [r7, #8]
1a003da4:	6819      	ldr	r1, [r3, #0]
1a003da6:	1b2d      	subs	r5, r5, r4
1a003da8:	f045 0501 	orr.w	r5, r5, #1
1a003dac:	4630      	mov	r0, r6
1a003dae:	1b09      	subs	r1, r1, r4
1a003db0:	6055      	str	r5, [r2, #4]
1a003db2:	6019      	str	r1, [r3, #0]
1a003db4:	f000 fd0e 	bl	1a0047d4 <__malloc_unlock>
1a003db8:	2001      	movs	r0, #1
1a003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003dbc:	2100      	movs	r1, #0
1a003dbe:	4630      	mov	r0, r6
1a003dc0:	f7fc fb40 	bl	1a000444 <_sbrk_r>
1a003dc4:	68ba      	ldr	r2, [r7, #8]
1a003dc6:	1a83      	subs	r3, r0, r2
1a003dc8:	2b0f      	cmp	r3, #15
1a003dca:	ddde      	ble.n	1a003d8a <_malloc_trim_r+0x3e>
1a003dcc:	4c06      	ldr	r4, [pc, #24]	; (1a003de8 <_malloc_trim_r+0x9c>)
1a003dce:	4905      	ldr	r1, [pc, #20]	; (1a003de4 <_malloc_trim_r+0x98>)
1a003dd0:	6824      	ldr	r4, [r4, #0]
1a003dd2:	f043 0301 	orr.w	r3, r3, #1
1a003dd6:	1b00      	subs	r0, r0, r4
1a003dd8:	6053      	str	r3, [r2, #4]
1a003dda:	6008      	str	r0, [r1, #0]
1a003ddc:	e7d5      	b.n	1a003d8a <_malloc_trim_r+0x3e>
1a003dde:	bf00      	nop
1a003de0:	10000470 	.word	0x10000470
1a003de4:	10001438 	.word	0x10001438
1a003de8:	10000878 	.word	0x10000878

1a003dec <_free_r>:
1a003dec:	2900      	cmp	r1, #0
1a003dee:	d05d      	beq.n	1a003eac <_free_r+0xc0>
1a003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003df2:	460f      	mov	r7, r1
1a003df4:	4606      	mov	r6, r0
1a003df6:	f000 fce7 	bl	1a0047c8 <__malloc_lock>
1a003dfa:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a003dfe:	4c73      	ldr	r4, [pc, #460]	; (1a003fcc <_free_r+0x1e0>)
1a003e00:	f02c 0301 	bic.w	r3, ip, #1
1a003e04:	f1a7 0008 	sub.w	r0, r7, #8
1a003e08:	18c2      	adds	r2, r0, r3
1a003e0a:	68a1      	ldr	r1, [r4, #8]
1a003e0c:	6855      	ldr	r5, [r2, #4]
1a003e0e:	4291      	cmp	r1, r2
1a003e10:	f025 0503 	bic.w	r5, r5, #3
1a003e14:	d07f      	beq.n	1a003f16 <_free_r+0x12a>
1a003e16:	f01c 0f01 	tst.w	ip, #1
1a003e1a:	6055      	str	r5, [r2, #4]
1a003e1c:	eb02 0105 	add.w	r1, r2, r5
1a003e20:	d133      	bne.n	1a003e8a <_free_r+0x9e>
1a003e22:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a003e26:	6849      	ldr	r1, [r1, #4]
1a003e28:	eba0 000e 	sub.w	r0, r0, lr
1a003e2c:	f104 0c08 	add.w	ip, r4, #8
1a003e30:	6887      	ldr	r7, [r0, #8]
1a003e32:	4567      	cmp	r7, ip
1a003e34:	4473      	add	r3, lr
1a003e36:	f001 0101 	and.w	r1, r1, #1
1a003e3a:	d060      	beq.n	1a003efe <_free_r+0x112>
1a003e3c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a003e40:	f8c7 e00c 	str.w	lr, [r7, #12]
1a003e44:	f8ce 7008 	str.w	r7, [lr, #8]
1a003e48:	2900      	cmp	r1, #0
1a003e4a:	f000 8089 	beq.w	1a003f60 <_free_r+0x174>
1a003e4e:	f043 0101 	orr.w	r1, r3, #1
1a003e52:	6041      	str	r1, [r0, #4]
1a003e54:	6013      	str	r3, [r2, #0]
1a003e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003e5a:	d230      	bcs.n	1a003ebe <_free_r+0xd2>
1a003e5c:	08db      	lsrs	r3, r3, #3
1a003e5e:	1c59      	adds	r1, r3, #1
1a003e60:	6865      	ldr	r5, [r4, #4]
1a003e62:	109a      	asrs	r2, r3, #2
1a003e64:	2301      	movs	r3, #1
1a003e66:	4093      	lsls	r3, r2
1a003e68:	432b      	orrs	r3, r5
1a003e6a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a003e6e:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a003e72:	6063      	str	r3, [r4, #4]
1a003e74:	3a08      	subs	r2, #8
1a003e76:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a003e7a:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a003e7e:	60e8      	str	r0, [r5, #12]
1a003e80:	4630      	mov	r0, r6
1a003e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003e86:	f000 bca5 	b.w	1a0047d4 <__malloc_unlock>
1a003e8a:	6849      	ldr	r1, [r1, #4]
1a003e8c:	07c9      	lsls	r1, r1, #31
1a003e8e:	d40e      	bmi.n	1a003eae <_free_r+0xc2>
1a003e90:	442b      	add	r3, r5
1a003e92:	f104 0c08 	add.w	ip, r4, #8
1a003e96:	6891      	ldr	r1, [r2, #8]
1a003e98:	4561      	cmp	r1, ip
1a003e9a:	f043 0501 	orr.w	r5, r3, #1
1a003e9e:	d067      	beq.n	1a003f70 <_free_r+0x184>
1a003ea0:	68d2      	ldr	r2, [r2, #12]
1a003ea2:	60ca      	str	r2, [r1, #12]
1a003ea4:	6091      	str	r1, [r2, #8]
1a003ea6:	6045      	str	r5, [r0, #4]
1a003ea8:	50c3      	str	r3, [r0, r3]
1a003eaa:	e7d4      	b.n	1a003e56 <_free_r+0x6a>
1a003eac:	4770      	bx	lr
1a003eae:	f043 0101 	orr.w	r1, r3, #1
1a003eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003eb6:	f847 1c04 	str.w	r1, [r7, #-4]
1a003eba:	6013      	str	r3, [r2, #0]
1a003ebc:	d3ce      	bcc.n	1a003e5c <_free_r+0x70>
1a003ebe:	0a5a      	lsrs	r2, r3, #9
1a003ec0:	2a04      	cmp	r2, #4
1a003ec2:	d842      	bhi.n	1a003f4a <_free_r+0x15e>
1a003ec4:	099a      	lsrs	r2, r3, #6
1a003ec6:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a003eca:	00ff      	lsls	r7, r7, #3
1a003ecc:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a003ed0:	19e5      	adds	r5, r4, r7
1a003ed2:	59e2      	ldr	r2, [r4, r7]
1a003ed4:	3d08      	subs	r5, #8
1a003ed6:	4295      	cmp	r5, r2
1a003ed8:	d051      	beq.n	1a003f7e <_free_r+0x192>
1a003eda:	6851      	ldr	r1, [r2, #4]
1a003edc:	f021 0103 	bic.w	r1, r1, #3
1a003ee0:	4299      	cmp	r1, r3
1a003ee2:	d902      	bls.n	1a003eea <_free_r+0xfe>
1a003ee4:	6892      	ldr	r2, [r2, #8]
1a003ee6:	4295      	cmp	r5, r2
1a003ee8:	d1f7      	bne.n	1a003eda <_free_r+0xee>
1a003eea:	68d5      	ldr	r5, [r2, #12]
1a003eec:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a003ef0:	60a8      	str	r0, [r5, #8]
1a003ef2:	60d0      	str	r0, [r2, #12]
1a003ef4:	4630      	mov	r0, r6
1a003ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003efa:	f000 bc6b 	b.w	1a0047d4 <__malloc_unlock>
1a003efe:	2900      	cmp	r1, #0
1a003f00:	d15e      	bne.n	1a003fc0 <_free_r+0x1d4>
1a003f02:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a003f06:	442b      	add	r3, r5
1a003f08:	f043 0401 	orr.w	r4, r3, #1
1a003f0c:	60ca      	str	r2, [r1, #12]
1a003f0e:	6091      	str	r1, [r2, #8]
1a003f10:	6044      	str	r4, [r0, #4]
1a003f12:	50c3      	str	r3, [r0, r3]
1a003f14:	e7b4      	b.n	1a003e80 <_free_r+0x94>
1a003f16:	f01c 0f01 	tst.w	ip, #1
1a003f1a:	442b      	add	r3, r5
1a003f1c:	d107      	bne.n	1a003f2e <_free_r+0x142>
1a003f1e:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a003f22:	1a80      	subs	r0, r0, r2
1a003f24:	4413      	add	r3, r2
1a003f26:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a003f2a:	60ca      	str	r2, [r1, #12]
1a003f2c:	6091      	str	r1, [r2, #8]
1a003f2e:	4a28      	ldr	r2, [pc, #160]	; (1a003fd0 <_free_r+0x1e4>)
1a003f30:	6812      	ldr	r2, [r2, #0]
1a003f32:	f043 0101 	orr.w	r1, r3, #1
1a003f36:	429a      	cmp	r2, r3
1a003f38:	6041      	str	r1, [r0, #4]
1a003f3a:	60a0      	str	r0, [r4, #8]
1a003f3c:	d8a0      	bhi.n	1a003e80 <_free_r+0x94>
1a003f3e:	4b25      	ldr	r3, [pc, #148]	; (1a003fd4 <_free_r+0x1e8>)
1a003f40:	4630      	mov	r0, r6
1a003f42:	6819      	ldr	r1, [r3, #0]
1a003f44:	f7ff ff02 	bl	1a003d4c <_malloc_trim_r>
1a003f48:	e79a      	b.n	1a003e80 <_free_r+0x94>
1a003f4a:	2a14      	cmp	r2, #20
1a003f4c:	d90a      	bls.n	1a003f64 <_free_r+0x178>
1a003f4e:	2a54      	cmp	r2, #84	; 0x54
1a003f50:	d81d      	bhi.n	1a003f8e <_free_r+0x1a2>
1a003f52:	0b1a      	lsrs	r2, r3, #12
1a003f54:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a003f58:	00ff      	lsls	r7, r7, #3
1a003f5a:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a003f5e:	e7b7      	b.n	1a003ed0 <_free_r+0xe4>
1a003f60:	442b      	add	r3, r5
1a003f62:	e798      	b.n	1a003e96 <_free_r+0xaa>
1a003f64:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a003f68:	00ff      	lsls	r7, r7, #3
1a003f6a:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a003f6e:	e7af      	b.n	1a003ed0 <_free_r+0xe4>
1a003f70:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a003f74:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a003f78:	6045      	str	r5, [r0, #4]
1a003f7a:	50c3      	str	r3, [r0, r3]
1a003f7c:	e780      	b.n	1a003e80 <_free_r+0x94>
1a003f7e:	6863      	ldr	r3, [r4, #4]
1a003f80:	1089      	asrs	r1, r1, #2
1a003f82:	2701      	movs	r7, #1
1a003f84:	fa07 f101 	lsl.w	r1, r7, r1
1a003f88:	4319      	orrs	r1, r3
1a003f8a:	6061      	str	r1, [r4, #4]
1a003f8c:	e7ae      	b.n	1a003eec <_free_r+0x100>
1a003f8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a003f92:	d806      	bhi.n	1a003fa2 <_free_r+0x1b6>
1a003f94:	0bda      	lsrs	r2, r3, #15
1a003f96:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a003f9a:	00ff      	lsls	r7, r7, #3
1a003f9c:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a003fa0:	e796      	b.n	1a003ed0 <_free_r+0xe4>
1a003fa2:	f240 5154 	movw	r1, #1364	; 0x554
1a003fa6:	428a      	cmp	r2, r1
1a003fa8:	d806      	bhi.n	1a003fb8 <_free_r+0x1cc>
1a003faa:	0c9a      	lsrs	r2, r3, #18
1a003fac:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a003fb0:	00ff      	lsls	r7, r7, #3
1a003fb2:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a003fb6:	e78b      	b.n	1a003ed0 <_free_r+0xe4>
1a003fb8:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a003fbc:	217e      	movs	r1, #126	; 0x7e
1a003fbe:	e787      	b.n	1a003ed0 <_free_r+0xe4>
1a003fc0:	f043 0101 	orr.w	r1, r3, #1
1a003fc4:	6041      	str	r1, [r0, #4]
1a003fc6:	6013      	str	r3, [r2, #0]
1a003fc8:	e75a      	b.n	1a003e80 <_free_r+0x94>
1a003fca:	bf00      	nop
1a003fcc:	10000470 	.word	0x10000470
1a003fd0:	1000087c 	.word	0x1000087c
1a003fd4:	10001468 	.word	0x10001468

1a003fd8 <_fwalk_reent>:
1a003fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003fdc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a003fe0:	d01f      	beq.n	1a004022 <_fwalk_reent+0x4a>
1a003fe2:	4688      	mov	r8, r1
1a003fe4:	4606      	mov	r6, r0
1a003fe6:	f04f 0900 	mov.w	r9, #0
1a003fea:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a003fee:	3d01      	subs	r5, #1
1a003ff0:	d411      	bmi.n	1a004016 <_fwalk_reent+0x3e>
1a003ff2:	89a3      	ldrh	r3, [r4, #12]
1a003ff4:	2b01      	cmp	r3, #1
1a003ff6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a003ffa:	d908      	bls.n	1a00400e <_fwalk_reent+0x36>
1a003ffc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a004000:	3301      	adds	r3, #1
1a004002:	4621      	mov	r1, r4
1a004004:	4630      	mov	r0, r6
1a004006:	d002      	beq.n	1a00400e <_fwalk_reent+0x36>
1a004008:	47c0      	blx	r8
1a00400a:	ea49 0900 	orr.w	r9, r9, r0
1a00400e:	1c6b      	adds	r3, r5, #1
1a004010:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a004014:	d1ed      	bne.n	1a003ff2 <_fwalk_reent+0x1a>
1a004016:	683f      	ldr	r7, [r7, #0]
1a004018:	2f00      	cmp	r7, #0
1a00401a:	d1e6      	bne.n	1a003fea <_fwalk_reent+0x12>
1a00401c:	4648      	mov	r0, r9
1a00401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004022:	46b9      	mov	r9, r7
1a004024:	4648      	mov	r0, r9
1a004026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00402a:	bf00      	nop

1a00402c <__libc_init_array>:
1a00402c:	b570      	push	{r4, r5, r6, lr}
1a00402e:	4e0d      	ldr	r6, [pc, #52]	; (1a004064 <__libc_init_array+0x38>)
1a004030:	4d0d      	ldr	r5, [pc, #52]	; (1a004068 <__libc_init_array+0x3c>)
1a004032:	1b76      	subs	r6, r6, r5
1a004034:	10b6      	asrs	r6, r6, #2
1a004036:	d006      	beq.n	1a004046 <__libc_init_array+0x1a>
1a004038:	2400      	movs	r4, #0
1a00403a:	3401      	adds	r4, #1
1a00403c:	f855 3b04 	ldr.w	r3, [r5], #4
1a004040:	4798      	blx	r3
1a004042:	42a6      	cmp	r6, r4
1a004044:	d1f9      	bne.n	1a00403a <__libc_init_array+0xe>
1a004046:	4e09      	ldr	r6, [pc, #36]	; (1a00406c <__libc_init_array+0x40>)
1a004048:	4d09      	ldr	r5, [pc, #36]	; (1a004070 <__libc_init_array+0x44>)
1a00404a:	1b76      	subs	r6, r6, r5
1a00404c:	f7fc f9a5 	bl	1a00039a <_init>
1a004050:	10b6      	asrs	r6, r6, #2
1a004052:	d006      	beq.n	1a004062 <__libc_init_array+0x36>
1a004054:	2400      	movs	r4, #0
1a004056:	3401      	adds	r4, #1
1a004058:	f855 3b04 	ldr.w	r3, [r5], #4
1a00405c:	4798      	blx	r3
1a00405e:	42a6      	cmp	r6, r4
1a004060:	d1f9      	bne.n	1a004056 <__libc_init_array+0x2a>
1a004062:	bd70      	pop	{r4, r5, r6, pc}
1a004064:	1a008e7c 	.word	0x1a008e7c
1a004068:	1a008e7c 	.word	0x1a008e7c
1a00406c:	1a008e80 	.word	0x1a008e80
1a004070:	1a008e7c 	.word	0x1a008e7c

1a004074 <__retarget_lock_init_recursive>:
1a004074:	4770      	bx	lr
1a004076:	bf00      	nop

1a004078 <__retarget_lock_close_recursive>:
1a004078:	4770      	bx	lr
1a00407a:	bf00      	nop

1a00407c <__retarget_lock_acquire_recursive>:
1a00407c:	4770      	bx	lr
1a00407e:	bf00      	nop

1a004080 <__retarget_lock_release_recursive>:
1a004080:	4770      	bx	lr
1a004082:	bf00      	nop

1a004084 <_malloc_r>:
1a004084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004088:	f101 050b 	add.w	r5, r1, #11
1a00408c:	2d16      	cmp	r5, #22
1a00408e:	b083      	sub	sp, #12
1a004090:	4606      	mov	r6, r0
1a004092:	d823      	bhi.n	1a0040dc <_malloc_r+0x58>
1a004094:	2910      	cmp	r1, #16
1a004096:	f200 80b9 	bhi.w	1a00420c <_malloc_r+0x188>
1a00409a:	f000 fb95 	bl	1a0047c8 <__malloc_lock>
1a00409e:	2510      	movs	r5, #16
1a0040a0:	2318      	movs	r3, #24
1a0040a2:	2002      	movs	r0, #2
1a0040a4:	4fba      	ldr	r7, [pc, #744]	; (1a004390 <_malloc_r+0x30c>)
1a0040a6:	443b      	add	r3, r7
1a0040a8:	f1a3 0208 	sub.w	r2, r3, #8
1a0040ac:	685c      	ldr	r4, [r3, #4]
1a0040ae:	4294      	cmp	r4, r2
1a0040b0:	f000 80b9 	beq.w	1a004226 <_malloc_r+0x1a2>
1a0040b4:	6863      	ldr	r3, [r4, #4]
1a0040b6:	f023 0303 	bic.w	r3, r3, #3
1a0040ba:	4423      	add	r3, r4
1a0040bc:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0040c0:	685a      	ldr	r2, [r3, #4]
1a0040c2:	60e9      	str	r1, [r5, #12]
1a0040c4:	f042 0201 	orr.w	r2, r2, #1
1a0040c8:	4630      	mov	r0, r6
1a0040ca:	608d      	str	r5, [r1, #8]
1a0040cc:	605a      	str	r2, [r3, #4]
1a0040ce:	f000 fb81 	bl	1a0047d4 <__malloc_unlock>
1a0040d2:	3408      	adds	r4, #8
1a0040d4:	4620      	mov	r0, r4
1a0040d6:	b003      	add	sp, #12
1a0040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0040dc:	f035 0507 	bics.w	r5, r5, #7
1a0040e0:	f100 8094 	bmi.w	1a00420c <_malloc_r+0x188>
1a0040e4:	42a9      	cmp	r1, r5
1a0040e6:	f200 8091 	bhi.w	1a00420c <_malloc_r+0x188>
1a0040ea:	f000 fb6d 	bl	1a0047c8 <__malloc_lock>
1a0040ee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0040f2:	f0c0 81a2 	bcc.w	1a00443a <_malloc_r+0x3b6>
1a0040f6:	0a6b      	lsrs	r3, r5, #9
1a0040f8:	f000 808f 	beq.w	1a00421a <_malloc_r+0x196>
1a0040fc:	2b04      	cmp	r3, #4
1a0040fe:	f200 8178 	bhi.w	1a0043f2 <_malloc_r+0x36e>
1a004102:	09ab      	lsrs	r3, r5, #6
1a004104:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a004108:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a00410c:	00c3      	lsls	r3, r0, #3
1a00410e:	4fa0      	ldr	r7, [pc, #640]	; (1a004390 <_malloc_r+0x30c>)
1a004110:	443b      	add	r3, r7
1a004112:	f1a3 0108 	sub.w	r1, r3, #8
1a004116:	685c      	ldr	r4, [r3, #4]
1a004118:	42a1      	cmp	r1, r4
1a00411a:	d106      	bne.n	1a00412a <_malloc_r+0xa6>
1a00411c:	e00c      	b.n	1a004138 <_malloc_r+0xb4>
1a00411e:	2a00      	cmp	r2, #0
1a004120:	f280 8127 	bge.w	1a004372 <_malloc_r+0x2ee>
1a004124:	68e4      	ldr	r4, [r4, #12]
1a004126:	42a1      	cmp	r1, r4
1a004128:	d006      	beq.n	1a004138 <_malloc_r+0xb4>
1a00412a:	6863      	ldr	r3, [r4, #4]
1a00412c:	f023 0303 	bic.w	r3, r3, #3
1a004130:	1b5a      	subs	r2, r3, r5
1a004132:	2a0f      	cmp	r2, #15
1a004134:	ddf3      	ble.n	1a00411e <_malloc_r+0x9a>
1a004136:	4660      	mov	r0, ip
1a004138:	693c      	ldr	r4, [r7, #16]
1a00413a:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a0043a4 <_malloc_r+0x320>
1a00413e:	4564      	cmp	r4, ip
1a004140:	d07c      	beq.n	1a00423c <_malloc_r+0x1b8>
1a004142:	6863      	ldr	r3, [r4, #4]
1a004144:	f023 0303 	bic.w	r3, r3, #3
1a004148:	1b5a      	subs	r2, r3, r5
1a00414a:	2a0f      	cmp	r2, #15
1a00414c:	f300 8183 	bgt.w	1a004456 <_malloc_r+0x3d2>
1a004150:	2a00      	cmp	r2, #0
1a004152:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a004156:	f280 8174 	bge.w	1a004442 <_malloc_r+0x3be>
1a00415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00415e:	f080 8125 	bcs.w	1a0043ac <_malloc_r+0x328>
1a004162:	08db      	lsrs	r3, r3, #3
1a004164:	1c59      	adds	r1, r3, #1
1a004166:	687a      	ldr	r2, [r7, #4]
1a004168:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a00416c:	f8c4 8008 	str.w	r8, [r4, #8]
1a004170:	f04f 0e01 	mov.w	lr, #1
1a004174:	109b      	asrs	r3, r3, #2
1a004176:	fa0e f303 	lsl.w	r3, lr, r3
1a00417a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00417e:	4313      	orrs	r3, r2
1a004180:	f1ae 0208 	sub.w	r2, lr, #8
1a004184:	60e2      	str	r2, [r4, #12]
1a004186:	607b      	str	r3, [r7, #4]
1a004188:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a00418c:	f8c8 400c 	str.w	r4, [r8, #12]
1a004190:	1082      	asrs	r2, r0, #2
1a004192:	2401      	movs	r4, #1
1a004194:	4094      	lsls	r4, r2
1a004196:	429c      	cmp	r4, r3
1a004198:	d856      	bhi.n	1a004248 <_malloc_r+0x1c4>
1a00419a:	421c      	tst	r4, r3
1a00419c:	d106      	bne.n	1a0041ac <_malloc_r+0x128>
1a00419e:	f020 0003 	bic.w	r0, r0, #3
1a0041a2:	0064      	lsls	r4, r4, #1
1a0041a4:	421c      	tst	r4, r3
1a0041a6:	f100 0004 	add.w	r0, r0, #4
1a0041aa:	d0fa      	beq.n	1a0041a2 <_malloc_r+0x11e>
1a0041ac:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a0041b0:	46ce      	mov	lr, r9
1a0041b2:	4680      	mov	r8, r0
1a0041b4:	f8de 300c 	ldr.w	r3, [lr, #12]
1a0041b8:	459e      	cmp	lr, r3
1a0041ba:	d107      	bne.n	1a0041cc <_malloc_r+0x148>
1a0041bc:	e125      	b.n	1a00440a <_malloc_r+0x386>
1a0041be:	2a00      	cmp	r2, #0
1a0041c0:	f280 812c 	bge.w	1a00441c <_malloc_r+0x398>
1a0041c4:	68db      	ldr	r3, [r3, #12]
1a0041c6:	459e      	cmp	lr, r3
1a0041c8:	f000 811f 	beq.w	1a00440a <_malloc_r+0x386>
1a0041cc:	6859      	ldr	r1, [r3, #4]
1a0041ce:	f021 0103 	bic.w	r1, r1, #3
1a0041d2:	1b4a      	subs	r2, r1, r5
1a0041d4:	2a0f      	cmp	r2, #15
1a0041d6:	ddf2      	ble.n	1a0041be <_malloc_r+0x13a>
1a0041d8:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0041dc:	195c      	adds	r4, r3, r5
1a0041de:	f045 0501 	orr.w	r5, r5, #1
1a0041e2:	605d      	str	r5, [r3, #4]
1a0041e4:	f042 0501 	orr.w	r5, r2, #1
1a0041e8:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0041ec:	4630      	mov	r0, r6
1a0041ee:	f8ce 8008 	str.w	r8, [lr, #8]
1a0041f2:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0041f6:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0041fa:	6065      	str	r5, [r4, #4]
1a0041fc:	505a      	str	r2, [r3, r1]
1a0041fe:	9300      	str	r3, [sp, #0]
1a004200:	f000 fae8 	bl	1a0047d4 <__malloc_unlock>
1a004204:	9b00      	ldr	r3, [sp, #0]
1a004206:	f103 0408 	add.w	r4, r3, #8
1a00420a:	e002      	b.n	1a004212 <_malloc_r+0x18e>
1a00420c:	230c      	movs	r3, #12
1a00420e:	6033      	str	r3, [r6, #0]
1a004210:	2400      	movs	r4, #0
1a004212:	4620      	mov	r0, r4
1a004214:	b003      	add	sp, #12
1a004216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00421a:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00421e:	2040      	movs	r0, #64	; 0x40
1a004220:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a004224:	e773      	b.n	1a00410e <_malloc_r+0x8a>
1a004226:	68dc      	ldr	r4, [r3, #12]
1a004228:	42a3      	cmp	r3, r4
1a00422a:	bf08      	it	eq
1a00422c:	3002      	addeq	r0, #2
1a00422e:	f47f af41 	bne.w	1a0040b4 <_malloc_r+0x30>
1a004232:	693c      	ldr	r4, [r7, #16]
1a004234:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a0043a4 <_malloc_r+0x320>
1a004238:	4564      	cmp	r4, ip
1a00423a:	d182      	bne.n	1a004142 <_malloc_r+0xbe>
1a00423c:	687b      	ldr	r3, [r7, #4]
1a00423e:	1082      	asrs	r2, r0, #2
1a004240:	2401      	movs	r4, #1
1a004242:	4094      	lsls	r4, r2
1a004244:	429c      	cmp	r4, r3
1a004246:	d9a8      	bls.n	1a00419a <_malloc_r+0x116>
1a004248:	68bc      	ldr	r4, [r7, #8]
1a00424a:	6863      	ldr	r3, [r4, #4]
1a00424c:	f023 0803 	bic.w	r8, r3, #3
1a004250:	45a8      	cmp	r8, r5
1a004252:	d303      	bcc.n	1a00425c <_malloc_r+0x1d8>
1a004254:	eba8 0305 	sub.w	r3, r8, r5
1a004258:	2b0f      	cmp	r3, #15
1a00425a:	dc7a      	bgt.n	1a004352 <_malloc_r+0x2ce>
1a00425c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a0043a8 <_malloc_r+0x324>
1a004260:	4b4c      	ldr	r3, [pc, #304]	; (1a004394 <_malloc_r+0x310>)
1a004262:	f8d9 2000 	ldr.w	r2, [r9]
1a004266:	681b      	ldr	r3, [r3, #0]
1a004268:	3201      	adds	r2, #1
1a00426a:	442b      	add	r3, r5
1a00426c:	eb04 0a08 	add.w	sl, r4, r8
1a004270:	f000 813c 	beq.w	1a0044ec <_malloc_r+0x468>
1a004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a004278:	330f      	adds	r3, #15
1a00427a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a00427e:	f02b 0b0f 	bic.w	fp, fp, #15
1a004282:	4659      	mov	r1, fp
1a004284:	4630      	mov	r0, r6
1a004286:	f7fc f8dd 	bl	1a000444 <_sbrk_r>
1a00428a:	1c41      	adds	r1, r0, #1
1a00428c:	4602      	mov	r2, r0
1a00428e:	f000 80fc 	beq.w	1a00448a <_malloc_r+0x406>
1a004292:	4582      	cmp	sl, r0
1a004294:	f200 80f7 	bhi.w	1a004486 <_malloc_r+0x402>
1a004298:	4b3f      	ldr	r3, [pc, #252]	; (1a004398 <_malloc_r+0x314>)
1a00429a:	6818      	ldr	r0, [r3, #0]
1a00429c:	4458      	add	r0, fp
1a00429e:	6018      	str	r0, [r3, #0]
1a0042a0:	4601      	mov	r1, r0
1a0042a2:	f000 8157 	beq.w	1a004554 <_malloc_r+0x4d0>
1a0042a6:	f8d9 0000 	ldr.w	r0, [r9]
1a0042aa:	9301      	str	r3, [sp, #4]
1a0042ac:	3001      	adds	r0, #1
1a0042ae:	bf1b      	ittet	ne
1a0042b0:	eba2 0a0a 	subne.w	sl, r2, sl
1a0042b4:	4451      	addne	r1, sl
1a0042b6:	f8c9 2000 	streq.w	r2, [r9]
1a0042ba:	6019      	strne	r1, [r3, #0]
1a0042bc:	f012 0a07 	ands.w	sl, r2, #7
1a0042c0:	f000 8120 	beq.w	1a004504 <_malloc_r+0x480>
1a0042c4:	f1ca 0108 	rsb	r1, sl, #8
1a0042c8:	440a      	add	r2, r1
1a0042ca:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a0042ce:	4493      	add	fp, r2
1a0042d0:	3108      	adds	r1, #8
1a0042d2:	eba1 010b 	sub.w	r1, r1, fp
1a0042d6:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a0042da:	4649      	mov	r1, r9
1a0042dc:	4630      	mov	r0, r6
1a0042de:	9200      	str	r2, [sp, #0]
1a0042e0:	f7fc f8b0 	bl	1a000444 <_sbrk_r>
1a0042e4:	1c42      	adds	r2, r0, #1
1a0042e6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0042ea:	f000 8158 	beq.w	1a00459e <_malloc_r+0x51a>
1a0042ee:	1a80      	subs	r0, r0, r2
1a0042f0:	eb00 0b09 	add.w	fp, r0, r9
1a0042f4:	6818      	ldr	r0, [r3, #0]
1a0042f6:	60ba      	str	r2, [r7, #8]
1a0042f8:	f04b 0101 	orr.w	r1, fp, #1
1a0042fc:	4448      	add	r0, r9
1a0042fe:	42bc      	cmp	r4, r7
1a004300:	6051      	str	r1, [r2, #4]
1a004302:	6018      	str	r0, [r3, #0]
1a004304:	f000 8132 	beq.w	1a00456c <_malloc_r+0x4e8>
1a004308:	f1b8 0f0f 	cmp.w	r8, #15
1a00430c:	f240 8130 	bls.w	1a004570 <_malloc_r+0x4ec>
1a004310:	6861      	ldr	r1, [r4, #4]
1a004312:	f1a8 0c0c 	sub.w	ip, r8, #12
1a004316:	f02c 0c07 	bic.w	ip, ip, #7
1a00431a:	f001 0101 	and.w	r1, r1, #1
1a00431e:	eb04 0e0c 	add.w	lr, r4, ip
1a004322:	ea41 010c 	orr.w	r1, r1, ip
1a004326:	f04f 0805 	mov.w	r8, #5
1a00432a:	f1bc 0f0f 	cmp.w	ip, #15
1a00432e:	6061      	str	r1, [r4, #4]
1a004330:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a004334:	f200 813b 	bhi.w	1a0045ae <_malloc_r+0x52a>
1a004338:	6851      	ldr	r1, [r2, #4]
1a00433a:	4614      	mov	r4, r2
1a00433c:	4b17      	ldr	r3, [pc, #92]	; (1a00439c <_malloc_r+0x318>)
1a00433e:	681a      	ldr	r2, [r3, #0]
1a004340:	4282      	cmp	r2, r0
1a004342:	bf38      	it	cc
1a004344:	6018      	strcc	r0, [r3, #0]
1a004346:	4b16      	ldr	r3, [pc, #88]	; (1a0043a0 <_malloc_r+0x31c>)
1a004348:	681a      	ldr	r2, [r3, #0]
1a00434a:	4282      	cmp	r2, r0
1a00434c:	bf38      	it	cc
1a00434e:	6018      	strcc	r0, [r3, #0]
1a004350:	e09d      	b.n	1a00448e <_malloc_r+0x40a>
1a004352:	1962      	adds	r2, r4, r5
1a004354:	f043 0301 	orr.w	r3, r3, #1
1a004358:	f045 0501 	orr.w	r5, r5, #1
1a00435c:	6065      	str	r5, [r4, #4]
1a00435e:	4630      	mov	r0, r6
1a004360:	60ba      	str	r2, [r7, #8]
1a004362:	6053      	str	r3, [r2, #4]
1a004364:	f000 fa36 	bl	1a0047d4 <__malloc_unlock>
1a004368:	3408      	adds	r4, #8
1a00436a:	4620      	mov	r0, r4
1a00436c:	b003      	add	sp, #12
1a00436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004372:	4423      	add	r3, r4
1a004374:	68e1      	ldr	r1, [r4, #12]
1a004376:	685a      	ldr	r2, [r3, #4]
1a004378:	68a5      	ldr	r5, [r4, #8]
1a00437a:	f042 0201 	orr.w	r2, r2, #1
1a00437e:	60e9      	str	r1, [r5, #12]
1a004380:	4630      	mov	r0, r6
1a004382:	608d      	str	r5, [r1, #8]
1a004384:	605a      	str	r2, [r3, #4]
1a004386:	f000 fa25 	bl	1a0047d4 <__malloc_unlock>
1a00438a:	3408      	adds	r4, #8
1a00438c:	e741      	b.n	1a004212 <_malloc_r+0x18e>
1a00438e:	bf00      	nop
1a004390:	10000470 	.word	0x10000470
1a004394:	10001468 	.word	0x10001468
1a004398:	10001438 	.word	0x10001438
1a00439c:	10001460 	.word	0x10001460
1a0043a0:	10001464 	.word	0x10001464
1a0043a4:	10000478 	.word	0x10000478
1a0043a8:	10000878 	.word	0x10000878
1a0043ac:	0a5a      	lsrs	r2, r3, #9
1a0043ae:	2a04      	cmp	r2, #4
1a0043b0:	d963      	bls.n	1a00447a <_malloc_r+0x3f6>
1a0043b2:	2a14      	cmp	r2, #20
1a0043b4:	f200 80b7 	bhi.w	1a004526 <_malloc_r+0x4a2>
1a0043b8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a0043bc:	00c9      	lsls	r1, r1, #3
1a0043be:	325b      	adds	r2, #91	; 0x5b
1a0043c0:	eb07 0e01 	add.w	lr, r7, r1
1a0043c4:	5879      	ldr	r1, [r7, r1]
1a0043c6:	f1ae 0e08 	sub.w	lr, lr, #8
1a0043ca:	458e      	cmp	lr, r1
1a0043cc:	f000 8091 	beq.w	1a0044f2 <_malloc_r+0x46e>
1a0043d0:	684a      	ldr	r2, [r1, #4]
1a0043d2:	f022 0203 	bic.w	r2, r2, #3
1a0043d6:	429a      	cmp	r2, r3
1a0043d8:	d902      	bls.n	1a0043e0 <_malloc_r+0x35c>
1a0043da:	6889      	ldr	r1, [r1, #8]
1a0043dc:	458e      	cmp	lr, r1
1a0043de:	d1f7      	bne.n	1a0043d0 <_malloc_r+0x34c>
1a0043e0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a0043e4:	687b      	ldr	r3, [r7, #4]
1a0043e6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a0043ea:	f8ce 4008 	str.w	r4, [lr, #8]
1a0043ee:	60cc      	str	r4, [r1, #12]
1a0043f0:	e6ce      	b.n	1a004190 <_malloc_r+0x10c>
1a0043f2:	2b14      	cmp	r3, #20
1a0043f4:	d959      	bls.n	1a0044aa <_malloc_r+0x426>
1a0043f6:	2b54      	cmp	r3, #84	; 0x54
1a0043f8:	f200 809d 	bhi.w	1a004536 <_malloc_r+0x4b2>
1a0043fc:	0b2b      	lsrs	r3, r5, #12
1a0043fe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a004402:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a004406:	00c3      	lsls	r3, r0, #3
1a004408:	e681      	b.n	1a00410e <_malloc_r+0x8a>
1a00440a:	f108 0801 	add.w	r8, r8, #1
1a00440e:	f018 0f03 	tst.w	r8, #3
1a004412:	f10e 0e08 	add.w	lr, lr, #8
1a004416:	f47f aecd 	bne.w	1a0041b4 <_malloc_r+0x130>
1a00441a:	e051      	b.n	1a0044c0 <_malloc_r+0x43c>
1a00441c:	4419      	add	r1, r3
1a00441e:	461c      	mov	r4, r3
1a004420:	684a      	ldr	r2, [r1, #4]
1a004422:	68db      	ldr	r3, [r3, #12]
1a004424:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a004428:	f042 0201 	orr.w	r2, r2, #1
1a00442c:	604a      	str	r2, [r1, #4]
1a00442e:	4630      	mov	r0, r6
1a004430:	60eb      	str	r3, [r5, #12]
1a004432:	609d      	str	r5, [r3, #8]
1a004434:	f000 f9ce 	bl	1a0047d4 <__malloc_unlock>
1a004438:	e6eb      	b.n	1a004212 <_malloc_r+0x18e>
1a00443a:	08e8      	lsrs	r0, r5, #3
1a00443c:	f105 0308 	add.w	r3, r5, #8
1a004440:	e630      	b.n	1a0040a4 <_malloc_r+0x20>
1a004442:	4423      	add	r3, r4
1a004444:	4630      	mov	r0, r6
1a004446:	685a      	ldr	r2, [r3, #4]
1a004448:	f042 0201 	orr.w	r2, r2, #1
1a00444c:	605a      	str	r2, [r3, #4]
1a00444e:	3408      	adds	r4, #8
1a004450:	f000 f9c0 	bl	1a0047d4 <__malloc_unlock>
1a004454:	e6dd      	b.n	1a004212 <_malloc_r+0x18e>
1a004456:	1961      	adds	r1, r4, r5
1a004458:	f045 0e01 	orr.w	lr, r5, #1
1a00445c:	f042 0501 	orr.w	r5, r2, #1
1a004460:	f8c4 e004 	str.w	lr, [r4, #4]
1a004464:	4630      	mov	r0, r6
1a004466:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a00446a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a00446e:	604d      	str	r5, [r1, #4]
1a004470:	50e2      	str	r2, [r4, r3]
1a004472:	f000 f9af 	bl	1a0047d4 <__malloc_unlock>
1a004476:	3408      	adds	r4, #8
1a004478:	e6cb      	b.n	1a004212 <_malloc_r+0x18e>
1a00447a:	099a      	lsrs	r2, r3, #6
1a00447c:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a004480:	00c9      	lsls	r1, r1, #3
1a004482:	3238      	adds	r2, #56	; 0x38
1a004484:	e79c      	b.n	1a0043c0 <_malloc_r+0x33c>
1a004486:	42bc      	cmp	r4, r7
1a004488:	d05f      	beq.n	1a00454a <_malloc_r+0x4c6>
1a00448a:	68bc      	ldr	r4, [r7, #8]
1a00448c:	6861      	ldr	r1, [r4, #4]
1a00448e:	f021 0b03 	bic.w	fp, r1, #3
1a004492:	45ab      	cmp	fp, r5
1a004494:	ebab 0305 	sub.w	r3, fp, r5
1a004498:	d302      	bcc.n	1a0044a0 <_malloc_r+0x41c>
1a00449a:	2b0f      	cmp	r3, #15
1a00449c:	f73f af59 	bgt.w	1a004352 <_malloc_r+0x2ce>
1a0044a0:	4630      	mov	r0, r6
1a0044a2:	f000 f997 	bl	1a0047d4 <__malloc_unlock>
1a0044a6:	2400      	movs	r4, #0
1a0044a8:	e6b3      	b.n	1a004212 <_malloc_r+0x18e>
1a0044aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a0044ae:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a0044b2:	00c3      	lsls	r3, r0, #3
1a0044b4:	e62b      	b.n	1a00410e <_malloc_r+0x8a>
1a0044b6:	f859 3908 	ldr.w	r3, [r9], #-8
1a0044ba:	454b      	cmp	r3, r9
1a0044bc:	f040 8096 	bne.w	1a0045ec <_malloc_r+0x568>
1a0044c0:	f010 0f03 	tst.w	r0, #3
1a0044c4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0044c8:	d1f5      	bne.n	1a0044b6 <_malloc_r+0x432>
1a0044ca:	687b      	ldr	r3, [r7, #4]
1a0044cc:	ea23 0304 	bic.w	r3, r3, r4
1a0044d0:	607b      	str	r3, [r7, #4]
1a0044d2:	0064      	lsls	r4, r4, #1
1a0044d4:	429c      	cmp	r4, r3
1a0044d6:	f63f aeb7 	bhi.w	1a004248 <_malloc_r+0x1c4>
1a0044da:	b91c      	cbnz	r4, 1a0044e4 <_malloc_r+0x460>
1a0044dc:	e6b4      	b.n	1a004248 <_malloc_r+0x1c4>
1a0044de:	0064      	lsls	r4, r4, #1
1a0044e0:	f108 0804 	add.w	r8, r8, #4
1a0044e4:	421c      	tst	r4, r3
1a0044e6:	d0fa      	beq.n	1a0044de <_malloc_r+0x45a>
1a0044e8:	4640      	mov	r0, r8
1a0044ea:	e65f      	b.n	1a0041ac <_malloc_r+0x128>
1a0044ec:	f103 0b10 	add.w	fp, r3, #16
1a0044f0:	e6c7      	b.n	1a004282 <_malloc_r+0x1fe>
1a0044f2:	687b      	ldr	r3, [r7, #4]
1a0044f4:	1092      	asrs	r2, r2, #2
1a0044f6:	f04f 0801 	mov.w	r8, #1
1a0044fa:	fa08 f202 	lsl.w	r2, r8, r2
1a0044fe:	4313      	orrs	r3, r2
1a004500:	607b      	str	r3, [r7, #4]
1a004502:	e770      	b.n	1a0043e6 <_malloc_r+0x362>
1a004504:	eb02 000b 	add.w	r0, r2, fp
1a004508:	4240      	negs	r0, r0
1a00450a:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a00450e:	4649      	mov	r1, r9
1a004510:	4630      	mov	r0, r6
1a004512:	9200      	str	r2, [sp, #0]
1a004514:	f7fb ff96 	bl	1a000444 <_sbrk_r>
1a004518:	1c43      	adds	r3, r0, #1
1a00451a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00451e:	f47f aee6 	bne.w	1a0042ee <_malloc_r+0x26a>
1a004522:	46d1      	mov	r9, sl
1a004524:	e6e6      	b.n	1a0042f4 <_malloc_r+0x270>
1a004526:	2a54      	cmp	r2, #84	; 0x54
1a004528:	d825      	bhi.n	1a004576 <_malloc_r+0x4f2>
1a00452a:	0b1a      	lsrs	r2, r3, #12
1a00452c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a004530:	00c9      	lsls	r1, r1, #3
1a004532:	326e      	adds	r2, #110	; 0x6e
1a004534:	e744      	b.n	1a0043c0 <_malloc_r+0x33c>
1a004536:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a00453a:	d825      	bhi.n	1a004588 <_malloc_r+0x504>
1a00453c:	0beb      	lsrs	r3, r5, #15
1a00453e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a004542:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a004546:	00c3      	lsls	r3, r0, #3
1a004548:	e5e1      	b.n	1a00410e <_malloc_r+0x8a>
1a00454a:	4b29      	ldr	r3, [pc, #164]	; (1a0045f0 <_malloc_r+0x56c>)
1a00454c:	6819      	ldr	r1, [r3, #0]
1a00454e:	4459      	add	r1, fp
1a004550:	6019      	str	r1, [r3, #0]
1a004552:	e6a8      	b.n	1a0042a6 <_malloc_r+0x222>
1a004554:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a004558:	f1bc 0f00 	cmp.w	ip, #0
1a00455c:	f47f aea3 	bne.w	1a0042a6 <_malloc_r+0x222>
1a004560:	44c3      	add	fp, r8
1a004562:	68bc      	ldr	r4, [r7, #8]
1a004564:	f04b 0101 	orr.w	r1, fp, #1
1a004568:	6061      	str	r1, [r4, #4]
1a00456a:	e6e7      	b.n	1a00433c <_malloc_r+0x2b8>
1a00456c:	4614      	mov	r4, r2
1a00456e:	e6e5      	b.n	1a00433c <_malloc_r+0x2b8>
1a004570:	2301      	movs	r3, #1
1a004572:	6053      	str	r3, [r2, #4]
1a004574:	e794      	b.n	1a0044a0 <_malloc_r+0x41c>
1a004576:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00457a:	d823      	bhi.n	1a0045c4 <_malloc_r+0x540>
1a00457c:	0bda      	lsrs	r2, r3, #15
1a00457e:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a004582:	00c9      	lsls	r1, r1, #3
1a004584:	3277      	adds	r2, #119	; 0x77
1a004586:	e71b      	b.n	1a0043c0 <_malloc_r+0x33c>
1a004588:	f240 5254 	movw	r2, #1364	; 0x554
1a00458c:	4293      	cmp	r3, r2
1a00458e:	d823      	bhi.n	1a0045d8 <_malloc_r+0x554>
1a004590:	0cab      	lsrs	r3, r5, #18
1a004592:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a004596:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a00459a:	00c3      	lsls	r3, r0, #3
1a00459c:	e5b7      	b.n	1a00410e <_malloc_r+0x8a>
1a00459e:	f1aa 0a08 	sub.w	sl, sl, #8
1a0045a2:	44d3      	add	fp, sl
1a0045a4:	ebab 0b02 	sub.w	fp, fp, r2
1a0045a8:	f04f 0900 	mov.w	r9, #0
1a0045ac:	e6a2      	b.n	1a0042f4 <_malloc_r+0x270>
1a0045ae:	f104 0108 	add.w	r1, r4, #8
1a0045b2:	4630      	mov	r0, r6
1a0045b4:	9300      	str	r3, [sp, #0]
1a0045b6:	f7ff fc19 	bl	1a003dec <_free_r>
1a0045ba:	68bc      	ldr	r4, [r7, #8]
1a0045bc:	9b00      	ldr	r3, [sp, #0]
1a0045be:	6861      	ldr	r1, [r4, #4]
1a0045c0:	6818      	ldr	r0, [r3, #0]
1a0045c2:	e6bb      	b.n	1a00433c <_malloc_r+0x2b8>
1a0045c4:	f240 5154 	movw	r1, #1364	; 0x554
1a0045c8:	428a      	cmp	r2, r1
1a0045ca:	d80b      	bhi.n	1a0045e4 <_malloc_r+0x560>
1a0045cc:	0c9a      	lsrs	r2, r3, #18
1a0045ce:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0045d2:	00c9      	lsls	r1, r1, #3
1a0045d4:	327c      	adds	r2, #124	; 0x7c
1a0045d6:	e6f3      	b.n	1a0043c0 <_malloc_r+0x33c>
1a0045d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a0045dc:	207f      	movs	r0, #127	; 0x7f
1a0045de:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a0045e2:	e594      	b.n	1a00410e <_malloc_r+0x8a>
1a0045e4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a0045e8:	227e      	movs	r2, #126	; 0x7e
1a0045ea:	e6e9      	b.n	1a0043c0 <_malloc_r+0x33c>
1a0045ec:	687b      	ldr	r3, [r7, #4]
1a0045ee:	e770      	b.n	1a0044d2 <_malloc_r+0x44e>
1a0045f0:	10001438 	.word	0x10001438

1a0045f4 <memcpy>:
1a0045f4:	4684      	mov	ip, r0
1a0045f6:	ea41 0300 	orr.w	r3, r1, r0
1a0045fa:	f013 0303 	ands.w	r3, r3, #3
1a0045fe:	d16d      	bne.n	1a0046dc <memcpy+0xe8>
1a004600:	3a40      	subs	r2, #64	; 0x40
1a004602:	d341      	bcc.n	1a004688 <memcpy+0x94>
1a004604:	f851 3b04 	ldr.w	r3, [r1], #4
1a004608:	f840 3b04 	str.w	r3, [r0], #4
1a00460c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004610:	f840 3b04 	str.w	r3, [r0], #4
1a004614:	f851 3b04 	ldr.w	r3, [r1], #4
1a004618:	f840 3b04 	str.w	r3, [r0], #4
1a00461c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004620:	f840 3b04 	str.w	r3, [r0], #4
1a004624:	f851 3b04 	ldr.w	r3, [r1], #4
1a004628:	f840 3b04 	str.w	r3, [r0], #4
1a00462c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004630:	f840 3b04 	str.w	r3, [r0], #4
1a004634:	f851 3b04 	ldr.w	r3, [r1], #4
1a004638:	f840 3b04 	str.w	r3, [r0], #4
1a00463c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004640:	f840 3b04 	str.w	r3, [r0], #4
1a004644:	f851 3b04 	ldr.w	r3, [r1], #4
1a004648:	f840 3b04 	str.w	r3, [r0], #4
1a00464c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004650:	f840 3b04 	str.w	r3, [r0], #4
1a004654:	f851 3b04 	ldr.w	r3, [r1], #4
1a004658:	f840 3b04 	str.w	r3, [r0], #4
1a00465c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004660:	f840 3b04 	str.w	r3, [r0], #4
1a004664:	f851 3b04 	ldr.w	r3, [r1], #4
1a004668:	f840 3b04 	str.w	r3, [r0], #4
1a00466c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004670:	f840 3b04 	str.w	r3, [r0], #4
1a004674:	f851 3b04 	ldr.w	r3, [r1], #4
1a004678:	f840 3b04 	str.w	r3, [r0], #4
1a00467c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004680:	f840 3b04 	str.w	r3, [r0], #4
1a004684:	3a40      	subs	r2, #64	; 0x40
1a004686:	d2bd      	bcs.n	1a004604 <memcpy+0x10>
1a004688:	3230      	adds	r2, #48	; 0x30
1a00468a:	d311      	bcc.n	1a0046b0 <memcpy+0xbc>
1a00468c:	f851 3b04 	ldr.w	r3, [r1], #4
1a004690:	f840 3b04 	str.w	r3, [r0], #4
1a004694:	f851 3b04 	ldr.w	r3, [r1], #4
1a004698:	f840 3b04 	str.w	r3, [r0], #4
1a00469c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0046a0:	f840 3b04 	str.w	r3, [r0], #4
1a0046a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0046a8:	f840 3b04 	str.w	r3, [r0], #4
1a0046ac:	3a10      	subs	r2, #16
1a0046ae:	d2ed      	bcs.n	1a00468c <memcpy+0x98>
1a0046b0:	320c      	adds	r2, #12
1a0046b2:	d305      	bcc.n	1a0046c0 <memcpy+0xcc>
1a0046b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0046b8:	f840 3b04 	str.w	r3, [r0], #4
1a0046bc:	3a04      	subs	r2, #4
1a0046be:	d2f9      	bcs.n	1a0046b4 <memcpy+0xc0>
1a0046c0:	3204      	adds	r2, #4
1a0046c2:	d008      	beq.n	1a0046d6 <memcpy+0xe2>
1a0046c4:	07d2      	lsls	r2, r2, #31
1a0046c6:	bf1c      	itt	ne
1a0046c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0046cc:	f800 3b01 	strbne.w	r3, [r0], #1
1a0046d0:	d301      	bcc.n	1a0046d6 <memcpy+0xe2>
1a0046d2:	880b      	ldrh	r3, [r1, #0]
1a0046d4:	8003      	strh	r3, [r0, #0]
1a0046d6:	4660      	mov	r0, ip
1a0046d8:	4770      	bx	lr
1a0046da:	bf00      	nop
1a0046dc:	2a08      	cmp	r2, #8
1a0046de:	d313      	bcc.n	1a004708 <memcpy+0x114>
1a0046e0:	078b      	lsls	r3, r1, #30
1a0046e2:	d08d      	beq.n	1a004600 <memcpy+0xc>
1a0046e4:	f010 0303 	ands.w	r3, r0, #3
1a0046e8:	d08a      	beq.n	1a004600 <memcpy+0xc>
1a0046ea:	f1c3 0304 	rsb	r3, r3, #4
1a0046ee:	1ad2      	subs	r2, r2, r3
1a0046f0:	07db      	lsls	r3, r3, #31
1a0046f2:	bf1c      	itt	ne
1a0046f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0046f8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0046fc:	d380      	bcc.n	1a004600 <memcpy+0xc>
1a0046fe:	f831 3b02 	ldrh.w	r3, [r1], #2
1a004702:	f820 3b02 	strh.w	r3, [r0], #2
1a004706:	e77b      	b.n	1a004600 <memcpy+0xc>
1a004708:	3a04      	subs	r2, #4
1a00470a:	d3d9      	bcc.n	1a0046c0 <memcpy+0xcc>
1a00470c:	3a01      	subs	r2, #1
1a00470e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004712:	f800 3b01 	strb.w	r3, [r0], #1
1a004716:	d2f9      	bcs.n	1a00470c <memcpy+0x118>
1a004718:	780b      	ldrb	r3, [r1, #0]
1a00471a:	7003      	strb	r3, [r0, #0]
1a00471c:	784b      	ldrb	r3, [r1, #1]
1a00471e:	7043      	strb	r3, [r0, #1]
1a004720:	788b      	ldrb	r3, [r1, #2]
1a004722:	7083      	strb	r3, [r0, #2]
1a004724:	4660      	mov	r0, ip
1a004726:	4770      	bx	lr

1a004728 <memset>:
1a004728:	b4f0      	push	{r4, r5, r6, r7}
1a00472a:	0786      	lsls	r6, r0, #30
1a00472c:	d046      	beq.n	1a0047bc <memset+0x94>
1a00472e:	1e54      	subs	r4, r2, #1
1a004730:	2a00      	cmp	r2, #0
1a004732:	d03c      	beq.n	1a0047ae <memset+0x86>
1a004734:	b2ca      	uxtb	r2, r1
1a004736:	4603      	mov	r3, r0
1a004738:	e002      	b.n	1a004740 <memset+0x18>
1a00473a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a00473e:	d336      	bcc.n	1a0047ae <memset+0x86>
1a004740:	f803 2b01 	strb.w	r2, [r3], #1
1a004744:	079d      	lsls	r5, r3, #30
1a004746:	d1f8      	bne.n	1a00473a <memset+0x12>
1a004748:	2c03      	cmp	r4, #3
1a00474a:	d929      	bls.n	1a0047a0 <memset+0x78>
1a00474c:	b2cd      	uxtb	r5, r1
1a00474e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a004752:	2c0f      	cmp	r4, #15
1a004754:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a004758:	d933      	bls.n	1a0047c2 <memset+0x9a>
1a00475a:	f1a4 0610 	sub.w	r6, r4, #16
1a00475e:	0936      	lsrs	r6, r6, #4
1a004760:	f103 0720 	add.w	r7, r3, #32
1a004764:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a004768:	f103 0210 	add.w	r2, r3, #16
1a00476c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a004770:	e942 5502 	strd	r5, r5, [r2, #-8]
1a004774:	3210      	adds	r2, #16
1a004776:	42ba      	cmp	r2, r7
1a004778:	d1f8      	bne.n	1a00476c <memset+0x44>
1a00477a:	1c72      	adds	r2, r6, #1
1a00477c:	f014 0f0c 	tst.w	r4, #12
1a004780:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a004784:	f004 060f 	and.w	r6, r4, #15
1a004788:	d013      	beq.n	1a0047b2 <memset+0x8a>
1a00478a:	1f33      	subs	r3, r6, #4
1a00478c:	f023 0303 	bic.w	r3, r3, #3
1a004790:	3304      	adds	r3, #4
1a004792:	4413      	add	r3, r2
1a004794:	f842 5b04 	str.w	r5, [r2], #4
1a004798:	4293      	cmp	r3, r2
1a00479a:	d1fb      	bne.n	1a004794 <memset+0x6c>
1a00479c:	f006 0403 	and.w	r4, r6, #3
1a0047a0:	b12c      	cbz	r4, 1a0047ae <memset+0x86>
1a0047a2:	b2c9      	uxtb	r1, r1
1a0047a4:	441c      	add	r4, r3
1a0047a6:	f803 1b01 	strb.w	r1, [r3], #1
1a0047aa:	429c      	cmp	r4, r3
1a0047ac:	d1fb      	bne.n	1a0047a6 <memset+0x7e>
1a0047ae:	bcf0      	pop	{r4, r5, r6, r7}
1a0047b0:	4770      	bx	lr
1a0047b2:	4634      	mov	r4, r6
1a0047b4:	4613      	mov	r3, r2
1a0047b6:	2c00      	cmp	r4, #0
1a0047b8:	d1f3      	bne.n	1a0047a2 <memset+0x7a>
1a0047ba:	e7f8      	b.n	1a0047ae <memset+0x86>
1a0047bc:	4614      	mov	r4, r2
1a0047be:	4603      	mov	r3, r0
1a0047c0:	e7c2      	b.n	1a004748 <memset+0x20>
1a0047c2:	461a      	mov	r2, r3
1a0047c4:	4626      	mov	r6, r4
1a0047c6:	e7e0      	b.n	1a00478a <memset+0x62>

1a0047c8 <__malloc_lock>:
1a0047c8:	4801      	ldr	r0, [pc, #4]	; (1a0047d0 <__malloc_lock+0x8>)
1a0047ca:	f7ff bc57 	b.w	1a00407c <__retarget_lock_acquire_recursive>
1a0047ce:	bf00      	nop
1a0047d0:	100014c4 	.word	0x100014c4

1a0047d4 <__malloc_unlock>:
1a0047d4:	4801      	ldr	r0, [pc, #4]	; (1a0047dc <__malloc_unlock+0x8>)
1a0047d6:	f7ff bc53 	b.w	1a004080 <__retarget_lock_release_recursive>
1a0047da:	bf00      	nop
1a0047dc:	100014c4 	.word	0x100014c4

1a0047e0 <printf>:
1a0047e0:	b40f      	push	{r0, r1, r2, r3}
1a0047e2:	b500      	push	{lr}
1a0047e4:	4907      	ldr	r1, [pc, #28]	; (1a004804 <printf+0x24>)
1a0047e6:	b083      	sub	sp, #12
1a0047e8:	ab04      	add	r3, sp, #16
1a0047ea:	6808      	ldr	r0, [r1, #0]
1a0047ec:	f853 2b04 	ldr.w	r2, [r3], #4
1a0047f0:	6881      	ldr	r1, [r0, #8]
1a0047f2:	9301      	str	r3, [sp, #4]
1a0047f4:	f000 f8d4 	bl	1a0049a0 <_vfprintf_r>
1a0047f8:	b003      	add	sp, #12
1a0047fa:	f85d eb04 	ldr.w	lr, [sp], #4
1a0047fe:	b004      	add	sp, #16
1a004800:	4770      	bx	lr
1a004802:	bf00      	nop
1a004804:	10000040 	.word	0x10000040

1a004808 <__sread>:
1a004808:	b510      	push	{r4, lr}
1a00480a:	460c      	mov	r4, r1
1a00480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004810:	f7fb fddc 	bl	1a0003cc <_read_r>
1a004814:	2800      	cmp	r0, #0
1a004816:	db03      	blt.n	1a004820 <__sread+0x18>
1a004818:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00481a:	4403      	add	r3, r0
1a00481c:	6523      	str	r3, [r4, #80]	; 0x50
1a00481e:	bd10      	pop	{r4, pc}
1a004820:	89a3      	ldrh	r3, [r4, #12]
1a004822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004826:	81a3      	strh	r3, [r4, #12]
1a004828:	bd10      	pop	{r4, pc}
1a00482a:	bf00      	nop

1a00482c <__swrite>:
1a00482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004830:	4616      	mov	r6, r2
1a004832:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a004836:	461f      	mov	r7, r3
1a004838:	05d3      	lsls	r3, r2, #23
1a00483a:	460c      	mov	r4, r1
1a00483c:	4605      	mov	r5, r0
1a00483e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004842:	d409      	bmi.n	1a004858 <__swrite+0x2c>
1a004844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a004848:	81a2      	strh	r2, [r4, #12]
1a00484a:	463b      	mov	r3, r7
1a00484c:	4632      	mov	r2, r6
1a00484e:	4628      	mov	r0, r5
1a004850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004854:	f7fb bde1 	b.w	1a00041a <_write_r>
1a004858:	2200      	movs	r2, #0
1a00485a:	2302      	movs	r3, #2
1a00485c:	f7fb fdb1 	bl	1a0003c2 <_lseek_r>
1a004860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004868:	e7ec      	b.n	1a004844 <__swrite+0x18>
1a00486a:	bf00      	nop

1a00486c <__sseek>:
1a00486c:	b510      	push	{r4, lr}
1a00486e:	460c      	mov	r4, r1
1a004870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004874:	f7fb fda5 	bl	1a0003c2 <_lseek_r>
1a004878:	89a3      	ldrh	r3, [r4, #12]
1a00487a:	1c42      	adds	r2, r0, #1
1a00487c:	bf0e      	itee	eq
1a00487e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004886:	6520      	strne	r0, [r4, #80]	; 0x50
1a004888:	81a3      	strh	r3, [r4, #12]
1a00488a:	bd10      	pop	{r4, pc}

1a00488c <__sclose>:
1a00488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004890:	f7fb bd84 	b.w	1a00039c <_close_r>
1a004894:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004898:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00489c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0048bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0048c0 <strlen>:
1a0048c0:	f890 f000 	pld	[r0]
1a0048c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a0048c8:	f020 0107 	bic.w	r1, r0, #7
1a0048cc:	f06f 0c00 	mvn.w	ip, #0
1a0048d0:	f010 0407 	ands.w	r4, r0, #7
1a0048d4:	f891 f020 	pld	[r1, #32]
1a0048d8:	f040 8049 	bne.w	1a00496e <strlen+0xae>
1a0048dc:	f04f 0400 	mov.w	r4, #0
1a0048e0:	f06f 0007 	mvn.w	r0, #7
1a0048e4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0048e8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0048ec:	f100 0008 	add.w	r0, r0, #8
1a0048f0:	fa82 f24c 	uadd8	r2, r2, ip
1a0048f4:	faa4 f28c 	sel	r2, r4, ip
1a0048f8:	fa83 f34c 	uadd8	r3, r3, ip
1a0048fc:	faa2 f38c 	sel	r3, r2, ip
1a004900:	bb4b      	cbnz	r3, 1a004956 <strlen+0x96>
1a004902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a004906:	fa82 f24c 	uadd8	r2, r2, ip
1a00490a:	f100 0008 	add.w	r0, r0, #8
1a00490e:	faa4 f28c 	sel	r2, r4, ip
1a004912:	fa83 f34c 	uadd8	r3, r3, ip
1a004916:	faa2 f38c 	sel	r3, r2, ip
1a00491a:	b9e3      	cbnz	r3, 1a004956 <strlen+0x96>
1a00491c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a004920:	fa82 f24c 	uadd8	r2, r2, ip
1a004924:	f100 0008 	add.w	r0, r0, #8
1a004928:	faa4 f28c 	sel	r2, r4, ip
1a00492c:	fa83 f34c 	uadd8	r3, r3, ip
1a004930:	faa2 f38c 	sel	r3, r2, ip
1a004934:	b97b      	cbnz	r3, 1a004956 <strlen+0x96>
1a004936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a00493a:	f101 0120 	add.w	r1, r1, #32
1a00493e:	fa82 f24c 	uadd8	r2, r2, ip
1a004942:	f100 0008 	add.w	r0, r0, #8
1a004946:	faa4 f28c 	sel	r2, r4, ip
1a00494a:	fa83 f34c 	uadd8	r3, r3, ip
1a00494e:	faa2 f38c 	sel	r3, r2, ip
1a004952:	2b00      	cmp	r3, #0
1a004954:	d0c6      	beq.n	1a0048e4 <strlen+0x24>
1a004956:	2a00      	cmp	r2, #0
1a004958:	bf04      	itt	eq
1a00495a:	3004      	addeq	r0, #4
1a00495c:	461a      	moveq	r2, r3
1a00495e:	ba12      	rev	r2, r2
1a004960:	fab2 f282 	clz	r2, r2
1a004964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a004968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00496c:	4770      	bx	lr
1a00496e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a004972:	f004 0503 	and.w	r5, r4, #3
1a004976:	f1c4 0000 	rsb	r0, r4, #0
1a00497a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00497e:	f014 0f04 	tst.w	r4, #4
1a004982:	f891 f040 	pld	[r1, #64]	; 0x40
1a004986:	fa0c f505 	lsl.w	r5, ip, r5
1a00498a:	ea62 0205 	orn	r2, r2, r5
1a00498e:	bf1c      	itt	ne
1a004990:	ea63 0305 	ornne	r3, r3, r5
1a004994:	4662      	movne	r2, ip
1a004996:	f04f 0400 	mov.w	r4, #0
1a00499a:	e7a9      	b.n	1a0048f0 <strlen+0x30>
1a00499c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0049a0 <_vfprintf_r>:
1a0049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0049a4:	b0d5      	sub	sp, #340	; 0x154
1a0049a6:	461c      	mov	r4, r3
1a0049a8:	4689      	mov	r9, r1
1a0049aa:	4617      	mov	r7, r2
1a0049ac:	4605      	mov	r5, r0
1a0049ae:	9005      	str	r0, [sp, #20]
1a0049b0:	f002 ff8c 	bl	1a0078cc <_localeconv_r>
1a0049b4:	6803      	ldr	r3, [r0, #0]
1a0049b6:	9315      	str	r3, [sp, #84]	; 0x54
1a0049b8:	4618      	mov	r0, r3
1a0049ba:	f7ff ff81 	bl	1a0048c0 <strlen>
1a0049be:	9408      	str	r4, [sp, #32]
1a0049c0:	9013      	str	r0, [sp, #76]	; 0x4c
1a0049c2:	b11d      	cbz	r5, 1a0049cc <_vfprintf_r+0x2c>
1a0049c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a0049c6:	2b00      	cmp	r3, #0
1a0049c8:	f000 8411 	beq.w	1a0051ee <_vfprintf_r+0x84e>
1a0049cc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0049d0:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a0049d4:	07cd      	lsls	r5, r1, #31
1a0049d6:	b293      	uxth	r3, r2
1a0049d8:	d402      	bmi.n	1a0049e0 <_vfprintf_r+0x40>
1a0049da:	0598      	lsls	r0, r3, #22
1a0049dc:	f140 8754 	bpl.w	1a005888 <_vfprintf_r+0xee8>
1a0049e0:	0499      	lsls	r1, r3, #18
1a0049e2:	d40a      	bmi.n	1a0049fa <_vfprintf_r+0x5a>
1a0049e4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0049e8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a0049ec:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0049f0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0049f4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a0049f8:	b29b      	uxth	r3, r3
1a0049fa:	071a      	lsls	r2, r3, #28
1a0049fc:	f140 80bf 	bpl.w	1a004b7e <_vfprintf_r+0x1de>
1a004a00:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a004a04:	2a00      	cmp	r2, #0
1a004a06:	f000 80ba 	beq.w	1a004b7e <_vfprintf_r+0x1de>
1a004a0a:	f003 021a 	and.w	r2, r3, #26
1a004a0e:	2a0a      	cmp	r2, #10
1a004a10:	f000 80c3 	beq.w	1a004b9a <_vfprintf_r+0x1fa>
1a004a14:	2300      	movs	r3, #0
1a004a16:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a004c88 <_vfprintf_r+0x2e8>
1a004a1a:	9312      	str	r3, [sp, #72]	; 0x48
1a004a1c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a004a20:	9314      	str	r3, [sp, #80]	; 0x50
1a004a22:	9316      	str	r3, [sp, #88]	; 0x58
1a004a24:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a004a28:	9317      	str	r3, [sp, #92]	; 0x5c
1a004a2a:	9304      	str	r3, [sp, #16]
1a004a2c:	ab2b      	add	r3, sp, #172	; 0xac
1a004a2e:	9328      	str	r3, [sp, #160]	; 0xa0
1a004a30:	469b      	mov	fp, r3
1a004a32:	783b      	ldrb	r3, [r7, #0]
1a004a34:	f8cd 901c 	str.w	r9, [sp, #28]
1a004a38:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a004a3c:	2b00      	cmp	r3, #0
1a004a3e:	f000 8267 	beq.w	1a004f10 <_vfprintf_r+0x570>
1a004a42:	2b25      	cmp	r3, #37	; 0x25
1a004a44:	f001 80ab 	beq.w	1a005b9e <_vfprintf_r+0x11fe>
1a004a48:	463d      	mov	r5, r7
1a004a4a:	e003      	b.n	1a004a54 <_vfprintf_r+0xb4>
1a004a4c:	2b25      	cmp	r3, #37	; 0x25
1a004a4e:	f000 80bb 	beq.w	1a004bc8 <_vfprintf_r+0x228>
1a004a52:	4625      	mov	r5, r4
1a004a54:	786b      	ldrb	r3, [r5, #1]
1a004a56:	1c6c      	adds	r4, r5, #1
1a004a58:	2b00      	cmp	r3, #0
1a004a5a:	d1f7      	bne.n	1a004a4c <_vfprintf_r+0xac>
1a004a5c:	1be6      	subs	r6, r4, r7
1a004a5e:	f000 8257 	beq.w	1a004f10 <_vfprintf_r+0x570>
1a004a62:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a004a66:	3301      	adds	r3, #1
1a004a68:	4432      	add	r2, r6
1a004a6a:	2b07      	cmp	r3, #7
1a004a6c:	f8cb 7000 	str.w	r7, [fp]
1a004a70:	f8cb 6004 	str.w	r6, [fp, #4]
1a004a74:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a004a78:	f300 80aa 	bgt.w	1a004bd0 <_vfprintf_r+0x230>
1a004a7c:	f10b 0b08 	add.w	fp, fp, #8
1a004a80:	9a04      	ldr	r2, [sp, #16]
1a004a82:	786b      	ldrb	r3, [r5, #1]
1a004a84:	4432      	add	r2, r6
1a004a86:	9204      	str	r2, [sp, #16]
1a004a88:	2b00      	cmp	r3, #0
1a004a8a:	f000 8241 	beq.w	1a004f10 <_vfprintf_r+0x570>
1a004a8e:	2300      	movs	r3, #0
1a004a90:	f894 8001 	ldrb.w	r8, [r4, #1]
1a004a94:	9306      	str	r3, [sp, #24]
1a004a96:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004a9a:	9302      	str	r3, [sp, #8]
1a004a9c:	f104 0a01 	add.w	sl, r4, #1
1a004aa0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a004aa4:	262b      	movs	r6, #43	; 0x2b
1a004aa6:	2120      	movs	r1, #32
1a004aa8:	f10a 0a01 	add.w	sl, sl, #1
1a004aac:	f1a8 0320 	sub.w	r3, r8, #32
1a004ab0:	2b5a      	cmp	r3, #90	; 0x5a
1a004ab2:	f200 83a1 	bhi.w	1a0051f8 <_vfprintf_r+0x858>
1a004ab6:	e8df f013 	tbh	[pc, r3, lsl #1]
1a004aba:	0282      	.short	0x0282
1a004abc:	039f039f 	.word	0x039f039f
1a004ac0:	039f027b 	.word	0x039f027b
1a004ac4:	039f039f 	.word	0x039f039f
1a004ac8:	039f0301 	.word	0x039f0301
1a004acc:	02f6039f 	.word	0x02f6039f
1a004ad0:	039f00df 	.word	0x039f00df
1a004ad4:	032b00c4 	.word	0x032b00c4
1a004ad8:	0324039f 	.word	0x0324039f
1a004adc:	00960096 	.word	0x00960096
1a004ae0:	00960096 	.word	0x00960096
1a004ae4:	00960096 	.word	0x00960096
1a004ae8:	00960096 	.word	0x00960096
1a004aec:	039f0096 	.word	0x039f0096
1a004af0:	039f039f 	.word	0x039f039f
1a004af4:	039f039f 	.word	0x039f039f
1a004af8:	039f039f 	.word	0x039f039f
1a004afc:	039f0345 	.word	0x039f0345
1a004b00:	016201a8 	.word	0x016201a8
1a004b04:	03450345 	.word	0x03450345
1a004b08:	039f0345 	.word	0x039f0345
1a004b0c:	039f039f 	.word	0x039f039f
1a004b10:	015b039f 	.word	0x015b039f
1a004b14:	039f039f 	.word	0x039f039f
1a004b18:	039f014e 	.word	0x039f014e
1a004b1c:	039f039f 	.word	0x039f039f
1a004b20:	039f0123 	.word	0x039f0123
1a004b24:	039f0115 	.word	0x039f0115
1a004b28:	00cb039f 	.word	0x00cb039f
1a004b2c:	039f039f 	.word	0x039f039f
1a004b30:	039f039f 	.word	0x039f039f
1a004b34:	039f039f 	.word	0x039f039f
1a004b38:	039f039f 	.word	0x039f039f
1a004b3c:	039f0345 	.word	0x039f0345
1a004b40:	00ef01a8 	.word	0x00ef01a8
1a004b44:	03450345 	.word	0x03450345
1a004b48:	02700345 	.word	0x02700345
1a004b4c:	005b00ef 	.word	0x005b00ef
1a004b50:	02eb039f 	.word	0x02eb039f
1a004b54:	02d1039f 	.word	0x02d1039f
1a004b58:	028c02bd 	.word	0x028c02bd
1a004b5c:	039f005b 	.word	0x039f005b
1a004b60:	005f0123 	.word	0x005f0123
1a004b64:	039f0387 	.word	0x039f0387
1a004b68:	00a5039f 	.word	0x00a5039f
1a004b6c:	005f039f 	.word	0x005f039f
1a004b70:	9b02      	ldr	r3, [sp, #8]
1a004b72:	f043 0320 	orr.w	r3, r3, #32
1a004b76:	9302      	str	r3, [sp, #8]
1a004b78:	f89a 8000 	ldrb.w	r8, [sl]
1a004b7c:	e794      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004b7e:	4649      	mov	r1, r9
1a004b80:	9805      	ldr	r0, [sp, #20]
1a004b82:	f001 fcf9 	bl	1a006578 <__swsetup_r>
1a004b86:	2800      	cmp	r0, #0
1a004b88:	f041 8381 	bne.w	1a00628e <_vfprintf_r+0x18ee>
1a004b8c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004b90:	f003 021a 	and.w	r2, r3, #26
1a004b94:	2a0a      	cmp	r2, #10
1a004b96:	f47f af3d 	bne.w	1a004a14 <_vfprintf_r+0x74>
1a004b9a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a004b9e:	2a00      	cmp	r2, #0
1a004ba0:	f6ff af38 	blt.w	1a004a14 <_vfprintf_r+0x74>
1a004ba4:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a004ba8:	07d6      	lsls	r6, r2, #31
1a004baa:	d402      	bmi.n	1a004bb2 <_vfprintf_r+0x212>
1a004bac:	059d      	lsls	r5, r3, #22
1a004bae:	f141 8190 	bpl.w	1a005ed2 <_vfprintf_r+0x1532>
1a004bb2:	4623      	mov	r3, r4
1a004bb4:	463a      	mov	r2, r7
1a004bb6:	4649      	mov	r1, r9
1a004bb8:	9805      	ldr	r0, [sp, #20]
1a004bba:	f001 fc9b 	bl	1a0064f4 <__sbprintf>
1a004bbe:	9004      	str	r0, [sp, #16]
1a004bc0:	9804      	ldr	r0, [sp, #16]
1a004bc2:	b055      	add	sp, #340	; 0x154
1a004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004bc8:	1be6      	subs	r6, r4, r7
1a004bca:	f43f af60 	beq.w	1a004a8e <_vfprintf_r+0xee>
1a004bce:	e748      	b.n	1a004a62 <_vfprintf_r+0xc2>
1a004bd0:	aa28      	add	r2, sp, #160	; 0xa0
1a004bd2:	9907      	ldr	r1, [sp, #28]
1a004bd4:	9805      	ldr	r0, [sp, #20]
1a004bd6:	f003 fd1f 	bl	1a008618 <__sprint_r>
1a004bda:	2800      	cmp	r0, #0
1a004bdc:	f041 8427 	bne.w	1a00642e <_vfprintf_r+0x1a8e>
1a004be0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004be4:	e74c      	b.n	1a004a80 <_vfprintf_r+0xe0>
1a004be6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a004bea:	2200      	movs	r2, #0
1a004bec:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a004bf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a004bf4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a004bf8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a004bfc:	2b09      	cmp	r3, #9
1a004bfe:	d9f5      	bls.n	1a004bec <_vfprintf_r+0x24c>
1a004c00:	9206      	str	r2, [sp, #24]
1a004c02:	e753      	b.n	1a004aac <_vfprintf_r+0x10c>
1a004c04:	4b22      	ldr	r3, [pc, #136]	; (1a004c90 <_vfprintf_r+0x2f0>)
1a004c06:	9314      	str	r3, [sp, #80]	; 0x50
1a004c08:	9b02      	ldr	r3, [sp, #8]
1a004c0a:	069f      	lsls	r7, r3, #26
1a004c0c:	d525      	bpl.n	1a004c5a <_vfprintf_r+0x2ba>
1a004c0e:	9c08      	ldr	r4, [sp, #32]
1a004c10:	3407      	adds	r4, #7
1a004c12:	f024 0307 	bic.w	r3, r4, #7
1a004c16:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a004c1a:	9308      	str	r3, [sp, #32]
1a004c1c:	9a02      	ldr	r2, [sp, #8]
1a004c1e:	07d1      	lsls	r1, r2, #31
1a004c20:	d50a      	bpl.n	1a004c38 <_vfprintf_r+0x298>
1a004c22:	ea54 0305 	orrs.w	r3, r4, r5
1a004c26:	d007      	beq.n	1a004c38 <_vfprintf_r+0x298>
1a004c28:	2330      	movs	r3, #48	; 0x30
1a004c2a:	f042 0202 	orr.w	r2, r2, #2
1a004c2e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a004c32:	9202      	str	r2, [sp, #8]
1a004c34:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004c38:	9b02      	ldr	r3, [sp, #8]
1a004c3a:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a004c3e:	2302      	movs	r3, #2
1a004c40:	e1d9      	b.n	1a004ff6 <_vfprintf_r+0x656>
1a004c42:	f89a 8000 	ldrb.w	r8, [sl]
1a004c46:	9b02      	ldr	r3, [sp, #8]
1a004c48:	f043 0304 	orr.w	r3, r3, #4
1a004c4c:	9302      	str	r3, [sp, #8]
1a004c4e:	e72b      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004c50:	4b10      	ldr	r3, [pc, #64]	; (1a004c94 <_vfprintf_r+0x2f4>)
1a004c52:	9314      	str	r3, [sp, #80]	; 0x50
1a004c54:	9b02      	ldr	r3, [sp, #8]
1a004c56:	069f      	lsls	r7, r3, #26
1a004c58:	d4d9      	bmi.n	1a004c0e <_vfprintf_r+0x26e>
1a004c5a:	9b08      	ldr	r3, [sp, #32]
1a004c5c:	f853 4b04 	ldr.w	r4, [r3], #4
1a004c60:	9308      	str	r3, [sp, #32]
1a004c62:	9b02      	ldr	r3, [sp, #8]
1a004c64:	06de      	lsls	r6, r3, #27
1a004c66:	f100 864f 	bmi.w	1a005908 <_vfprintf_r+0xf68>
1a004c6a:	9b02      	ldr	r3, [sp, #8]
1a004c6c:	065d      	lsls	r5, r3, #25
1a004c6e:	f140 8647 	bpl.w	1a005900 <_vfprintf_r+0xf60>
1a004c72:	b2a4      	uxth	r4, r4
1a004c74:	2500      	movs	r5, #0
1a004c76:	e7d1      	b.n	1a004c1c <_vfprintf_r+0x27c>
1a004c78:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a004c7c:	f89a 8000 	ldrb.w	r8, [sl]
1a004c80:	e712      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004c82:	bf00      	nop
1a004c84:	f3af 8000 	nop.w
	...
1a004c90:	1a008d1c 	.word	0x1a008d1c
1a004c94:	1a008d08 	.word	0x1a008d08
1a004c98:	9e02      	ldr	r6, [sp, #8]
1a004c9a:	06b0      	lsls	r0, r6, #26
1a004c9c:	f140 870b 	bpl.w	1a005ab6 <_vfprintf_r+0x1116>
1a004ca0:	9c08      	ldr	r4, [sp, #32]
1a004ca2:	3407      	adds	r4, #7
1a004ca4:	f024 0307 	bic.w	r3, r4, #7
1a004ca8:	4619      	mov	r1, r3
1a004caa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a004cae:	9108      	str	r1, [sp, #32]
1a004cb0:	4614      	mov	r4, r2
1a004cb2:	461d      	mov	r5, r3
1a004cb4:	2a00      	cmp	r2, #0
1a004cb6:	f173 0300 	sbcs.w	r3, r3, #0
1a004cba:	db71      	blt.n	1a004da0 <_vfprintf_r+0x400>
1a004cbc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004cc0:	f000 82c5 	beq.w	1a00524e <_vfprintf_r+0x8ae>
1a004cc4:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a004cc8:	9302      	str	r3, [sp, #8]
1a004cca:	ea54 0305 	orrs.w	r3, r4, r5
1a004cce:	f040 82bd 	bne.w	1a00524c <_vfprintf_r+0x8ac>
1a004cd2:	f1b9 0f00 	cmp.w	r9, #0
1a004cd6:	f041 810e 	bne.w	1a005ef6 <_vfprintf_r+0x1556>
1a004cda:	f04f 0900 	mov.w	r9, #0
1a004cde:	464e      	mov	r6, r9
1a004ce0:	af54      	add	r7, sp, #336	; 0x150
1a004ce2:	e2bf      	b.n	1a005264 <_vfprintf_r+0x8c4>
1a004ce4:	9b02      	ldr	r3, [sp, #8]
1a004ce6:	069d      	lsls	r5, r3, #26
1a004ce8:	f043 0610 	orr.w	r6, r3, #16
1a004cec:	f100 828f 	bmi.w	1a00520e <_vfprintf_r+0x86e>
1a004cf0:	9b08      	ldr	r3, [sp, #32]
1a004cf2:	1d1a      	adds	r2, r3, #4
1a004cf4:	9b08      	ldr	r3, [sp, #32]
1a004cf6:	9208      	str	r2, [sp, #32]
1a004cf8:	681c      	ldr	r4, [r3, #0]
1a004cfa:	2500      	movs	r5, #0
1a004cfc:	2301      	movs	r3, #1
1a004cfe:	e17a      	b.n	1a004ff6 <_vfprintf_r+0x656>
1a004d00:	9c08      	ldr	r4, [sp, #32]
1a004d02:	f854 7b04 	ldr.w	r7, [r4], #4
1a004d06:	2500      	movs	r5, #0
1a004d08:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a004d0c:	2f00      	cmp	r7, #0
1a004d0e:	f000 8737 	beq.w	1a005b80 <_vfprintf_r+0x11e0>
1a004d12:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004d16:	f000 87bc 	beq.w	1a005c92 <_vfprintf_r+0x12f2>
1a004d1a:	464a      	mov	r2, r9
1a004d1c:	4629      	mov	r1, r5
1a004d1e:	4638      	mov	r0, r7
1a004d20:	f002 fe56 	bl	1a0079d0 <memchr>
1a004d24:	9009      	str	r0, [sp, #36]	; 0x24
1a004d26:	2800      	cmp	r0, #0
1a004d28:	f001 824a 	beq.w	1a0061c0 <_vfprintf_r+0x1820>
1a004d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d2e:	46a9      	mov	r9, r5
1a004d30:	1bde      	subs	r6, r3, r7
1a004d32:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a004d36:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a004d3a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004d3e:	9408      	str	r4, [sp, #32]
1a004d40:	9303      	str	r3, [sp, #12]
1a004d42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004d46:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a004d4a:	2a00      	cmp	r2, #0
1a004d4c:	d06f      	beq.n	1a004e2e <_vfprintf_r+0x48e>
1a004d4e:	9b03      	ldr	r3, [sp, #12]
1a004d50:	3301      	adds	r3, #1
1a004d52:	9303      	str	r3, [sp, #12]
1a004d54:	e06b      	b.n	1a004e2e <_vfprintf_r+0x48e>
1a004d56:	9b02      	ldr	r3, [sp, #8]
1a004d58:	069c      	lsls	r4, r3, #26
1a004d5a:	f043 0610 	orr.w	r6, r3, #16
1a004d5e:	f100 825f 	bmi.w	1a005220 <_vfprintf_r+0x880>
1a004d62:	9b08      	ldr	r3, [sp, #32]
1a004d64:	1d1a      	adds	r2, r3, #4
1a004d66:	9b08      	ldr	r3, [sp, #32]
1a004d68:	9208      	str	r2, [sp, #32]
1a004d6a:	681c      	ldr	r4, [r3, #0]
1a004d6c:	2500      	movs	r5, #0
1a004d6e:	e25e      	b.n	1a00522e <_vfprintf_r+0x88e>
1a004d70:	9b02      	ldr	r3, [sp, #8]
1a004d72:	f89a 8000 	ldrb.w	r8, [sl]
1a004d76:	f043 0308 	orr.w	r3, r3, #8
1a004d7a:	9302      	str	r3, [sp, #8]
1a004d7c:	e694      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004d7e:	9b02      	ldr	r3, [sp, #8]
1a004d80:	069c      	lsls	r4, r3, #26
1a004d82:	f043 0610 	orr.w	r6, r3, #16
1a004d86:	d48b      	bmi.n	1a004ca0 <_vfprintf_r+0x300>
1a004d88:	9b08      	ldr	r3, [sp, #32]
1a004d8a:	1d1a      	adds	r2, r3, #4
1a004d8c:	9b08      	ldr	r3, [sp, #32]
1a004d8e:	9208      	str	r2, [sp, #32]
1a004d90:	681c      	ldr	r4, [r3, #0]
1a004d92:	17e5      	asrs	r5, r4, #31
1a004d94:	4622      	mov	r2, r4
1a004d96:	462b      	mov	r3, r5
1a004d98:	2a00      	cmp	r2, #0
1a004d9a:	f173 0300 	sbcs.w	r3, r3, #0
1a004d9e:	da8d      	bge.n	1a004cbc <_vfprintf_r+0x31c>
1a004da0:	4264      	negs	r4, r4
1a004da2:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a004da6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a004daa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004dae:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004db2:	f04f 0301 	mov.w	r3, #1
1a004db6:	f040 8125 	bne.w	1a005004 <_vfprintf_r+0x664>
1a004dba:	2b01      	cmp	r3, #1
1a004dbc:	f000 8247 	beq.w	1a00524e <_vfprintf_r+0x8ae>
1a004dc0:	2b02      	cmp	r3, #2
1a004dc2:	f000 8479 	beq.w	1a0056b8 <_vfprintf_r+0xd18>
1a004dc6:	a954      	add	r1, sp, #336	; 0x150
1a004dc8:	e000      	b.n	1a004dcc <_vfprintf_r+0x42c>
1a004dca:	4639      	mov	r1, r7
1a004dcc:	08e2      	lsrs	r2, r4, #3
1a004dce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a004dd2:	08e8      	lsrs	r0, r5, #3
1a004dd4:	f004 0307 	and.w	r3, r4, #7
1a004dd8:	4605      	mov	r5, r0
1a004dda:	4614      	mov	r4, r2
1a004ddc:	3330      	adds	r3, #48	; 0x30
1a004dde:	ea54 0205 	orrs.w	r2, r4, r5
1a004de2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a004de6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a004dea:	d1ee      	bne.n	1a004dca <_vfprintf_r+0x42a>
1a004dec:	07f2      	lsls	r2, r6, #31
1a004dee:	f140 8288 	bpl.w	1a005302 <_vfprintf_r+0x962>
1a004df2:	2b30      	cmp	r3, #48	; 0x30
1a004df4:	f000 8285 	beq.w	1a005302 <_vfprintf_r+0x962>
1a004df8:	2330      	movs	r3, #48	; 0x30
1a004dfa:	3902      	subs	r1, #2
1a004dfc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a004e00:	ab54      	add	r3, sp, #336	; 0x150
1a004e02:	9602      	str	r6, [sp, #8]
1a004e04:	460f      	mov	r7, r1
1a004e06:	1a5e      	subs	r6, r3, r1
1a004e08:	e22c      	b.n	1a005264 <_vfprintf_r+0x8c4>
1a004e0a:	9c08      	ldr	r4, [sp, #32]
1a004e0c:	2300      	movs	r3, #0
1a004e0e:	f854 2b04 	ldr.w	r2, [r4], #4
1a004e12:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a004e16:	2601      	movs	r6, #1
1a004e18:	461a      	mov	r2, r3
1a004e1a:	9603      	str	r6, [sp, #12]
1a004e1c:	9408      	str	r4, [sp, #32]
1a004e1e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004e22:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004e26:	9209      	str	r2, [sp, #36]	; 0x24
1a004e28:	4691      	mov	r9, r2
1a004e2a:	920c      	str	r2, [sp, #48]	; 0x30
1a004e2c:	af3b      	add	r7, sp, #236	; 0xec
1a004e2e:	9b02      	ldr	r3, [sp, #8]
1a004e30:	f013 0302 	ands.w	r3, r3, #2
1a004e34:	930a      	str	r3, [sp, #40]	; 0x28
1a004e36:	d002      	beq.n	1a004e3e <_vfprintf_r+0x49e>
1a004e38:	9b03      	ldr	r3, [sp, #12]
1a004e3a:	3302      	adds	r3, #2
1a004e3c:	9303      	str	r3, [sp, #12]
1a004e3e:	9b02      	ldr	r3, [sp, #8]
1a004e40:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004e42:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a004e46:	930b      	str	r3, [sp, #44]	; 0x2c
1a004e48:	d104      	bne.n	1a004e54 <_vfprintf_r+0x4b4>
1a004e4a:	9b06      	ldr	r3, [sp, #24]
1a004e4c:	9903      	ldr	r1, [sp, #12]
1a004e4e:	1a5d      	subs	r5, r3, r1
1a004e50:	2d00      	cmp	r5, #0
1a004e52:	dc66      	bgt.n	1a004f22 <_vfprintf_r+0x582>
1a004e54:	b172      	cbz	r2, 1a004e74 <_vfprintf_r+0x4d4>
1a004e56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004e58:	3201      	adds	r2, #1
1a004e5a:	3401      	adds	r4, #1
1a004e5c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a004e60:	2101      	movs	r1, #1
1a004e62:	2a07      	cmp	r2, #7
1a004e64:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004e68:	e9cb 0100 	strd	r0, r1, [fp]
1a004e6c:	f300 83b1 	bgt.w	1a0055d2 <_vfprintf_r+0xc32>
1a004e70:	f10b 0b08 	add.w	fp, fp, #8
1a004e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004e76:	b16b      	cbz	r3, 1a004e94 <_vfprintf_r+0x4f4>
1a004e78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004e7a:	3301      	adds	r3, #1
1a004e7c:	3402      	adds	r4, #2
1a004e7e:	a921      	add	r1, sp, #132	; 0x84
1a004e80:	2202      	movs	r2, #2
1a004e82:	2b07      	cmp	r3, #7
1a004e84:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004e88:	e9cb 1200 	strd	r1, r2, [fp]
1a004e8c:	f300 83ad 	bgt.w	1a0055ea <_vfprintf_r+0xc4a>
1a004e90:	f10b 0b08 	add.w	fp, fp, #8
1a004e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004e96:	2b80      	cmp	r3, #128	; 0x80
1a004e98:	f000 8295 	beq.w	1a0053c6 <_vfprintf_r+0xa26>
1a004e9c:	eba9 0506 	sub.w	r5, r9, r6
1a004ea0:	2d00      	cmp	r5, #0
1a004ea2:	f300 82d3 	bgt.w	1a00544c <_vfprintf_r+0xaac>
1a004ea6:	9b02      	ldr	r3, [sp, #8]
1a004ea8:	05db      	lsls	r3, r3, #23
1a004eaa:	f100 822e 	bmi.w	1a00530a <_vfprintf_r+0x96a>
1a004eae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004eb0:	f8cb 7000 	str.w	r7, [fp]
1a004eb4:	3301      	adds	r3, #1
1a004eb6:	4434      	add	r4, r6
1a004eb8:	2b07      	cmp	r3, #7
1a004eba:	942a      	str	r4, [sp, #168]	; 0xa8
1a004ebc:	f8cb 6004 	str.w	r6, [fp, #4]
1a004ec0:	9329      	str	r3, [sp, #164]	; 0xa4
1a004ec2:	f300 8325 	bgt.w	1a005510 <_vfprintf_r+0xb70>
1a004ec6:	f10b 0b08 	add.w	fp, fp, #8
1a004eca:	9b02      	ldr	r3, [sp, #8]
1a004ecc:	075d      	lsls	r5, r3, #29
1a004ece:	d505      	bpl.n	1a004edc <_vfprintf_r+0x53c>
1a004ed0:	9b06      	ldr	r3, [sp, #24]
1a004ed2:	9a03      	ldr	r2, [sp, #12]
1a004ed4:	1a9d      	subs	r5, r3, r2
1a004ed6:	2d00      	cmp	r5, #0
1a004ed8:	f300 83ae 	bgt.w	1a005638 <_vfprintf_r+0xc98>
1a004edc:	9b04      	ldr	r3, [sp, #16]
1a004ede:	9a06      	ldr	r2, [sp, #24]
1a004ee0:	9903      	ldr	r1, [sp, #12]
1a004ee2:	428a      	cmp	r2, r1
1a004ee4:	bfac      	ite	ge
1a004ee6:	189b      	addge	r3, r3, r2
1a004ee8:	185b      	addlt	r3, r3, r1
1a004eea:	9304      	str	r3, [sp, #16]
1a004eec:	2c00      	cmp	r4, #0
1a004eee:	f040 82e7 	bne.w	1a0054c0 <_vfprintf_r+0xb20>
1a004ef2:	2300      	movs	r3, #0
1a004ef4:	9329      	str	r3, [sp, #164]	; 0xa4
1a004ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004ef8:	b11b      	cbz	r3, 1a004f02 <_vfprintf_r+0x562>
1a004efa:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004efc:	9805      	ldr	r0, [sp, #20]
1a004efe:	f7fe ff75 	bl	1a003dec <_free_r>
1a004f02:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004f06:	4657      	mov	r7, sl
1a004f08:	783b      	ldrb	r3, [r7, #0]
1a004f0a:	2b00      	cmp	r3, #0
1a004f0c:	f47f ad99 	bne.w	1a004a42 <_vfprintf_r+0xa2>
1a004f10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a004f12:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004f16:	2b00      	cmp	r3, #0
1a004f18:	f040 86f5 	bne.w	1a005d06 <_vfprintf_r+0x1366>
1a004f1c:	2300      	movs	r3, #0
1a004f1e:	9329      	str	r3, [sp, #164]	; 0xa4
1a004f20:	e375      	b.n	1a00560e <_vfprintf_r+0xc6e>
1a004f22:	2d10      	cmp	r5, #16
1a004f24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004f26:	dd29      	ble.n	1a004f7c <_vfprintf_r+0x5dc>
1a004f28:	4659      	mov	r1, fp
1a004f2a:	4620      	mov	r0, r4
1a004f2c:	961e      	str	r6, [sp, #120]	; 0x78
1a004f2e:	2310      	movs	r3, #16
1a004f30:	9c05      	ldr	r4, [sp, #20]
1a004f32:	9e07      	ldr	r6, [sp, #28]
1a004f34:	46bb      	mov	fp, r7
1a004f36:	e004      	b.n	1a004f42 <_vfprintf_r+0x5a2>
1a004f38:	3d10      	subs	r5, #16
1a004f3a:	2d10      	cmp	r5, #16
1a004f3c:	f101 0108 	add.w	r1, r1, #8
1a004f40:	dd18      	ble.n	1a004f74 <_vfprintf_r+0x5d4>
1a004f42:	3201      	adds	r2, #1
1a004f44:	4fbc      	ldr	r7, [pc, #752]	; (1a005238 <_vfprintf_r+0x898>)
1a004f46:	3010      	adds	r0, #16
1a004f48:	2a07      	cmp	r2, #7
1a004f4a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004f4e:	e9c1 7300 	strd	r7, r3, [r1]
1a004f52:	ddf1      	ble.n	1a004f38 <_vfprintf_r+0x598>
1a004f54:	aa28      	add	r2, sp, #160	; 0xa0
1a004f56:	4631      	mov	r1, r6
1a004f58:	4620      	mov	r0, r4
1a004f5a:	f003 fb5d 	bl	1a008618 <__sprint_r>
1a004f5e:	2800      	cmp	r0, #0
1a004f60:	f040 834f 	bne.w	1a005602 <_vfprintf_r+0xc62>
1a004f64:	3d10      	subs	r5, #16
1a004f66:	2d10      	cmp	r5, #16
1a004f68:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a004f6c:	a92b      	add	r1, sp, #172	; 0xac
1a004f6e:	f04f 0310 	mov.w	r3, #16
1a004f72:	dce6      	bgt.n	1a004f42 <_vfprintf_r+0x5a2>
1a004f74:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a004f76:	465f      	mov	r7, fp
1a004f78:	4604      	mov	r4, r0
1a004f7a:	468b      	mov	fp, r1
1a004f7c:	3201      	adds	r2, #1
1a004f7e:	4bae      	ldr	r3, [pc, #696]	; (1a005238 <_vfprintf_r+0x898>)
1a004f80:	442c      	add	r4, r5
1a004f82:	2a07      	cmp	r2, #7
1a004f84:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004f88:	e9cb 3500 	strd	r3, r5, [fp]
1a004f8c:	f300 862a 	bgt.w	1a005be4 <_vfprintf_r+0x1244>
1a004f90:	f10b 0b08 	add.w	fp, fp, #8
1a004f94:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004f98:	e75c      	b.n	1a004e54 <_vfprintf_r+0x4b4>
1a004f9a:	f89a 8000 	ldrb.w	r8, [sl]
1a004f9e:	9b02      	ldr	r3, [sp, #8]
1a004fa0:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a004fa4:	f000 85e3 	beq.w	1a005b6e <_vfprintf_r+0x11ce>
1a004fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004fac:	9302      	str	r3, [sp, #8]
1a004fae:	e57b      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004fb0:	9b02      	ldr	r3, [sp, #8]
1a004fb2:	f89a 8000 	ldrb.w	r8, [sl]
1a004fb6:	f043 0301 	orr.w	r3, r3, #1
1a004fba:	9302      	str	r3, [sp, #8]
1a004fbc:	e574      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004fbe:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a004fc2:	f89a 8000 	ldrb.w	r8, [sl]
1a004fc6:	2b00      	cmp	r3, #0
1a004fc8:	f47f ad6e 	bne.w	1a004aa8 <_vfprintf_r+0x108>
1a004fcc:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a004fd0:	e56a      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a004fd2:	9c08      	ldr	r4, [sp, #32]
1a004fd4:	f647 0230 	movw	r2, #30768	; 0x7830
1a004fd8:	f854 3b04 	ldr.w	r3, [r4], #4
1a004fdc:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a004fe0:	9a02      	ldr	r2, [sp, #8]
1a004fe2:	9408      	str	r4, [sp, #32]
1a004fe4:	461c      	mov	r4, r3
1a004fe6:	4b95      	ldr	r3, [pc, #596]	; (1a00523c <_vfprintf_r+0x89c>)
1a004fe8:	9314      	str	r3, [sp, #80]	; 0x50
1a004fea:	f042 0602 	orr.w	r6, r2, #2
1a004fee:	2500      	movs	r5, #0
1a004ff0:	2302      	movs	r3, #2
1a004ff2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a004ff6:	2200      	movs	r2, #0
1a004ff8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004ffc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005000:	f43f aedb 	beq.w	1a004dba <_vfprintf_r+0x41a>
1a005004:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a005008:	9202      	str	r2, [sp, #8]
1a00500a:	ea54 0205 	orrs.w	r2, r4, r5
1a00500e:	f040 82dd 	bne.w	1a0055cc <_vfprintf_r+0xc2c>
1a005012:	f1b9 0f00 	cmp.w	r9, #0
1a005016:	f040 8348 	bne.w	1a0056aa <_vfprintf_r+0xd0a>
1a00501a:	2b00      	cmp	r3, #0
1a00501c:	f47f ae5d 	bne.w	1a004cda <_vfprintf_r+0x33a>
1a005020:	f016 0601 	ands.w	r6, r6, #1
1a005024:	f000 846a 	beq.w	1a0058fc <_vfprintf_r+0xf5c>
1a005028:	2330      	movs	r3, #48	; 0x30
1a00502a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a00502e:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a005032:	e117      	b.n	1a005264 <_vfprintf_r+0x8c4>
1a005034:	9e02      	ldr	r6, [sp, #8]
1a005036:	06b0      	lsls	r0, r6, #26
1a005038:	f100 80f2 	bmi.w	1a005220 <_vfprintf_r+0x880>
1a00503c:	9b02      	ldr	r3, [sp, #8]
1a00503e:	9a08      	ldr	r2, [sp, #32]
1a005040:	06d9      	lsls	r1, r3, #27
1a005042:	f852 4b04 	ldr.w	r4, [r2], #4
1a005046:	f101 8243 	bmi.w	1a0064d0 <_vfprintf_r+0x1b30>
1a00504a:	9e02      	ldr	r6, [sp, #8]
1a00504c:	4633      	mov	r3, r6
1a00504e:	065b      	lsls	r3, r3, #25
1a005050:	f140 8635 	bpl.w	1a005cbe <_vfprintf_r+0x131e>
1a005054:	9208      	str	r2, [sp, #32]
1a005056:	b2a4      	uxth	r4, r4
1a005058:	2500      	movs	r5, #0
1a00505a:	e0e8      	b.n	1a00522e <_vfprintf_r+0x88e>
1a00505c:	9902      	ldr	r1, [sp, #8]
1a00505e:	9a08      	ldr	r2, [sp, #32]
1a005060:	0689      	lsls	r1, r1, #26
1a005062:	f102 0304 	add.w	r3, r2, #4
1a005066:	f100 8452 	bmi.w	1a00590e <_vfprintf_r+0xf6e>
1a00506a:	9a02      	ldr	r2, [sp, #8]
1a00506c:	06d7      	lsls	r7, r2, #27
1a00506e:	f100 85e1 	bmi.w	1a005c34 <_vfprintf_r+0x1294>
1a005072:	9a02      	ldr	r2, [sp, #8]
1a005074:	0656      	lsls	r6, r2, #25
1a005076:	f100 8664 	bmi.w	1a005d42 <_vfprintf_r+0x13a2>
1a00507a:	9a02      	ldr	r2, [sp, #8]
1a00507c:	0595      	lsls	r5, r2, #22
1a00507e:	f140 85d9 	bpl.w	1a005c34 <_vfprintf_r+0x1294>
1a005082:	9a08      	ldr	r2, [sp, #32]
1a005084:	9308      	str	r3, [sp, #32]
1a005086:	6812      	ldr	r2, [r2, #0]
1a005088:	9b04      	ldr	r3, [sp, #16]
1a00508a:	7013      	strb	r3, [r2, #0]
1a00508c:	4657      	mov	r7, sl
1a00508e:	e73b      	b.n	1a004f08 <_vfprintf_r+0x568>
1a005090:	f89a 8000 	ldrb.w	r8, [sl]
1a005094:	9b02      	ldr	r3, [sp, #8]
1a005096:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00509a:	f000 855f 	beq.w	1a005b5c <_vfprintf_r+0x11bc>
1a00509e:	f043 0310 	orr.w	r3, r3, #16
1a0050a2:	9302      	str	r3, [sp, #8]
1a0050a4:	e500      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a0050a6:	9b08      	ldr	r3, [sp, #32]
1a0050a8:	f89a 8000 	ldrb.w	r8, [sl]
1a0050ac:	f853 2b04 	ldr.w	r2, [r3], #4
1a0050b0:	9206      	str	r2, [sp, #24]
1a0050b2:	2a00      	cmp	r2, #0
1a0050b4:	f2c0 8513 	blt.w	1a005ade <_vfprintf_r+0x113e>
1a0050b8:	9308      	str	r3, [sp, #32]
1a0050ba:	e4f5      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a0050bc:	9d05      	ldr	r5, [sp, #20]
1a0050be:	4628      	mov	r0, r5
1a0050c0:	f002 fc04 	bl	1a0078cc <_localeconv_r>
1a0050c4:	6843      	ldr	r3, [r0, #4]
1a0050c6:	9317      	str	r3, [sp, #92]	; 0x5c
1a0050c8:	4618      	mov	r0, r3
1a0050ca:	f7ff fbf9 	bl	1a0048c0 <strlen>
1a0050ce:	9019      	str	r0, [sp, #100]	; 0x64
1a0050d0:	4604      	mov	r4, r0
1a0050d2:	4628      	mov	r0, r5
1a0050d4:	f002 fbfa 	bl	1a0078cc <_localeconv_r>
1a0050d8:	6883      	ldr	r3, [r0, #8]
1a0050da:	9318      	str	r3, [sp, #96]	; 0x60
1a0050dc:	2120      	movs	r1, #32
1a0050de:	2c00      	cmp	r4, #0
1a0050e0:	f43f ad4a 	beq.w	1a004b78 <_vfprintf_r+0x1d8>
1a0050e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0050e6:	f89a 8000 	ldrb.w	r8, [sl]
1a0050ea:	2b00      	cmp	r3, #0
1a0050ec:	f43f acdc 	beq.w	1a004aa8 <_vfprintf_r+0x108>
1a0050f0:	781b      	ldrb	r3, [r3, #0]
1a0050f2:	2b00      	cmp	r3, #0
1a0050f4:	f43f acd8 	beq.w	1a004aa8 <_vfprintf_r+0x108>
1a0050f8:	9b02      	ldr	r3, [sp, #8]
1a0050fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0050fe:	9302      	str	r3, [sp, #8]
1a005100:	e4d2      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a005102:	9b02      	ldr	r3, [sp, #8]
1a005104:	f89a 8000 	ldrb.w	r8, [sl]
1a005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00510c:	9302      	str	r3, [sp, #8]
1a00510e:	e4cb      	b.n	1a004aa8 <_vfprintf_r+0x108>
1a005110:	4652      	mov	r2, sl
1a005112:	f812 8b01 	ldrb.w	r8, [r2], #1
1a005116:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a00511a:	f001 81be 	beq.w	1a00649a <_vfprintf_r+0x1afa>
1a00511e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a005122:	2b09      	cmp	r3, #9
1a005124:	4692      	mov	sl, r2
1a005126:	f04f 0900 	mov.w	r9, #0
1a00512a:	f63f acbf 	bhi.w	1a004aac <_vfprintf_r+0x10c>
1a00512e:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a005132:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a005136:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a00513a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00513e:	2b09      	cmp	r3, #9
1a005140:	d9f5      	bls.n	1a00512e <_vfprintf_r+0x78e>
1a005142:	e4b3      	b.n	1a004aac <_vfprintf_r+0x10c>
1a005144:	9c08      	ldr	r4, [sp, #32]
1a005146:	3407      	adds	r4, #7
1a005148:	f024 0307 	bic.w	r3, r4, #7
1a00514c:	ecb3 7b02 	vldmia	r3!, {d7}
1a005150:	ec55 4b17 	vmov	r4, r5, d7
1a005154:	9308      	str	r3, [sp, #32]
1a005156:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00515a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00515c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a005160:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a005164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005168:	4b35      	ldr	r3, [pc, #212]	; (1a005240 <_vfprintf_r+0x8a0>)
1a00516a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00516e:	f7fe fa8d 	bl	1a00368c <__aeabi_dcmpun>
1a005172:	2800      	cmp	r0, #0
1a005174:	f040 83dc 	bne.w	1a005930 <_vfprintf_r+0xf90>
1a005178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00517c:	4b30      	ldr	r3, [pc, #192]	; (1a005240 <_vfprintf_r+0x8a0>)
1a00517e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a005182:	f7fe fa65 	bl	1a003650 <__aeabi_dcmple>
1a005186:	2800      	cmp	r0, #0
1a005188:	f040 83d2 	bne.w	1a005930 <_vfprintf_r+0xf90>
1a00518c:	2200      	movs	r2, #0
1a00518e:	2300      	movs	r3, #0
1a005190:	4620      	mov	r0, r4
1a005192:	4629      	mov	r1, r5
1a005194:	f7fe fa52 	bl	1a00363c <__aeabi_dcmplt>
1a005198:	2800      	cmp	r0, #0
1a00519a:	f040 8780 	bne.w	1a00609e <_vfprintf_r+0x16fe>
1a00519e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0051a2:	4f28      	ldr	r7, [pc, #160]	; (1a005244 <_vfprintf_r+0x8a4>)
1a0051a4:	4b28      	ldr	r3, [pc, #160]	; (1a005248 <_vfprintf_r+0x8a8>)
1a0051a6:	9802      	ldr	r0, [sp, #8]
1a0051a8:	2100      	movs	r1, #0
1a0051aa:	2603      	movs	r6, #3
1a0051ac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a0051b0:	9603      	str	r6, [sp, #12]
1a0051b2:	9109      	str	r1, [sp, #36]	; 0x24
1a0051b4:	9002      	str	r0, [sp, #8]
1a0051b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a0051ba:	bfc8      	it	gt
1a0051bc:	461f      	movgt	r7, r3
1a0051be:	4689      	mov	r9, r1
1a0051c0:	910c      	str	r1, [sp, #48]	; 0x30
1a0051c2:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a0051c6:	e5c0      	b.n	1a004d4a <_vfprintf_r+0x3aa>
1a0051c8:	9e02      	ldr	r6, [sp, #8]
1a0051ca:	06b4      	lsls	r4, r6, #26
1a0051cc:	d41f      	bmi.n	1a00520e <_vfprintf_r+0x86e>
1a0051ce:	9b02      	ldr	r3, [sp, #8]
1a0051d0:	9a08      	ldr	r2, [sp, #32]
1a0051d2:	06d8      	lsls	r0, r3, #27
1a0051d4:	f852 4b04 	ldr.w	r4, [r2], #4
1a0051d8:	f101 8174 	bmi.w	1a0064c4 <_vfprintf_r+0x1b24>
1a0051dc:	9e02      	ldr	r6, [sp, #8]
1a0051de:	0671      	lsls	r1, r6, #25
1a0051e0:	f140 8577 	bpl.w	1a005cd2 <_vfprintf_r+0x1332>
1a0051e4:	9208      	str	r2, [sp, #32]
1a0051e6:	b2a4      	uxth	r4, r4
1a0051e8:	2500      	movs	r5, #0
1a0051ea:	2301      	movs	r3, #1
1a0051ec:	e703      	b.n	1a004ff6 <_vfprintf_r+0x656>
1a0051ee:	9805      	ldr	r0, [sp, #20]
1a0051f0:	f7fe fd76 	bl	1a003ce0 <__sinit>
1a0051f4:	f7ff bbea 	b.w	1a0049cc <_vfprintf_r+0x2c>
1a0051f8:	f1b8 0f00 	cmp.w	r8, #0
1a0051fc:	f43f ae88 	beq.w	1a004f10 <_vfprintf_r+0x570>
1a005200:	2300      	movs	r3, #0
1a005202:	2601      	movs	r6, #1
1a005204:	461a      	mov	r2, r3
1a005206:	9603      	str	r6, [sp, #12]
1a005208:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00520c:	e607      	b.n	1a004e1e <_vfprintf_r+0x47e>
1a00520e:	9c08      	ldr	r4, [sp, #32]
1a005210:	3407      	adds	r4, #7
1a005212:	f024 0307 	bic.w	r3, r4, #7
1a005216:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00521a:	9308      	str	r3, [sp, #32]
1a00521c:	2301      	movs	r3, #1
1a00521e:	e6ea      	b.n	1a004ff6 <_vfprintf_r+0x656>
1a005220:	9c08      	ldr	r4, [sp, #32]
1a005222:	3407      	adds	r4, #7
1a005224:	f024 0307 	bic.w	r3, r4, #7
1a005228:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00522c:	9308      	str	r3, [sp, #32]
1a00522e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a005232:	2300      	movs	r3, #0
1a005234:	e6df      	b.n	1a004ff6 <_vfprintf_r+0x656>
1a005236:	bf00      	nop
1a005238:	1a008d3c 	.word	0x1a008d3c
1a00523c:	1a008d1c 	.word	0x1a008d1c
1a005240:	7fefffff 	.word	0x7fefffff
1a005244:	1a008cf8 	.word	0x1a008cf8
1a005248:	1a008cfc 	.word	0x1a008cfc
1a00524c:	9e02      	ldr	r6, [sp, #8]
1a00524e:	2d00      	cmp	r5, #0
1a005250:	bf08      	it	eq
1a005252:	2c0a      	cmpeq	r4, #10
1a005254:	d213      	bcs.n	1a00527e <_vfprintf_r+0x8de>
1a005256:	3430      	adds	r4, #48	; 0x30
1a005258:	9602      	str	r6, [sp, #8]
1a00525a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00525e:	2601      	movs	r6, #1
1a005260:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a005264:	2300      	movs	r3, #0
1a005266:	454e      	cmp	r6, r9
1a005268:	9309      	str	r3, [sp, #36]	; 0x24
1a00526a:	930c      	str	r3, [sp, #48]	; 0x30
1a00526c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a005270:	4633      	mov	r3, r6
1a005272:	bfb8      	it	lt
1a005274:	464b      	movlt	r3, r9
1a005276:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00527a:	9303      	str	r3, [sp, #12]
1a00527c:	e565      	b.n	1a004d4a <_vfprintf_r+0x3aa>
1a00527e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a005282:	2200      	movs	r2, #0
1a005284:	e9cd a802 	strd	sl, r8, [sp, #8]
1a005288:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00528c:	af54      	add	r7, sp, #336	; 0x150
1a00528e:	46cb      	mov	fp, r9
1a005290:	4692      	mov	sl, r2
1a005292:	46b1      	mov	r9, r6
1a005294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005298:	461e      	mov	r6, r3
1a00529a:	e007      	b.n	1a0052ac <_vfprintf_r+0x90c>
1a00529c:	f7fe fa34 	bl	1a003708 <__aeabi_uldivmod>
1a0052a0:	2d00      	cmp	r5, #0
1a0052a2:	bf08      	it	eq
1a0052a4:	2c0a      	cmpeq	r4, #10
1a0052a6:	d320      	bcc.n	1a0052ea <_vfprintf_r+0x94a>
1a0052a8:	4604      	mov	r4, r0
1a0052aa:	460d      	mov	r5, r1
1a0052ac:	220a      	movs	r2, #10
1a0052ae:	2300      	movs	r3, #0
1a0052b0:	4620      	mov	r0, r4
1a0052b2:	4629      	mov	r1, r5
1a0052b4:	f7fe fa28 	bl	1a003708 <__aeabi_uldivmod>
1a0052b8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a0052bc:	f807 cc01 	strb.w	ip, [r7, #-1]
1a0052c0:	4620      	mov	r0, r4
1a0052c2:	4629      	mov	r1, r5
1a0052c4:	220a      	movs	r2, #10
1a0052c6:	2300      	movs	r3, #0
1a0052c8:	f10a 0a01 	add.w	sl, sl, #1
1a0052cc:	3f01      	subs	r7, #1
1a0052ce:	2e00      	cmp	r6, #0
1a0052d0:	d0e4      	beq.n	1a00529c <_vfprintf_r+0x8fc>
1a0052d2:	f898 c000 	ldrb.w	ip, [r8]
1a0052d6:	45e2      	cmp	sl, ip
1a0052d8:	d1e0      	bne.n	1a00529c <_vfprintf_r+0x8fc>
1a0052da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a0052de:	d0dd      	beq.n	1a00529c <_vfprintf_r+0x8fc>
1a0052e0:	429d      	cmp	r5, r3
1a0052e2:	bf08      	it	eq
1a0052e4:	4294      	cmpeq	r4, r2
1a0052e6:	f080 871e 	bcs.w	1a006126 <_vfprintf_r+0x1786>
1a0052ea:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0052ee:	464e      	mov	r6, r9
1a0052f0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0052f4:	46d9      	mov	r9, fp
1a0052f6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0052fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a0052fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005302:	9602      	str	r6, [sp, #8]
1a005304:	ab54      	add	r3, sp, #336	; 0x150
1a005306:	1bde      	subs	r6, r3, r7
1a005308:	e7ac      	b.n	1a005264 <_vfprintf_r+0x8c4>
1a00530a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a00530e:	f340 810a 	ble.w	1a005526 <_vfprintf_r+0xb86>
1a005312:	2200      	movs	r2, #0
1a005314:	2300      	movs	r3, #0
1a005316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00531a:	f7fe f985 	bl	1a003628 <__aeabi_dcmpeq>
1a00531e:	2800      	cmp	r0, #0
1a005320:	f000 81de 	beq.w	1a0056e0 <_vfprintf_r+0xd40>
1a005324:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005326:	4ac2      	ldr	r2, [pc, #776]	; (1a005630 <_vfprintf_r+0xc90>)
1a005328:	f8cb 2000 	str.w	r2, [fp]
1a00532c:	3301      	adds	r3, #1
1a00532e:	3401      	adds	r4, #1
1a005330:	2201      	movs	r2, #1
1a005332:	2b07      	cmp	r3, #7
1a005334:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a005338:	f8cb 2004 	str.w	r2, [fp, #4]
1a00533c:	f300 8463 	bgt.w	1a005c06 <_vfprintf_r+0x1266>
1a005340:	f10b 0b08 	add.w	fp, fp, #8
1a005344:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005346:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005348:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00534a:	4293      	cmp	r3, r2
1a00534c:	f280 82a5 	bge.w	1a00589a <_vfprintf_r+0xefa>
1a005350:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005352:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a005354:	f8cb 2000 	str.w	r2, [fp]
1a005358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00535a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00535e:	3301      	adds	r3, #1
1a005360:	4414      	add	r4, r2
1a005362:	2b07      	cmp	r3, #7
1a005364:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a005368:	f300 83ec 	bgt.w	1a005b44 <_vfprintf_r+0x11a4>
1a00536c:	f10b 0b08 	add.w	fp, fp, #8
1a005370:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005372:	1e5d      	subs	r5, r3, #1
1a005374:	2d00      	cmp	r5, #0
1a005376:	f77f ada8 	ble.w	1a004eca <_vfprintf_r+0x52a>
1a00537a:	2d10      	cmp	r5, #16
1a00537c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00537e:	4bad      	ldr	r3, [pc, #692]	; (1a005634 <_vfprintf_r+0xc94>)
1a005380:	f340 844e 	ble.w	1a005c20 <_vfprintf_r+0x1280>
1a005384:	2610      	movs	r6, #16
1a005386:	9f05      	ldr	r7, [sp, #20]
1a005388:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00538c:	4699      	mov	r9, r3
1a00538e:	e005      	b.n	1a00539c <_vfprintf_r+0x9fc>
1a005390:	f10b 0b08 	add.w	fp, fp, #8
1a005394:	3d10      	subs	r5, #16
1a005396:	2d10      	cmp	r5, #16
1a005398:	f340 8441 	ble.w	1a005c1e <_vfprintf_r+0x127e>
1a00539c:	3201      	adds	r2, #1
1a00539e:	3410      	adds	r4, #16
1a0053a0:	2a07      	cmp	r2, #7
1a0053a2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0053a6:	e9cb 9600 	strd	r9, r6, [fp]
1a0053aa:	ddf1      	ble.n	1a005390 <_vfprintf_r+0x9f0>
1a0053ac:	aa28      	add	r2, sp, #160	; 0xa0
1a0053ae:	4641      	mov	r1, r8
1a0053b0:	4638      	mov	r0, r7
1a0053b2:	f003 f931 	bl	1a008618 <__sprint_r>
1a0053b6:	2800      	cmp	r0, #0
1a0053b8:	f040 8423 	bne.w	1a005c02 <_vfprintf_r+0x1262>
1a0053bc:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0053c0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0053c4:	e7e6      	b.n	1a005394 <_vfprintf_r+0x9f4>
1a0053c6:	9b06      	ldr	r3, [sp, #24]
1a0053c8:	9a03      	ldr	r2, [sp, #12]
1a0053ca:	1a9d      	subs	r5, r3, r2
1a0053cc:	2d00      	cmp	r5, #0
1a0053ce:	f77f ad65 	ble.w	1a004e9c <_vfprintf_r+0x4fc>
1a0053d2:	2d10      	cmp	r5, #16
1a0053d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0053d6:	4b97      	ldr	r3, [pc, #604]	; (1a005634 <_vfprintf_r+0xc94>)
1a0053d8:	dd28      	ble.n	1a00542c <_vfprintf_r+0xa8c>
1a0053da:	960a      	str	r6, [sp, #40]	; 0x28
1a0053dc:	4659      	mov	r1, fp
1a0053de:	4620      	mov	r0, r4
1a0053e0:	46bb      	mov	fp, r7
1a0053e2:	9c05      	ldr	r4, [sp, #20]
1a0053e4:	9e07      	ldr	r6, [sp, #28]
1a0053e6:	461f      	mov	r7, r3
1a0053e8:	e004      	b.n	1a0053f4 <_vfprintf_r+0xa54>
1a0053ea:	3d10      	subs	r5, #16
1a0053ec:	2d10      	cmp	r5, #16
1a0053ee:	f101 0108 	add.w	r1, r1, #8
1a0053f2:	dd16      	ble.n	1a005422 <_vfprintf_r+0xa82>
1a0053f4:	3201      	adds	r2, #1
1a0053f6:	3010      	adds	r0, #16
1a0053f8:	2310      	movs	r3, #16
1a0053fa:	2a07      	cmp	r2, #7
1a0053fc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a005400:	600f      	str	r7, [r1, #0]
1a005402:	604b      	str	r3, [r1, #4]
1a005404:	ddf1      	ble.n	1a0053ea <_vfprintf_r+0xa4a>
1a005406:	aa28      	add	r2, sp, #160	; 0xa0
1a005408:	4631      	mov	r1, r6
1a00540a:	4620      	mov	r0, r4
1a00540c:	f003 f904 	bl	1a008618 <__sprint_r>
1a005410:	2800      	cmp	r0, #0
1a005412:	f040 80f6 	bne.w	1a005602 <_vfprintf_r+0xc62>
1a005416:	3d10      	subs	r5, #16
1a005418:	2d10      	cmp	r5, #16
1a00541a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00541e:	a92b      	add	r1, sp, #172	; 0xac
1a005420:	dce8      	bgt.n	1a0053f4 <_vfprintf_r+0xa54>
1a005422:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a005424:	463b      	mov	r3, r7
1a005426:	4604      	mov	r4, r0
1a005428:	465f      	mov	r7, fp
1a00542a:	468b      	mov	fp, r1
1a00542c:	3201      	adds	r2, #1
1a00542e:	442c      	add	r4, r5
1a005430:	2a07      	cmp	r2, #7
1a005432:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005436:	e9cb 3500 	strd	r3, r5, [fp]
1a00543a:	f300 8355 	bgt.w	1a005ae8 <_vfprintf_r+0x1148>
1a00543e:	eba9 0506 	sub.w	r5, r9, r6
1a005442:	2d00      	cmp	r5, #0
1a005444:	f10b 0b08 	add.w	fp, fp, #8
1a005448:	f77f ad2d 	ble.w	1a004ea6 <_vfprintf_r+0x506>
1a00544c:	2d10      	cmp	r5, #16
1a00544e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005450:	4b78      	ldr	r3, [pc, #480]	; (1a005634 <_vfprintf_r+0xc94>)
1a005452:	dd29      	ble.n	1a0054a8 <_vfprintf_r+0xb08>
1a005454:	960a      	str	r6, [sp, #40]	; 0x28
1a005456:	4659      	mov	r1, fp
1a005458:	4620      	mov	r0, r4
1a00545a:	46bb      	mov	fp, r7
1a00545c:	f04f 0910 	mov.w	r9, #16
1a005460:	9c05      	ldr	r4, [sp, #20]
1a005462:	9e07      	ldr	r6, [sp, #28]
1a005464:	461f      	mov	r7, r3
1a005466:	e004      	b.n	1a005472 <_vfprintf_r+0xad2>
1a005468:	3d10      	subs	r5, #16
1a00546a:	2d10      	cmp	r5, #16
1a00546c:	f101 0108 	add.w	r1, r1, #8
1a005470:	dd15      	ble.n	1a00549e <_vfprintf_r+0xafe>
1a005472:	3201      	adds	r2, #1
1a005474:	3010      	adds	r0, #16
1a005476:	2a07      	cmp	r2, #7
1a005478:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00547c:	e9c1 7900 	strd	r7, r9, [r1]
1a005480:	ddf2      	ble.n	1a005468 <_vfprintf_r+0xac8>
1a005482:	aa28      	add	r2, sp, #160	; 0xa0
1a005484:	4631      	mov	r1, r6
1a005486:	4620      	mov	r0, r4
1a005488:	f003 f8c6 	bl	1a008618 <__sprint_r>
1a00548c:	2800      	cmp	r0, #0
1a00548e:	f040 80b8 	bne.w	1a005602 <_vfprintf_r+0xc62>
1a005492:	3d10      	subs	r5, #16
1a005494:	2d10      	cmp	r5, #16
1a005496:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00549a:	a92b      	add	r1, sp, #172	; 0xac
1a00549c:	dce9      	bgt.n	1a005472 <_vfprintf_r+0xad2>
1a00549e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0054a0:	463b      	mov	r3, r7
1a0054a2:	4604      	mov	r4, r0
1a0054a4:	465f      	mov	r7, fp
1a0054a6:	468b      	mov	fp, r1
1a0054a8:	3201      	adds	r2, #1
1a0054aa:	442c      	add	r4, r5
1a0054ac:	2a07      	cmp	r2, #7
1a0054ae:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0054b2:	e9cb 3500 	strd	r3, r5, [fp]
1a0054b6:	f300 81da 	bgt.w	1a00586e <_vfprintf_r+0xece>
1a0054ba:	f10b 0b08 	add.w	fp, fp, #8
1a0054be:	e4f2      	b.n	1a004ea6 <_vfprintf_r+0x506>
1a0054c0:	aa28      	add	r2, sp, #160	; 0xa0
1a0054c2:	9907      	ldr	r1, [sp, #28]
1a0054c4:	9805      	ldr	r0, [sp, #20]
1a0054c6:	f003 f8a7 	bl	1a008618 <__sprint_r>
1a0054ca:	2800      	cmp	r0, #0
1a0054cc:	f43f ad11 	beq.w	1a004ef2 <_vfprintf_r+0x552>
1a0054d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0054d4:	e096      	b.n	1a005604 <_vfprintf_r+0xc64>
1a0054d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0054d8:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0054da:	f8cb 1000 	str.w	r1, [fp]
1a0054de:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0054e0:	f8cb 1004 	str.w	r1, [fp, #4]
1a0054e4:	3201      	adds	r2, #1
1a0054e6:	440c      	add	r4, r1
1a0054e8:	2a07      	cmp	r2, #7
1a0054ea:	942a      	str	r4, [sp, #168]	; 0xa8
1a0054ec:	9229      	str	r2, [sp, #164]	; 0xa4
1a0054ee:	f300 84e1 	bgt.w	1a005eb4 <_vfprintf_r+0x1514>
1a0054f2:	f10b 0b08 	add.w	fp, fp, #8
1a0054f6:	2b00      	cmp	r3, #0
1a0054f8:	f2c0 86a2 	blt.w	1a006240 <_vfprintf_r+0x18a0>
1a0054fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0054fe:	3201      	adds	r2, #1
1a005500:	441c      	add	r4, r3
1a005502:	2a07      	cmp	r2, #7
1a005504:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005508:	e9cb 7300 	strd	r7, r3, [fp]
1a00550c:	f77f acdb 	ble.w	1a004ec6 <_vfprintf_r+0x526>
1a005510:	aa28      	add	r2, sp, #160	; 0xa0
1a005512:	9907      	ldr	r1, [sp, #28]
1a005514:	9805      	ldr	r0, [sp, #20]
1a005516:	f003 f87f 	bl	1a008618 <__sprint_r>
1a00551a:	2800      	cmp	r0, #0
1a00551c:	d1d8      	bne.n	1a0054d0 <_vfprintf_r+0xb30>
1a00551e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005520:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005524:	e4d1      	b.n	1a004eca <_vfprintf_r+0x52a>
1a005526:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005528:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00552a:	2a01      	cmp	r2, #1
1a00552c:	f104 0401 	add.w	r4, r4, #1
1a005530:	f103 0501 	add.w	r5, r3, #1
1a005534:	f10b 0608 	add.w	r6, fp, #8
1a005538:	f340 8158 	ble.w	1a0057ec <_vfprintf_r+0xe4c>
1a00553c:	2301      	movs	r3, #1
1a00553e:	2d07      	cmp	r5, #7
1a005540:	f8cb 7000 	str.w	r7, [fp]
1a005544:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a005548:	f8cb 3004 	str.w	r3, [fp, #4]
1a00554c:	f300 832a 	bgt.w	1a005ba4 <_vfprintf_r+0x1204>
1a005550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005552:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a005554:	1c69      	adds	r1, r5, #1
1a005556:	441c      	add	r4, r3
1a005558:	2907      	cmp	r1, #7
1a00555a:	910b      	str	r1, [sp, #44]	; 0x2c
1a00555c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a005560:	e9c6 2300 	strd	r2, r3, [r6]
1a005564:	f300 832a 	bgt.w	1a005bbc <_vfprintf_r+0x121c>
1a005568:	3608      	adds	r6, #8
1a00556a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00556c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a00556e:	f102 0901 	add.w	r9, r2, #1
1a005572:	2300      	movs	r3, #0
1a005574:	2200      	movs	r2, #0
1a005576:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00557a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a00557e:	f106 0b08 	add.w	fp, r6, #8
1a005582:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a005586:	f7fe f84f 	bl	1a003628 <__aeabi_dcmpeq>
1a00558a:	2800      	cmp	r0, #0
1a00558c:	f040 8141 	bne.w	1a005812 <_vfprintf_r+0xe72>
1a005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005592:	f8c6 8004 	str.w	r8, [r6, #4]
1a005596:	3701      	adds	r7, #1
1a005598:	4444      	add	r4, r8
1a00559a:	2b07      	cmp	r3, #7
1a00559c:	6037      	str	r7, [r6, #0]
1a00559e:	942a      	str	r4, [sp, #168]	; 0xa8
1a0055a0:	9329      	str	r3, [sp, #164]	; 0xa4
1a0055a2:	f300 82bf 	bgt.w	1a005b24 <_vfprintf_r+0x1184>
1a0055a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0055a8:	f106 0310 	add.w	r3, r6, #16
1a0055ac:	3202      	adds	r2, #2
1a0055ae:	465e      	mov	r6, fp
1a0055b0:	920a      	str	r2, [sp, #40]	; 0x28
1a0055b2:	469b      	mov	fp, r3
1a0055b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a0055b6:	6072      	str	r2, [r6, #4]
1a0055b8:	4414      	add	r4, r2
1a0055ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0055bc:	942a      	str	r4, [sp, #168]	; 0xa8
1a0055be:	ab24      	add	r3, sp, #144	; 0x90
1a0055c0:	2a07      	cmp	r2, #7
1a0055c2:	9229      	str	r2, [sp, #164]	; 0xa4
1a0055c4:	6033      	str	r3, [r6, #0]
1a0055c6:	f77f ac80 	ble.w	1a004eca <_vfprintf_r+0x52a>
1a0055ca:	e7a1      	b.n	1a005510 <_vfprintf_r+0xb70>
1a0055cc:	9e02      	ldr	r6, [sp, #8]
1a0055ce:	f7ff bbf4 	b.w	1a004dba <_vfprintf_r+0x41a>
1a0055d2:	aa28      	add	r2, sp, #160	; 0xa0
1a0055d4:	9907      	ldr	r1, [sp, #28]
1a0055d6:	9805      	ldr	r0, [sp, #20]
1a0055d8:	f003 f81e 	bl	1a008618 <__sprint_r>
1a0055dc:	2800      	cmp	r0, #0
1a0055de:	f47f af77 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a0055e2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0055e4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0055e8:	e444      	b.n	1a004e74 <_vfprintf_r+0x4d4>
1a0055ea:	aa28      	add	r2, sp, #160	; 0xa0
1a0055ec:	9907      	ldr	r1, [sp, #28]
1a0055ee:	9805      	ldr	r0, [sp, #20]
1a0055f0:	f003 f812 	bl	1a008618 <__sprint_r>
1a0055f4:	2800      	cmp	r0, #0
1a0055f6:	f47f af6b 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a0055fa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0055fc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005600:	e448      	b.n	1a004e94 <_vfprintf_r+0x4f4>
1a005602:	46b1      	mov	r9, r6
1a005604:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005606:	b111      	cbz	r1, 1a00560e <_vfprintf_r+0xc6e>
1a005608:	9805      	ldr	r0, [sp, #20]
1a00560a:	f7fe fbef 	bl	1a003dec <_free_r>
1a00560e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a005612:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a005616:	07d4      	lsls	r4, r2, #31
1a005618:	d402      	bmi.n	1a005620 <_vfprintf_r+0xc80>
1a00561a:	0598      	lsls	r0, r3, #22
1a00561c:	f140 82db 	bpl.w	1a005bd6 <_vfprintf_r+0x1236>
1a005620:	0659      	lsls	r1, r3, #25
1a005622:	f100 8640 	bmi.w	1a0062a6 <_vfprintf_r+0x1906>
1a005626:	9804      	ldr	r0, [sp, #16]
1a005628:	b055      	add	sp, #340	; 0x154
1a00562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00562e:	bf00      	nop
1a005630:	1a008d38 	.word	0x1a008d38
1a005634:	1a008d4c 	.word	0x1a008d4c
1a005638:	2d10      	cmp	r5, #16
1a00563a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00563c:	dd21      	ble.n	1a005682 <_vfprintf_r+0xce2>
1a00563e:	2610      	movs	r6, #16
1a005640:	9f05      	ldr	r7, [sp, #20]
1a005642:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a005646:	e004      	b.n	1a005652 <_vfprintf_r+0xcb2>
1a005648:	3d10      	subs	r5, #16
1a00564a:	2d10      	cmp	r5, #16
1a00564c:	f10b 0b08 	add.w	fp, fp, #8
1a005650:	dd17      	ble.n	1a005682 <_vfprintf_r+0xce2>
1a005652:	3301      	adds	r3, #1
1a005654:	4ab3      	ldr	r2, [pc, #716]	; (1a005924 <_vfprintf_r+0xf84>)
1a005656:	3410      	adds	r4, #16
1a005658:	2b07      	cmp	r3, #7
1a00565a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00565e:	e9cb 2600 	strd	r2, r6, [fp]
1a005662:	ddf1      	ble.n	1a005648 <_vfprintf_r+0xca8>
1a005664:	aa28      	add	r2, sp, #160	; 0xa0
1a005666:	4641      	mov	r1, r8
1a005668:	4638      	mov	r0, r7
1a00566a:	f002 ffd5 	bl	1a008618 <__sprint_r>
1a00566e:	2800      	cmp	r0, #0
1a005670:	f040 82c7 	bne.w	1a005c02 <_vfprintf_r+0x1262>
1a005674:	3d10      	subs	r5, #16
1a005676:	2d10      	cmp	r5, #16
1a005678:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00567c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005680:	dce7      	bgt.n	1a005652 <_vfprintf_r+0xcb2>
1a005682:	3301      	adds	r3, #1
1a005684:	4aa7      	ldr	r2, [pc, #668]	; (1a005924 <_vfprintf_r+0xf84>)
1a005686:	442c      	add	r4, r5
1a005688:	2b07      	cmp	r3, #7
1a00568a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00568e:	e9cb 2500 	strd	r2, r5, [fp]
1a005692:	f77f ac23 	ble.w	1a004edc <_vfprintf_r+0x53c>
1a005696:	aa28      	add	r2, sp, #160	; 0xa0
1a005698:	9907      	ldr	r1, [sp, #28]
1a00569a:	9805      	ldr	r0, [sp, #20]
1a00569c:	f002 ffbc 	bl	1a008618 <__sprint_r>
1a0056a0:	2800      	cmp	r0, #0
1a0056a2:	f47f af15 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a0056a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0056a8:	e418      	b.n	1a004edc <_vfprintf_r+0x53c>
1a0056aa:	2b01      	cmp	r3, #1
1a0056ac:	f000 8423 	beq.w	1a005ef6 <_vfprintf_r+0x1556>
1a0056b0:	2b02      	cmp	r3, #2
1a0056b2:	9e02      	ldr	r6, [sp, #8]
1a0056b4:	f47f ab87 	bne.w	1a004dc6 <_vfprintf_r+0x426>
1a0056b8:	9814      	ldr	r0, [sp, #80]	; 0x50
1a0056ba:	af54      	add	r7, sp, #336	; 0x150
1a0056bc:	0923      	lsrs	r3, r4, #4
1a0056be:	f004 010f 	and.w	r1, r4, #15
1a0056c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a0056c6:	092a      	lsrs	r2, r5, #4
1a0056c8:	461c      	mov	r4, r3
1a0056ca:	4615      	mov	r5, r2
1a0056cc:	5c43      	ldrb	r3, [r0, r1]
1a0056ce:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a0056d2:	ea54 0305 	orrs.w	r3, r4, r5
1a0056d6:	d1f1      	bne.n	1a0056bc <_vfprintf_r+0xd1c>
1a0056d8:	ab54      	add	r3, sp, #336	; 0x150
1a0056da:	9602      	str	r6, [sp, #8]
1a0056dc:	1bde      	subs	r6, r3, r7
1a0056de:	e5c1      	b.n	1a005264 <_vfprintf_r+0x8c4>
1a0056e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0056e2:	2b00      	cmp	r3, #0
1a0056e4:	f340 80df 	ble.w	1a0058a6 <_vfprintf_r+0xf06>
1a0056e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0056ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0056ec:	4293      	cmp	r3, r2
1a0056ee:	bfa8      	it	ge
1a0056f0:	4613      	movge	r3, r2
1a0056f2:	2b00      	cmp	r3, #0
1a0056f4:	461d      	mov	r5, r3
1a0056f6:	dd0d      	ble.n	1a005714 <_vfprintf_r+0xd74>
1a0056f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0056fa:	f8cb 7000 	str.w	r7, [fp]
1a0056fe:	3301      	adds	r3, #1
1a005700:	442c      	add	r4, r5
1a005702:	2b07      	cmp	r3, #7
1a005704:	942a      	str	r4, [sp, #168]	; 0xa8
1a005706:	f8cb 5004 	str.w	r5, [fp, #4]
1a00570a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00570c:	f300 84fe 	bgt.w	1a00610c <_vfprintf_r+0x176c>
1a005710:	f10b 0b08 	add.w	fp, fp, #8
1a005714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005716:	2d00      	cmp	r5, #0
1a005718:	bfa8      	it	ge
1a00571a:	1b5b      	subge	r3, r3, r5
1a00571c:	2b00      	cmp	r3, #0
1a00571e:	461d      	mov	r5, r3
1a005720:	f300 8290 	bgt.w	1a005c44 <_vfprintf_r+0x12a4>
1a005724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005726:	443b      	add	r3, r7
1a005728:	4699      	mov	r9, r3
1a00572a:	9b02      	ldr	r3, [sp, #8]
1a00572c:	0558      	lsls	r0, r3, #21
1a00572e:	f100 8413 	bmi.w	1a005f58 <_vfprintf_r+0x15b8>
1a005732:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005734:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005736:	4293      	cmp	r3, r2
1a005738:	db03      	blt.n	1a005742 <_vfprintf_r+0xda2>
1a00573a:	9a02      	ldr	r2, [sp, #8]
1a00573c:	07d1      	lsls	r1, r2, #31
1a00573e:	f140 82f7 	bpl.w	1a005d30 <_vfprintf_r+0x1390>
1a005742:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005744:	9915      	ldr	r1, [sp, #84]	; 0x54
1a005746:	f8cb 1000 	str.w	r1, [fp]
1a00574a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00574c:	f8cb 1004 	str.w	r1, [fp, #4]
1a005750:	3201      	adds	r2, #1
1a005752:	440c      	add	r4, r1
1a005754:	2a07      	cmp	r2, #7
1a005756:	942a      	str	r4, [sp, #168]	; 0xa8
1a005758:	9229      	str	r2, [sp, #164]	; 0xa4
1a00575a:	f300 8523 	bgt.w	1a0061a4 <_vfprintf_r+0x1804>
1a00575e:	f10b 0b08 	add.w	fp, fp, #8
1a005762:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005764:	18bd      	adds	r5, r7, r2
1a005766:	eba5 0509 	sub.w	r5, r5, r9
1a00576a:	1ad3      	subs	r3, r2, r3
1a00576c:	429d      	cmp	r5, r3
1a00576e:	bfa8      	it	ge
1a005770:	461d      	movge	r5, r3
1a005772:	2d00      	cmp	r5, #0
1a005774:	dd0d      	ble.n	1a005792 <_vfprintf_r+0xdf2>
1a005776:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005778:	f8cb 9000 	str.w	r9, [fp]
1a00577c:	3201      	adds	r2, #1
1a00577e:	442c      	add	r4, r5
1a005780:	2a07      	cmp	r2, #7
1a005782:	942a      	str	r4, [sp, #168]	; 0xa8
1a005784:	f8cb 5004 	str.w	r5, [fp, #4]
1a005788:	9229      	str	r2, [sp, #164]	; 0xa4
1a00578a:	f300 8546 	bgt.w	1a00621a <_vfprintf_r+0x187a>
1a00578e:	f10b 0b08 	add.w	fp, fp, #8
1a005792:	2d00      	cmp	r5, #0
1a005794:	bfac      	ite	ge
1a005796:	1b5d      	subge	r5, r3, r5
1a005798:	461d      	movlt	r5, r3
1a00579a:	2d00      	cmp	r5, #0
1a00579c:	f77f ab95 	ble.w	1a004eca <_vfprintf_r+0x52a>
1a0057a0:	2d10      	cmp	r5, #16
1a0057a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0057a4:	4b60      	ldr	r3, [pc, #384]	; (1a005928 <_vfprintf_r+0xf88>)
1a0057a6:	f340 823b 	ble.w	1a005c20 <_vfprintf_r+0x1280>
1a0057aa:	2610      	movs	r6, #16
1a0057ac:	9f05      	ldr	r7, [sp, #20]
1a0057ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a0057b2:	4699      	mov	r9, r3
1a0057b4:	e005      	b.n	1a0057c2 <_vfprintf_r+0xe22>
1a0057b6:	f10b 0b08 	add.w	fp, fp, #8
1a0057ba:	3d10      	subs	r5, #16
1a0057bc:	2d10      	cmp	r5, #16
1a0057be:	f340 822e 	ble.w	1a005c1e <_vfprintf_r+0x127e>
1a0057c2:	3201      	adds	r2, #1
1a0057c4:	3410      	adds	r4, #16
1a0057c6:	2a07      	cmp	r2, #7
1a0057c8:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0057cc:	e9cb 9600 	strd	r9, r6, [fp]
1a0057d0:	ddf1      	ble.n	1a0057b6 <_vfprintf_r+0xe16>
1a0057d2:	aa28      	add	r2, sp, #160	; 0xa0
1a0057d4:	4641      	mov	r1, r8
1a0057d6:	4638      	mov	r0, r7
1a0057d8:	f002 ff1e 	bl	1a008618 <__sprint_r>
1a0057dc:	2800      	cmp	r0, #0
1a0057de:	f040 8210 	bne.w	1a005c02 <_vfprintf_r+0x1262>
1a0057e2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0057e6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0057ea:	e7e6      	b.n	1a0057ba <_vfprintf_r+0xe1a>
1a0057ec:	9a02      	ldr	r2, [sp, #8]
1a0057ee:	07d2      	lsls	r2, r2, #31
1a0057f0:	f53f aea4 	bmi.w	1a00553c <_vfprintf_r+0xb9c>
1a0057f4:	2201      	movs	r2, #1
1a0057f6:	2d07      	cmp	r5, #7
1a0057f8:	f8cb 7000 	str.w	r7, [fp]
1a0057fc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a005800:	f8cb 2004 	str.w	r2, [fp, #4]
1a005804:	f300 818e 	bgt.w	1a005b24 <_vfprintf_r+0x1184>
1a005808:	3302      	adds	r3, #2
1a00580a:	930a      	str	r3, [sp, #40]	; 0x28
1a00580c:	f10b 0b10 	add.w	fp, fp, #16
1a005810:	e6d0      	b.n	1a0055b4 <_vfprintf_r+0xc14>
1a005812:	f1b8 0f00 	cmp.w	r8, #0
1a005816:	f77f aecd 	ble.w	1a0055b4 <_vfprintf_r+0xc14>
1a00581a:	f1b8 0f10 	cmp.w	r8, #16
1a00581e:	4b42      	ldr	r3, [pc, #264]	; (1a005928 <_vfprintf_r+0xf88>)
1a005820:	f340 8635 	ble.w	1a00648e <_vfprintf_r+0x1aee>
1a005824:	461a      	mov	r2, r3
1a005826:	464d      	mov	r5, r9
1a005828:	4623      	mov	r3, r4
1a00582a:	2710      	movs	r7, #16
1a00582c:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a005830:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a005834:	4614      	mov	r4, r2
1a005836:	e007      	b.n	1a005848 <_vfprintf_r+0xea8>
1a005838:	3608      	adds	r6, #8
1a00583a:	f1a8 0810 	sub.w	r8, r8, #16
1a00583e:	f1b8 0f10 	cmp.w	r8, #16
1a005842:	f340 815e 	ble.w	1a005b02 <_vfprintf_r+0x1162>
1a005846:	3501      	adds	r5, #1
1a005848:	3310      	adds	r3, #16
1a00584a:	2d07      	cmp	r5, #7
1a00584c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a005850:	e9c6 4700 	strd	r4, r7, [r6]
1a005854:	ddf0      	ble.n	1a005838 <_vfprintf_r+0xe98>
1a005856:	aa28      	add	r2, sp, #160	; 0xa0
1a005858:	4659      	mov	r1, fp
1a00585a:	4648      	mov	r0, r9
1a00585c:	f002 fedc 	bl	1a008618 <__sprint_r>
1a005860:	2800      	cmp	r0, #0
1a005862:	f040 821d 	bne.w	1a005ca0 <_vfprintf_r+0x1300>
1a005866:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a00586a:	ae2b      	add	r6, sp, #172	; 0xac
1a00586c:	e7e5      	b.n	1a00583a <_vfprintf_r+0xe9a>
1a00586e:	aa28      	add	r2, sp, #160	; 0xa0
1a005870:	9907      	ldr	r1, [sp, #28]
1a005872:	9805      	ldr	r0, [sp, #20]
1a005874:	f002 fed0 	bl	1a008618 <__sprint_r>
1a005878:	2800      	cmp	r0, #0
1a00587a:	f47f ae29 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a00587e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005880:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005884:	f7ff bb0f 	b.w	1a004ea6 <_vfprintf_r+0x506>
1a005888:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00588c:	f7fe fbf6 	bl	1a00407c <__retarget_lock_acquire_recursive>
1a005890:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a005894:	b293      	uxth	r3, r2
1a005896:	f7ff b8a3 	b.w	1a0049e0 <_vfprintf_r+0x40>
1a00589a:	9b02      	ldr	r3, [sp, #8]
1a00589c:	07dd      	lsls	r5, r3, #31
1a00589e:	f53f ad57 	bmi.w	1a005350 <_vfprintf_r+0x9b0>
1a0058a2:	f7ff bb12 	b.w	1a004eca <_vfprintf_r+0x52a>
1a0058a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0058a8:	4920      	ldr	r1, [pc, #128]	; (1a00592c <_vfprintf_r+0xf8c>)
1a0058aa:	f8cb 1000 	str.w	r1, [fp]
1a0058ae:	3201      	adds	r2, #1
1a0058b0:	3401      	adds	r4, #1
1a0058b2:	2101      	movs	r1, #1
1a0058b4:	2a07      	cmp	r2, #7
1a0058b6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0058ba:	f8cb 1004 	str.w	r1, [fp, #4]
1a0058be:	f300 8409 	bgt.w	1a0060d4 <_vfprintf_r+0x1734>
1a0058c2:	f10b 0b08 	add.w	fp, fp, #8
1a0058c6:	2b00      	cmp	r3, #0
1a0058c8:	f47f ae05 	bne.w	1a0054d6 <_vfprintf_r+0xb36>
1a0058cc:	9b02      	ldr	r3, [sp, #8]
1a0058ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0058d0:	f003 0301 	and.w	r3, r3, #1
1a0058d4:	4313      	orrs	r3, r2
1a0058d6:	f43f aaf8 	beq.w	1a004eca <_vfprintf_r+0x52a>
1a0058da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0058dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0058de:	f8cb 3000 	str.w	r3, [fp]
1a0058e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0058e4:	f8cb 3004 	str.w	r3, [fp, #4]
1a0058e8:	3201      	adds	r2, #1
1a0058ea:	441c      	add	r4, r3
1a0058ec:	2a07      	cmp	r2, #7
1a0058ee:	942a      	str	r4, [sp, #168]	; 0xa8
1a0058f0:	9229      	str	r2, [sp, #164]	; 0xa4
1a0058f2:	f300 82df 	bgt.w	1a005eb4 <_vfprintf_r+0x1514>
1a0058f6:	f10b 0b08 	add.w	fp, fp, #8
1a0058fa:	e5ff      	b.n	1a0054fc <_vfprintf_r+0xb5c>
1a0058fc:	af54      	add	r7, sp, #336	; 0x150
1a0058fe:	e4b1      	b.n	1a005264 <_vfprintf_r+0x8c4>
1a005900:	9b02      	ldr	r3, [sp, #8]
1a005902:	0598      	lsls	r0, r3, #22
1a005904:	f100 822d 	bmi.w	1a005d62 <_vfprintf_r+0x13c2>
1a005908:	2500      	movs	r5, #0
1a00590a:	f7ff b987 	b.w	1a004c1c <_vfprintf_r+0x27c>
1a00590e:	9904      	ldr	r1, [sp, #16]
1a005910:	6812      	ldr	r2, [r2, #0]
1a005912:	9308      	str	r3, [sp, #32]
1a005914:	17cd      	asrs	r5, r1, #31
1a005916:	4608      	mov	r0, r1
1a005918:	4629      	mov	r1, r5
1a00591a:	e9c2 0100 	strd	r0, r1, [r2]
1a00591e:	4657      	mov	r7, sl
1a005920:	f7ff baf2 	b.w	1a004f08 <_vfprintf_r+0x568>
1a005924:	1a008d3c 	.word	0x1a008d3c
1a005928:	1a008d4c 	.word	0x1a008d4c
1a00592c:	1a008d38 	.word	0x1a008d38
1a005930:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005934:	4602      	mov	r2, r0
1a005936:	460b      	mov	r3, r1
1a005938:	f7fd fea8 	bl	1a00368c <__aeabi_dcmpun>
1a00593c:	2800      	cmp	r0, #0
1a00593e:	f040 853a 	bne.w	1a0063b6 <_vfprintf_r+0x1a16>
1a005942:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a005946:	f000 84d0 	beq.w	1a0062ea <_vfprintf_r+0x194a>
1a00594a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00594e:	f000 820c 	beq.w	1a005d6a <_vfprintf_r+0x13ca>
1a005952:	f028 0320 	bic.w	r3, r8, #32
1a005956:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00595a:	9303      	str	r3, [sp, #12]
1a00595c:	f000 8500 	beq.w	1a006360 <_vfprintf_r+0x19c0>
1a005960:	2b47      	cmp	r3, #71	; 0x47
1a005962:	d104      	bne.n	1a00596e <_vfprintf_r+0xfce>
1a005964:	f1b9 0f00 	cmp.w	r9, #0
1a005968:	bf08      	it	eq
1a00596a:	f04f 0901 	moveq.w	r9, #1
1a00596e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a005972:	9902      	ldr	r1, [sp, #8]
1a005974:	2d00      	cmp	r5, #0
1a005976:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a00597a:	f2c0 8395 	blt.w	1a0060a8 <_vfprintf_r+0x1708>
1a00597e:	2300      	movs	r3, #0
1a005980:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a005984:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a005988:	931e      	str	r3, [sp, #120]	; 0x78
1a00598a:	9202      	str	r2, [sp, #8]
1a00598c:	9b03      	ldr	r3, [sp, #12]
1a00598e:	2b46      	cmp	r3, #70	; 0x46
1a005990:	f000 83df 	beq.w	1a006152 <_vfprintf_r+0x17b2>
1a005994:	2b45      	cmp	r3, #69	; 0x45
1a005996:	f000 84d2 	beq.w	1a00633e <_vfprintf_r+0x199e>
1a00599a:	aa26      	add	r2, sp, #152	; 0x98
1a00599c:	ab23      	add	r3, sp, #140	; 0x8c
1a00599e:	e9cd 3200 	strd	r3, r2, [sp]
1a0059a2:	2102      	movs	r1, #2
1a0059a4:	ab22      	add	r3, sp, #136	; 0x88
1a0059a6:	464a      	mov	r2, r9
1a0059a8:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0059ac:	9805      	ldr	r0, [sp, #20]
1a0059ae:	f000 fedf 	bl	1a006770 <_dtoa_r>
1a0059b2:	9b03      	ldr	r3, [sp, #12]
1a0059b4:	2b47      	cmp	r3, #71	; 0x47
1a0059b6:	4607      	mov	r7, r0
1a0059b8:	f040 858d 	bne.w	1a0064d6 <_vfprintf_r+0x1b36>
1a0059bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0059be:	07db      	lsls	r3, r3, #31
1a0059c0:	f100 843b 	bmi.w	1a00623a <_vfprintf_r+0x189a>
1a0059c4:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a0059c6:	1bf3      	subs	r3, r6, r7
1a0059c8:	9312      	str	r3, [sp, #72]	; 0x48
1a0059ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0059cc:	930e      	str	r3, [sp, #56]	; 0x38
1a0059ce:	9b03      	ldr	r3, [sp, #12]
1a0059d0:	2b47      	cmp	r3, #71	; 0x47
1a0059d2:	f000 8293 	beq.w	1a005efc <_vfprintf_r+0x155c>
1a0059d6:	9b03      	ldr	r3, [sp, #12]
1a0059d8:	2b46      	cmp	r3, #70	; 0x46
1a0059da:	f000 83fd 	beq.w	1a0061d8 <_vfprintf_r+0x1838>
1a0059de:	9903      	ldr	r1, [sp, #12]
1a0059e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0059e2:	2941      	cmp	r1, #65	; 0x41
1a0059e4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a0059e8:	fa5f f388 	uxtb.w	r3, r8
1a0059ec:	bf03      	ittte	eq
1a0059ee:	330f      	addeq	r3, #15
1a0059f0:	b2db      	uxtbeq	r3, r3
1a0059f2:	2101      	moveq	r1, #1
1a0059f4:	2100      	movne	r1, #0
1a0059f6:	2a00      	cmp	r2, #0
1a0059f8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a0059fc:	bfb8      	it	lt
1a0059fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a005a00:	9222      	str	r2, [sp, #136]	; 0x88
1a005a02:	bfb6      	itet	lt
1a005a04:	f1c3 0201 	rsblt	r2, r3, #1
1a005a08:	232b      	movge	r3, #43	; 0x2b
1a005a0a:	232d      	movlt	r3, #45	; 0x2d
1a005a0c:	2a09      	cmp	r2, #9
1a005a0e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a005a12:	f340 84c1 	ble.w	1a006398 <_vfprintf_r+0x19f8>
1a005a16:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a005a1a:	4620      	mov	r0, r4
1a005a1c:	4dbe      	ldr	r5, [pc, #760]	; (1a005d18 <_vfprintf_r+0x1378>)
1a005a1e:	e001      	b.n	1a005a24 <_vfprintf_r+0x1084>
1a005a20:	4608      	mov	r0, r1
1a005a22:	461a      	mov	r2, r3
1a005a24:	fb85 3102 	smull	r3, r1, r5, r2
1a005a28:	17d3      	asrs	r3, r2, #31
1a005a2a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a005a2e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a005a32:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a005a36:	3130      	adds	r1, #48	; 0x30
1a005a38:	2a63      	cmp	r2, #99	; 0x63
1a005a3a:	f800 1c01 	strb.w	r1, [r0, #-1]
1a005a3e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a005a42:	dced      	bgt.n	1a005a20 <_vfprintf_r+0x1080>
1a005a44:	3330      	adds	r3, #48	; 0x30
1a005a46:	1e82      	subs	r2, r0, #2
1a005a48:	b2db      	uxtb	r3, r3
1a005a4a:	4294      	cmp	r4, r2
1a005a4c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a005a50:	f240 8544 	bls.w	1a0064dc <_vfprintf_r+0x1b3c>
1a005a54:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a005a58:	e001      	b.n	1a005a5e <_vfprintf_r+0x10be>
1a005a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005a5e:	f802 3b01 	strb.w	r3, [r2], #1
1a005a62:	42a1      	cmp	r1, r4
1a005a64:	d1f9      	bne.n	1a005a5a <_vfprintf_r+0x10ba>
1a005a66:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a005a6a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a005a6e:	1a1b      	subs	r3, r3, r0
1a005a70:	4413      	add	r3, r2
1a005a72:	aa24      	add	r2, sp, #144	; 0x90
1a005a74:	1a9b      	subs	r3, r3, r2
1a005a76:	9316      	str	r3, [sp, #88]	; 0x58
1a005a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005a7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a005a7c:	2b01      	cmp	r3, #1
1a005a7e:	eb03 0602 	add.w	r6, r3, r2
1a005a82:	f340 84ee 	ble.w	1a006462 <_vfprintf_r+0x1ac2>
1a005a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005a88:	441e      	add	r6, r3
1a005a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005a8c:	2200      	movs	r2, #0
1a005a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a005a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a005a96:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a005a9a:	9302      	str	r3, [sp, #8]
1a005a9c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005aa0:	920c      	str	r2, [sp, #48]	; 0x30
1a005aa2:	9303      	str	r3, [sp, #12]
1a005aa4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a005aa6:	2b00      	cmp	r3, #0
1a005aa8:	f040 824f 	bne.w	1a005f4a <_vfprintf_r+0x15aa>
1a005aac:	4699      	mov	r9, r3
1a005aae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005ab2:	f7ff b94a 	b.w	1a004d4a <_vfprintf_r+0x3aa>
1a005ab6:	9b08      	ldr	r3, [sp, #32]
1a005ab8:	1d1a      	adds	r2, r3, #4
1a005aba:	9b02      	ldr	r3, [sp, #8]
1a005abc:	06d9      	lsls	r1, r3, #27
1a005abe:	f100 8504 	bmi.w	1a0064ca <_vfprintf_r+0x1b2a>
1a005ac2:	9e02      	ldr	r6, [sp, #8]
1a005ac4:	4633      	mov	r3, r6
1a005ac6:	065b      	lsls	r3, r3, #25
1a005ac8:	f140 80ec 	bpl.w	1a005ca4 <_vfprintf_r+0x1304>
1a005acc:	9b08      	ldr	r3, [sp, #32]
1a005ace:	9208      	str	r2, [sp, #32]
1a005ad0:	f9b3 4000 	ldrsh.w	r4, [r3]
1a005ad4:	17e5      	asrs	r5, r4, #31
1a005ad6:	4622      	mov	r2, r4
1a005ad8:	462b      	mov	r3, r5
1a005ada:	f7ff b8eb 	b.w	1a004cb4 <_vfprintf_r+0x314>
1a005ade:	4252      	negs	r2, r2
1a005ae0:	9206      	str	r2, [sp, #24]
1a005ae2:	9308      	str	r3, [sp, #32]
1a005ae4:	f7ff b8af 	b.w	1a004c46 <_vfprintf_r+0x2a6>
1a005ae8:	aa28      	add	r2, sp, #160	; 0xa0
1a005aea:	9907      	ldr	r1, [sp, #28]
1a005aec:	9805      	ldr	r0, [sp, #20]
1a005aee:	f002 fd93 	bl	1a008618 <__sprint_r>
1a005af2:	2800      	cmp	r0, #0
1a005af4:	f47f acec 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005af8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005afa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005afe:	f7ff b9cd 	b.w	1a004e9c <_vfprintf_r+0x4fc>
1a005b02:	4622      	mov	r2, r4
1a005b04:	461c      	mov	r4, r3
1a005b06:	4613      	mov	r3, r2
1a005b08:	462a      	mov	r2, r5
1a005b0a:	3201      	adds	r2, #1
1a005b0c:	920a      	str	r2, [sp, #40]	; 0x28
1a005b0e:	f106 0208 	add.w	r2, r6, #8
1a005b12:	e9c6 3800 	strd	r3, r8, [r6]
1a005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005b18:	9329      	str	r3, [sp, #164]	; 0xa4
1a005b1a:	4444      	add	r4, r8
1a005b1c:	2b07      	cmp	r3, #7
1a005b1e:	942a      	str	r4, [sp, #168]	; 0xa8
1a005b20:	f340 8100 	ble.w	1a005d24 <_vfprintf_r+0x1384>
1a005b24:	aa28      	add	r2, sp, #160	; 0xa0
1a005b26:	9907      	ldr	r1, [sp, #28]
1a005b28:	9805      	ldr	r0, [sp, #20]
1a005b2a:	f002 fd75 	bl	1a008618 <__sprint_r>
1a005b2e:	2800      	cmp	r0, #0
1a005b30:	f47f acce 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005b34:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a005b38:	3301      	adds	r3, #1
1a005b3a:	930a      	str	r3, [sp, #40]	; 0x28
1a005b3c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a005b40:	ae2b      	add	r6, sp, #172	; 0xac
1a005b42:	e537      	b.n	1a0055b4 <_vfprintf_r+0xc14>
1a005b44:	aa28      	add	r2, sp, #160	; 0xa0
1a005b46:	9907      	ldr	r1, [sp, #28]
1a005b48:	9805      	ldr	r0, [sp, #20]
1a005b4a:	f002 fd65 	bl	1a008618 <__sprint_r>
1a005b4e:	2800      	cmp	r0, #0
1a005b50:	f47f acbe 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005b54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005b56:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005b5a:	e409      	b.n	1a005370 <_vfprintf_r+0x9d0>
1a005b5c:	f043 0320 	orr.w	r3, r3, #32
1a005b60:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005b64:	9302      	str	r3, [sp, #8]
1a005b66:	f10a 0a01 	add.w	sl, sl, #1
1a005b6a:	f7fe bf9d 	b.w	1a004aa8 <_vfprintf_r+0x108>
1a005b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a005b72:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005b76:	9302      	str	r3, [sp, #8]
1a005b78:	f10a 0a01 	add.w	sl, sl, #1
1a005b7c:	f7fe bf94 	b.w	1a004aa8 <_vfprintf_r+0x108>
1a005b80:	464e      	mov	r6, r9
1a005b82:	2e06      	cmp	r6, #6
1a005b84:	bf28      	it	cs
1a005b86:	2606      	movcs	r6, #6
1a005b88:	46b9      	mov	r9, r7
1a005b8a:	970c      	str	r7, [sp, #48]	; 0x30
1a005b8c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a005b90:	9709      	str	r7, [sp, #36]	; 0x24
1a005b92:	463a      	mov	r2, r7
1a005b94:	9603      	str	r6, [sp, #12]
1a005b96:	9408      	str	r4, [sp, #32]
1a005b98:	4f60      	ldr	r7, [pc, #384]	; (1a005d1c <_vfprintf_r+0x137c>)
1a005b9a:	f7ff b8d6 	b.w	1a004d4a <_vfprintf_r+0x3aa>
1a005b9e:	463c      	mov	r4, r7
1a005ba0:	f7fe bf75 	b.w	1a004a8e <_vfprintf_r+0xee>
1a005ba4:	aa28      	add	r2, sp, #160	; 0xa0
1a005ba6:	9907      	ldr	r1, [sp, #28]
1a005ba8:	9805      	ldr	r0, [sp, #20]
1a005baa:	f002 fd35 	bl	1a008618 <__sprint_r>
1a005bae:	2800      	cmp	r0, #0
1a005bb0:	f47f ac8e 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005bb4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a005bb8:	ae2b      	add	r6, sp, #172	; 0xac
1a005bba:	e4c9      	b.n	1a005550 <_vfprintf_r+0xbb0>
1a005bbc:	aa28      	add	r2, sp, #160	; 0xa0
1a005bbe:	9907      	ldr	r1, [sp, #28]
1a005bc0:	9805      	ldr	r0, [sp, #20]
1a005bc2:	f002 fd29 	bl	1a008618 <__sprint_r>
1a005bc6:	2800      	cmp	r0, #0
1a005bc8:	f47f ac82 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005bcc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a005bd0:	ae2b      	add	r6, sp, #172	; 0xac
1a005bd2:	930b      	str	r3, [sp, #44]	; 0x2c
1a005bd4:	e4c9      	b.n	1a00556a <_vfprintf_r+0xbca>
1a005bd6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005bda:	f7fe fa51 	bl	1a004080 <__retarget_lock_release_recursive>
1a005bde:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a005be2:	e51d      	b.n	1a005620 <_vfprintf_r+0xc80>
1a005be4:	aa28      	add	r2, sp, #160	; 0xa0
1a005be6:	9907      	ldr	r1, [sp, #28]
1a005be8:	9805      	ldr	r0, [sp, #20]
1a005bea:	f002 fd15 	bl	1a008618 <__sprint_r>
1a005bee:	2800      	cmp	r0, #0
1a005bf0:	f47f ac6e 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005bf4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005bf8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005bfa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005bfe:	f7ff b929 	b.w	1a004e54 <_vfprintf_r+0x4b4>
1a005c02:	46c1      	mov	r9, r8
1a005c04:	e4fe      	b.n	1a005604 <_vfprintf_r+0xc64>
1a005c06:	aa28      	add	r2, sp, #160	; 0xa0
1a005c08:	9907      	ldr	r1, [sp, #28]
1a005c0a:	9805      	ldr	r0, [sp, #20]
1a005c0c:	f002 fd04 	bl	1a008618 <__sprint_r>
1a005c10:	2800      	cmp	r0, #0
1a005c12:	f47f ac5d 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005c16:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005c1a:	f7ff bb93 	b.w	1a005344 <_vfprintf_r+0x9a4>
1a005c1e:	464b      	mov	r3, r9
1a005c20:	3201      	adds	r2, #1
1a005c22:	442c      	add	r4, r5
1a005c24:	2a07      	cmp	r2, #7
1a005c26:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005c2a:	e9cb 3500 	strd	r3, r5, [fp]
1a005c2e:	f77f a94a 	ble.w	1a004ec6 <_vfprintf_r+0x526>
1a005c32:	e46d      	b.n	1a005510 <_vfprintf_r+0xb70>
1a005c34:	9a08      	ldr	r2, [sp, #32]
1a005c36:	6812      	ldr	r2, [r2, #0]
1a005c38:	9308      	str	r3, [sp, #32]
1a005c3a:	9b04      	ldr	r3, [sp, #16]
1a005c3c:	6013      	str	r3, [r2, #0]
1a005c3e:	4657      	mov	r7, sl
1a005c40:	f7ff b962 	b.w	1a004f08 <_vfprintf_r+0x568>
1a005c44:	2d10      	cmp	r5, #16
1a005c46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005c48:	4b35      	ldr	r3, [pc, #212]	; (1a005d20 <_vfprintf_r+0x1380>)
1a005c4a:	dd50      	ble.n	1a005cee <_vfprintf_r+0x134e>
1a005c4c:	4619      	mov	r1, r3
1a005c4e:	2610      	movs	r6, #16
1a005c50:	4623      	mov	r3, r4
1a005c52:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005c56:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005c5a:	460c      	mov	r4, r1
1a005c5c:	e004      	b.n	1a005c68 <_vfprintf_r+0x12c8>
1a005c5e:	f10b 0b08 	add.w	fp, fp, #8
1a005c62:	3d10      	subs	r5, #16
1a005c64:	2d10      	cmp	r5, #16
1a005c66:	dd3f      	ble.n	1a005ce8 <_vfprintf_r+0x1348>
1a005c68:	3201      	adds	r2, #1
1a005c6a:	3310      	adds	r3, #16
1a005c6c:	2a07      	cmp	r2, #7
1a005c6e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a005c72:	e9cb 4600 	strd	r4, r6, [fp]
1a005c76:	ddf2      	ble.n	1a005c5e <_vfprintf_r+0x12be>
1a005c78:	aa28      	add	r2, sp, #160	; 0xa0
1a005c7a:	4649      	mov	r1, r9
1a005c7c:	4640      	mov	r0, r8
1a005c7e:	f002 fccb 	bl	1a008618 <__sprint_r>
1a005c82:	2800      	cmp	r0, #0
1a005c84:	f47f acbe 	bne.w	1a005604 <_vfprintf_r+0xc64>
1a005c88:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a005c8c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005c90:	e7e7      	b.n	1a005c62 <_vfprintf_r+0x12c2>
1a005c92:	4638      	mov	r0, r7
1a005c94:	f7fe fe14 	bl	1a0048c0 <strlen>
1a005c98:	46a9      	mov	r9, r5
1a005c9a:	4606      	mov	r6, r0
1a005c9c:	f7ff b849 	b.w	1a004d32 <_vfprintf_r+0x392>
1a005ca0:	46d9      	mov	r9, fp
1a005ca2:	e4af      	b.n	1a005604 <_vfprintf_r+0xc64>
1a005ca4:	9e02      	ldr	r6, [sp, #8]
1a005ca6:	9b08      	ldr	r3, [sp, #32]
1a005ca8:	f416 7f00 	tst.w	r6, #512	; 0x200
1a005cac:	d051      	beq.n	1a005d52 <_vfprintf_r+0x13b2>
1a005cae:	f993 4000 	ldrsb.w	r4, [r3]
1a005cb2:	9208      	str	r2, [sp, #32]
1a005cb4:	17e5      	asrs	r5, r4, #31
1a005cb6:	4622      	mov	r2, r4
1a005cb8:	462b      	mov	r3, r5
1a005cba:	f7fe bffb 	b.w	1a004cb4 <_vfprintf_r+0x314>
1a005cbe:	9e02      	ldr	r6, [sp, #8]
1a005cc0:	05b7      	lsls	r7, r6, #22
1a005cc2:	bf47      	ittee	mi
1a005cc4:	9208      	strmi	r2, [sp, #32]
1a005cc6:	b2e4      	uxtbmi	r4, r4
1a005cc8:	9e02      	ldrpl	r6, [sp, #8]
1a005cca:	9208      	strpl	r2, [sp, #32]
1a005ccc:	2500      	movs	r5, #0
1a005cce:	f7ff baae 	b.w	1a00522e <_vfprintf_r+0x88e>
1a005cd2:	9e02      	ldr	r6, [sp, #8]
1a005cd4:	9208      	str	r2, [sp, #32]
1a005cd6:	4633      	mov	r3, r6
1a005cd8:	059b      	lsls	r3, r3, #22
1a005cda:	bf4c      	ite	mi
1a005cdc:	b2e4      	uxtbmi	r4, r4
1a005cde:	9e02      	ldrpl	r6, [sp, #8]
1a005ce0:	2500      	movs	r5, #0
1a005ce2:	2301      	movs	r3, #1
1a005ce4:	f7ff b987 	b.w	1a004ff6 <_vfprintf_r+0x656>
1a005ce8:	4621      	mov	r1, r4
1a005cea:	461c      	mov	r4, r3
1a005cec:	460b      	mov	r3, r1
1a005cee:	3201      	adds	r2, #1
1a005cf0:	442c      	add	r4, r5
1a005cf2:	2a07      	cmp	r2, #7
1a005cf4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005cf8:	e9cb 3500 	strd	r3, r5, [fp]
1a005cfc:	f300 80ef 	bgt.w	1a005ede <_vfprintf_r+0x153e>
1a005d00:	f10b 0b08 	add.w	fp, fp, #8
1a005d04:	e50e      	b.n	1a005724 <_vfprintf_r+0xd84>
1a005d06:	9805      	ldr	r0, [sp, #20]
1a005d08:	aa28      	add	r2, sp, #160	; 0xa0
1a005d0a:	4649      	mov	r1, r9
1a005d0c:	f002 fc84 	bl	1a008618 <__sprint_r>
1a005d10:	2800      	cmp	r0, #0
1a005d12:	f43f a903 	beq.w	1a004f1c <_vfprintf_r+0x57c>
1a005d16:	e47a      	b.n	1a00560e <_vfprintf_r+0xc6e>
1a005d18:	66666667 	.word	0x66666667
1a005d1c:	1a008d30 	.word	0x1a008d30
1a005d20:	1a008d4c 	.word	0x1a008d4c
1a005d24:	3301      	adds	r3, #1
1a005d26:	930a      	str	r3, [sp, #40]	; 0x28
1a005d28:	f102 0b08 	add.w	fp, r2, #8
1a005d2c:	4616      	mov	r6, r2
1a005d2e:	e441      	b.n	1a0055b4 <_vfprintf_r+0xc14>
1a005d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005d32:	18bd      	adds	r5, r7, r2
1a005d34:	eba5 0509 	sub.w	r5, r5, r9
1a005d38:	1ad3      	subs	r3, r2, r3
1a005d3a:	429d      	cmp	r5, r3
1a005d3c:	bfa8      	it	ge
1a005d3e:	461d      	movge	r5, r3
1a005d40:	e527      	b.n	1a005792 <_vfprintf_r+0xdf2>
1a005d42:	9a08      	ldr	r2, [sp, #32]
1a005d44:	9308      	str	r3, [sp, #32]
1a005d46:	6812      	ldr	r2, [r2, #0]
1a005d48:	9b04      	ldr	r3, [sp, #16]
1a005d4a:	8013      	strh	r3, [r2, #0]
1a005d4c:	4657      	mov	r7, sl
1a005d4e:	f7ff b8db 	b.w	1a004f08 <_vfprintf_r+0x568>
1a005d52:	681c      	ldr	r4, [r3, #0]
1a005d54:	9208      	str	r2, [sp, #32]
1a005d56:	17e5      	asrs	r5, r4, #31
1a005d58:	9e02      	ldr	r6, [sp, #8]
1a005d5a:	4622      	mov	r2, r4
1a005d5c:	462b      	mov	r3, r5
1a005d5e:	f7fe bfa9 	b.w	1a004cb4 <_vfprintf_r+0x314>
1a005d62:	b2e4      	uxtb	r4, r4
1a005d64:	2500      	movs	r5, #0
1a005d66:	f7fe bf59 	b.w	1a004c1c <_vfprintf_r+0x27c>
1a005d6a:	2330      	movs	r3, #48	; 0x30
1a005d6c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005d70:	2358      	movs	r3, #88	; 0x58
1a005d72:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a005d76:	9b02      	ldr	r3, [sp, #8]
1a005d78:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a005d7c:	f043 0302 	orr.w	r3, r3, #2
1a005d80:	930a      	str	r3, [sp, #40]	; 0x28
1a005d82:	f300 82b7 	bgt.w	1a0062f4 <_vfprintf_r+0x1954>
1a005d86:	2300      	movs	r3, #0
1a005d88:	9309      	str	r3, [sp, #36]	; 0x24
1a005d8a:	af3b      	add	r7, sp, #236	; 0xec
1a005d8c:	9a02      	ldr	r2, [sp, #8]
1a005d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005d90:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a005d94:	9202      	str	r2, [sp, #8]
1a005d96:	2b00      	cmp	r3, #0
1a005d98:	f028 0220 	bic.w	r2, r8, #32
1a005d9c:	9203      	str	r2, [sp, #12]
1a005d9e:	f2c0 8188 	blt.w	1a0060b2 <_vfprintf_r+0x1712>
1a005da2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005da6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a005daa:	2300      	movs	r3, #0
1a005dac:	931e      	str	r3, [sp, #120]	; 0x78
1a005dae:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a005db2:	f000 82d9 	beq.w	1a006368 <_vfprintf_r+0x19c8>
1a005db6:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a005dba:	f47f ade7 	bne.w	1a00598c <_vfprintf_r+0xfec>
1a005dbe:	a822      	add	r0, sp, #136	; 0x88
1a005dc0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005dc4:	f002 fb7c 	bl	1a0084c0 <frexp>
1a005dc8:	2200      	movs	r2, #0
1a005dca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a005dce:	ec51 0b10 	vmov	r0, r1, d0
1a005dd2:	f7fd f9c1 	bl	1a003158 <__aeabi_dmul>
1a005dd6:	2200      	movs	r2, #0
1a005dd8:	2300      	movs	r3, #0
1a005dda:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a005dde:	f7fd fc23 	bl	1a003628 <__aeabi_dcmpeq>
1a005de2:	b108      	cbz	r0, 1a005de8 <_vfprintf_r+0x1448>
1a005de4:	2301      	movs	r3, #1
1a005de6:	9322      	str	r3, [sp, #136]	; 0x88
1a005de8:	4bb6      	ldr	r3, [pc, #728]	; (1a0060c4 <_vfprintf_r+0x1724>)
1a005dea:	930b      	str	r3, [sp, #44]	; 0x2c
1a005dec:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a005df0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a005df4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a005df8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a005dfc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a005e00:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005e04:	970c      	str	r7, [sp, #48]	; 0x30
1a005e06:	46ba      	mov	sl, r7
1a005e08:	e003      	b.n	1a005e12 <_vfprintf_r+0x1472>
1a005e0a:	f7fd fc0d 	bl	1a003628 <__aeabi_dcmpeq>
1a005e0e:	bb20      	cbnz	r0, 1a005e5a <_vfprintf_r+0x14ba>
1a005e10:	46b2      	mov	sl, r6
1a005e12:	2200      	movs	r2, #0
1a005e14:	4bac      	ldr	r3, [pc, #688]	; (1a0060c8 <_vfprintf_r+0x1728>)
1a005e16:	4640      	mov	r0, r8
1a005e18:	4649      	mov	r1, r9
1a005e1a:	f7fd f99d 	bl	1a003158 <__aeabi_dmul>
1a005e1e:	4689      	mov	r9, r1
1a005e20:	4680      	mov	r8, r0
1a005e22:	f7fd fc49 	bl	1a0036b8 <__aeabi_d2iz>
1a005e26:	4607      	mov	r7, r0
1a005e28:	f7fd f92c 	bl	1a003084 <__aeabi_i2d>
1a005e2c:	4602      	mov	r2, r0
1a005e2e:	460b      	mov	r3, r1
1a005e30:	4640      	mov	r0, r8
1a005e32:	4649      	mov	r1, r9
1a005e34:	f7fc ffd8 	bl	1a002de8 <__aeabi_dsub>
1a005e38:	4656      	mov	r6, sl
1a005e3a:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a005e3e:	f806 4b01 	strb.w	r4, [r6], #1
1a005e42:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a005e46:	462c      	mov	r4, r5
1a005e48:	4680      	mov	r8, r0
1a005e4a:	4689      	mov	r9, r1
1a005e4c:	f04f 0200 	mov.w	r2, #0
1a005e50:	f04f 0300 	mov.w	r3, #0
1a005e54:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a005e58:	d1d7      	bne.n	1a005e0a <_vfprintf_r+0x146a>
1a005e5a:	4640      	mov	r0, r8
1a005e5c:	4649      	mov	r1, r9
1a005e5e:	2200      	movs	r2, #0
1a005e60:	4b9a      	ldr	r3, [pc, #616]	; (1a0060cc <_vfprintf_r+0x172c>)
1a005e62:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a005e66:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a005e6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a005e6e:	463d      	mov	r5, r7
1a005e70:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a005e74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a005e76:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a005e7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a005e7e:	f7fd fbfb 	bl	1a003678 <__aeabi_dcmpgt>
1a005e82:	2800      	cmp	r0, #0
1a005e84:	f040 8214 	bne.w	1a0062b0 <_vfprintf_r+0x1910>
1a005e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a005e8c:	2200      	movs	r2, #0
1a005e8e:	4b8f      	ldr	r3, [pc, #572]	; (1a0060cc <_vfprintf_r+0x172c>)
1a005e90:	f7fd fbca 	bl	1a003628 <__aeabi_dcmpeq>
1a005e94:	b118      	cbz	r0, 1a005e9e <_vfprintf_r+0x14fe>
1a005e96:	462b      	mov	r3, r5
1a005e98:	07db      	lsls	r3, r3, #31
1a005e9a:	f100 8209 	bmi.w	1a0062b0 <_vfprintf_r+0x1910>
1a005e9e:	2c00      	cmp	r4, #0
1a005ea0:	f6ff ad91 	blt.w	1a0059c6 <_vfprintf_r+0x1026>
1a005ea4:	1c63      	adds	r3, r4, #1
1a005ea6:	4433      	add	r3, r6
1a005ea8:	2230      	movs	r2, #48	; 0x30
1a005eaa:	f806 2b01 	strb.w	r2, [r6], #1
1a005eae:	429e      	cmp	r6, r3
1a005eb0:	d1fb      	bne.n	1a005eaa <_vfprintf_r+0x150a>
1a005eb2:	e588      	b.n	1a0059c6 <_vfprintf_r+0x1026>
1a005eb4:	aa28      	add	r2, sp, #160	; 0xa0
1a005eb6:	9907      	ldr	r1, [sp, #28]
1a005eb8:	9805      	ldr	r0, [sp, #20]
1a005eba:	f002 fbad 	bl	1a008618 <__sprint_r>
1a005ebe:	2800      	cmp	r0, #0
1a005ec0:	f47f ab06 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005ec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005ec6:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a005eca:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005ece:	f7ff bb12 	b.w	1a0054f6 <_vfprintf_r+0xb56>
1a005ed2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005ed6:	f7fe f8d3 	bl	1a004080 <__retarget_lock_release_recursive>
1a005eda:	f7fe be6a 	b.w	1a004bb2 <_vfprintf_r+0x212>
1a005ede:	aa28      	add	r2, sp, #160	; 0xa0
1a005ee0:	9907      	ldr	r1, [sp, #28]
1a005ee2:	9805      	ldr	r0, [sp, #20]
1a005ee4:	f002 fb98 	bl	1a008618 <__sprint_r>
1a005ee8:	2800      	cmp	r0, #0
1a005eea:	f47f aaf1 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a005eee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005ef0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005ef4:	e416      	b.n	1a005724 <_vfprintf_r+0xd84>
1a005ef6:	9e02      	ldr	r6, [sp, #8]
1a005ef8:	f7ff b9ad 	b.w	1a005256 <_vfprintf_r+0x8b6>
1a005efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005efe:	1cde      	adds	r6, r3, #3
1a005f00:	db01      	blt.n	1a005f06 <_vfprintf_r+0x1566>
1a005f02:	4599      	cmp	r9, r3
1a005f04:	da05      	bge.n	1a005f12 <_vfprintf_r+0x1572>
1a005f06:	f1a8 0802 	sub.w	r8, r8, #2
1a005f0a:	f028 0320 	bic.w	r3, r8, #32
1a005f0e:	9303      	str	r3, [sp, #12]
1a005f10:	e565      	b.n	1a0059de <_vfprintf_r+0x103e>
1a005f12:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005f14:	4619      	mov	r1, r3
1a005f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005f18:	4299      	cmp	r1, r3
1a005f1a:	f300 8174 	bgt.w	1a006206 <_vfprintf_r+0x1866>
1a005f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005f20:	07d4      	lsls	r4, r2, #31
1a005f22:	f140 8254 	bpl.w	1a0063ce <_vfprintf_r+0x1a2e>
1a005f26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a005f28:	189e      	adds	r6, r3, r2
1a005f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005f2c:	0558      	lsls	r0, r3, #21
1a005f2e:	d503      	bpl.n	1a005f38 <_vfprintf_r+0x1598>
1a005f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005f32:	2b00      	cmp	r3, #0
1a005f34:	f300 824d 	bgt.w	1a0063d2 <_vfprintf_r+0x1a32>
1a005f38:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005f3c:	9303      	str	r3, [sp, #12]
1a005f3e:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005f42:	2300      	movs	r3, #0
1a005f44:	930c      	str	r3, [sp, #48]	; 0x30
1a005f46:	930f      	str	r3, [sp, #60]	; 0x3c
1a005f48:	e5ac      	b.n	1a005aa4 <_vfprintf_r+0x1104>
1a005f4a:	222d      	movs	r2, #45	; 0x2d
1a005f4c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005f50:	f04f 0900 	mov.w	r9, #0
1a005f54:	f7fe befb 	b.w	1a004d4e <_vfprintf_r+0x3ae>
1a005f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005f5a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a005f5e:	18fb      	adds	r3, r7, r3
1a005f60:	930a      	str	r3, [sp, #40]	; 0x28
1a005f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005f64:	970e      	str	r7, [sp, #56]	; 0x38
1a005f66:	465a      	mov	r2, fp
1a005f68:	464f      	mov	r7, r9
1a005f6a:	4e59      	ldr	r6, [pc, #356]	; (1a0060d0 <_vfprintf_r+0x1730>)
1a005f6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005f70:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005f74:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a005f78:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a005f7c:	4621      	mov	r1, r4
1a005f7e:	2b00      	cmp	r3, #0
1a005f80:	d032      	beq.n	1a005fe8 <_vfprintf_r+0x1648>
1a005f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005f84:	2b00      	cmp	r3, #0
1a005f86:	d16e      	bne.n	1a006066 <_vfprintf_r+0x16c6>
1a005f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005f8a:	3b01      	subs	r3, #1
1a005f8c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a005f90:	930f      	str	r3, [sp, #60]	; 0x3c
1a005f92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005f94:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a005f96:	6010      	str	r0, [r2, #0]
1a005f98:	3301      	adds	r3, #1
1a005f9a:	4449      	add	r1, r9
1a005f9c:	2b07      	cmp	r3, #7
1a005f9e:	912a      	str	r1, [sp, #168]	; 0xa8
1a005fa0:	f8c2 9004 	str.w	r9, [r2, #4]
1a005fa4:	9329      	str	r3, [sp, #164]	; 0xa4
1a005fa6:	dc62      	bgt.n	1a00606e <_vfprintf_r+0x16ce>
1a005fa8:	3208      	adds	r2, #8
1a005faa:	980a      	ldr	r0, [sp, #40]	; 0x28
1a005fac:	f898 3000 	ldrb.w	r3, [r8]
1a005fb0:	1bc5      	subs	r5, r0, r7
1a005fb2:	429d      	cmp	r5, r3
1a005fb4:	bfa8      	it	ge
1a005fb6:	461d      	movge	r5, r3
1a005fb8:	2d00      	cmp	r5, #0
1a005fba:	dd0b      	ble.n	1a005fd4 <_vfprintf_r+0x1634>
1a005fbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005fbe:	6017      	str	r7, [r2, #0]
1a005fc0:	3301      	adds	r3, #1
1a005fc2:	4429      	add	r1, r5
1a005fc4:	2b07      	cmp	r3, #7
1a005fc6:	912a      	str	r1, [sp, #168]	; 0xa8
1a005fc8:	6055      	str	r5, [r2, #4]
1a005fca:	9329      	str	r3, [sp, #164]	; 0xa4
1a005fcc:	dc5a      	bgt.n	1a006084 <_vfprintf_r+0x16e4>
1a005fce:	f898 3000 	ldrb.w	r3, [r8]
1a005fd2:	3208      	adds	r2, #8
1a005fd4:	2d00      	cmp	r5, #0
1a005fd6:	bfac      	ite	ge
1a005fd8:	1b5d      	subge	r5, r3, r5
1a005fda:	461d      	movlt	r5, r3
1a005fdc:	2d00      	cmp	r5, #0
1a005fde:	dc15      	bgt.n	1a00600c <_vfprintf_r+0x166c>
1a005fe0:	441f      	add	r7, r3
1a005fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005fe4:	2b00      	cmp	r3, #0
1a005fe6:	d1cc      	bne.n	1a005f82 <_vfprintf_r+0x15e2>
1a005fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005fea:	2b00      	cmp	r3, #0
1a005fec:	d13b      	bne.n	1a006066 <_vfprintf_r+0x16c6>
1a005fee:	46b9      	mov	r9, r7
1a005ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005ff2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a005ff4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a005ff8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a005ffc:	18fb      	adds	r3, r7, r3
1a005ffe:	4599      	cmp	r9, r3
1a006000:	4693      	mov	fp, r2
1a006002:	460c      	mov	r4, r1
1a006004:	bf28      	it	cs
1a006006:	4699      	movcs	r9, r3
1a006008:	f7ff bb93 	b.w	1a005732 <_vfprintf_r+0xd92>
1a00600c:	2d10      	cmp	r5, #16
1a00600e:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a006010:	dd1c      	ble.n	1a00604c <_vfprintf_r+0x16ac>
1a006012:	2410      	movs	r4, #16
1a006014:	e004      	b.n	1a006020 <_vfprintf_r+0x1680>
1a006016:	3d10      	subs	r5, #16
1a006018:	2d10      	cmp	r5, #16
1a00601a:	f102 0208 	add.w	r2, r2, #8
1a00601e:	dd15      	ble.n	1a00604c <_vfprintf_r+0x16ac>
1a006020:	3001      	adds	r0, #1
1a006022:	3110      	adds	r1, #16
1a006024:	2807      	cmp	r0, #7
1a006026:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a00602a:	e9c2 6400 	strd	r6, r4, [r2]
1a00602e:	ddf2      	ble.n	1a006016 <_vfprintf_r+0x1676>
1a006030:	aa28      	add	r2, sp, #160	; 0xa0
1a006032:	4659      	mov	r1, fp
1a006034:	4650      	mov	r0, sl
1a006036:	f002 faef 	bl	1a008618 <__sprint_r>
1a00603a:	2800      	cmp	r0, #0
1a00603c:	f47f ae30 	bne.w	1a005ca0 <_vfprintf_r+0x1300>
1a006040:	3d10      	subs	r5, #16
1a006042:	2d10      	cmp	r5, #16
1a006044:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a006048:	aa2b      	add	r2, sp, #172	; 0xac
1a00604a:	dce9      	bgt.n	1a006020 <_vfprintf_r+0x1680>
1a00604c:	3001      	adds	r0, #1
1a00604e:	4429      	add	r1, r5
1a006050:	2807      	cmp	r0, #7
1a006052:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a006056:	e9c2 6500 	strd	r6, r5, [r2]
1a00605a:	dc49      	bgt.n	1a0060f0 <_vfprintf_r+0x1750>
1a00605c:	f898 3000 	ldrb.w	r3, [r8]
1a006060:	3208      	adds	r2, #8
1a006062:	441f      	add	r7, r3
1a006064:	e7bd      	b.n	1a005fe2 <_vfprintf_r+0x1642>
1a006066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006068:	3b01      	subs	r3, #1
1a00606a:	930c      	str	r3, [sp, #48]	; 0x30
1a00606c:	e791      	b.n	1a005f92 <_vfprintf_r+0x15f2>
1a00606e:	aa28      	add	r2, sp, #160	; 0xa0
1a006070:	4659      	mov	r1, fp
1a006072:	4650      	mov	r0, sl
1a006074:	f002 fad0 	bl	1a008618 <__sprint_r>
1a006078:	2800      	cmp	r0, #0
1a00607a:	f47f ae11 	bne.w	1a005ca0 <_vfprintf_r+0x1300>
1a00607e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a006080:	aa2b      	add	r2, sp, #172	; 0xac
1a006082:	e792      	b.n	1a005faa <_vfprintf_r+0x160a>
1a006084:	aa28      	add	r2, sp, #160	; 0xa0
1a006086:	4659      	mov	r1, fp
1a006088:	4650      	mov	r0, sl
1a00608a:	f002 fac5 	bl	1a008618 <__sprint_r>
1a00608e:	2800      	cmp	r0, #0
1a006090:	f47f ae06 	bne.w	1a005ca0 <_vfprintf_r+0x1300>
1a006094:	f898 3000 	ldrb.w	r3, [r8]
1a006098:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00609a:	aa2b      	add	r2, sp, #172	; 0xac
1a00609c:	e79a      	b.n	1a005fd4 <_vfprintf_r+0x1634>
1a00609e:	222d      	movs	r2, #45	; 0x2d
1a0060a0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0060a4:	f7ff b87d 	b.w	1a0051a2 <_vfprintf_r+0x802>
1a0060a8:	9b02      	ldr	r3, [sp, #8]
1a0060aa:	930a      	str	r3, [sp, #40]	; 0x28
1a0060ac:	2300      	movs	r3, #0
1a0060ae:	9309      	str	r3, [sp, #36]	; 0x24
1a0060b0:	9202      	str	r2, [sp, #8]
1a0060b2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a0060b6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a0060ba:	931d      	str	r3, [sp, #116]	; 0x74
1a0060bc:	232d      	movs	r3, #45	; 0x2d
1a0060be:	911c      	str	r1, [sp, #112]	; 0x70
1a0060c0:	931e      	str	r3, [sp, #120]	; 0x78
1a0060c2:	e674      	b.n	1a005dae <_vfprintf_r+0x140e>
1a0060c4:	1a008d08 	.word	0x1a008d08
1a0060c8:	40300000 	.word	0x40300000
1a0060cc:	3fe00000 	.word	0x3fe00000
1a0060d0:	1a008d4c 	.word	0x1a008d4c
1a0060d4:	aa28      	add	r2, sp, #160	; 0xa0
1a0060d6:	9907      	ldr	r1, [sp, #28]
1a0060d8:	9805      	ldr	r0, [sp, #20]
1a0060da:	f002 fa9d 	bl	1a008618 <__sprint_r>
1a0060de:	2800      	cmp	r0, #0
1a0060e0:	f47f a9f6 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a0060e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0060e6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0060e8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0060ec:	f7ff bbeb 	b.w	1a0058c6 <_vfprintf_r+0xf26>
1a0060f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0060f2:	4659      	mov	r1, fp
1a0060f4:	4650      	mov	r0, sl
1a0060f6:	f002 fa8f 	bl	1a008618 <__sprint_r>
1a0060fa:	2800      	cmp	r0, #0
1a0060fc:	f47f add0 	bne.w	1a005ca0 <_vfprintf_r+0x1300>
1a006100:	f898 3000 	ldrb.w	r3, [r8]
1a006104:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a006106:	aa2b      	add	r2, sp, #172	; 0xac
1a006108:	441f      	add	r7, r3
1a00610a:	e76a      	b.n	1a005fe2 <_vfprintf_r+0x1642>
1a00610c:	aa28      	add	r2, sp, #160	; 0xa0
1a00610e:	9907      	ldr	r1, [sp, #28]
1a006110:	9805      	ldr	r0, [sp, #20]
1a006112:	f002 fa81 	bl	1a008618 <__sprint_r>
1a006116:	2800      	cmp	r0, #0
1a006118:	f47f a9da 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a00611c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00611e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a006122:	f7ff baf7 	b.w	1a005714 <_vfprintf_r+0xd74>
1a006126:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a006128:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a00612a:	1aff      	subs	r7, r7, r3
1a00612c:	461a      	mov	r2, r3
1a00612e:	4638      	mov	r0, r7
1a006130:	f002 f9fc 	bl	1a00852c <strncpy>
1a006134:	f898 3001 	ldrb.w	r3, [r8, #1]
1a006138:	b10b      	cbz	r3, 1a00613e <_vfprintf_r+0x179e>
1a00613a:	f108 0801 	add.w	r8, r8, #1
1a00613e:	220a      	movs	r2, #10
1a006140:	2300      	movs	r3, #0
1a006142:	4620      	mov	r0, r4
1a006144:	4629      	mov	r1, r5
1a006146:	f04f 0a00 	mov.w	sl, #0
1a00614a:	f7fd fadd 	bl	1a003708 <__aeabi_uldivmod>
1a00614e:	f7ff b8ab 	b.w	1a0052a8 <_vfprintf_r+0x908>
1a006152:	aa26      	add	r2, sp, #152	; 0x98
1a006154:	ab23      	add	r3, sp, #140	; 0x8c
1a006156:	e9cd 3200 	strd	r3, r2, [sp]
1a00615a:	2103      	movs	r1, #3
1a00615c:	ab22      	add	r3, sp, #136	; 0x88
1a00615e:	464a      	mov	r2, r9
1a006160:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006164:	9805      	ldr	r0, [sp, #20]
1a006166:	f000 fb03 	bl	1a006770 <_dtoa_r>
1a00616a:	7803      	ldrb	r3, [r0, #0]
1a00616c:	2b30      	cmp	r3, #48	; 0x30
1a00616e:	4607      	mov	r7, r0
1a006170:	f000 8161 	beq.w	1a006436 <_vfprintf_r+0x1a96>
1a006174:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006176:	444b      	add	r3, r9
1a006178:	18fc      	adds	r4, r7, r3
1a00617a:	2200      	movs	r2, #0
1a00617c:	2300      	movs	r3, #0
1a00617e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006182:	f7fd fa51 	bl	1a003628 <__aeabi_dcmpeq>
1a006186:	b108      	cbz	r0, 1a00618c <_vfprintf_r+0x17ec>
1a006188:	4626      	mov	r6, r4
1a00618a:	e41c      	b.n	1a0059c6 <_vfprintf_r+0x1026>
1a00618c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00618e:	42a6      	cmp	r6, r4
1a006190:	f4bf ac19 	bcs.w	1a0059c6 <_vfprintf_r+0x1026>
1a006194:	2230      	movs	r2, #48	; 0x30
1a006196:	1c73      	adds	r3, r6, #1
1a006198:	9326      	str	r3, [sp, #152]	; 0x98
1a00619a:	7032      	strb	r2, [r6, #0]
1a00619c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00619e:	42b4      	cmp	r4, r6
1a0061a0:	d8f9      	bhi.n	1a006196 <_vfprintf_r+0x17f6>
1a0061a2:	e410      	b.n	1a0059c6 <_vfprintf_r+0x1026>
1a0061a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0061a6:	9907      	ldr	r1, [sp, #28]
1a0061a8:	9805      	ldr	r0, [sp, #20]
1a0061aa:	f002 fa35 	bl	1a008618 <__sprint_r>
1a0061ae:	2800      	cmp	r0, #0
1a0061b0:	f47f a98e 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a0061b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0061b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0061b8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0061bc:	f7ff bad1 	b.w	1a005762 <_vfprintf_r+0xdc2>
1a0061c0:	464e      	mov	r6, r9
1a0061c2:	f8cd 900c 	str.w	r9, [sp, #12]
1a0061c6:	9408      	str	r4, [sp, #32]
1a0061c8:	4681      	mov	r9, r0
1a0061ca:	900c      	str	r0, [sp, #48]	; 0x30
1a0061cc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a0061d0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0061d4:	f7fe bdb9 	b.w	1a004d4a <_vfprintf_r+0x3aa>
1a0061d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0061da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0061dc:	f003 0301 	and.w	r3, r3, #1
1a0061e0:	2a00      	cmp	r2, #0
1a0061e2:	ea43 0309 	orr.w	r3, r3, r9
1a0061e6:	f340 8142 	ble.w	1a00646e <_vfprintf_r+0x1ace>
1a0061ea:	2b00      	cmp	r3, #0
1a0061ec:	f040 8119 	bne.w	1a006422 <_vfprintf_r+0x1a82>
1a0061f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0061f2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0061f8:	055a      	lsls	r2, r3, #21
1a0061fa:	f100 80ec 	bmi.w	1a0063d6 <_vfprintf_r+0x1a36>
1a0061fe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a006202:	9303      	str	r3, [sp, #12]
1a006204:	e69d      	b.n	1a005f42 <_vfprintf_r+0x15a2>
1a006206:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a00620a:	189e      	adds	r6, r3, r2
1a00620c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00620e:	2b00      	cmp	r3, #0
1a006210:	f340 811e 	ble.w	1a006450 <_vfprintf_r+0x1ab0>
1a006214:	f04f 0867 	mov.w	r8, #103	; 0x67
1a006218:	e7ed      	b.n	1a0061f6 <_vfprintf_r+0x1856>
1a00621a:	aa28      	add	r2, sp, #160	; 0xa0
1a00621c:	9907      	ldr	r1, [sp, #28]
1a00621e:	9805      	ldr	r0, [sp, #20]
1a006220:	f002 f9fa 	bl	1a008618 <__sprint_r>
1a006224:	2800      	cmp	r0, #0
1a006226:	f47f a953 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a00622a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00622c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00622e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a006230:	1ad3      	subs	r3, r2, r3
1a006232:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a006236:	f7ff baac 	b.w	1a005792 <_vfprintf_r+0xdf2>
1a00623a:	eb07 0409 	add.w	r4, r7, r9
1a00623e:	e79c      	b.n	1a00617a <_vfprintf_r+0x17da>
1a006240:	425d      	negs	r5, r3
1a006242:	3310      	adds	r3, #16
1a006244:	4ba7      	ldr	r3, [pc, #668]	; (1a0064e4 <_vfprintf_r+0x1b44>)
1a006246:	da63      	bge.n	1a006310 <_vfprintf_r+0x1970>
1a006248:	4619      	mov	r1, r3
1a00624a:	2610      	movs	r6, #16
1a00624c:	4623      	mov	r3, r4
1a00624e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a006252:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a006256:	460c      	mov	r4, r1
1a006258:	e004      	b.n	1a006264 <_vfprintf_r+0x18c4>
1a00625a:	f10b 0b08 	add.w	fp, fp, #8
1a00625e:	3d10      	subs	r5, #16
1a006260:	2d10      	cmp	r5, #16
1a006262:	dd52      	ble.n	1a00630a <_vfprintf_r+0x196a>
1a006264:	3201      	adds	r2, #1
1a006266:	3310      	adds	r3, #16
1a006268:	2a07      	cmp	r2, #7
1a00626a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00626e:	e9cb 4600 	strd	r4, r6, [fp]
1a006272:	ddf2      	ble.n	1a00625a <_vfprintf_r+0x18ba>
1a006274:	aa28      	add	r2, sp, #160	; 0xa0
1a006276:	4649      	mov	r1, r9
1a006278:	4640      	mov	r0, r8
1a00627a:	f002 f9cd 	bl	1a008618 <__sprint_r>
1a00627e:	2800      	cmp	r0, #0
1a006280:	f47f a9c0 	bne.w	1a005604 <_vfprintf_r+0xc64>
1a006284:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a006288:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00628c:	e7e7      	b.n	1a00625e <_vfprintf_r+0x18be>
1a00628e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a006292:	07db      	lsls	r3, r3, #31
1a006294:	d407      	bmi.n	1a0062a6 <_vfprintf_r+0x1906>
1a006296:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00629a:	059f      	lsls	r7, r3, #22
1a00629c:	d403      	bmi.n	1a0062a6 <_vfprintf_r+0x1906>
1a00629e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0062a2:	f7fd feed 	bl	1a004080 <__retarget_lock_release_recursive>
1a0062a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0062aa:	9304      	str	r3, [sp, #16]
1a0062ac:	f7ff b9bb 	b.w	1a005626 <_vfprintf_r+0xc86>
1a0062b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0062b2:	9326      	str	r3, [sp, #152]	; 0x98
1a0062b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0062b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a0062ba:	7bd9      	ldrb	r1, [r3, #15]
1a0062bc:	428a      	cmp	r2, r1
1a0062be:	4633      	mov	r3, r6
1a0062c0:	d109      	bne.n	1a0062d6 <_vfprintf_r+0x1936>
1a0062c2:	2030      	movs	r0, #48	; 0x30
1a0062c4:	f803 0c01 	strb.w	r0, [r3, #-1]
1a0062c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a0062ca:	1e5a      	subs	r2, r3, #1
1a0062cc:	9226      	str	r2, [sp, #152]	; 0x98
1a0062ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a0062d2:	4291      	cmp	r1, r2
1a0062d4:	d0f6      	beq.n	1a0062c4 <_vfprintf_r+0x1924>
1a0062d6:	2a39      	cmp	r2, #57	; 0x39
1a0062d8:	bf0b      	itete	eq
1a0062da:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a0062dc:	3201      	addne	r2, #1
1a0062de:	7a92      	ldrbeq	r2, [r2, #10]
1a0062e0:	b2d2      	uxtbne	r2, r2
1a0062e2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a0062e6:	f7ff bb6e 	b.w	1a0059c6 <_vfprintf_r+0x1026>
1a0062ea:	2330      	movs	r3, #48	; 0x30
1a0062ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0062f0:	2378      	movs	r3, #120	; 0x78
1a0062f2:	e53e      	b.n	1a005d72 <_vfprintf_r+0x13d2>
1a0062f4:	f109 0101 	add.w	r1, r9, #1
1a0062f8:	9805      	ldr	r0, [sp, #20]
1a0062fa:	f7fd fec3 	bl	1a004084 <_malloc_r>
1a0062fe:	4607      	mov	r7, r0
1a006300:	2800      	cmp	r0, #0
1a006302:	f000 80d5 	beq.w	1a0064b0 <_vfprintf_r+0x1b10>
1a006306:	9009      	str	r0, [sp, #36]	; 0x24
1a006308:	e540      	b.n	1a005d8c <_vfprintf_r+0x13ec>
1a00630a:	4621      	mov	r1, r4
1a00630c:	461c      	mov	r4, r3
1a00630e:	460b      	mov	r3, r1
1a006310:	3201      	adds	r2, #1
1a006312:	442c      	add	r4, r5
1a006314:	2a07      	cmp	r2, #7
1a006316:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00631a:	e9cb 3500 	strd	r3, r5, [fp]
1a00631e:	f77f aaea 	ble.w	1a0058f6 <_vfprintf_r+0xf56>
1a006322:	aa28      	add	r2, sp, #160	; 0xa0
1a006324:	9907      	ldr	r1, [sp, #28]
1a006326:	9805      	ldr	r0, [sp, #20]
1a006328:	f002 f976 	bl	1a008618 <__sprint_r>
1a00632c:	2800      	cmp	r0, #0
1a00632e:	f47f a8cf 	bne.w	1a0054d0 <_vfprintf_r+0xb30>
1a006332:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a006336:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00633a:	f7ff b8df 	b.w	1a0054fc <_vfprintf_r+0xb5c>
1a00633e:	f109 0401 	add.w	r4, r9, #1
1a006342:	a926      	add	r1, sp, #152	; 0x98
1a006344:	ab23      	add	r3, sp, #140	; 0x8c
1a006346:	e9cd 3100 	strd	r3, r1, [sp]
1a00634a:	4622      	mov	r2, r4
1a00634c:	ab22      	add	r3, sp, #136	; 0x88
1a00634e:	2102      	movs	r1, #2
1a006350:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006354:	9805      	ldr	r0, [sp, #20]
1a006356:	f000 fa0b 	bl	1a006770 <_dtoa_r>
1a00635a:	4607      	mov	r7, r0
1a00635c:	443c      	add	r4, r7
1a00635e:	e70c      	b.n	1a00617a <_vfprintf_r+0x17da>
1a006360:	f04f 0906 	mov.w	r9, #6
1a006364:	f7ff bb03 	b.w	1a00596e <_vfprintf_r+0xfce>
1a006368:	a822      	add	r0, sp, #136	; 0x88
1a00636a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00636e:	f002 f8a7 	bl	1a0084c0 <frexp>
1a006372:	2200      	movs	r2, #0
1a006374:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a006378:	ec51 0b10 	vmov	r0, r1, d0
1a00637c:	f7fc feec 	bl	1a003158 <__aeabi_dmul>
1a006380:	2200      	movs	r2, #0
1a006382:	2300      	movs	r3, #0
1a006384:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a006388:	f7fd f94e 	bl	1a003628 <__aeabi_dcmpeq>
1a00638c:	b108      	cbz	r0, 1a006392 <_vfprintf_r+0x19f2>
1a00638e:	2301      	movs	r3, #1
1a006390:	9322      	str	r3, [sp, #136]	; 0x88
1a006392:	4b55      	ldr	r3, [pc, #340]	; (1a0064e8 <_vfprintf_r+0x1b48>)
1a006394:	930b      	str	r3, [sp, #44]	; 0x2c
1a006396:	e529      	b.n	1a005dec <_vfprintf_r+0x144c>
1a006398:	2900      	cmp	r1, #0
1a00639a:	d17b      	bne.n	1a006494 <_vfprintf_r+0x1af4>
1a00639c:	2330      	movs	r3, #48	; 0x30
1a00639e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a0063a2:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a0063a6:	3230      	adds	r2, #48	; 0x30
1a0063a8:	f803 2b01 	strb.w	r2, [r3], #1
1a0063ac:	aa24      	add	r2, sp, #144	; 0x90
1a0063ae:	1a9b      	subs	r3, r3, r2
1a0063b0:	9316      	str	r3, [sp, #88]	; 0x58
1a0063b2:	f7ff bb61 	b.w	1a005a78 <_vfprintf_r+0x10d8>
1a0063b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0063b8:	4f4c      	ldr	r7, [pc, #304]	; (1a0064ec <_vfprintf_r+0x1b4c>)
1a0063ba:	2b00      	cmp	r3, #0
1a0063bc:	bfb6      	itet	lt
1a0063be:	222d      	movlt	r2, #45	; 0x2d
1a0063c0:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a0063c4:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a0063c8:	4b49      	ldr	r3, [pc, #292]	; (1a0064f0 <_vfprintf_r+0x1b50>)
1a0063ca:	f7fe beec 	b.w	1a0051a6 <_vfprintf_r+0x806>
1a0063ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0063d0:	e5ab      	b.n	1a005f2a <_vfprintf_r+0x158a>
1a0063d2:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0063d6:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0063d8:	2200      	movs	r2, #0
1a0063da:	920c      	str	r2, [sp, #48]	; 0x30
1a0063dc:	920f      	str	r2, [sp, #60]	; 0x3c
1a0063de:	7803      	ldrb	r3, [r0, #0]
1a0063e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0063e2:	2bff      	cmp	r3, #255	; 0xff
1a0063e4:	d00c      	beq.n	1a006400 <_vfprintf_r+0x1a60>
1a0063e6:	4293      	cmp	r3, r2
1a0063e8:	da0a      	bge.n	1a006400 <_vfprintf_r+0x1a60>
1a0063ea:	7841      	ldrb	r1, [r0, #1]
1a0063ec:	1ad2      	subs	r2, r2, r3
1a0063ee:	b1a1      	cbz	r1, 1a00641a <_vfprintf_r+0x1a7a>
1a0063f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0063f2:	3301      	adds	r3, #1
1a0063f4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0063f6:	460b      	mov	r3, r1
1a0063f8:	2bff      	cmp	r3, #255	; 0xff
1a0063fa:	f100 0001 	add.w	r0, r0, #1
1a0063fe:	d1f2      	bne.n	1a0063e6 <_vfprintf_r+0x1a46>
1a006400:	920e      	str	r2, [sp, #56]	; 0x38
1a006402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006406:	9018      	str	r0, [sp, #96]	; 0x60
1a006408:	4413      	add	r3, r2
1a00640a:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00640c:	fb02 6603 	mla	r6, r2, r3, r6
1a006410:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a006414:	9303      	str	r3, [sp, #12]
1a006416:	f7ff bb45 	b.w	1a005aa4 <_vfprintf_r+0x1104>
1a00641a:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00641c:	3101      	adds	r1, #1
1a00641e:	910c      	str	r1, [sp, #48]	; 0x30
1a006420:	e7df      	b.n	1a0063e2 <_vfprintf_r+0x1a42>
1a006422:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a006424:	18d6      	adds	r6, r2, r3
1a006426:	444e      	add	r6, r9
1a006428:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00642c:	e6e3      	b.n	1a0061f6 <_vfprintf_r+0x1856>
1a00642e:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a006432:	f7ff b8ec 	b.w	1a00560e <_vfprintf_r+0xc6e>
1a006436:	2200      	movs	r2, #0
1a006438:	2300      	movs	r3, #0
1a00643a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00643e:	f7fd f8f3 	bl	1a003628 <__aeabi_dcmpeq>
1a006442:	2800      	cmp	r0, #0
1a006444:	f47f ae96 	bne.w	1a006174 <_vfprintf_r+0x17d4>
1a006448:	f1c9 0301 	rsb	r3, r9, #1
1a00644c:	9322      	str	r3, [sp, #136]	; 0x88
1a00644e:	e692      	b.n	1a006176 <_vfprintf_r+0x17d6>
1a006450:	f1c3 0301 	rsb	r3, r3, #1
1a006454:	441e      	add	r6, r3
1a006456:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00645a:	9303      	str	r3, [sp, #12]
1a00645c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a006460:	e56f      	b.n	1a005f42 <_vfprintf_r+0x15a2>
1a006462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006464:	07dd      	lsls	r5, r3, #31
1a006466:	f57f ab10 	bpl.w	1a005a8a <_vfprintf_r+0x10ea>
1a00646a:	f7ff bb0c 	b.w	1a005a86 <_vfprintf_r+0x10e6>
1a00646e:	b92b      	cbnz	r3, 1a00647c <_vfprintf_r+0x1adc>
1a006470:	2301      	movs	r3, #1
1a006472:	9303      	str	r3, [sp, #12]
1a006474:	461e      	mov	r6, r3
1a006476:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00647a:	e562      	b.n	1a005f42 <_vfprintf_r+0x15a2>
1a00647c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00647e:	1c5e      	adds	r6, r3, #1
1a006480:	444e      	add	r6, r9
1a006482:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a006486:	9303      	str	r3, [sp, #12]
1a006488:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00648c:	e559      	b.n	1a005f42 <_vfprintf_r+0x15a2>
1a00648e:	465a      	mov	r2, fp
1a006490:	f7ff bb3f 	b.w	1a005b12 <_vfprintf_r+0x1172>
1a006494:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a006498:	e785      	b.n	1a0063a6 <_vfprintf_r+0x1a06>
1a00649a:	9b08      	ldr	r3, [sp, #32]
1a00649c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a0064a0:	f853 0b04 	ldr.w	r0, [r3], #4
1a0064a4:	9308      	str	r3, [sp, #32]
1a0064a6:	4692      	mov	sl, r2
1a0064a8:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a0064ac:	f7fe bafc 	b.w	1a004aa8 <_vfprintf_r+0x108>
1a0064b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0064b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0064b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0064bc:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0064c0:	f7ff b8a5 	b.w	1a00560e <_vfprintf_r+0xc6e>
1a0064c4:	461e      	mov	r6, r3
1a0064c6:	f7fe bc15 	b.w	1a004cf4 <_vfprintf_r+0x354>
1a0064ca:	461e      	mov	r6, r3
1a0064cc:	f7fe bc5e 	b.w	1a004d8c <_vfprintf_r+0x3ec>
1a0064d0:	461e      	mov	r6, r3
1a0064d2:	f7fe bc48 	b.w	1a004d66 <_vfprintf_r+0x3c6>
1a0064d6:	464c      	mov	r4, r9
1a0064d8:	443c      	add	r4, r7
1a0064da:	e64e      	b.n	1a00617a <_vfprintf_r+0x17da>
1a0064dc:	2302      	movs	r3, #2
1a0064de:	9316      	str	r3, [sp, #88]	; 0x58
1a0064e0:	f7ff baca 	b.w	1a005a78 <_vfprintf_r+0x10d8>
1a0064e4:	1a008d4c 	.word	0x1a008d4c
1a0064e8:	1a008d1c 	.word	0x1a008d1c
1a0064ec:	1a008d00 	.word	0x1a008d00
1a0064f0:	1a008d04 	.word	0x1a008d04

1a0064f4 <__sbprintf>:
1a0064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0064f8:	460c      	mov	r4, r1
1a0064fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a0064fe:	8989      	ldrh	r1, [r1, #12]
1a006500:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a006502:	89e5      	ldrh	r5, [r4, #14]
1a006504:	9619      	str	r6, [sp, #100]	; 0x64
1a006506:	f021 0102 	bic.w	r1, r1, #2
1a00650a:	4606      	mov	r6, r0
1a00650c:	69e0      	ldr	r0, [r4, #28]
1a00650e:	f8ad 100c 	strh.w	r1, [sp, #12]
1a006512:	4617      	mov	r7, r2
1a006514:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a006518:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a00651a:	f8ad 500e 	strh.w	r5, [sp, #14]
1a00651e:	4698      	mov	r8, r3
1a006520:	ad1a      	add	r5, sp, #104	; 0x68
1a006522:	2300      	movs	r3, #0
1a006524:	9007      	str	r0, [sp, #28]
1a006526:	a816      	add	r0, sp, #88	; 0x58
1a006528:	9209      	str	r2, [sp, #36]	; 0x24
1a00652a:	9306      	str	r3, [sp, #24]
1a00652c:	9500      	str	r5, [sp, #0]
1a00652e:	9504      	str	r5, [sp, #16]
1a006530:	9102      	str	r1, [sp, #8]
1a006532:	9105      	str	r1, [sp, #20]
1a006534:	f7fd fd9e 	bl	1a004074 <__retarget_lock_init_recursive>
1a006538:	4643      	mov	r3, r8
1a00653a:	463a      	mov	r2, r7
1a00653c:	4669      	mov	r1, sp
1a00653e:	4630      	mov	r0, r6
1a006540:	f7fe fa2e 	bl	1a0049a0 <_vfprintf_r>
1a006544:	1e05      	subs	r5, r0, #0
1a006546:	db07      	blt.n	1a006558 <__sbprintf+0x64>
1a006548:	4630      	mov	r0, r6
1a00654a:	4669      	mov	r1, sp
1a00654c:	f7fd fb6c 	bl	1a003c28 <_fflush_r>
1a006550:	2800      	cmp	r0, #0
1a006552:	bf18      	it	ne
1a006554:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a006558:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a00655c:	065b      	lsls	r3, r3, #25
1a00655e:	d503      	bpl.n	1a006568 <__sbprintf+0x74>
1a006560:	89a3      	ldrh	r3, [r4, #12]
1a006562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006566:	81a3      	strh	r3, [r4, #12]
1a006568:	9816      	ldr	r0, [sp, #88]	; 0x58
1a00656a:	f7fd fd85 	bl	1a004078 <__retarget_lock_close_recursive>
1a00656e:	4628      	mov	r0, r5
1a006570:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a006574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a006578 <__swsetup_r>:
1a006578:	b538      	push	{r3, r4, r5, lr}
1a00657a:	4b32      	ldr	r3, [pc, #200]	; (1a006644 <__swsetup_r+0xcc>)
1a00657c:	681b      	ldr	r3, [r3, #0]
1a00657e:	4605      	mov	r5, r0
1a006580:	460c      	mov	r4, r1
1a006582:	b10b      	cbz	r3, 1a006588 <__swsetup_r+0x10>
1a006584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a006586:	b312      	cbz	r2, 1a0065ce <__swsetup_r+0x56>
1a006588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00658c:	b293      	uxth	r3, r2
1a00658e:	0718      	lsls	r0, r3, #28
1a006590:	d525      	bpl.n	1a0065de <__swsetup_r+0x66>
1a006592:	6920      	ldr	r0, [r4, #16]
1a006594:	2800      	cmp	r0, #0
1a006596:	d02d      	beq.n	1a0065f4 <__swsetup_r+0x7c>
1a006598:	f013 0201 	ands.w	r2, r3, #1
1a00659c:	d007      	beq.n	1a0065ae <__swsetup_r+0x36>
1a00659e:	6963      	ldr	r3, [r4, #20]
1a0065a0:	2200      	movs	r2, #0
1a0065a2:	425b      	negs	r3, r3
1a0065a4:	61a3      	str	r3, [r4, #24]
1a0065a6:	60a2      	str	r2, [r4, #8]
1a0065a8:	b138      	cbz	r0, 1a0065ba <__swsetup_r+0x42>
1a0065aa:	2000      	movs	r0, #0
1a0065ac:	bd38      	pop	{r3, r4, r5, pc}
1a0065ae:	0799      	lsls	r1, r3, #30
1a0065b0:	bf58      	it	pl
1a0065b2:	6962      	ldrpl	r2, [r4, #20]
1a0065b4:	60a2      	str	r2, [r4, #8]
1a0065b6:	2800      	cmp	r0, #0
1a0065b8:	d1f7      	bne.n	1a0065aa <__swsetup_r+0x32>
1a0065ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0065be:	061a      	lsls	r2, r3, #24
1a0065c0:	d5f4      	bpl.n	1a0065ac <__swsetup_r+0x34>
1a0065c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0065c6:	81a3      	strh	r3, [r4, #12]
1a0065c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0065cc:	bd38      	pop	{r3, r4, r5, pc}
1a0065ce:	4618      	mov	r0, r3
1a0065d0:	f7fd fb86 	bl	1a003ce0 <__sinit>
1a0065d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0065d8:	b293      	uxth	r3, r2
1a0065da:	0718      	lsls	r0, r3, #28
1a0065dc:	d4d9      	bmi.n	1a006592 <__swsetup_r+0x1a>
1a0065de:	06d9      	lsls	r1, r3, #27
1a0065e0:	d528      	bpl.n	1a006634 <__swsetup_r+0xbc>
1a0065e2:	0758      	lsls	r0, r3, #29
1a0065e4:	d412      	bmi.n	1a00660c <__swsetup_r+0x94>
1a0065e6:	6920      	ldr	r0, [r4, #16]
1a0065e8:	f042 0308 	orr.w	r3, r2, #8
1a0065ec:	81a3      	strh	r3, [r4, #12]
1a0065ee:	b29b      	uxth	r3, r3
1a0065f0:	2800      	cmp	r0, #0
1a0065f2:	d1d1      	bne.n	1a006598 <__swsetup_r+0x20>
1a0065f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a0065f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a0065fc:	d0cc      	beq.n	1a006598 <__swsetup_r+0x20>
1a0065fe:	4628      	mov	r0, r5
1a006600:	4621      	mov	r1, r4
1a006602:	f001 f995 	bl	1a007930 <__smakebuf_r>
1a006606:	89a3      	ldrh	r3, [r4, #12]
1a006608:	6920      	ldr	r0, [r4, #16]
1a00660a:	e7c5      	b.n	1a006598 <__swsetup_r+0x20>
1a00660c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00660e:	b151      	cbz	r1, 1a006626 <__swsetup_r+0xae>
1a006610:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a006614:	4299      	cmp	r1, r3
1a006616:	d004      	beq.n	1a006622 <__swsetup_r+0xaa>
1a006618:	4628      	mov	r0, r5
1a00661a:	f7fd fbe7 	bl	1a003dec <_free_r>
1a00661e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006622:	2300      	movs	r3, #0
1a006624:	6323      	str	r3, [r4, #48]	; 0x30
1a006626:	2300      	movs	r3, #0
1a006628:	6920      	ldr	r0, [r4, #16]
1a00662a:	6063      	str	r3, [r4, #4]
1a00662c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a006630:	6020      	str	r0, [r4, #0]
1a006632:	e7d9      	b.n	1a0065e8 <__swsetup_r+0x70>
1a006634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a006638:	2309      	movs	r3, #9
1a00663a:	602b      	str	r3, [r5, #0]
1a00663c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006640:	81a2      	strh	r2, [r4, #12]
1a006642:	bd38      	pop	{r3, r4, r5, pc}
1a006644:	10000040 	.word	0x10000040

1a006648 <quorem>:
1a006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00664c:	6903      	ldr	r3, [r0, #16]
1a00664e:	690f      	ldr	r7, [r1, #16]
1a006650:	42bb      	cmp	r3, r7
1a006652:	b083      	sub	sp, #12
1a006654:	f2c0 8086 	blt.w	1a006764 <quorem+0x11c>
1a006658:	3f01      	subs	r7, #1
1a00665a:	f101 0614 	add.w	r6, r1, #20
1a00665e:	f100 0a14 	add.w	sl, r0, #20
1a006662:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a006666:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00666a:	00bc      	lsls	r4, r7, #2
1a00666c:	3301      	adds	r3, #1
1a00666e:	9400      	str	r4, [sp, #0]
1a006670:	eb06 0904 	add.w	r9, r6, r4
1a006674:	429a      	cmp	r2, r3
1a006676:	4454      	add	r4, sl
1a006678:	fbb2 f8f3 	udiv	r8, r2, r3
1a00667c:	9401      	str	r4, [sp, #4]
1a00667e:	d33a      	bcc.n	1a0066f6 <quorem+0xae>
1a006680:	2500      	movs	r5, #0
1a006682:	462a      	mov	r2, r5
1a006684:	46b6      	mov	lr, r6
1a006686:	46d4      	mov	ip, sl
1a006688:	f85e 4b04 	ldr.w	r4, [lr], #4
1a00668c:	f8dc 3000 	ldr.w	r3, [ip]
1a006690:	fa1f fb84 	uxth.w	fp, r4
1a006694:	fb08 550b 	mla	r5, r8, fp, r5
1a006698:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a00669c:	0c24      	lsrs	r4, r4, #16
1a00669e:	fb08 b404 	mla	r4, r8, r4, fp
1a0066a2:	b2ad      	uxth	r5, r5
1a0066a4:	1b55      	subs	r5, r2, r5
1a0066a6:	b2a2      	uxth	r2, r4
1a0066a8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a0066ac:	fa15 f383 	uxtah	r3, r5, r3
1a0066b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a0066b4:	b29b      	uxth	r3, r3
1a0066b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0066ba:	45f1      	cmp	r9, lr
1a0066bc:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a0066c0:	f84c 3b04 	str.w	r3, [ip], #4
1a0066c4:	ea4f 4222 	mov.w	r2, r2, asr #16
1a0066c8:	d2de      	bcs.n	1a006688 <quorem+0x40>
1a0066ca:	9b00      	ldr	r3, [sp, #0]
1a0066cc:	f85a 3003 	ldr.w	r3, [sl, r3]
1a0066d0:	b98b      	cbnz	r3, 1a0066f6 <quorem+0xae>
1a0066d2:	9a01      	ldr	r2, [sp, #4]
1a0066d4:	1f13      	subs	r3, r2, #4
1a0066d6:	459a      	cmp	sl, r3
1a0066d8:	d20c      	bcs.n	1a0066f4 <quorem+0xac>
1a0066da:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a0066de:	b94b      	cbnz	r3, 1a0066f4 <quorem+0xac>
1a0066e0:	f1a2 0308 	sub.w	r3, r2, #8
1a0066e4:	e002      	b.n	1a0066ec <quorem+0xa4>
1a0066e6:	681a      	ldr	r2, [r3, #0]
1a0066e8:	3b04      	subs	r3, #4
1a0066ea:	b91a      	cbnz	r2, 1a0066f4 <quorem+0xac>
1a0066ec:	459a      	cmp	sl, r3
1a0066ee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0066f2:	d3f8      	bcc.n	1a0066e6 <quorem+0x9e>
1a0066f4:	6107      	str	r7, [r0, #16]
1a0066f6:	4604      	mov	r4, r0
1a0066f8:	f001 fc34 	bl	1a007f64 <__mcmp>
1a0066fc:	2800      	cmp	r0, #0
1a0066fe:	db2d      	blt.n	1a00675c <quorem+0x114>
1a006700:	f108 0801 	add.w	r8, r8, #1
1a006704:	4650      	mov	r0, sl
1a006706:	2300      	movs	r3, #0
1a006708:	f856 1b04 	ldr.w	r1, [r6], #4
1a00670c:	6805      	ldr	r5, [r0, #0]
1a00670e:	b28a      	uxth	r2, r1
1a006710:	1a9a      	subs	r2, r3, r2
1a006712:	0c0b      	lsrs	r3, r1, #16
1a006714:	fa12 f285 	uxtah	r2, r2, r5
1a006718:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a00671c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a006720:	b292      	uxth	r2, r2
1a006722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a006726:	45b1      	cmp	r9, r6
1a006728:	f840 2b04 	str.w	r2, [r0], #4
1a00672c:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006730:	d2ea      	bcs.n	1a006708 <quorem+0xc0>
1a006732:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a006736:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00673a:	b97a      	cbnz	r2, 1a00675c <quorem+0x114>
1a00673c:	1f1a      	subs	r2, r3, #4
1a00673e:	4592      	cmp	sl, r2
1a006740:	d20b      	bcs.n	1a00675a <quorem+0x112>
1a006742:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a006746:	b942      	cbnz	r2, 1a00675a <quorem+0x112>
1a006748:	3b08      	subs	r3, #8
1a00674a:	e002      	b.n	1a006752 <quorem+0x10a>
1a00674c:	681a      	ldr	r2, [r3, #0]
1a00674e:	3b04      	subs	r3, #4
1a006750:	b91a      	cbnz	r2, 1a00675a <quorem+0x112>
1a006752:	459a      	cmp	sl, r3
1a006754:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a006758:	d3f8      	bcc.n	1a00674c <quorem+0x104>
1a00675a:	6127      	str	r7, [r4, #16]
1a00675c:	4640      	mov	r0, r8
1a00675e:	b003      	add	sp, #12
1a006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006764:	2000      	movs	r0, #0
1a006766:	b003      	add	sp, #12
1a006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00676c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006770 <_dtoa_r>:
1a006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006774:	ec57 6b10 	vmov	r6, r7, d0
1a006778:	b097      	sub	sp, #92	; 0x5c
1a00677a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a00677c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a00677e:	9102      	str	r1, [sp, #8]
1a006780:	4682      	mov	sl, r0
1a006782:	920a      	str	r2, [sp, #40]	; 0x28
1a006784:	9307      	str	r3, [sp, #28]
1a006786:	e9cd 6700 	strd	r6, r7, [sp]
1a00678a:	b155      	cbz	r5, 1a0067a2 <_dtoa_r+0x32>
1a00678c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a00678e:	606a      	str	r2, [r5, #4]
1a006790:	2301      	movs	r3, #1
1a006792:	4093      	lsls	r3, r2
1a006794:	60ab      	str	r3, [r5, #8]
1a006796:	4629      	mov	r1, r5
1a006798:	f001 f9f8 	bl	1a007b8c <_Bfree>
1a00679c:	2300      	movs	r3, #0
1a00679e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a0067a2:	1e3e      	subs	r6, r7, #0
1a0067a4:	bfb4      	ite	lt
1a0067a6:	2301      	movlt	r3, #1
1a0067a8:	2300      	movge	r3, #0
1a0067aa:	6023      	str	r3, [r4, #0]
1a0067ac:	4b76      	ldr	r3, [pc, #472]	; (1a006988 <_dtoa_r+0x218>)
1a0067ae:	bfbc      	itt	lt
1a0067b0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a0067b4:	9601      	strlt	r6, [sp, #4]
1a0067b6:	43b3      	bics	r3, r6
1a0067b8:	f000 80ae 	beq.w	1a006918 <_dtoa_r+0x1a8>
1a0067bc:	ed9d 7b00 	vldr	d7, [sp]
1a0067c0:	2200      	movs	r2, #0
1a0067c2:	2300      	movs	r3, #0
1a0067c4:	ec51 0b17 	vmov	r0, r1, d7
1a0067c8:	ed8d 7b04 	vstr	d7, [sp, #16]
1a0067cc:	f7fc ff2c 	bl	1a003628 <__aeabi_dcmpeq>
1a0067d0:	4605      	mov	r5, r0
1a0067d2:	b178      	cbz	r0, 1a0067f4 <_dtoa_r+0x84>
1a0067d4:	9a07      	ldr	r2, [sp, #28]
1a0067d6:	2301      	movs	r3, #1
1a0067d8:	6013      	str	r3, [r2, #0]
1a0067da:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0067dc:	2b00      	cmp	r3, #0
1a0067de:	f000 8313 	beq.w	1a006e08 <_dtoa_r+0x698>
1a0067e2:	4b6a      	ldr	r3, [pc, #424]	; (1a00698c <_dtoa_r+0x21c>)
1a0067e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0067e6:	6013      	str	r3, [r2, #0]
1a0067e8:	3b01      	subs	r3, #1
1a0067ea:	9303      	str	r3, [sp, #12]
1a0067ec:	9803      	ldr	r0, [sp, #12]
1a0067ee:	b017      	add	sp, #92	; 0x5c
1a0067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0067f4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a0067f8:	aa14      	add	r2, sp, #80	; 0x50
1a0067fa:	a915      	add	r1, sp, #84	; 0x54
1a0067fc:	ec48 7b10 	vmov	d0, r7, r8
1a006800:	4650      	mov	r0, sl
1a006802:	f001 fc47 	bl	1a008094 <__d2b>
1a006806:	0d34      	lsrs	r4, r6, #20
1a006808:	4683      	mov	fp, r0
1a00680a:	f040 809b 	bne.w	1a006944 <_dtoa_r+0x1d4>
1a00680e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a006812:	442c      	add	r4, r5
1a006814:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a006818:	2b20      	cmp	r3, #32
1a00681a:	f340 83bb 	ble.w	1a006f94 <_dtoa_r+0x824>
1a00681e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a006822:	409e      	lsls	r6, r3
1a006824:	9b00      	ldr	r3, [sp, #0]
1a006826:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00682a:	fa23 f000 	lsr.w	r0, r3, r0
1a00682e:	4330      	orrs	r0, r6
1a006830:	f7fc fc18 	bl	1a003064 <__aeabi_ui2d>
1a006834:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a006838:	2101      	movs	r1, #1
1a00683a:	4602      	mov	r2, r0
1a00683c:	3c01      	subs	r4, #1
1a00683e:	910e      	str	r1, [sp, #56]	; 0x38
1a006840:	4610      	mov	r0, r2
1a006842:	4619      	mov	r1, r3
1a006844:	2200      	movs	r2, #0
1a006846:	4b52      	ldr	r3, [pc, #328]	; (1a006990 <_dtoa_r+0x220>)
1a006848:	f7fc face 	bl	1a002de8 <__aeabi_dsub>
1a00684c:	a348      	add	r3, pc, #288	; (adr r3, 1a006970 <_dtoa_r+0x200>)
1a00684e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006852:	f7fc fc81 	bl	1a003158 <__aeabi_dmul>
1a006856:	a348      	add	r3, pc, #288	; (adr r3, 1a006978 <_dtoa_r+0x208>)
1a006858:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00685c:	f7fc fac6 	bl	1a002dec <__adddf3>
1a006860:	4606      	mov	r6, r0
1a006862:	4620      	mov	r0, r4
1a006864:	460f      	mov	r7, r1
1a006866:	f7fc fc0d 	bl	1a003084 <__aeabi_i2d>
1a00686a:	a345      	add	r3, pc, #276	; (adr r3, 1a006980 <_dtoa_r+0x210>)
1a00686c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006870:	f7fc fc72 	bl	1a003158 <__aeabi_dmul>
1a006874:	4602      	mov	r2, r0
1a006876:	460b      	mov	r3, r1
1a006878:	4630      	mov	r0, r6
1a00687a:	4639      	mov	r1, r7
1a00687c:	f7fc fab6 	bl	1a002dec <__adddf3>
1a006880:	4606      	mov	r6, r0
1a006882:	460f      	mov	r7, r1
1a006884:	f7fc ff18 	bl	1a0036b8 <__aeabi_d2iz>
1a006888:	2200      	movs	r2, #0
1a00688a:	4681      	mov	r9, r0
1a00688c:	2300      	movs	r3, #0
1a00688e:	4630      	mov	r0, r6
1a006890:	4639      	mov	r1, r7
1a006892:	f7fc fed3 	bl	1a00363c <__aeabi_dcmplt>
1a006896:	2800      	cmp	r0, #0
1a006898:	f040 82a9 	bne.w	1a006dee <_dtoa_r+0x67e>
1a00689c:	1b2c      	subs	r4, r5, r4
1a00689e:	f1b9 0f16 	cmp.w	r9, #22
1a0068a2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a0068a6:	f200 8296 	bhi.w	1a006dd6 <_dtoa_r+0x666>
1a0068aa:	4b3a      	ldr	r3, [pc, #232]	; (1a006994 <_dtoa_r+0x224>)
1a0068ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a0068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0068b8:	f7fc fec0 	bl	1a00363c <__aeabi_dcmplt>
1a0068bc:	2800      	cmp	r0, #0
1a0068be:	d06f      	beq.n	1a0069a0 <_dtoa_r+0x230>
1a0068c0:	2300      	movs	r3, #0
1a0068c2:	f1b8 0f00 	cmp.w	r8, #0
1a0068c6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a0068ca:	930d      	str	r3, [sp, #52]	; 0x34
1a0068cc:	f2c0 8289 	blt.w	1a006de2 <_dtoa_r+0x672>
1a0068d0:	2300      	movs	r3, #0
1a0068d2:	9308      	str	r3, [sp, #32]
1a0068d4:	f1b9 0f00 	cmp.w	r9, #0
1a0068d8:	da68      	bge.n	1a0069ac <_dtoa_r+0x23c>
1a0068da:	9b08      	ldr	r3, [sp, #32]
1a0068dc:	f8cd 9018 	str.w	r9, [sp, #24]
1a0068e0:	eba3 0309 	sub.w	r3, r3, r9
1a0068e4:	9308      	str	r3, [sp, #32]
1a0068e6:	f1c9 0300 	rsb	r3, r9, #0
1a0068ea:	930c      	str	r3, [sp, #48]	; 0x30
1a0068ec:	9b02      	ldr	r3, [sp, #8]
1a0068ee:	2b09      	cmp	r3, #9
1a0068f0:	f04f 0900 	mov.w	r9, #0
1a0068f4:	d862      	bhi.n	1a0069bc <_dtoa_r+0x24c>
1a0068f6:	2b05      	cmp	r3, #5
1a0068f8:	f340 834a 	ble.w	1a006f90 <_dtoa_r+0x820>
1a0068fc:	3b04      	subs	r3, #4
1a0068fe:	9302      	str	r3, [sp, #8]
1a006900:	2400      	movs	r4, #0
1a006902:	9b02      	ldr	r3, [sp, #8]
1a006904:	3b02      	subs	r3, #2
1a006906:	2b03      	cmp	r3, #3
1a006908:	f200 8641 	bhi.w	1a00758e <_dtoa_r+0xe1e>
1a00690c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a006910:	04630466 	.word	0x04630466
1a006914:	0456043b 	.word	0x0456043b
1a006918:	9a07      	ldr	r2, [sp, #28]
1a00691a:	f242 730f 	movw	r3, #9999	; 0x270f
1a00691e:	6013      	str	r3, [r2, #0]
1a006920:	9b00      	ldr	r3, [sp, #0]
1a006922:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a006926:	4333      	orrs	r3, r6
1a006928:	d118      	bne.n	1a00695c <_dtoa_r+0x1ec>
1a00692a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00692c:	2b00      	cmp	r3, #0
1a00692e:	f000 8625 	beq.w	1a00757c <_dtoa_r+0xe0c>
1a006932:	4b19      	ldr	r3, [pc, #100]	; (1a006998 <_dtoa_r+0x228>)
1a006934:	9303      	str	r3, [sp, #12]
1a006936:	3308      	adds	r3, #8
1a006938:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a00693a:	9803      	ldr	r0, [sp, #12]
1a00693c:	6013      	str	r3, [r2, #0]
1a00693e:	b017      	add	sp, #92	; 0x5c
1a006940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006944:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a006948:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a00694c:	950e      	str	r5, [sp, #56]	; 0x38
1a00694e:	463a      	mov	r2, r7
1a006950:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a006954:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a006958:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a00695a:	e771      	b.n	1a006840 <_dtoa_r+0xd0>
1a00695c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00695e:	2b00      	cmp	r3, #0
1a006960:	f040 8400 	bne.w	1a007164 <_dtoa_r+0x9f4>
1a006964:	4b0d      	ldr	r3, [pc, #52]	; (1a00699c <_dtoa_r+0x22c>)
1a006966:	9303      	str	r3, [sp, #12]
1a006968:	e740      	b.n	1a0067ec <_dtoa_r+0x7c>
1a00696a:	bf00      	nop
1a00696c:	f3af 8000 	nop.w
1a006970:	636f4361 	.word	0x636f4361
1a006974:	3fd287a7 	.word	0x3fd287a7
1a006978:	8b60c8b3 	.word	0x8b60c8b3
1a00697c:	3fc68a28 	.word	0x3fc68a28
1a006980:	509f79fb 	.word	0x509f79fb
1a006984:	3fd34413 	.word	0x3fd34413
1a006988:	7ff00000 	.word	0x7ff00000
1a00698c:	1a008d39 	.word	0x1a008d39
1a006990:	3ff80000 	.word	0x3ff80000
1a006994:	1a008d98 	.word	0x1a008d98
1a006998:	1a008d60 	.word	0x1a008d60
1a00699c:	1a008d5c 	.word	0x1a008d5c
1a0069a0:	f1b8 0f00 	cmp.w	r8, #0
1a0069a4:	f2c0 84b6 	blt.w	1a007314 <_dtoa_r+0xba4>
1a0069a8:	900d      	str	r0, [sp, #52]	; 0x34
1a0069aa:	9008      	str	r0, [sp, #32]
1a0069ac:	2300      	movs	r3, #0
1a0069ae:	930c      	str	r3, [sp, #48]	; 0x30
1a0069b0:	9b02      	ldr	r3, [sp, #8]
1a0069b2:	f8cd 9018 	str.w	r9, [sp, #24]
1a0069b6:	2b09      	cmp	r3, #9
1a0069b8:	44c8      	add	r8, r9
1a0069ba:	d99c      	bls.n	1a0068f6 <_dtoa_r+0x186>
1a0069bc:	2300      	movs	r3, #0
1a0069be:	2401      	movs	r4, #1
1a0069c0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a0069c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0069c8:	9302      	str	r3, [sp, #8]
1a0069ca:	9509      	str	r5, [sp, #36]	; 0x24
1a0069cc:	2100      	movs	r1, #0
1a0069ce:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a0069d2:	950f      	str	r5, [sp, #60]	; 0x3c
1a0069d4:	4650      	mov	r0, sl
1a0069d6:	f001 f8b3 	bl	1a007b40 <_Balloc>
1a0069da:	2d0e      	cmp	r5, #14
1a0069dc:	9003      	str	r0, [sp, #12]
1a0069de:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a0069e2:	f200 810a 	bhi.w	1a006bfa <_dtoa_r+0x48a>
1a0069e6:	2c00      	cmp	r4, #0
1a0069e8:	f000 8107 	beq.w	1a006bfa <_dtoa_r+0x48a>
1a0069ec:	9906      	ldr	r1, [sp, #24]
1a0069ee:	2900      	cmp	r1, #0
1a0069f0:	f340 8466 	ble.w	1a0072c0 <_dtoa_r+0xb50>
1a0069f4:	4bb1      	ldr	r3, [pc, #708]	; (1a006cbc <_dtoa_r+0x54c>)
1a0069f6:	f001 020f 	and.w	r2, r1, #15
1a0069fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0069fe:	ed93 7b00 	vldr	d7, [r3]
1a006a02:	110c      	asrs	r4, r1, #4
1a006a04:	06e3      	lsls	r3, r4, #27
1a006a06:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a006a0a:	f140 8406 	bpl.w	1a00721a <_dtoa_r+0xaaa>
1a006a0e:	4bac      	ldr	r3, [pc, #688]	; (1a006cc0 <_dtoa_r+0x550>)
1a006a10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a006a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a006a18:	f7fc fcc8 	bl	1a0033ac <__aeabi_ddiv>
1a006a1c:	e9cd 0100 	strd	r0, r1, [sp]
1a006a20:	f004 040f 	and.w	r4, r4, #15
1a006a24:	2603      	movs	r6, #3
1a006a26:	b17c      	cbz	r4, 1a006a48 <_dtoa_r+0x2d8>
1a006a28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a006a2c:	4da4      	ldr	r5, [pc, #656]	; (1a006cc0 <_dtoa_r+0x550>)
1a006a2e:	07e7      	lsls	r7, r4, #31
1a006a30:	d504      	bpl.n	1a006a3c <_dtoa_r+0x2cc>
1a006a32:	e9d5 2300 	ldrd	r2, r3, [r5]
1a006a36:	f7fc fb8f 	bl	1a003158 <__aeabi_dmul>
1a006a3a:	3601      	adds	r6, #1
1a006a3c:	1064      	asrs	r4, r4, #1
1a006a3e:	f105 0508 	add.w	r5, r5, #8
1a006a42:	d1f4      	bne.n	1a006a2e <_dtoa_r+0x2be>
1a006a44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a006a48:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006a4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a006a50:	f7fc fcac 	bl	1a0033ac <__aeabi_ddiv>
1a006a54:	e9cd 0100 	strd	r0, r1, [sp]
1a006a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a006a5a:	b153      	cbz	r3, 1a006a72 <_dtoa_r+0x302>
1a006a5c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a006a60:	2200      	movs	r2, #0
1a006a62:	4b98      	ldr	r3, [pc, #608]	; (1a006cc4 <_dtoa_r+0x554>)
1a006a64:	4620      	mov	r0, r4
1a006a66:	4629      	mov	r1, r5
1a006a68:	f7fc fde8 	bl	1a00363c <__aeabi_dcmplt>
1a006a6c:	2800      	cmp	r0, #0
1a006a6e:	f040 8521 	bne.w	1a0074b4 <_dtoa_r+0xd44>
1a006a72:	4630      	mov	r0, r6
1a006a74:	f7fc fb06 	bl	1a003084 <__aeabi_i2d>
1a006a78:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006a7c:	f7fc fb6c 	bl	1a003158 <__aeabi_dmul>
1a006a80:	4b91      	ldr	r3, [pc, #580]	; (1a006cc8 <_dtoa_r+0x558>)
1a006a82:	2200      	movs	r2, #0
1a006a84:	f7fc f9b2 	bl	1a002dec <__adddf3>
1a006a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006a8a:	4604      	mov	r4, r0
1a006a8c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006a90:	2b00      	cmp	r3, #0
1a006a92:	f000 83f9 	beq.w	1a007288 <_dtoa_r+0xb18>
1a006a96:	9b06      	ldr	r3, [sp, #24]
1a006a98:	9312      	str	r3, [sp, #72]	; 0x48
1a006a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006a9c:	9310      	str	r3, [sp, #64]	; 0x40
1a006a9e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a006aa2:	4639      	mov	r1, r7
1a006aa4:	4630      	mov	r0, r6
1a006aa6:	f7fc fe07 	bl	1a0036b8 <__aeabi_d2iz>
1a006aaa:	9000      	str	r0, [sp, #0]
1a006aac:	f7fc faea 	bl	1a003084 <__aeabi_i2d>
1a006ab0:	4602      	mov	r2, r0
1a006ab2:	460b      	mov	r3, r1
1a006ab4:	4630      	mov	r0, r6
1a006ab6:	4639      	mov	r1, r7
1a006ab8:	f7fc f996 	bl	1a002de8 <__aeabi_dsub>
1a006abc:	4b7f      	ldr	r3, [pc, #508]	; (1a006cbc <_dtoa_r+0x54c>)
1a006abe:	9a00      	ldr	r2, [sp, #0]
1a006ac0:	460f      	mov	r7, r1
1a006ac2:	9910      	ldr	r1, [sp, #64]	; 0x40
1a006ac4:	4606      	mov	r6, r0
1a006ac6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a006aca:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a006acc:	9903      	ldr	r1, [sp, #12]
1a006ace:	3230      	adds	r2, #48	; 0x30
1a006ad0:	e9cd 4500 	strd	r4, r5, [sp]
1a006ad4:	b2d5      	uxtb	r5, r2
1a006ad6:	1c4c      	adds	r4, r1, #1
1a006ad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a006adc:	2800      	cmp	r0, #0
1a006ade:	f000 848d 	beq.w	1a0073fc <_dtoa_r+0xc8c>
1a006ae2:	2000      	movs	r0, #0
1a006ae4:	4979      	ldr	r1, [pc, #484]	; (1a006ccc <_dtoa_r+0x55c>)
1a006ae6:	f7fc fc61 	bl	1a0033ac <__aeabi_ddiv>
1a006aea:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006aee:	f7fc f97b 	bl	1a002de8 <__aeabi_dsub>
1a006af2:	9b03      	ldr	r3, [sp, #12]
1a006af4:	4632      	mov	r2, r6
1a006af6:	701d      	strb	r5, [r3, #0]
1a006af8:	463b      	mov	r3, r7
1a006afa:	e9cd 0100 	strd	r0, r1, [sp]
1a006afe:	f7fc fdbb 	bl	1a003678 <__aeabi_dcmpgt>
1a006b02:	2800      	cmp	r0, #0
1a006b04:	f040 84ca 	bne.w	1a00749c <_dtoa_r+0xd2c>
1a006b08:	4632      	mov	r2, r6
1a006b0a:	463b      	mov	r3, r7
1a006b0c:	2000      	movs	r0, #0
1a006b0e:	496d      	ldr	r1, [pc, #436]	; (1a006cc4 <_dtoa_r+0x554>)
1a006b10:	f7fc f96a 	bl	1a002de8 <__aeabi_dsub>
1a006b14:	4602      	mov	r2, r0
1a006b16:	460b      	mov	r3, r1
1a006b18:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006b1c:	f7fc fdac 	bl	1a003678 <__aeabi_dcmpgt>
1a006b20:	2800      	cmp	r0, #0
1a006b22:	f040 8526 	bne.w	1a007572 <_dtoa_r+0xe02>
1a006b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006b28:	2b01      	cmp	r3, #1
1a006b2a:	d062      	beq.n	1a006bf2 <_dtoa_r+0x482>
1a006b2c:	9a03      	ldr	r2, [sp, #12]
1a006b2e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a006b32:	4413      	add	r3, r2
1a006b34:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a006b38:	e9dd 8900 	ldrd	r8, r9, [sp]
1a006b3c:	f8cd b000 	str.w	fp, [sp]
1a006b40:	46d3      	mov	fp, sl
1a006b42:	469a      	mov	sl, r3
1a006b44:	e00c      	b.n	1a006b60 <_dtoa_r+0x3f0>
1a006b46:	2000      	movs	r0, #0
1a006b48:	495e      	ldr	r1, [pc, #376]	; (1a006cc4 <_dtoa_r+0x554>)
1a006b4a:	f7fc f94d 	bl	1a002de8 <__aeabi_dsub>
1a006b4e:	4642      	mov	r2, r8
1a006b50:	464b      	mov	r3, r9
1a006b52:	f7fc fd73 	bl	1a00363c <__aeabi_dcmplt>
1a006b56:	2800      	cmp	r0, #0
1a006b58:	f040 84eb 	bne.w	1a007532 <_dtoa_r+0xdc2>
1a006b5c:	45a2      	cmp	sl, r4
1a006b5e:	d041      	beq.n	1a006be4 <_dtoa_r+0x474>
1a006b60:	4640      	mov	r0, r8
1a006b62:	4649      	mov	r1, r9
1a006b64:	2200      	movs	r2, #0
1a006b66:	4b5a      	ldr	r3, [pc, #360]	; (1a006cd0 <_dtoa_r+0x560>)
1a006b68:	f7fc faf6 	bl	1a003158 <__aeabi_dmul>
1a006b6c:	2200      	movs	r2, #0
1a006b6e:	4b58      	ldr	r3, [pc, #352]	; (1a006cd0 <_dtoa_r+0x560>)
1a006b70:	4680      	mov	r8, r0
1a006b72:	4689      	mov	r9, r1
1a006b74:	4630      	mov	r0, r6
1a006b76:	4639      	mov	r1, r7
1a006b78:	f7fc faee 	bl	1a003158 <__aeabi_dmul>
1a006b7c:	460f      	mov	r7, r1
1a006b7e:	4606      	mov	r6, r0
1a006b80:	f7fc fd9a 	bl	1a0036b8 <__aeabi_d2iz>
1a006b84:	4605      	mov	r5, r0
1a006b86:	f7fc fa7d 	bl	1a003084 <__aeabi_i2d>
1a006b8a:	4602      	mov	r2, r0
1a006b8c:	460b      	mov	r3, r1
1a006b8e:	4630      	mov	r0, r6
1a006b90:	4639      	mov	r1, r7
1a006b92:	f7fc f929 	bl	1a002de8 <__aeabi_dsub>
1a006b96:	3530      	adds	r5, #48	; 0x30
1a006b98:	b2ed      	uxtb	r5, r5
1a006b9a:	4642      	mov	r2, r8
1a006b9c:	464b      	mov	r3, r9
1a006b9e:	f804 5b01 	strb.w	r5, [r4], #1
1a006ba2:	4606      	mov	r6, r0
1a006ba4:	460f      	mov	r7, r1
1a006ba6:	f7fc fd49 	bl	1a00363c <__aeabi_dcmplt>
1a006baa:	4632      	mov	r2, r6
1a006bac:	463b      	mov	r3, r7
1a006bae:	2800      	cmp	r0, #0
1a006bb0:	d0c9      	beq.n	1a006b46 <_dtoa_r+0x3d6>
1a006bb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006bb4:	46da      	mov	sl, fp
1a006bb6:	3301      	adds	r3, #1
1a006bb8:	f8dd b000 	ldr.w	fp, [sp]
1a006bbc:	9306      	str	r3, [sp, #24]
1a006bbe:	4659      	mov	r1, fp
1a006bc0:	4650      	mov	r0, sl
1a006bc2:	f000 ffe3 	bl	1a007b8c <_Bfree>
1a006bc6:	2300      	movs	r3, #0
1a006bc8:	7023      	strb	r3, [r4, #0]
1a006bca:	9b07      	ldr	r3, [sp, #28]
1a006bcc:	461a      	mov	r2, r3
1a006bce:	9b06      	ldr	r3, [sp, #24]
1a006bd0:	6013      	str	r3, [r2, #0]
1a006bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006bd4:	2b00      	cmp	r3, #0
1a006bd6:	f43f ae09 	beq.w	1a0067ec <_dtoa_r+0x7c>
1a006bda:	9803      	ldr	r0, [sp, #12]
1a006bdc:	601c      	str	r4, [r3, #0]
1a006bde:	b017      	add	sp, #92	; 0x5c
1a006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006be4:	46da      	mov	sl, fp
1a006be6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a006bea:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a006bee:	f8dd b000 	ldr.w	fp, [sp]
1a006bf2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a006bf6:	e9cd 3400 	strd	r3, r4, [sp]
1a006bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a006bfc:	2b00      	cmp	r3, #0
1a006bfe:	f2c0 80c9 	blt.w	1a006d94 <_dtoa_r+0x624>
1a006c02:	9a06      	ldr	r2, [sp, #24]
1a006c04:	2a0e      	cmp	r2, #14
1a006c06:	f300 80c5 	bgt.w	1a006d94 <_dtoa_r+0x624>
1a006c0a:	4b2c      	ldr	r3, [pc, #176]	; (1a006cbc <_dtoa_r+0x54c>)
1a006c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a006c10:	e9d3 8900 	ldrd	r8, r9, [r3]
1a006c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006c16:	2b00      	cmp	r3, #0
1a006c18:	da17      	bge.n	1a006c4a <_dtoa_r+0x4da>
1a006c1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a006c1c:	2f00      	cmp	r7, #0
1a006c1e:	dc14      	bgt.n	1a006c4a <_dtoa_r+0x4da>
1a006c20:	f040 834b 	bne.w	1a0072ba <_dtoa_r+0xb4a>
1a006c24:	2200      	movs	r2, #0
1a006c26:	4b2b      	ldr	r3, [pc, #172]	; (1a006cd4 <_dtoa_r+0x564>)
1a006c28:	4640      	mov	r0, r8
1a006c2a:	4649      	mov	r1, r9
1a006c2c:	f7fc fa94 	bl	1a003158 <__aeabi_dmul>
1a006c30:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006c34:	f7fc fd16 	bl	1a003664 <__aeabi_dcmpge>
1a006c38:	2800      	cmp	r0, #0
1a006c3a:	f000 83be 	beq.w	1a0073ba <_dtoa_r+0xc4a>
1a006c3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a006c40:	463d      	mov	r5, r7
1a006c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006c44:	9c03      	ldr	r4, [sp, #12]
1a006c46:	43db      	mvns	r3, r3
1a006c48:	e260      	b.n	1a00710c <_dtoa_r+0x99c>
1a006c4a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a006c4e:	4642      	mov	r2, r8
1a006c50:	464b      	mov	r3, r9
1a006c52:	4620      	mov	r0, r4
1a006c54:	4629      	mov	r1, r5
1a006c56:	f7fc fba9 	bl	1a0033ac <__aeabi_ddiv>
1a006c5a:	f7fc fd2d 	bl	1a0036b8 <__aeabi_d2iz>
1a006c5e:	9000      	str	r0, [sp, #0]
1a006c60:	f7fc fa10 	bl	1a003084 <__aeabi_i2d>
1a006c64:	4642      	mov	r2, r8
1a006c66:	464b      	mov	r3, r9
1a006c68:	f7fc fa76 	bl	1a003158 <__aeabi_dmul>
1a006c6c:	4602      	mov	r2, r0
1a006c6e:	460b      	mov	r3, r1
1a006c70:	4620      	mov	r0, r4
1a006c72:	4629      	mov	r1, r5
1a006c74:	f7fc f8b8 	bl	1a002de8 <__aeabi_dsub>
1a006c78:	9b00      	ldr	r3, [sp, #0]
1a006c7a:	9c03      	ldr	r4, [sp, #12]
1a006c7c:	9a06      	ldr	r2, [sp, #24]
1a006c7e:	3330      	adds	r3, #48	; 0x30
1a006c80:	f804 3b01 	strb.w	r3, [r4], #1
1a006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006c86:	3201      	adds	r2, #1
1a006c88:	2b01      	cmp	r3, #1
1a006c8a:	4606      	mov	r6, r0
1a006c8c:	460f      	mov	r7, r1
1a006c8e:	9206      	str	r2, [sp, #24]
1a006c90:	d054      	beq.n	1a006d3c <_dtoa_r+0x5cc>
1a006c92:	2200      	movs	r2, #0
1a006c94:	4b0e      	ldr	r3, [pc, #56]	; (1a006cd0 <_dtoa_r+0x560>)
1a006c96:	f7fc fa5f 	bl	1a003158 <__aeabi_dmul>
1a006c9a:	2200      	movs	r2, #0
1a006c9c:	2300      	movs	r3, #0
1a006c9e:	4606      	mov	r6, r0
1a006ca0:	460f      	mov	r7, r1
1a006ca2:	f7fc fcc1 	bl	1a003628 <__aeabi_dcmpeq>
1a006ca6:	2800      	cmp	r0, #0
1a006ca8:	d189      	bne.n	1a006bbe <_dtoa_r+0x44e>
1a006caa:	f8cd b000 	str.w	fp, [sp]
1a006cae:	2501      	movs	r5, #1
1a006cb0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a006cb4:	f8cd a008 	str.w	sl, [sp, #8]
1a006cb8:	e019      	b.n	1a006cee <_dtoa_r+0x57e>
1a006cba:	bf00      	nop
1a006cbc:	1a008d98 	.word	0x1a008d98
1a006cc0:	1a008d70 	.word	0x1a008d70
1a006cc4:	3ff00000 	.word	0x3ff00000
1a006cc8:	401c0000 	.word	0x401c0000
1a006ccc:	3fe00000 	.word	0x3fe00000
1a006cd0:	40240000 	.word	0x40240000
1a006cd4:	40140000 	.word	0x40140000
1a006cd8:	f7fc fa3e 	bl	1a003158 <__aeabi_dmul>
1a006cdc:	2200      	movs	r2, #0
1a006cde:	2300      	movs	r3, #0
1a006ce0:	4606      	mov	r6, r0
1a006ce2:	460f      	mov	r7, r1
1a006ce4:	f7fc fca0 	bl	1a003628 <__aeabi_dcmpeq>
1a006ce8:	2800      	cmp	r0, #0
1a006cea:	f040 835c 	bne.w	1a0073a6 <_dtoa_r+0xc36>
1a006cee:	4642      	mov	r2, r8
1a006cf0:	464b      	mov	r3, r9
1a006cf2:	4630      	mov	r0, r6
1a006cf4:	4639      	mov	r1, r7
1a006cf6:	f7fc fb59 	bl	1a0033ac <__aeabi_ddiv>
1a006cfa:	f7fc fcdd 	bl	1a0036b8 <__aeabi_d2iz>
1a006cfe:	4682      	mov	sl, r0
1a006d00:	f7fc f9c0 	bl	1a003084 <__aeabi_i2d>
1a006d04:	4642      	mov	r2, r8
1a006d06:	464b      	mov	r3, r9
1a006d08:	f7fc fa26 	bl	1a003158 <__aeabi_dmul>
1a006d0c:	4602      	mov	r2, r0
1a006d0e:	460b      	mov	r3, r1
1a006d10:	4630      	mov	r0, r6
1a006d12:	4639      	mov	r1, r7
1a006d14:	f7fc f868 	bl	1a002de8 <__aeabi_dsub>
1a006d18:	3501      	adds	r5, #1
1a006d1a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a006d1e:	45ab      	cmp	fp, r5
1a006d20:	4606      	mov	r6, r0
1a006d22:	460f      	mov	r7, r1
1a006d24:	f04f 0200 	mov.w	r2, #0
1a006d28:	4ba7      	ldr	r3, [pc, #668]	; (1a006fc8 <_dtoa_r+0x858>)
1a006d2a:	f804 cb01 	strb.w	ip, [r4], #1
1a006d2e:	d1d3      	bne.n	1a006cd8 <_dtoa_r+0x568>
1a006d30:	f8dd b000 	ldr.w	fp, [sp]
1a006d34:	f8cd a000 	str.w	sl, [sp]
1a006d38:	f8dd a008 	ldr.w	sl, [sp, #8]
1a006d3c:	4632      	mov	r2, r6
1a006d3e:	463b      	mov	r3, r7
1a006d40:	4630      	mov	r0, r6
1a006d42:	4639      	mov	r1, r7
1a006d44:	f7fc f852 	bl	1a002dec <__adddf3>
1a006d48:	4642      	mov	r2, r8
1a006d4a:	464b      	mov	r3, r9
1a006d4c:	4606      	mov	r6, r0
1a006d4e:	460f      	mov	r7, r1
1a006d50:	f7fc fc92 	bl	1a003678 <__aeabi_dcmpgt>
1a006d54:	b960      	cbnz	r0, 1a006d70 <_dtoa_r+0x600>
1a006d56:	4642      	mov	r2, r8
1a006d58:	464b      	mov	r3, r9
1a006d5a:	4630      	mov	r0, r6
1a006d5c:	4639      	mov	r1, r7
1a006d5e:	f7fc fc63 	bl	1a003628 <__aeabi_dcmpeq>
1a006d62:	2800      	cmp	r0, #0
1a006d64:	f43f af2b 	beq.w	1a006bbe <_dtoa_r+0x44e>
1a006d68:	9b00      	ldr	r3, [sp, #0]
1a006d6a:	07db      	lsls	r3, r3, #31
1a006d6c:	f57f af27 	bpl.w	1a006bbe <_dtoa_r+0x44e>
1a006d70:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006d74:	9a03      	ldr	r2, [sp, #12]
1a006d76:	1e63      	subs	r3, r4, #1
1a006d78:	e004      	b.n	1a006d84 <_dtoa_r+0x614>
1a006d7a:	429a      	cmp	r2, r3
1a006d7c:	f000 83c0 	beq.w	1a007500 <_dtoa_r+0xd90>
1a006d80:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a006d84:	2d39      	cmp	r5, #57	; 0x39
1a006d86:	f103 0401 	add.w	r4, r3, #1
1a006d8a:	d0f6      	beq.n	1a006d7a <_dtoa_r+0x60a>
1a006d8c:	1c6a      	adds	r2, r5, #1
1a006d8e:	b2d2      	uxtb	r2, r2
1a006d90:	701a      	strb	r2, [r3, #0]
1a006d92:	e714      	b.n	1a006bbe <_dtoa_r+0x44e>
1a006d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a006d96:	2a00      	cmp	r2, #0
1a006d98:	d03c      	beq.n	1a006e14 <_dtoa_r+0x6a4>
1a006d9a:	9a02      	ldr	r2, [sp, #8]
1a006d9c:	2a01      	cmp	r2, #1
1a006d9e:	f340 8258 	ble.w	1a007252 <_dtoa_r+0xae2>
1a006da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006da4:	1e5e      	subs	r6, r3, #1
1a006da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006da8:	42b3      	cmp	r3, r6
1a006daa:	f280 8234 	bge.w	1a007216 <_dtoa_r+0xaa6>
1a006dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006db0:	960c      	str	r6, [sp, #48]	; 0x30
1a006db2:	1af3      	subs	r3, r6, r3
1a006db4:	4499      	add	r9, r3
1a006db6:	2600      	movs	r6, #0
1a006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006dba:	2b00      	cmp	r3, #0
1a006dbc:	f2c0 82f8 	blt.w	1a0073b0 <_dtoa_r+0xc40>
1a006dc0:	9a08      	ldr	r2, [sp, #32]
1a006dc2:	4614      	mov	r4, r2
1a006dc4:	441a      	add	r2, r3
1a006dc6:	4498      	add	r8, r3
1a006dc8:	9208      	str	r2, [sp, #32]
1a006dca:	2101      	movs	r1, #1
1a006dcc:	4650      	mov	r0, sl
1a006dce:	f000 ff7d 	bl	1a007ccc <__i2b>
1a006dd2:	4605      	mov	r5, r0
1a006dd4:	e021      	b.n	1a006e1a <_dtoa_r+0x6aa>
1a006dd6:	2301      	movs	r3, #1
1a006dd8:	f1b8 0f00 	cmp.w	r8, #0
1a006ddc:	930d      	str	r3, [sp, #52]	; 0x34
1a006dde:	f6bf ad77 	bge.w	1a0068d0 <_dtoa_r+0x160>
1a006de2:	f1c4 0301 	rsb	r3, r4, #1
1a006de6:	9308      	str	r3, [sp, #32]
1a006de8:	f04f 0800 	mov.w	r8, #0
1a006dec:	e572      	b.n	1a0068d4 <_dtoa_r+0x164>
1a006dee:	4648      	mov	r0, r9
1a006df0:	f7fc f948 	bl	1a003084 <__aeabi_i2d>
1a006df4:	4632      	mov	r2, r6
1a006df6:	463b      	mov	r3, r7
1a006df8:	f7fc fc16 	bl	1a003628 <__aeabi_dcmpeq>
1a006dfc:	2800      	cmp	r0, #0
1a006dfe:	f47f ad4d 	bne.w	1a00689c <_dtoa_r+0x12c>
1a006e02:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a006e06:	e549      	b.n	1a00689c <_dtoa_r+0x12c>
1a006e08:	4b70      	ldr	r3, [pc, #448]	; (1a006fcc <_dtoa_r+0x85c>)
1a006e0a:	9303      	str	r3, [sp, #12]
1a006e0c:	9803      	ldr	r0, [sp, #12]
1a006e0e:	b017      	add	sp, #92	; 0x5c
1a006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006e14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006e16:	9c08      	ldr	r4, [sp, #32]
1a006e18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a006e1a:	2c00      	cmp	r4, #0
1a006e1c:	dd0c      	ble.n	1a006e38 <_dtoa_r+0x6c8>
1a006e1e:	f1b8 0f00 	cmp.w	r8, #0
1a006e22:	dd09      	ble.n	1a006e38 <_dtoa_r+0x6c8>
1a006e24:	4544      	cmp	r4, r8
1a006e26:	9a08      	ldr	r2, [sp, #32]
1a006e28:	4623      	mov	r3, r4
1a006e2a:	bfa8      	it	ge
1a006e2c:	4643      	movge	r3, r8
1a006e2e:	1ad2      	subs	r2, r2, r3
1a006e30:	9208      	str	r2, [sp, #32]
1a006e32:	1ae4      	subs	r4, r4, r3
1a006e34:	eba8 0803 	sub.w	r8, r8, r3
1a006e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006e3a:	b1d3      	cbz	r3, 1a006e72 <_dtoa_r+0x702>
1a006e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006e3e:	2b00      	cmp	r3, #0
1a006e40:	f000 8189 	beq.w	1a007156 <_dtoa_r+0x9e6>
1a006e44:	2e00      	cmp	r6, #0
1a006e46:	dd10      	ble.n	1a006e6a <_dtoa_r+0x6fa>
1a006e48:	4629      	mov	r1, r5
1a006e4a:	4632      	mov	r2, r6
1a006e4c:	4650      	mov	r0, sl
1a006e4e:	f000 ffdf 	bl	1a007e10 <__pow5mult>
1a006e52:	465a      	mov	r2, fp
1a006e54:	4601      	mov	r1, r0
1a006e56:	4605      	mov	r5, r0
1a006e58:	4650      	mov	r0, sl
1a006e5a:	f000 ff41 	bl	1a007ce0 <__multiply>
1a006e5e:	4659      	mov	r1, fp
1a006e60:	4607      	mov	r7, r0
1a006e62:	4650      	mov	r0, sl
1a006e64:	f000 fe92 	bl	1a007b8c <_Bfree>
1a006e68:	46bb      	mov	fp, r7
1a006e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006e6c:	1b9a      	subs	r2, r3, r6
1a006e6e:	f040 8173 	bne.w	1a007158 <_dtoa_r+0x9e8>
1a006e72:	2101      	movs	r1, #1
1a006e74:	4650      	mov	r0, sl
1a006e76:	f000 ff29 	bl	1a007ccc <__i2b>
1a006e7a:	f1b9 0f00 	cmp.w	r9, #0
1a006e7e:	4607      	mov	r7, r0
1a006e80:	f300 808e 	bgt.w	1a006fa0 <_dtoa_r+0x830>
1a006e84:	9b02      	ldr	r3, [sp, #8]
1a006e86:	2b01      	cmp	r3, #1
1a006e88:	f340 8171 	ble.w	1a00716e <_dtoa_r+0x9fe>
1a006e8c:	2600      	movs	r6, #0
1a006e8e:	2001      	movs	r0, #1
1a006e90:	f1b9 0f00 	cmp.w	r9, #0
1a006e94:	f040 808f 	bne.w	1a006fb6 <_dtoa_r+0x846>
1a006e98:	4440      	add	r0, r8
1a006e9a:	f010 001f 	ands.w	r0, r0, #31
1a006e9e:	d075      	beq.n	1a006f8c <_dtoa_r+0x81c>
1a006ea0:	f1c0 0320 	rsb	r3, r0, #32
1a006ea4:	2b04      	cmp	r3, #4
1a006ea6:	f340 836d 	ble.w	1a007584 <_dtoa_r+0xe14>
1a006eaa:	f1c0 001c 	rsb	r0, r0, #28
1a006eae:	9b08      	ldr	r3, [sp, #32]
1a006eb0:	4403      	add	r3, r0
1a006eb2:	9308      	str	r3, [sp, #32]
1a006eb4:	4404      	add	r4, r0
1a006eb6:	4480      	add	r8, r0
1a006eb8:	9b08      	ldr	r3, [sp, #32]
1a006eba:	2b00      	cmp	r3, #0
1a006ebc:	dd05      	ble.n	1a006eca <_dtoa_r+0x75a>
1a006ebe:	4659      	mov	r1, fp
1a006ec0:	461a      	mov	r2, r3
1a006ec2:	4650      	mov	r0, sl
1a006ec4:	f000 fff4 	bl	1a007eb0 <__lshift>
1a006ec8:	4683      	mov	fp, r0
1a006eca:	f1b8 0f00 	cmp.w	r8, #0
1a006ece:	dd05      	ble.n	1a006edc <_dtoa_r+0x76c>
1a006ed0:	4639      	mov	r1, r7
1a006ed2:	4642      	mov	r2, r8
1a006ed4:	4650      	mov	r0, sl
1a006ed6:	f000 ffeb 	bl	1a007eb0 <__lshift>
1a006eda:	4607      	mov	r7, r0
1a006edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a006ede:	2b00      	cmp	r3, #0
1a006ee0:	f040 811e 	bne.w	1a007120 <_dtoa_r+0x9b0>
1a006ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006ee6:	2b00      	cmp	r3, #0
1a006ee8:	f340 80f5 	ble.w	1a0070d6 <_dtoa_r+0x966>
1a006eec:	9b06      	ldr	r3, [sp, #24]
1a006eee:	3301      	adds	r3, #1
1a006ef0:	9306      	str	r3, [sp, #24]
1a006ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006ef4:	2b00      	cmp	r3, #0
1a006ef6:	d177      	bne.n	1a006fe8 <_dtoa_r+0x878>
1a006ef8:	9c03      	ldr	r4, [sp, #12]
1a006efa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a006efe:	2601      	movs	r6, #1
1a006f00:	e003      	b.n	1a006f0a <_dtoa_r+0x79a>
1a006f02:	f000 fe4d 	bl	1a007ba0 <__multadd>
1a006f06:	3601      	adds	r6, #1
1a006f08:	4683      	mov	fp, r0
1a006f0a:	4639      	mov	r1, r7
1a006f0c:	4658      	mov	r0, fp
1a006f0e:	f7ff fb9b 	bl	1a006648 <quorem>
1a006f12:	4546      	cmp	r6, r8
1a006f14:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a006f18:	f804 9b01 	strb.w	r9, [r4], #1
1a006f1c:	f04f 0300 	mov.w	r3, #0
1a006f20:	f04f 020a 	mov.w	r2, #10
1a006f24:	4659      	mov	r1, fp
1a006f26:	4650      	mov	r0, sl
1a006f28:	dbeb      	blt.n	1a006f02 <_dtoa_r+0x792>
1a006f2a:	2300      	movs	r3, #0
1a006f2c:	9300      	str	r3, [sp, #0]
1a006f2e:	4659      	mov	r1, fp
1a006f30:	2201      	movs	r2, #1
1a006f32:	4650      	mov	r0, sl
1a006f34:	f000 ffbc 	bl	1a007eb0 <__lshift>
1a006f38:	4639      	mov	r1, r7
1a006f3a:	4683      	mov	fp, r0
1a006f3c:	f001 f812 	bl	1a007f64 <__mcmp>
1a006f40:	2800      	cmp	r0, #0
1a006f42:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a006f46:	f340 816f 	ble.w	1a007228 <_dtoa_r+0xab8>
1a006f4a:	1e63      	subs	r3, r4, #1
1a006f4c:	9903      	ldr	r1, [sp, #12]
1a006f4e:	e004      	b.n	1a006f5a <_dtoa_r+0x7ea>
1a006f50:	4299      	cmp	r1, r3
1a006f52:	f000 8177 	beq.w	1a007244 <_dtoa_r+0xad4>
1a006f56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a006f5a:	2a39      	cmp	r2, #57	; 0x39
1a006f5c:	f103 0401 	add.w	r4, r3, #1
1a006f60:	d0f6      	beq.n	1a006f50 <_dtoa_r+0x7e0>
1a006f62:	3201      	adds	r2, #1
1a006f64:	701a      	strb	r2, [r3, #0]
1a006f66:	4639      	mov	r1, r7
1a006f68:	4650      	mov	r0, sl
1a006f6a:	f000 fe0f 	bl	1a007b8c <_Bfree>
1a006f6e:	2d00      	cmp	r5, #0
1a006f70:	f43f ae25 	beq.w	1a006bbe <_dtoa_r+0x44e>
1a006f74:	9900      	ldr	r1, [sp, #0]
1a006f76:	b121      	cbz	r1, 1a006f82 <_dtoa_r+0x812>
1a006f78:	42a9      	cmp	r1, r5
1a006f7a:	d002      	beq.n	1a006f82 <_dtoa_r+0x812>
1a006f7c:	4650      	mov	r0, sl
1a006f7e:	f000 fe05 	bl	1a007b8c <_Bfree>
1a006f82:	4629      	mov	r1, r5
1a006f84:	4650      	mov	r0, sl
1a006f86:	f000 fe01 	bl	1a007b8c <_Bfree>
1a006f8a:	e618      	b.n	1a006bbe <_dtoa_r+0x44e>
1a006f8c:	201c      	movs	r0, #28
1a006f8e:	e78e      	b.n	1a006eae <_dtoa_r+0x73e>
1a006f90:	2401      	movs	r4, #1
1a006f92:	e4b6      	b.n	1a006902 <_dtoa_r+0x192>
1a006f94:	f1c3 0620 	rsb	r6, r3, #32
1a006f98:	9b00      	ldr	r3, [sp, #0]
1a006f9a:	fa03 f006 	lsl.w	r0, r3, r6
1a006f9e:	e447      	b.n	1a006830 <_dtoa_r+0xc0>
1a006fa0:	4601      	mov	r1, r0
1a006fa2:	464a      	mov	r2, r9
1a006fa4:	4650      	mov	r0, sl
1a006fa6:	f000 ff33 	bl	1a007e10 <__pow5mult>
1a006faa:	9b02      	ldr	r3, [sp, #8]
1a006fac:	2b01      	cmp	r3, #1
1a006fae:	4607      	mov	r7, r0
1a006fb0:	f340 81b2 	ble.w	1a007318 <_dtoa_r+0xba8>
1a006fb4:	2600      	movs	r6, #0
1a006fb6:	693b      	ldr	r3, [r7, #16]
1a006fb8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a006fbc:	6918      	ldr	r0, [r3, #16]
1a006fbe:	f000 fe35 	bl	1a007c2c <__hi0bits>
1a006fc2:	f1c0 0020 	rsb	r0, r0, #32
1a006fc6:	e767      	b.n	1a006e98 <_dtoa_r+0x728>
1a006fc8:	40240000 	.word	0x40240000
1a006fcc:	1a008d38 	.word	0x1a008d38
1a006fd0:	4629      	mov	r1, r5
1a006fd2:	2300      	movs	r3, #0
1a006fd4:	220a      	movs	r2, #10
1a006fd6:	4650      	mov	r0, sl
1a006fd8:	f000 fde2 	bl	1a007ba0 <__multadd>
1a006fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006fde:	2b00      	cmp	r3, #0
1a006fe0:	4605      	mov	r5, r0
1a006fe2:	f340 82c1 	ble.w	1a007568 <_dtoa_r+0xdf8>
1a006fe6:	9309      	str	r3, [sp, #36]	; 0x24
1a006fe8:	2c00      	cmp	r4, #0
1a006fea:	f300 810d 	bgt.w	1a007208 <_dtoa_r+0xa98>
1a006fee:	2e00      	cmp	r6, #0
1a006ff0:	f040 81c5 	bne.w	1a00737e <_dtoa_r+0xc0e>
1a006ff4:	46a8      	mov	r8, r5
1a006ff6:	9b00      	ldr	r3, [sp, #0]
1a006ff8:	9902      	ldr	r1, [sp, #8]
1a006ffa:	9e03      	ldr	r6, [sp, #12]
1a006ffc:	f003 0201 	and.w	r2, r3, #1
1a007000:	920b      	str	r2, [sp, #44]	; 0x2c
1a007002:	430a      	orrs	r2, r1
1a007004:	920a      	str	r2, [sp, #40]	; 0x28
1a007006:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a007008:	1e73      	subs	r3, r6, #1
1a00700a:	441a      	add	r2, r3
1a00700c:	9209      	str	r2, [sp, #36]	; 0x24
1a00700e:	463c      	mov	r4, r7
1a007010:	4621      	mov	r1, r4
1a007012:	4658      	mov	r0, fp
1a007014:	f7ff fb18 	bl	1a006648 <quorem>
1a007018:	4629      	mov	r1, r5
1a00701a:	9000      	str	r0, [sp, #0]
1a00701c:	4658      	mov	r0, fp
1a00701e:	f000 ffa1 	bl	1a007f64 <__mcmp>
1a007022:	4642      	mov	r2, r8
1a007024:	4607      	mov	r7, r0
1a007026:	4621      	mov	r1, r4
1a007028:	4650      	mov	r0, sl
1a00702a:	f000 ffb7 	bl	1a007f9c <__mdiff>
1a00702e:	9b00      	ldr	r3, [sp, #0]
1a007030:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a007034:	68c3      	ldr	r3, [r0, #12]
1a007036:	4681      	mov	r9, r0
1a007038:	2b00      	cmp	r3, #0
1a00703a:	d13e      	bne.n	1a0070ba <_dtoa_r+0x94a>
1a00703c:	4601      	mov	r1, r0
1a00703e:	4658      	mov	r0, fp
1a007040:	9208      	str	r2, [sp, #32]
1a007042:	f000 ff8f 	bl	1a007f64 <__mcmp>
1a007046:	4649      	mov	r1, r9
1a007048:	9004      	str	r0, [sp, #16]
1a00704a:	4650      	mov	r0, sl
1a00704c:	f000 fd9e 	bl	1a007b8c <_Bfree>
1a007050:	9b04      	ldr	r3, [sp, #16]
1a007052:	9a08      	ldr	r2, [sp, #32]
1a007054:	b91b      	cbnz	r3, 1a00705e <_dtoa_r+0x8ee>
1a007056:	990a      	ldr	r1, [sp, #40]	; 0x28
1a007058:	2900      	cmp	r1, #0
1a00705a:	f000 8271 	beq.w	1a007540 <_dtoa_r+0xdd0>
1a00705e:	2f00      	cmp	r7, #0
1a007060:	f106 0901 	add.w	r9, r6, #1
1a007064:	f2c0 816e 	blt.w	1a007344 <_dtoa_r+0xbd4>
1a007068:	9902      	ldr	r1, [sp, #8]
1a00706a:	430f      	orrs	r7, r1
1a00706c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00706e:	4339      	orrs	r1, r7
1a007070:	f000 8168 	beq.w	1a007344 <_dtoa_r+0xbd4>
1a007074:	2b00      	cmp	r3, #0
1a007076:	f300 81a2 	bgt.w	1a0073be <_dtoa_r+0xc4e>
1a00707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00707c:	7032      	strb	r2, [r6, #0]
1a00707e:	42b3      	cmp	r3, r6
1a007080:	f000 81a9 	beq.w	1a0073d6 <_dtoa_r+0xc66>
1a007084:	4659      	mov	r1, fp
1a007086:	2300      	movs	r3, #0
1a007088:	220a      	movs	r2, #10
1a00708a:	4650      	mov	r0, sl
1a00708c:	f000 fd88 	bl	1a007ba0 <__multadd>
1a007090:	4545      	cmp	r5, r8
1a007092:	4683      	mov	fp, r0
1a007094:	4629      	mov	r1, r5
1a007096:	f04f 0300 	mov.w	r3, #0
1a00709a:	f04f 020a 	mov.w	r2, #10
1a00709e:	4650      	mov	r0, sl
1a0070a0:	d013      	beq.n	1a0070ca <_dtoa_r+0x95a>
1a0070a2:	f000 fd7d 	bl	1a007ba0 <__multadd>
1a0070a6:	4641      	mov	r1, r8
1a0070a8:	4605      	mov	r5, r0
1a0070aa:	2300      	movs	r3, #0
1a0070ac:	220a      	movs	r2, #10
1a0070ae:	4650      	mov	r0, sl
1a0070b0:	f000 fd76 	bl	1a007ba0 <__multadd>
1a0070b4:	464e      	mov	r6, r9
1a0070b6:	4680      	mov	r8, r0
1a0070b8:	e7aa      	b.n	1a007010 <_dtoa_r+0x8a0>
1a0070ba:	4601      	mov	r1, r0
1a0070bc:	4650      	mov	r0, sl
1a0070be:	9204      	str	r2, [sp, #16]
1a0070c0:	f000 fd64 	bl	1a007b8c <_Bfree>
1a0070c4:	2301      	movs	r3, #1
1a0070c6:	9a04      	ldr	r2, [sp, #16]
1a0070c8:	e7c9      	b.n	1a00705e <_dtoa_r+0x8ee>
1a0070ca:	f000 fd69 	bl	1a007ba0 <__multadd>
1a0070ce:	464e      	mov	r6, r9
1a0070d0:	4605      	mov	r5, r0
1a0070d2:	4680      	mov	r8, r0
1a0070d4:	e79c      	b.n	1a007010 <_dtoa_r+0x8a0>
1a0070d6:	9b02      	ldr	r3, [sp, #8]
1a0070d8:	2b02      	cmp	r3, #2
1a0070da:	f340 8082 	ble.w	1a0071e2 <_dtoa_r+0xa72>
1a0070de:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0070e0:	2b00      	cmp	r3, #0
1a0070e2:	f47f adae 	bne.w	1a006c42 <_dtoa_r+0x4d2>
1a0070e6:	4639      	mov	r1, r7
1a0070e8:	2205      	movs	r2, #5
1a0070ea:	4650      	mov	r0, sl
1a0070ec:	f000 fd58 	bl	1a007ba0 <__multadd>
1a0070f0:	4601      	mov	r1, r0
1a0070f2:	4607      	mov	r7, r0
1a0070f4:	4658      	mov	r0, fp
1a0070f6:	f000 ff35 	bl	1a007f64 <__mcmp>
1a0070fa:	2800      	cmp	r0, #0
1a0070fc:	f77f ada1 	ble.w	1a006c42 <_dtoa_r+0x4d2>
1a007100:	9c03      	ldr	r4, [sp, #12]
1a007102:	9b06      	ldr	r3, [sp, #24]
1a007104:	2231      	movs	r2, #49	; 0x31
1a007106:	f804 2b01 	strb.w	r2, [r4], #1
1a00710a:	3301      	adds	r3, #1
1a00710c:	3301      	adds	r3, #1
1a00710e:	4639      	mov	r1, r7
1a007110:	4650      	mov	r0, sl
1a007112:	9306      	str	r3, [sp, #24]
1a007114:	f000 fd3a 	bl	1a007b8c <_Bfree>
1a007118:	2d00      	cmp	r5, #0
1a00711a:	f47f af32 	bne.w	1a006f82 <_dtoa_r+0x812>
1a00711e:	e54e      	b.n	1a006bbe <_dtoa_r+0x44e>
1a007120:	4639      	mov	r1, r7
1a007122:	4658      	mov	r0, fp
1a007124:	f000 ff1e 	bl	1a007f64 <__mcmp>
1a007128:	2800      	cmp	r0, #0
1a00712a:	f6bf aedb 	bge.w	1a006ee4 <_dtoa_r+0x774>
1a00712e:	4659      	mov	r1, fp
1a007130:	2300      	movs	r3, #0
1a007132:	220a      	movs	r2, #10
1a007134:	4650      	mov	r0, sl
1a007136:	f000 fd33 	bl	1a007ba0 <__multadd>
1a00713a:	9b06      	ldr	r3, [sp, #24]
1a00713c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a007140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a007142:	4683      	mov	fp, r0
1a007144:	2b00      	cmp	r3, #0
1a007146:	f47f af43 	bne.w	1a006fd0 <_dtoa_r+0x860>
1a00714a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00714c:	2b00      	cmp	r3, #0
1a00714e:	f340 8202 	ble.w	1a007556 <_dtoa_r+0xde6>
1a007152:	9309      	str	r3, [sp, #36]	; 0x24
1a007154:	e6d0      	b.n	1a006ef8 <_dtoa_r+0x788>
1a007156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a007158:	4659      	mov	r1, fp
1a00715a:	4650      	mov	r0, sl
1a00715c:	f000 fe58 	bl	1a007e10 <__pow5mult>
1a007160:	4683      	mov	fp, r0
1a007162:	e686      	b.n	1a006e72 <_dtoa_r+0x702>
1a007164:	4b9f      	ldr	r3, [pc, #636]	; (1a0073e4 <_dtoa_r+0xc74>)
1a007166:	9303      	str	r3, [sp, #12]
1a007168:	3303      	adds	r3, #3
1a00716a:	f7ff bbe5 	b.w	1a006938 <_dtoa_r+0x1c8>
1a00716e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a007172:	2900      	cmp	r1, #0
1a007174:	f47f ae8a 	bne.w	1a006e8c <_dtoa_r+0x71c>
1a007178:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00717c:	2b00      	cmp	r3, #0
1a00717e:	f000 80d5 	beq.w	1a00732c <_dtoa_r+0xbbc>
1a007182:	9e00      	ldr	r6, [sp, #0]
1a007184:	e683      	b.n	1a006e8e <_dtoa_r+0x71e>
1a007186:	2301      	movs	r3, #1
1a007188:	930b      	str	r3, [sp, #44]	; 0x2c
1a00718a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00718c:	2800      	cmp	r0, #0
1a00718e:	dd46      	ble.n	1a00721e <_dtoa_r+0xaae>
1a007190:	900f      	str	r0, [sp, #60]	; 0x3c
1a007192:	9009      	str	r0, [sp, #36]	; 0x24
1a007194:	2100      	movs	r1, #0
1a007196:	2817      	cmp	r0, #23
1a007198:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00719c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00719e:	f77f ac19 	ble.w	1a0069d4 <_dtoa_r+0x264>
1a0071a2:	2201      	movs	r2, #1
1a0071a4:	2304      	movs	r3, #4
1a0071a6:	005b      	lsls	r3, r3, #1
1a0071a8:	f103 0614 	add.w	r6, r3, #20
1a0071ac:	42b0      	cmp	r0, r6
1a0071ae:	4611      	mov	r1, r2
1a0071b0:	f102 0201 	add.w	r2, r2, #1
1a0071b4:	d2f7      	bcs.n	1a0071a6 <_dtoa_r+0xa36>
1a0071b6:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a0071ba:	e40b      	b.n	1a0069d4 <_dtoa_r+0x264>
1a0071bc:	2301      	movs	r3, #1
1a0071be:	930b      	str	r3, [sp, #44]	; 0x2c
1a0071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0071c2:	9a06      	ldr	r2, [sp, #24]
1a0071c4:	4413      	add	r3, r2
1a0071c6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0071c8:	3301      	adds	r3, #1
1a0071ca:	2b01      	cmp	r3, #1
1a0071cc:	4618      	mov	r0, r3
1a0071ce:	9309      	str	r3, [sp, #36]	; 0x24
1a0071d0:	bfb8      	it	lt
1a0071d2:	2001      	movlt	r0, #1
1a0071d4:	e7de      	b.n	1a007194 <_dtoa_r+0xa24>
1a0071d6:	2300      	movs	r3, #0
1a0071d8:	930b      	str	r3, [sp, #44]	; 0x2c
1a0071da:	e7f1      	b.n	1a0071c0 <_dtoa_r+0xa50>
1a0071dc:	2300      	movs	r3, #0
1a0071de:	930b      	str	r3, [sp, #44]	; 0x2c
1a0071e0:	e7d3      	b.n	1a00718a <_dtoa_r+0xa1a>
1a0071e2:	9b06      	ldr	r3, [sp, #24]
1a0071e4:	3301      	adds	r3, #1
1a0071e6:	9306      	str	r3, [sp, #24]
1a0071e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0071ea:	2b00      	cmp	r3, #0
1a0071ec:	f47f aefc 	bne.w	1a006fe8 <_dtoa_r+0x878>
1a0071f0:	4639      	mov	r1, r7
1a0071f2:	4658      	mov	r0, fp
1a0071f4:	f7ff fa28 	bl	1a006648 <quorem>
1a0071f8:	9c03      	ldr	r4, [sp, #12]
1a0071fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0071fe:	2300      	movs	r3, #0
1a007200:	f804 9b01 	strb.w	r9, [r4], #1
1a007204:	9300      	str	r3, [sp, #0]
1a007206:	e692      	b.n	1a006f2e <_dtoa_r+0x7be>
1a007208:	4629      	mov	r1, r5
1a00720a:	4622      	mov	r2, r4
1a00720c:	4650      	mov	r0, sl
1a00720e:	f000 fe4f 	bl	1a007eb0 <__lshift>
1a007212:	4605      	mov	r5, r0
1a007214:	e6eb      	b.n	1a006fee <_dtoa_r+0x87e>
1a007216:	1b9e      	subs	r6, r3, r6
1a007218:	e5ce      	b.n	1a006db8 <_dtoa_r+0x648>
1a00721a:	2602      	movs	r6, #2
1a00721c:	e403      	b.n	1a006a26 <_dtoa_r+0x2b6>
1a00721e:	2501      	movs	r5, #1
1a007220:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a007224:	f7ff bbd2 	b.w	1a0069cc <_dtoa_r+0x25c>
1a007228:	d103      	bne.n	1a007232 <_dtoa_r+0xac2>
1a00722a:	f019 0f01 	tst.w	r9, #1
1a00722e:	f47f ae8c 	bne.w	1a006f4a <_dtoa_r+0x7da>
1a007232:	1e63      	subs	r3, r4, #1
1a007234:	e001      	b.n	1a00723a <_dtoa_r+0xaca>
1a007236:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00723a:	2a30      	cmp	r2, #48	; 0x30
1a00723c:	f103 0401 	add.w	r4, r3, #1
1a007240:	d0f9      	beq.n	1a007236 <_dtoa_r+0xac6>
1a007242:	e690      	b.n	1a006f66 <_dtoa_r+0x7f6>
1a007244:	9a06      	ldr	r2, [sp, #24]
1a007246:	3201      	adds	r2, #1
1a007248:	9206      	str	r2, [sp, #24]
1a00724a:	9a03      	ldr	r2, [sp, #12]
1a00724c:	2331      	movs	r3, #49	; 0x31
1a00724e:	7013      	strb	r3, [r2, #0]
1a007250:	e689      	b.n	1a006f66 <_dtoa_r+0x7f6>
1a007252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a007254:	2a00      	cmp	r2, #0
1a007256:	f000 8126 	beq.w	1a0074a6 <_dtoa_r+0xd36>
1a00725a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00725e:	9a08      	ldr	r2, [sp, #32]
1a007260:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a007262:	4614      	mov	r4, r2
1a007264:	441a      	add	r2, r3
1a007266:	4498      	add	r8, r3
1a007268:	9208      	str	r2, [sp, #32]
1a00726a:	e5ae      	b.n	1a006dca <_dtoa_r+0x65a>
1a00726c:	4630      	mov	r0, r6
1a00726e:	f7fb ff09 	bl	1a003084 <__aeabi_i2d>
1a007272:	e9dd 2300 	ldrd	r2, r3, [sp]
1a007276:	f7fb ff6f 	bl	1a003158 <__aeabi_dmul>
1a00727a:	2200      	movs	r2, #0
1a00727c:	4b5a      	ldr	r3, [pc, #360]	; (1a0073e8 <_dtoa_r+0xc78>)
1a00727e:	f7fb fdb5 	bl	1a002dec <__adddf3>
1a007282:	4604      	mov	r4, r0
1a007284:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a007288:	2200      	movs	r2, #0
1a00728a:	4b58      	ldr	r3, [pc, #352]	; (1a0073ec <_dtoa_r+0xc7c>)
1a00728c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a007290:	f7fb fdaa 	bl	1a002de8 <__aeabi_dsub>
1a007294:	4622      	mov	r2, r4
1a007296:	462b      	mov	r3, r5
1a007298:	4606      	mov	r6, r0
1a00729a:	460f      	mov	r7, r1
1a00729c:	f7fc f9ec 	bl	1a003678 <__aeabi_dcmpgt>
1a0072a0:	2800      	cmp	r0, #0
1a0072a2:	f040 8089 	bne.w	1a0073b8 <_dtoa_r+0xc48>
1a0072a6:	4622      	mov	r2, r4
1a0072a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a0072ac:	4630      	mov	r0, r6
1a0072ae:	4639      	mov	r1, r7
1a0072b0:	f7fc f9c4 	bl	1a00363c <__aeabi_dcmplt>
1a0072b4:	2800      	cmp	r0, #0
1a0072b6:	f43f ac9c 	beq.w	1a006bf2 <_dtoa_r+0x482>
1a0072ba:	2700      	movs	r7, #0
1a0072bc:	463d      	mov	r5, r7
1a0072be:	e4c0      	b.n	1a006c42 <_dtoa_r+0x4d2>
1a0072c0:	f000 80f5 	beq.w	1a0074ae <_dtoa_r+0xd3e>
1a0072c4:	9b06      	ldr	r3, [sp, #24]
1a0072c6:	425c      	negs	r4, r3
1a0072c8:	4b49      	ldr	r3, [pc, #292]	; (1a0073f0 <_dtoa_r+0xc80>)
1a0072ca:	f004 020f 	and.w	r2, r4, #15
1a0072ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0072d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0072da:	f7fb ff3d 	bl	1a003158 <__aeabi_dmul>
1a0072de:	1124      	asrs	r4, r4, #4
1a0072e0:	e9cd 0100 	strd	r0, r1, [sp]
1a0072e4:	f000 80e3 	beq.w	1a0074ae <_dtoa_r+0xd3e>
1a0072e8:	4d42      	ldr	r5, [pc, #264]	; (1a0073f4 <_dtoa_r+0xc84>)
1a0072ea:	2300      	movs	r3, #0
1a0072ec:	2602      	movs	r6, #2
1a0072ee:	07e2      	lsls	r2, r4, #31
1a0072f0:	d505      	bpl.n	1a0072fe <_dtoa_r+0xb8e>
1a0072f2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0072f6:	f7fb ff2f 	bl	1a003158 <__aeabi_dmul>
1a0072fa:	3601      	adds	r6, #1
1a0072fc:	2301      	movs	r3, #1
1a0072fe:	1064      	asrs	r4, r4, #1
1a007300:	f105 0508 	add.w	r5, r5, #8
1a007304:	d1f3      	bne.n	1a0072ee <_dtoa_r+0xb7e>
1a007306:	2b00      	cmp	r3, #0
1a007308:	f43f aba6 	beq.w	1a006a58 <_dtoa_r+0x2e8>
1a00730c:	e9cd 0100 	strd	r0, r1, [sp]
1a007310:	f7ff bba2 	b.w	1a006a58 <_dtoa_r+0x2e8>
1a007314:	900d      	str	r0, [sp, #52]	; 0x34
1a007316:	e564      	b.n	1a006de2 <_dtoa_r+0x672>
1a007318:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00731c:	2900      	cmp	r1, #0
1a00731e:	f47f ae49 	bne.w	1a006fb4 <_dtoa_r+0x844>
1a007322:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a007326:	2b00      	cmp	r3, #0
1a007328:	f47f ae44 	bne.w	1a006fb4 <_dtoa_r+0x844>
1a00732c:	4e32      	ldr	r6, [pc, #200]	; (1a0073f8 <_dtoa_r+0xc88>)
1a00732e:	4016      	ands	r6, r2
1a007330:	2e00      	cmp	r6, #0
1a007332:	f43f adac 	beq.w	1a006e8e <_dtoa_r+0x71e>
1a007336:	9b08      	ldr	r3, [sp, #32]
1a007338:	3301      	adds	r3, #1
1a00733a:	9308      	str	r3, [sp, #32]
1a00733c:	f108 0801 	add.w	r8, r8, #1
1a007340:	2601      	movs	r6, #1
1a007342:	e5a4      	b.n	1a006e8e <_dtoa_r+0x71e>
1a007344:	2b00      	cmp	r3, #0
1a007346:	4627      	mov	r7, r4
1a007348:	464c      	mov	r4, r9
1a00734a:	4691      	mov	r9, r2
1a00734c:	dd12      	ble.n	1a007374 <_dtoa_r+0xc04>
1a00734e:	4659      	mov	r1, fp
1a007350:	2201      	movs	r2, #1
1a007352:	4650      	mov	r0, sl
1a007354:	f000 fdac 	bl	1a007eb0 <__lshift>
1a007358:	4639      	mov	r1, r7
1a00735a:	4683      	mov	fp, r0
1a00735c:	f000 fe02 	bl	1a007f64 <__mcmp>
1a007360:	2800      	cmp	r0, #0
1a007362:	f340 80df 	ble.w	1a007524 <_dtoa_r+0xdb4>
1a007366:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00736a:	f000 80d0 	beq.w	1a00750e <_dtoa_r+0xd9e>
1a00736e:	9b00      	ldr	r3, [sp, #0]
1a007370:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a007374:	9500      	str	r5, [sp, #0]
1a007376:	f886 9000 	strb.w	r9, [r6]
1a00737a:	4645      	mov	r5, r8
1a00737c:	e5f3      	b.n	1a006f66 <_dtoa_r+0x7f6>
1a00737e:	6869      	ldr	r1, [r5, #4]
1a007380:	4650      	mov	r0, sl
1a007382:	f000 fbdd 	bl	1a007b40 <_Balloc>
1a007386:	692b      	ldr	r3, [r5, #16]
1a007388:	3302      	adds	r3, #2
1a00738a:	009a      	lsls	r2, r3, #2
1a00738c:	4604      	mov	r4, r0
1a00738e:	f105 010c 	add.w	r1, r5, #12
1a007392:	300c      	adds	r0, #12
1a007394:	f7fd f92e 	bl	1a0045f4 <memcpy>
1a007398:	4621      	mov	r1, r4
1a00739a:	2201      	movs	r2, #1
1a00739c:	4650      	mov	r0, sl
1a00739e:	f000 fd87 	bl	1a007eb0 <__lshift>
1a0073a2:	4680      	mov	r8, r0
1a0073a4:	e627      	b.n	1a006ff6 <_dtoa_r+0x886>
1a0073a6:	f8dd b000 	ldr.w	fp, [sp]
1a0073aa:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0073ae:	e406      	b.n	1a006bbe <_dtoa_r+0x44e>
1a0073b0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a0073b4:	1a9c      	subs	r4, r3, r2
1a0073b6:	e508      	b.n	1a006dca <_dtoa_r+0x65a>
1a0073b8:	2700      	movs	r7, #0
1a0073ba:	463d      	mov	r5, r7
1a0073bc:	e6a0      	b.n	1a007100 <_dtoa_r+0x990>
1a0073be:	2a39      	cmp	r2, #57	; 0x39
1a0073c0:	4627      	mov	r7, r4
1a0073c2:	464c      	mov	r4, r9
1a0073c4:	f000 80a3 	beq.w	1a00750e <_dtoa_r+0xd9e>
1a0073c8:	f102 0901 	add.w	r9, r2, #1
1a0073cc:	9500      	str	r5, [sp, #0]
1a0073ce:	f886 9000 	strb.w	r9, [r6]
1a0073d2:	4645      	mov	r5, r8
1a0073d4:	e5c7      	b.n	1a006f66 <_dtoa_r+0x7f6>
1a0073d6:	4627      	mov	r7, r4
1a0073d8:	9500      	str	r5, [sp, #0]
1a0073da:	464c      	mov	r4, r9
1a0073dc:	4645      	mov	r5, r8
1a0073de:	4691      	mov	r9, r2
1a0073e0:	e5a5      	b.n	1a006f2e <_dtoa_r+0x7be>
1a0073e2:	bf00      	nop
1a0073e4:	1a008d5c 	.word	0x1a008d5c
1a0073e8:	401c0000 	.word	0x401c0000
1a0073ec:	40140000 	.word	0x40140000
1a0073f0:	1a008d98 	.word	0x1a008d98
1a0073f4:	1a008d70 	.word	0x1a008d70
1a0073f8:	7ff00000 	.word	0x7ff00000
1a0073fc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a007400:	f7fb feaa 	bl	1a003158 <__aeabi_dmul>
1a007404:	9b03      	ldr	r3, [sp, #12]
1a007406:	701d      	strb	r5, [r3, #0]
1a007408:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00740a:	2b01      	cmp	r3, #1
1a00740c:	e9cd 0100 	strd	r0, r1, [sp]
1a007410:	d023      	beq.n	1a00745a <_dtoa_r+0xcea>
1a007412:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007414:	9a03      	ldr	r2, [sp, #12]
1a007416:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00741a:	4413      	add	r3, r2
1a00741c:	46c1      	mov	r9, r8
1a00741e:	4698      	mov	r8, r3
1a007420:	2200      	movs	r2, #0
1a007422:	4b64      	ldr	r3, [pc, #400]	; (1a0075b4 <_dtoa_r+0xe44>)
1a007424:	4630      	mov	r0, r6
1a007426:	4639      	mov	r1, r7
1a007428:	f7fb fe96 	bl	1a003158 <__aeabi_dmul>
1a00742c:	460f      	mov	r7, r1
1a00742e:	4606      	mov	r6, r0
1a007430:	f7fc f942 	bl	1a0036b8 <__aeabi_d2iz>
1a007434:	4605      	mov	r5, r0
1a007436:	f7fb fe25 	bl	1a003084 <__aeabi_i2d>
1a00743a:	3530      	adds	r5, #48	; 0x30
1a00743c:	4602      	mov	r2, r0
1a00743e:	460b      	mov	r3, r1
1a007440:	4630      	mov	r0, r6
1a007442:	4639      	mov	r1, r7
1a007444:	f7fb fcd0 	bl	1a002de8 <__aeabi_dsub>
1a007448:	f804 5b01 	strb.w	r5, [r4], #1
1a00744c:	45a0      	cmp	r8, r4
1a00744e:	4606      	mov	r6, r0
1a007450:	460f      	mov	r7, r1
1a007452:	d1e5      	bne.n	1a007420 <_dtoa_r+0xcb0>
1a007454:	46c8      	mov	r8, r9
1a007456:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00745a:	4b57      	ldr	r3, [pc, #348]	; (1a0075b8 <_dtoa_r+0xe48>)
1a00745c:	2200      	movs	r2, #0
1a00745e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a007462:	f7fb fcc3 	bl	1a002dec <__adddf3>
1a007466:	4632      	mov	r2, r6
1a007468:	463b      	mov	r3, r7
1a00746a:	f7fc f8e7 	bl	1a00363c <__aeabi_dcmplt>
1a00746e:	2800      	cmp	r0, #0
1a007470:	d152      	bne.n	1a007518 <_dtoa_r+0xda8>
1a007472:	e9dd 2300 	ldrd	r2, r3, [sp]
1a007476:	2000      	movs	r0, #0
1a007478:	494f      	ldr	r1, [pc, #316]	; (1a0075b8 <_dtoa_r+0xe48>)
1a00747a:	f7fb fcb5 	bl	1a002de8 <__aeabi_dsub>
1a00747e:	4632      	mov	r2, r6
1a007480:	463b      	mov	r3, r7
1a007482:	f7fc f8f9 	bl	1a003678 <__aeabi_dcmpgt>
1a007486:	2800      	cmp	r0, #0
1a007488:	f43f abb3 	beq.w	1a006bf2 <_dtoa_r+0x482>
1a00748c:	e000      	b.n	1a007490 <_dtoa_r+0xd20>
1a00748e:	4614      	mov	r4, r2
1a007490:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a007494:	2b30      	cmp	r3, #48	; 0x30
1a007496:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00749a:	d0f8      	beq.n	1a00748e <_dtoa_r+0xd1e>
1a00749c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00749e:	3301      	adds	r3, #1
1a0074a0:	9306      	str	r3, [sp, #24]
1a0074a2:	f7ff bb8c 	b.w	1a006bbe <_dtoa_r+0x44e>
1a0074a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0074a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a0074ac:	e6d7      	b.n	1a00725e <_dtoa_r+0xaee>
1a0074ae:	2602      	movs	r6, #2
1a0074b0:	f7ff bad2 	b.w	1a006a58 <_dtoa_r+0x2e8>
1a0074b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0074b6:	2b00      	cmp	r3, #0
1a0074b8:	f43f aed8 	beq.w	1a00726c <_dtoa_r+0xafc>
1a0074bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a0074be:	2f00      	cmp	r7, #0
1a0074c0:	f77f ab97 	ble.w	1a006bf2 <_dtoa_r+0x482>
1a0074c4:	2200      	movs	r2, #0
1a0074c6:	4b3b      	ldr	r3, [pc, #236]	; (1a0075b4 <_dtoa_r+0xe44>)
1a0074c8:	4620      	mov	r0, r4
1a0074ca:	4629      	mov	r1, r5
1a0074cc:	f7fb fe44 	bl	1a003158 <__aeabi_dmul>
1a0074d0:	4604      	mov	r4, r0
1a0074d2:	460d      	mov	r5, r1
1a0074d4:	1c70      	adds	r0, r6, #1
1a0074d6:	e9cd 4500 	strd	r4, r5, [sp]
1a0074da:	f7fb fdd3 	bl	1a003084 <__aeabi_i2d>
1a0074de:	4622      	mov	r2, r4
1a0074e0:	462b      	mov	r3, r5
1a0074e2:	f7fb fe39 	bl	1a003158 <__aeabi_dmul>
1a0074e6:	4b35      	ldr	r3, [pc, #212]	; (1a0075bc <_dtoa_r+0xe4c>)
1a0074e8:	2200      	movs	r2, #0
1a0074ea:	f7fb fc7f 	bl	1a002dec <__adddf3>
1a0074ee:	9b06      	ldr	r3, [sp, #24]
1a0074f0:	9710      	str	r7, [sp, #64]	; 0x40
1a0074f2:	3b01      	subs	r3, #1
1a0074f4:	4604      	mov	r4, r0
1a0074f6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0074fa:	9312      	str	r3, [sp, #72]	; 0x48
1a0074fc:	f7ff bacf 	b.w	1a006a9e <_dtoa_r+0x32e>
1a007500:	9a06      	ldr	r2, [sp, #24]
1a007502:	3201      	adds	r2, #1
1a007504:	9206      	str	r2, [sp, #24]
1a007506:	2231      	movs	r2, #49	; 0x31
1a007508:	701a      	strb	r2, [r3, #0]
1a00750a:	f7ff bb58 	b.w	1a006bbe <_dtoa_r+0x44e>
1a00750e:	2239      	movs	r2, #57	; 0x39
1a007510:	9500      	str	r5, [sp, #0]
1a007512:	7032      	strb	r2, [r6, #0]
1a007514:	4645      	mov	r5, r8
1a007516:	e518      	b.n	1a006f4a <_dtoa_r+0x7da>
1a007518:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00751a:	3301      	adds	r3, #1
1a00751c:	9306      	str	r3, [sp, #24]
1a00751e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a007522:	e427      	b.n	1a006d74 <_dtoa_r+0x604>
1a007524:	f47f af26 	bne.w	1a007374 <_dtoa_r+0xc04>
1a007528:	f019 0f01 	tst.w	r9, #1
1a00752c:	f47f af1b 	bne.w	1a007366 <_dtoa_r+0xbf6>
1a007530:	e720      	b.n	1a007374 <_dtoa_r+0xc04>
1a007532:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007534:	3301      	adds	r3, #1
1a007536:	46da      	mov	sl, fp
1a007538:	9306      	str	r3, [sp, #24]
1a00753a:	f8dd b000 	ldr.w	fp, [sp]
1a00753e:	e419      	b.n	1a006d74 <_dtoa_r+0x604>
1a007540:	2a39      	cmp	r2, #57	; 0x39
1a007542:	463b      	mov	r3, r7
1a007544:	4691      	mov	r9, r2
1a007546:	4627      	mov	r7, r4
1a007548:	f106 0401 	add.w	r4, r6, #1
1a00754c:	d0df      	beq.n	1a00750e <_dtoa_r+0xd9e>
1a00754e:	2b00      	cmp	r3, #0
1a007550:	f73f af0d 	bgt.w	1a00736e <_dtoa_r+0xbfe>
1a007554:	e70e      	b.n	1a007374 <_dtoa_r+0xc04>
1a007556:	9b02      	ldr	r3, [sp, #8]
1a007558:	2b02      	cmp	r3, #2
1a00755a:	f77f ae49 	ble.w	1a0071f0 <_dtoa_r+0xa80>
1a00755e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a007560:	9309      	str	r3, [sp, #36]	; 0x24
1a007562:	f8cd 8018 	str.w	r8, [sp, #24]
1a007566:	e5ba      	b.n	1a0070de <_dtoa_r+0x96e>
1a007568:	9b02      	ldr	r3, [sp, #8]
1a00756a:	2b02      	cmp	r3, #2
1a00756c:	dcf7      	bgt.n	1a00755e <_dtoa_r+0xdee>
1a00756e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a007570:	e539      	b.n	1a006fe6 <_dtoa_r+0x876>
1a007572:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007574:	3301      	adds	r3, #1
1a007576:	9306      	str	r3, [sp, #24]
1a007578:	f7ff bbfc 	b.w	1a006d74 <_dtoa_r+0x604>
1a00757c:	4b10      	ldr	r3, [pc, #64]	; (1a0075c0 <_dtoa_r+0xe50>)
1a00757e:	9303      	str	r3, [sp, #12]
1a007580:	f7ff b934 	b.w	1a0067ec <_dtoa_r+0x7c>
1a007584:	f43f ac98 	beq.w	1a006eb8 <_dtoa_r+0x748>
1a007588:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00758c:	e48f      	b.n	1a006eae <_dtoa_r+0x73e>
1a00758e:	2400      	movs	r4, #0
1a007590:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a007594:	4621      	mov	r1, r4
1a007596:	4650      	mov	r0, sl
1a007598:	f000 fad2 	bl	1a007b40 <_Balloc>
1a00759c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0075a0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a0075a4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0075a6:	2301      	movs	r3, #1
1a0075a8:	9003      	str	r0, [sp, #12]
1a0075aa:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a0075ae:	930b      	str	r3, [sp, #44]	; 0x2c
1a0075b0:	f7ff bb23 	b.w	1a006bfa <_dtoa_r+0x48a>
1a0075b4:	40240000 	.word	0x40240000
1a0075b8:	3fe00000 	.word	0x3fe00000
1a0075bc:	401c0000 	.word	0x401c0000
1a0075c0:	1a008d60 	.word	0x1a008d60

1a0075c4 <__sfvwrite_r>:
1a0075c4:	6893      	ldr	r3, [r2, #8]
1a0075c6:	2b00      	cmp	r3, #0
1a0075c8:	f000 8102 	beq.w	1a0077d0 <__sfvwrite_r+0x20c>
1a0075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0075d0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a0075d4:	b29b      	uxth	r3, r3
1a0075d6:	460c      	mov	r4, r1
1a0075d8:	0719      	lsls	r1, r3, #28
1a0075da:	b083      	sub	sp, #12
1a0075dc:	4682      	mov	sl, r0
1a0075de:	4690      	mov	r8, r2
1a0075e0:	d535      	bpl.n	1a00764e <__sfvwrite_r+0x8a>
1a0075e2:	6922      	ldr	r2, [r4, #16]
1a0075e4:	b39a      	cbz	r2, 1a00764e <__sfvwrite_r+0x8a>
1a0075e6:	f013 0202 	ands.w	r2, r3, #2
1a0075ea:	f8d8 6000 	ldr.w	r6, [r8]
1a0075ee:	d03d      	beq.n	1a00766c <__sfvwrite_r+0xa8>
1a0075f0:	2700      	movs	r7, #0
1a0075f2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a0075f6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a0075fa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a0078c8 <__sfvwrite_r+0x304>
1a0075fe:	463d      	mov	r5, r7
1a007600:	454d      	cmp	r5, r9
1a007602:	462b      	mov	r3, r5
1a007604:	463a      	mov	r2, r7
1a007606:	bf28      	it	cs
1a007608:	464b      	movcs	r3, r9
1a00760a:	4661      	mov	r1, ip
1a00760c:	4650      	mov	r0, sl
1a00760e:	b1d5      	cbz	r5, 1a007646 <__sfvwrite_r+0x82>
1a007610:	47d8      	blx	fp
1a007612:	2800      	cmp	r0, #0
1a007614:	f340 80d2 	ble.w	1a0077bc <__sfvwrite_r+0x1f8>
1a007618:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00761c:	1a1b      	subs	r3, r3, r0
1a00761e:	4407      	add	r7, r0
1a007620:	1a2d      	subs	r5, r5, r0
1a007622:	f8c8 3008 	str.w	r3, [r8, #8]
1a007626:	2b00      	cmp	r3, #0
1a007628:	f000 80b7 	beq.w	1a00779a <__sfvwrite_r+0x1d6>
1a00762c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a007630:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a007634:	454d      	cmp	r5, r9
1a007636:	462b      	mov	r3, r5
1a007638:	463a      	mov	r2, r7
1a00763a:	bf28      	it	cs
1a00763c:	464b      	movcs	r3, r9
1a00763e:	4661      	mov	r1, ip
1a007640:	4650      	mov	r0, sl
1a007642:	2d00      	cmp	r5, #0
1a007644:	d1e4      	bne.n	1a007610 <__sfvwrite_r+0x4c>
1a007646:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00764a:	3608      	adds	r6, #8
1a00764c:	e7d8      	b.n	1a007600 <__sfvwrite_r+0x3c>
1a00764e:	4621      	mov	r1, r4
1a007650:	4650      	mov	r0, sl
1a007652:	f7fe ff91 	bl	1a006578 <__swsetup_r>
1a007656:	2800      	cmp	r0, #0
1a007658:	f040 8130 	bne.w	1a0078bc <__sfvwrite_r+0x2f8>
1a00765c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007660:	f8d8 6000 	ldr.w	r6, [r8]
1a007664:	b29b      	uxth	r3, r3
1a007666:	f013 0202 	ands.w	r2, r3, #2
1a00766a:	d1c1      	bne.n	1a0075f0 <__sfvwrite_r+0x2c>
1a00766c:	f013 0901 	ands.w	r9, r3, #1
1a007670:	f040 80b0 	bne.w	1a0077d4 <__sfvwrite_r+0x210>
1a007674:	68a7      	ldr	r7, [r4, #8]
1a007676:	6820      	ldr	r0, [r4, #0]
1a007678:	464d      	mov	r5, r9
1a00767a:	2d00      	cmp	r5, #0
1a00767c:	d054      	beq.n	1a007728 <__sfvwrite_r+0x164>
1a00767e:	059a      	lsls	r2, r3, #22
1a007680:	f140 80bc 	bpl.w	1a0077fc <__sfvwrite_r+0x238>
1a007684:	42af      	cmp	r7, r5
1a007686:	46bb      	mov	fp, r7
1a007688:	f200 80e7 	bhi.w	1a00785a <__sfvwrite_r+0x296>
1a00768c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a007690:	d02f      	beq.n	1a0076f2 <__sfvwrite_r+0x12e>
1a007692:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a007696:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a00769a:	eba0 0b01 	sub.w	fp, r0, r1
1a00769e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a0076a2:	1c68      	adds	r0, r5, #1
1a0076a4:	107f      	asrs	r7, r7, #1
1a0076a6:	4458      	add	r0, fp
1a0076a8:	42b8      	cmp	r0, r7
1a0076aa:	463a      	mov	r2, r7
1a0076ac:	bf84      	itt	hi
1a0076ae:	4607      	movhi	r7, r0
1a0076b0:	463a      	movhi	r2, r7
1a0076b2:	055b      	lsls	r3, r3, #21
1a0076b4:	f140 80e9 	bpl.w	1a00788a <__sfvwrite_r+0x2c6>
1a0076b8:	4611      	mov	r1, r2
1a0076ba:	4650      	mov	r0, sl
1a0076bc:	f7fc fce2 	bl	1a004084 <_malloc_r>
1a0076c0:	2800      	cmp	r0, #0
1a0076c2:	f000 80f5 	beq.w	1a0078b0 <__sfvwrite_r+0x2ec>
1a0076c6:	465a      	mov	r2, fp
1a0076c8:	6921      	ldr	r1, [r4, #16]
1a0076ca:	9001      	str	r0, [sp, #4]
1a0076cc:	f7fc ff92 	bl	1a0045f4 <memcpy>
1a0076d0:	89a2      	ldrh	r2, [r4, #12]
1a0076d2:	9b01      	ldr	r3, [sp, #4]
1a0076d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0076d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0076dc:	81a2      	strh	r2, [r4, #12]
1a0076de:	eba7 020b 	sub.w	r2, r7, fp
1a0076e2:	eb03 000b 	add.w	r0, r3, fp
1a0076e6:	6167      	str	r7, [r4, #20]
1a0076e8:	6123      	str	r3, [r4, #16]
1a0076ea:	6020      	str	r0, [r4, #0]
1a0076ec:	60a2      	str	r2, [r4, #8]
1a0076ee:	462f      	mov	r7, r5
1a0076f0:	46ab      	mov	fp, r5
1a0076f2:	465a      	mov	r2, fp
1a0076f4:	4649      	mov	r1, r9
1a0076f6:	f000 f9bb 	bl	1a007a70 <memmove>
1a0076fa:	68a2      	ldr	r2, [r4, #8]
1a0076fc:	6823      	ldr	r3, [r4, #0]
1a0076fe:	1bd2      	subs	r2, r2, r7
1a007700:	445b      	add	r3, fp
1a007702:	462f      	mov	r7, r5
1a007704:	60a2      	str	r2, [r4, #8]
1a007706:	6023      	str	r3, [r4, #0]
1a007708:	2500      	movs	r5, #0
1a00770a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00770e:	1bdb      	subs	r3, r3, r7
1a007710:	44b9      	add	r9, r7
1a007712:	f8c8 3008 	str.w	r3, [r8, #8]
1a007716:	2b00      	cmp	r3, #0
1a007718:	d03f      	beq.n	1a00779a <__sfvwrite_r+0x1d6>
1a00771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00771e:	68a7      	ldr	r7, [r4, #8]
1a007720:	6820      	ldr	r0, [r4, #0]
1a007722:	b29b      	uxth	r3, r3
1a007724:	2d00      	cmp	r5, #0
1a007726:	d1aa      	bne.n	1a00767e <__sfvwrite_r+0xba>
1a007728:	e9d6 9500 	ldrd	r9, r5, [r6]
1a00772c:	3608      	adds	r6, #8
1a00772e:	e7a4      	b.n	1a00767a <__sfvwrite_r+0xb6>
1a007730:	f10b 0308 	add.w	r3, fp, #8
1a007734:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a007738:	469b      	mov	fp, r3
1a00773a:	3308      	adds	r3, #8
1a00773c:	2f00      	cmp	r7, #0
1a00773e:	d0f9      	beq.n	1a007734 <__sfvwrite_r+0x170>
1a007740:	463a      	mov	r2, r7
1a007742:	210a      	movs	r1, #10
1a007744:	4630      	mov	r0, r6
1a007746:	f000 f943 	bl	1a0079d0 <memchr>
1a00774a:	2800      	cmp	r0, #0
1a00774c:	d053      	beq.n	1a0077f6 <__sfvwrite_r+0x232>
1a00774e:	3001      	adds	r0, #1
1a007750:	eba0 0906 	sub.w	r9, r0, r6
1a007754:	464b      	mov	r3, r9
1a007756:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a00775a:	6820      	ldr	r0, [r4, #0]
1a00775c:	42bb      	cmp	r3, r7
1a00775e:	bf28      	it	cs
1a007760:	463b      	movcs	r3, r7
1a007762:	4288      	cmp	r0, r1
1a007764:	d903      	bls.n	1a00776e <__sfvwrite_r+0x1aa>
1a007766:	68a5      	ldr	r5, [r4, #8]
1a007768:	4415      	add	r5, r2
1a00776a:	42ab      	cmp	r3, r5
1a00776c:	dc19      	bgt.n	1a0077a2 <__sfvwrite_r+0x1de>
1a00776e:	429a      	cmp	r2, r3
1a007770:	dc7d      	bgt.n	1a00786e <__sfvwrite_r+0x2aa>
1a007772:	4613      	mov	r3, r2
1a007774:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a007776:	69e1      	ldr	r1, [r4, #28]
1a007778:	4632      	mov	r2, r6
1a00777a:	4650      	mov	r0, sl
1a00777c:	47a8      	blx	r5
1a00777e:	1e05      	subs	r5, r0, #0
1a007780:	dd1c      	ble.n	1a0077bc <__sfvwrite_r+0x1f8>
1a007782:	ebb9 0905 	subs.w	r9, r9, r5
1a007786:	d06b      	beq.n	1a007860 <__sfvwrite_r+0x29c>
1a007788:	2001      	movs	r0, #1
1a00778a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00778e:	1b5b      	subs	r3, r3, r5
1a007790:	442e      	add	r6, r5
1a007792:	1b7f      	subs	r7, r7, r5
1a007794:	f8c8 3008 	str.w	r3, [r8, #8]
1a007798:	bb13      	cbnz	r3, 1a0077e0 <__sfvwrite_r+0x21c>
1a00779a:	2000      	movs	r0, #0
1a00779c:	b003      	add	sp, #12
1a00779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0077a2:	4631      	mov	r1, r6
1a0077a4:	462a      	mov	r2, r5
1a0077a6:	f000 f963 	bl	1a007a70 <memmove>
1a0077aa:	6823      	ldr	r3, [r4, #0]
1a0077ac:	442b      	add	r3, r5
1a0077ae:	6023      	str	r3, [r4, #0]
1a0077b0:	4621      	mov	r1, r4
1a0077b2:	4650      	mov	r0, sl
1a0077b4:	f7fc fa38 	bl	1a003c28 <_fflush_r>
1a0077b8:	2800      	cmp	r0, #0
1a0077ba:	d0e2      	beq.n	1a007782 <__sfvwrite_r+0x1be>
1a0077bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0077c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0077c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0077c8:	81a3      	strh	r3, [r4, #12]
1a0077ca:	b003      	add	sp, #12
1a0077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0077d0:	2000      	movs	r0, #0
1a0077d2:	4770      	bx	lr
1a0077d4:	4633      	mov	r3, r6
1a0077d6:	4691      	mov	r9, r2
1a0077d8:	4610      	mov	r0, r2
1a0077da:	4617      	mov	r7, r2
1a0077dc:	464e      	mov	r6, r9
1a0077de:	469b      	mov	fp, r3
1a0077e0:	2f00      	cmp	r7, #0
1a0077e2:	d0a5      	beq.n	1a007730 <__sfvwrite_r+0x16c>
1a0077e4:	2800      	cmp	r0, #0
1a0077e6:	d1b5      	bne.n	1a007754 <__sfvwrite_r+0x190>
1a0077e8:	463a      	mov	r2, r7
1a0077ea:	210a      	movs	r1, #10
1a0077ec:	4630      	mov	r0, r6
1a0077ee:	f000 f8ef 	bl	1a0079d0 <memchr>
1a0077f2:	2800      	cmp	r0, #0
1a0077f4:	d1ab      	bne.n	1a00774e <__sfvwrite_r+0x18a>
1a0077f6:	1c7b      	adds	r3, r7, #1
1a0077f8:	4699      	mov	r9, r3
1a0077fa:	e7ac      	b.n	1a007756 <__sfvwrite_r+0x192>
1a0077fc:	6923      	ldr	r3, [r4, #16]
1a0077fe:	4283      	cmp	r3, r0
1a007800:	d315      	bcc.n	1a00782e <__sfvwrite_r+0x26a>
1a007802:	6961      	ldr	r1, [r4, #20]
1a007804:	42a9      	cmp	r1, r5
1a007806:	d812      	bhi.n	1a00782e <__sfvwrite_r+0x26a>
1a007808:	4b2e      	ldr	r3, [pc, #184]	; (1a0078c4 <__sfvwrite_r+0x300>)
1a00780a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a00780c:	429d      	cmp	r5, r3
1a00780e:	bf94      	ite	ls
1a007810:	462b      	movls	r3, r5
1a007812:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a007816:	464a      	mov	r2, r9
1a007818:	fb93 f3f1 	sdiv	r3, r3, r1
1a00781c:	4650      	mov	r0, sl
1a00781e:	fb01 f303 	mul.w	r3, r1, r3
1a007822:	69e1      	ldr	r1, [r4, #28]
1a007824:	47b8      	blx	r7
1a007826:	1e07      	subs	r7, r0, #0
1a007828:	ddc8      	ble.n	1a0077bc <__sfvwrite_r+0x1f8>
1a00782a:	1bed      	subs	r5, r5, r7
1a00782c:	e76d      	b.n	1a00770a <__sfvwrite_r+0x146>
1a00782e:	42af      	cmp	r7, r5
1a007830:	bf28      	it	cs
1a007832:	462f      	movcs	r7, r5
1a007834:	463a      	mov	r2, r7
1a007836:	4649      	mov	r1, r9
1a007838:	f000 f91a 	bl	1a007a70 <memmove>
1a00783c:	68a3      	ldr	r3, [r4, #8]
1a00783e:	6822      	ldr	r2, [r4, #0]
1a007840:	1bdb      	subs	r3, r3, r7
1a007842:	443a      	add	r2, r7
1a007844:	60a3      	str	r3, [r4, #8]
1a007846:	6022      	str	r2, [r4, #0]
1a007848:	2b00      	cmp	r3, #0
1a00784a:	d1ee      	bne.n	1a00782a <__sfvwrite_r+0x266>
1a00784c:	4621      	mov	r1, r4
1a00784e:	4650      	mov	r0, sl
1a007850:	f7fc f9ea 	bl	1a003c28 <_fflush_r>
1a007854:	2800      	cmp	r0, #0
1a007856:	d0e8      	beq.n	1a00782a <__sfvwrite_r+0x266>
1a007858:	e7b0      	b.n	1a0077bc <__sfvwrite_r+0x1f8>
1a00785a:	462f      	mov	r7, r5
1a00785c:	46ab      	mov	fp, r5
1a00785e:	e748      	b.n	1a0076f2 <__sfvwrite_r+0x12e>
1a007860:	4621      	mov	r1, r4
1a007862:	4650      	mov	r0, sl
1a007864:	f7fc f9e0 	bl	1a003c28 <_fflush_r>
1a007868:	2800      	cmp	r0, #0
1a00786a:	d08e      	beq.n	1a00778a <__sfvwrite_r+0x1c6>
1a00786c:	e7a6      	b.n	1a0077bc <__sfvwrite_r+0x1f8>
1a00786e:	461a      	mov	r2, r3
1a007870:	4631      	mov	r1, r6
1a007872:	9301      	str	r3, [sp, #4]
1a007874:	f000 f8fc 	bl	1a007a70 <memmove>
1a007878:	9b01      	ldr	r3, [sp, #4]
1a00787a:	68a1      	ldr	r1, [r4, #8]
1a00787c:	6822      	ldr	r2, [r4, #0]
1a00787e:	1ac9      	subs	r1, r1, r3
1a007880:	441a      	add	r2, r3
1a007882:	60a1      	str	r1, [r4, #8]
1a007884:	6022      	str	r2, [r4, #0]
1a007886:	461d      	mov	r5, r3
1a007888:	e77b      	b.n	1a007782 <__sfvwrite_r+0x1be>
1a00788a:	4650      	mov	r0, sl
1a00788c:	f000 fc62 	bl	1a008154 <_realloc_r>
1a007890:	4603      	mov	r3, r0
1a007892:	2800      	cmp	r0, #0
1a007894:	f47f af23 	bne.w	1a0076de <__sfvwrite_r+0x11a>
1a007898:	6921      	ldr	r1, [r4, #16]
1a00789a:	4650      	mov	r0, sl
1a00789c:	f7fc faa6 	bl	1a003dec <_free_r>
1a0078a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0078a4:	220c      	movs	r2, #12
1a0078a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0078aa:	f8ca 2000 	str.w	r2, [sl]
1a0078ae:	e787      	b.n	1a0077c0 <__sfvwrite_r+0x1fc>
1a0078b0:	230c      	movs	r3, #12
1a0078b2:	f8ca 3000 	str.w	r3, [sl]
1a0078b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0078ba:	e781      	b.n	1a0077c0 <__sfvwrite_r+0x1fc>
1a0078bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0078c0:	e76c      	b.n	1a00779c <__sfvwrite_r+0x1d8>
1a0078c2:	bf00      	nop
1a0078c4:	7ffffffe 	.word	0x7ffffffe
1a0078c8:	7ffffc00 	.word	0x7ffffc00

1a0078cc <_localeconv_r>:
1a0078cc:	4800      	ldr	r0, [pc, #0]	; (1a0078d0 <_localeconv_r+0x4>)
1a0078ce:	4770      	bx	lr
1a0078d0:	10000970 	.word	0x10000970

1a0078d4 <__swhatbuf_r>:
1a0078d4:	b570      	push	{r4, r5, r6, lr}
1a0078d6:	460c      	mov	r4, r1
1a0078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0078dc:	2900      	cmp	r1, #0
1a0078de:	b096      	sub	sp, #88	; 0x58
1a0078e0:	4615      	mov	r5, r2
1a0078e2:	461e      	mov	r6, r3
1a0078e4:	db14      	blt.n	1a007910 <__swhatbuf_r+0x3c>
1a0078e6:	466a      	mov	r2, sp
1a0078e8:	f7f8 fd5d 	bl	1a0003a6 <_fstat_r>
1a0078ec:	2800      	cmp	r0, #0
1a0078ee:	db0f      	blt.n	1a007910 <__swhatbuf_r+0x3c>
1a0078f0:	9a01      	ldr	r2, [sp, #4]
1a0078f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0078f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a0078fa:	fab2 f282 	clz	r2, r2
1a0078fe:	0952      	lsrs	r2, r2, #5
1a007900:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a007904:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a007908:	6032      	str	r2, [r6, #0]
1a00790a:	602b      	str	r3, [r5, #0]
1a00790c:	b016      	add	sp, #88	; 0x58
1a00790e:	bd70      	pop	{r4, r5, r6, pc}
1a007910:	89a2      	ldrh	r2, [r4, #12]
1a007912:	2300      	movs	r3, #0
1a007914:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a007918:	6033      	str	r3, [r6, #0]
1a00791a:	d004      	beq.n	1a007926 <__swhatbuf_r+0x52>
1a00791c:	2240      	movs	r2, #64	; 0x40
1a00791e:	4618      	mov	r0, r3
1a007920:	602a      	str	r2, [r5, #0]
1a007922:	b016      	add	sp, #88	; 0x58
1a007924:	bd70      	pop	{r4, r5, r6, pc}
1a007926:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00792a:	602b      	str	r3, [r5, #0]
1a00792c:	b016      	add	sp, #88	; 0x58
1a00792e:	bd70      	pop	{r4, r5, r6, pc}

1a007930 <__smakebuf_r>:
1a007930:	898a      	ldrh	r2, [r1, #12]
1a007932:	0792      	lsls	r2, r2, #30
1a007934:	460b      	mov	r3, r1
1a007936:	d506      	bpl.n	1a007946 <__smakebuf_r+0x16>
1a007938:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a00793c:	2101      	movs	r1, #1
1a00793e:	601a      	str	r2, [r3, #0]
1a007940:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a007944:	4770      	bx	lr
1a007946:	b570      	push	{r4, r5, r6, lr}
1a007948:	b082      	sub	sp, #8
1a00794a:	ab01      	add	r3, sp, #4
1a00794c:	466a      	mov	r2, sp
1a00794e:	460c      	mov	r4, r1
1a007950:	4606      	mov	r6, r0
1a007952:	f7ff ffbf 	bl	1a0078d4 <__swhatbuf_r>
1a007956:	9900      	ldr	r1, [sp, #0]
1a007958:	4605      	mov	r5, r0
1a00795a:	4630      	mov	r0, r6
1a00795c:	f7fc fb92 	bl	1a004084 <_malloc_r>
1a007960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007964:	b170      	cbz	r0, 1a007984 <__smakebuf_r+0x54>
1a007966:	4916      	ldr	r1, [pc, #88]	; (1a0079c0 <__smakebuf_r+0x90>)
1a007968:	63f1      	str	r1, [r6, #60]	; 0x3c
1a00796a:	9a01      	ldr	r2, [sp, #4]
1a00796c:	9900      	ldr	r1, [sp, #0]
1a00796e:	6020      	str	r0, [r4, #0]
1a007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007974:	81a3      	strh	r3, [r4, #12]
1a007976:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00797a:	b98a      	cbnz	r2, 1a0079a0 <__smakebuf_r+0x70>
1a00797c:	432b      	orrs	r3, r5
1a00797e:	81a3      	strh	r3, [r4, #12]
1a007980:	b002      	add	sp, #8
1a007982:	bd70      	pop	{r4, r5, r6, pc}
1a007984:	059a      	lsls	r2, r3, #22
1a007986:	d4fb      	bmi.n	1a007980 <__smakebuf_r+0x50>
1a007988:	f023 0303 	bic.w	r3, r3, #3
1a00798c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a007990:	f043 0302 	orr.w	r3, r3, #2
1a007994:	2101      	movs	r1, #1
1a007996:	81a3      	strh	r3, [r4, #12]
1a007998:	6022      	str	r2, [r4, #0]
1a00799a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a00799e:	e7ef      	b.n	1a007980 <__smakebuf_r+0x50>
1a0079a0:	4630      	mov	r0, r6
1a0079a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0079a6:	f7f8 fd03 	bl	1a0003b0 <_isatty_r>
1a0079aa:	b910      	cbnz	r0, 1a0079b2 <__smakebuf_r+0x82>
1a0079ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0079b0:	e7e4      	b.n	1a00797c <__smakebuf_r+0x4c>
1a0079b2:	89a3      	ldrh	r3, [r4, #12]
1a0079b4:	f023 0303 	bic.w	r3, r3, #3
1a0079b8:	f043 0301 	orr.w	r3, r3, #1
1a0079bc:	b21b      	sxth	r3, r3
1a0079be:	e7dd      	b.n	1a00797c <__smakebuf_r+0x4c>
1a0079c0:	1a003cd5 	.word	0x1a003cd5
1a0079c4:	ffffffff 	.word	0xffffffff
1a0079c8:	ffffffff 	.word	0xffffffff
1a0079cc:	ffffffff 	.word	0xffffffff

1a0079d0 <memchr>:
1a0079d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0079d4:	2a10      	cmp	r2, #16
1a0079d6:	db2b      	blt.n	1a007a30 <memchr+0x60>
1a0079d8:	f010 0f07 	tst.w	r0, #7
1a0079dc:	d008      	beq.n	1a0079f0 <memchr+0x20>
1a0079de:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0079e2:	3a01      	subs	r2, #1
1a0079e4:	428b      	cmp	r3, r1
1a0079e6:	d02d      	beq.n	1a007a44 <memchr+0x74>
1a0079e8:	f010 0f07 	tst.w	r0, #7
1a0079ec:	b342      	cbz	r2, 1a007a40 <memchr+0x70>
1a0079ee:	d1f6      	bne.n	1a0079de <memchr+0xe>
1a0079f0:	b4f0      	push	{r4, r5, r6, r7}
1a0079f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0079f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0079fa:	f022 0407 	bic.w	r4, r2, #7
1a0079fe:	f07f 0700 	mvns.w	r7, #0
1a007a02:	2300      	movs	r3, #0
1a007a04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a007a08:	3c08      	subs	r4, #8
1a007a0a:	ea85 0501 	eor.w	r5, r5, r1
1a007a0e:	ea86 0601 	eor.w	r6, r6, r1
1a007a12:	fa85 f547 	uadd8	r5, r5, r7
1a007a16:	faa3 f587 	sel	r5, r3, r7
1a007a1a:	fa86 f647 	uadd8	r6, r6, r7
1a007a1e:	faa5 f687 	sel	r6, r5, r7
1a007a22:	b98e      	cbnz	r6, 1a007a48 <memchr+0x78>
1a007a24:	d1ee      	bne.n	1a007a04 <memchr+0x34>
1a007a26:	bcf0      	pop	{r4, r5, r6, r7}
1a007a28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007a2c:	f002 0207 	and.w	r2, r2, #7
1a007a30:	b132      	cbz	r2, 1a007a40 <memchr+0x70>
1a007a32:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007a36:	3a01      	subs	r2, #1
1a007a38:	ea83 0301 	eor.w	r3, r3, r1
1a007a3c:	b113      	cbz	r3, 1a007a44 <memchr+0x74>
1a007a3e:	d1f8      	bne.n	1a007a32 <memchr+0x62>
1a007a40:	2000      	movs	r0, #0
1a007a42:	4770      	bx	lr
1a007a44:	3801      	subs	r0, #1
1a007a46:	4770      	bx	lr
1a007a48:	2d00      	cmp	r5, #0
1a007a4a:	bf06      	itte	eq
1a007a4c:	4635      	moveq	r5, r6
1a007a4e:	3803      	subeq	r0, #3
1a007a50:	3807      	subne	r0, #7
1a007a52:	f015 0f01 	tst.w	r5, #1
1a007a56:	d107      	bne.n	1a007a68 <memchr+0x98>
1a007a58:	3001      	adds	r0, #1
1a007a5a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a007a5e:	bf02      	ittt	eq
1a007a60:	3001      	addeq	r0, #1
1a007a62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007a66:	3001      	addeq	r0, #1
1a007a68:	bcf0      	pop	{r4, r5, r6, r7}
1a007a6a:	3801      	subs	r0, #1
1a007a6c:	4770      	bx	lr
1a007a6e:	bf00      	nop

1a007a70 <memmove>:
1a007a70:	4288      	cmp	r0, r1
1a007a72:	b4f0      	push	{r4, r5, r6, r7}
1a007a74:	d90d      	bls.n	1a007a92 <memmove+0x22>
1a007a76:	188b      	adds	r3, r1, r2
1a007a78:	4283      	cmp	r3, r0
1a007a7a:	d90a      	bls.n	1a007a92 <memmove+0x22>
1a007a7c:	1884      	adds	r4, r0, r2
1a007a7e:	b132      	cbz	r2, 1a007a8e <memmove+0x1e>
1a007a80:	4622      	mov	r2, r4
1a007a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a007a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a007a8a:	4299      	cmp	r1, r3
1a007a8c:	d1f9      	bne.n	1a007a82 <memmove+0x12>
1a007a8e:	bcf0      	pop	{r4, r5, r6, r7}
1a007a90:	4770      	bx	lr
1a007a92:	2a0f      	cmp	r2, #15
1a007a94:	d80e      	bhi.n	1a007ab4 <memmove+0x44>
1a007a96:	4603      	mov	r3, r0
1a007a98:	1e54      	subs	r4, r2, #1
1a007a9a:	2a00      	cmp	r2, #0
1a007a9c:	d0f7      	beq.n	1a007a8e <memmove+0x1e>
1a007a9e:	3401      	adds	r4, #1
1a007aa0:	440c      	add	r4, r1
1a007aa2:	3b01      	subs	r3, #1
1a007aa4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a007aa8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a007aac:	42a1      	cmp	r1, r4
1a007aae:	d1f9      	bne.n	1a007aa4 <memmove+0x34>
1a007ab0:	bcf0      	pop	{r4, r5, r6, r7}
1a007ab2:	4770      	bx	lr
1a007ab4:	ea40 0301 	orr.w	r3, r0, r1
1a007ab8:	079b      	lsls	r3, r3, #30
1a007aba:	d13b      	bne.n	1a007b34 <memmove+0xc4>
1a007abc:	f1a2 0710 	sub.w	r7, r2, #16
1a007ac0:	093f      	lsrs	r7, r7, #4
1a007ac2:	f101 0620 	add.w	r6, r1, #32
1a007ac6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a007aca:	f101 0310 	add.w	r3, r1, #16
1a007ace:	f100 0410 	add.w	r4, r0, #16
1a007ad2:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a007ad6:	f844 5c10 	str.w	r5, [r4, #-16]
1a007ada:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a007ade:	f844 5c0c 	str.w	r5, [r4, #-12]
1a007ae2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a007ae6:	f844 5c08 	str.w	r5, [r4, #-8]
1a007aea:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a007aee:	f844 5c04 	str.w	r5, [r4, #-4]
1a007af2:	3310      	adds	r3, #16
1a007af4:	42b3      	cmp	r3, r6
1a007af6:	f104 0410 	add.w	r4, r4, #16
1a007afa:	d1ea      	bne.n	1a007ad2 <memmove+0x62>
1a007afc:	1c7b      	adds	r3, r7, #1
1a007afe:	011b      	lsls	r3, r3, #4
1a007b00:	f012 0f0c 	tst.w	r2, #12
1a007b04:	4419      	add	r1, r3
1a007b06:	f002 050f 	and.w	r5, r2, #15
1a007b0a:	4403      	add	r3, r0
1a007b0c:	d015      	beq.n	1a007b3a <memmove+0xca>
1a007b0e:	3d04      	subs	r5, #4
1a007b10:	08ad      	lsrs	r5, r5, #2
1a007b12:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a007b16:	1f1c      	subs	r4, r3, #4
1a007b18:	460e      	mov	r6, r1
1a007b1a:	f856 7b04 	ldr.w	r7, [r6], #4
1a007b1e:	f844 7f04 	str.w	r7, [r4, #4]!
1a007b22:	4564      	cmp	r4, ip
1a007b24:	d1f9      	bne.n	1a007b1a <memmove+0xaa>
1a007b26:	3501      	adds	r5, #1
1a007b28:	00ad      	lsls	r5, r5, #2
1a007b2a:	442b      	add	r3, r5
1a007b2c:	4429      	add	r1, r5
1a007b2e:	f002 0203 	and.w	r2, r2, #3
1a007b32:	e7b1      	b.n	1a007a98 <memmove+0x28>
1a007b34:	1e54      	subs	r4, r2, #1
1a007b36:	4603      	mov	r3, r0
1a007b38:	e7b1      	b.n	1a007a9e <memmove+0x2e>
1a007b3a:	462a      	mov	r2, r5
1a007b3c:	e7ac      	b.n	1a007a98 <memmove+0x28>
1a007b3e:	bf00      	nop

1a007b40 <_Balloc>:
1a007b40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007b42:	b570      	push	{r4, r5, r6, lr}
1a007b44:	4605      	mov	r5, r0
1a007b46:	460c      	mov	r4, r1
1a007b48:	b14b      	cbz	r3, 1a007b5e <_Balloc+0x1e>
1a007b4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a007b4e:	b180      	cbz	r0, 1a007b72 <_Balloc+0x32>
1a007b50:	6802      	ldr	r2, [r0, #0]
1a007b52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a007b56:	2300      	movs	r3, #0
1a007b58:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a007b5c:	bd70      	pop	{r4, r5, r6, pc}
1a007b5e:	2221      	movs	r2, #33	; 0x21
1a007b60:	2104      	movs	r1, #4
1a007b62:	f000 fd63 	bl	1a00862c <_calloc_r>
1a007b66:	4603      	mov	r3, r0
1a007b68:	64e8      	str	r0, [r5, #76]	; 0x4c
1a007b6a:	2800      	cmp	r0, #0
1a007b6c:	d1ed      	bne.n	1a007b4a <_Balloc+0xa>
1a007b6e:	2000      	movs	r0, #0
1a007b70:	bd70      	pop	{r4, r5, r6, pc}
1a007b72:	2101      	movs	r1, #1
1a007b74:	fa01 f604 	lsl.w	r6, r1, r4
1a007b78:	1d72      	adds	r2, r6, #5
1a007b7a:	4628      	mov	r0, r5
1a007b7c:	0092      	lsls	r2, r2, #2
1a007b7e:	f000 fd55 	bl	1a00862c <_calloc_r>
1a007b82:	2800      	cmp	r0, #0
1a007b84:	d0f3      	beq.n	1a007b6e <_Balloc+0x2e>
1a007b86:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a007b8a:	e7e4      	b.n	1a007b56 <_Balloc+0x16>

1a007b8c <_Bfree>:
1a007b8c:	b131      	cbz	r1, 1a007b9c <_Bfree+0x10>
1a007b8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007b90:	684a      	ldr	r2, [r1, #4]
1a007b92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a007b96:	6008      	str	r0, [r1, #0]
1a007b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a007b9c:	4770      	bx	lr
1a007b9e:	bf00      	nop

1a007ba0 <__multadd>:
1a007ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007ba2:	690c      	ldr	r4, [r1, #16]
1a007ba4:	b083      	sub	sp, #12
1a007ba6:	460d      	mov	r5, r1
1a007ba8:	4606      	mov	r6, r0
1a007baa:	f101 0c14 	add.w	ip, r1, #20
1a007bae:	2700      	movs	r7, #0
1a007bb0:	f8dc 0000 	ldr.w	r0, [ip]
1a007bb4:	b281      	uxth	r1, r0
1a007bb6:	fb02 3301 	mla	r3, r2, r1, r3
1a007bba:	0c19      	lsrs	r1, r3, #16
1a007bbc:	0c00      	lsrs	r0, r0, #16
1a007bbe:	fb02 1000 	mla	r0, r2, r0, r1
1a007bc2:	b29b      	uxth	r3, r3
1a007bc4:	3701      	adds	r7, #1
1a007bc6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a007bca:	42bc      	cmp	r4, r7
1a007bcc:	f84c 3b04 	str.w	r3, [ip], #4
1a007bd0:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a007bd4:	dcec      	bgt.n	1a007bb0 <__multadd+0x10>
1a007bd6:	b13b      	cbz	r3, 1a007be8 <__multadd+0x48>
1a007bd8:	68aa      	ldr	r2, [r5, #8]
1a007bda:	42a2      	cmp	r2, r4
1a007bdc:	dd07      	ble.n	1a007bee <__multadd+0x4e>
1a007bde:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a007be2:	3401      	adds	r4, #1
1a007be4:	6153      	str	r3, [r2, #20]
1a007be6:	612c      	str	r4, [r5, #16]
1a007be8:	4628      	mov	r0, r5
1a007bea:	b003      	add	sp, #12
1a007bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007bee:	6869      	ldr	r1, [r5, #4]
1a007bf0:	9301      	str	r3, [sp, #4]
1a007bf2:	3101      	adds	r1, #1
1a007bf4:	4630      	mov	r0, r6
1a007bf6:	f7ff ffa3 	bl	1a007b40 <_Balloc>
1a007bfa:	692a      	ldr	r2, [r5, #16]
1a007bfc:	3202      	adds	r2, #2
1a007bfe:	f105 010c 	add.w	r1, r5, #12
1a007c02:	4607      	mov	r7, r0
1a007c04:	0092      	lsls	r2, r2, #2
1a007c06:	300c      	adds	r0, #12
1a007c08:	f7fc fcf4 	bl	1a0045f4 <memcpy>
1a007c0c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a007c0e:	6869      	ldr	r1, [r5, #4]
1a007c10:	9b01      	ldr	r3, [sp, #4]
1a007c12:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a007c16:	6028      	str	r0, [r5, #0]
1a007c18:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a007c1c:	463d      	mov	r5, r7
1a007c1e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a007c22:	3401      	adds	r4, #1
1a007c24:	6153      	str	r3, [r2, #20]
1a007c26:	612c      	str	r4, [r5, #16]
1a007c28:	e7de      	b.n	1a007be8 <__multadd+0x48>
1a007c2a:	bf00      	nop

1a007c2c <__hi0bits>:
1a007c2c:	0c02      	lsrs	r2, r0, #16
1a007c2e:	0412      	lsls	r2, r2, #16
1a007c30:	4603      	mov	r3, r0
1a007c32:	b9ca      	cbnz	r2, 1a007c68 <__hi0bits+0x3c>
1a007c34:	0403      	lsls	r3, r0, #16
1a007c36:	2010      	movs	r0, #16
1a007c38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a007c3c:	bf04      	itt	eq
1a007c3e:	021b      	lsleq	r3, r3, #8
1a007c40:	3008      	addeq	r0, #8
1a007c42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a007c46:	bf04      	itt	eq
1a007c48:	011b      	lsleq	r3, r3, #4
1a007c4a:	3004      	addeq	r0, #4
1a007c4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a007c50:	bf04      	itt	eq
1a007c52:	009b      	lsleq	r3, r3, #2
1a007c54:	3002      	addeq	r0, #2
1a007c56:	2b00      	cmp	r3, #0
1a007c58:	db05      	blt.n	1a007c66 <__hi0bits+0x3a>
1a007c5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a007c5e:	f100 0001 	add.w	r0, r0, #1
1a007c62:	bf08      	it	eq
1a007c64:	2020      	moveq	r0, #32
1a007c66:	4770      	bx	lr
1a007c68:	2000      	movs	r0, #0
1a007c6a:	e7e5      	b.n	1a007c38 <__hi0bits+0xc>

1a007c6c <__lo0bits>:
1a007c6c:	6803      	ldr	r3, [r0, #0]
1a007c6e:	f013 0207 	ands.w	r2, r3, #7
1a007c72:	4601      	mov	r1, r0
1a007c74:	d007      	beq.n	1a007c86 <__lo0bits+0x1a>
1a007c76:	07da      	lsls	r2, r3, #31
1a007c78:	d420      	bmi.n	1a007cbc <__lo0bits+0x50>
1a007c7a:	0798      	lsls	r0, r3, #30
1a007c7c:	d522      	bpl.n	1a007cc4 <__lo0bits+0x58>
1a007c7e:	085b      	lsrs	r3, r3, #1
1a007c80:	600b      	str	r3, [r1, #0]
1a007c82:	2001      	movs	r0, #1
1a007c84:	4770      	bx	lr
1a007c86:	b298      	uxth	r0, r3
1a007c88:	b9b0      	cbnz	r0, 1a007cb8 <__lo0bits+0x4c>
1a007c8a:	0c1b      	lsrs	r3, r3, #16
1a007c8c:	2010      	movs	r0, #16
1a007c8e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a007c92:	bf04      	itt	eq
1a007c94:	0a1b      	lsreq	r3, r3, #8
1a007c96:	3008      	addeq	r0, #8
1a007c98:	071a      	lsls	r2, r3, #28
1a007c9a:	bf04      	itt	eq
1a007c9c:	091b      	lsreq	r3, r3, #4
1a007c9e:	3004      	addeq	r0, #4
1a007ca0:	079a      	lsls	r2, r3, #30
1a007ca2:	bf04      	itt	eq
1a007ca4:	089b      	lsreq	r3, r3, #2
1a007ca6:	3002      	addeq	r0, #2
1a007ca8:	07da      	lsls	r2, r3, #31
1a007caa:	d403      	bmi.n	1a007cb4 <__lo0bits+0x48>
1a007cac:	085b      	lsrs	r3, r3, #1
1a007cae:	f100 0001 	add.w	r0, r0, #1
1a007cb2:	d005      	beq.n	1a007cc0 <__lo0bits+0x54>
1a007cb4:	600b      	str	r3, [r1, #0]
1a007cb6:	4770      	bx	lr
1a007cb8:	4610      	mov	r0, r2
1a007cba:	e7e8      	b.n	1a007c8e <__lo0bits+0x22>
1a007cbc:	2000      	movs	r0, #0
1a007cbe:	4770      	bx	lr
1a007cc0:	2020      	movs	r0, #32
1a007cc2:	4770      	bx	lr
1a007cc4:	089b      	lsrs	r3, r3, #2
1a007cc6:	600b      	str	r3, [r1, #0]
1a007cc8:	2002      	movs	r0, #2
1a007cca:	4770      	bx	lr

1a007ccc <__i2b>:
1a007ccc:	b510      	push	{r4, lr}
1a007cce:	460c      	mov	r4, r1
1a007cd0:	2101      	movs	r1, #1
1a007cd2:	f7ff ff35 	bl	1a007b40 <_Balloc>
1a007cd6:	2201      	movs	r2, #1
1a007cd8:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a007cdc:	bd10      	pop	{r4, pc}
1a007cde:	bf00      	nop

1a007ce0 <__multiply>:
1a007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007ce4:	690e      	ldr	r6, [r1, #16]
1a007ce6:	6917      	ldr	r7, [r2, #16]
1a007ce8:	42be      	cmp	r6, r7
1a007cea:	b083      	sub	sp, #12
1a007cec:	460c      	mov	r4, r1
1a007cee:	4615      	mov	r5, r2
1a007cf0:	db05      	blt.n	1a007cfe <__multiply+0x1e>
1a007cf2:	463a      	mov	r2, r7
1a007cf4:	462b      	mov	r3, r5
1a007cf6:	4637      	mov	r7, r6
1a007cf8:	460d      	mov	r5, r1
1a007cfa:	4616      	mov	r6, r2
1a007cfc:	461c      	mov	r4, r3
1a007cfe:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a007d02:	eb07 0806 	add.w	r8, r7, r6
1a007d06:	4543      	cmp	r3, r8
1a007d08:	bfb8      	it	lt
1a007d0a:	3101      	addlt	r1, #1
1a007d0c:	f7ff ff18 	bl	1a007b40 <_Balloc>
1a007d10:	f100 0a14 	add.w	sl, r0, #20
1a007d14:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a007d18:	45ca      	cmp	sl, r9
1a007d1a:	9000      	str	r0, [sp, #0]
1a007d1c:	d205      	bcs.n	1a007d2a <__multiply+0x4a>
1a007d1e:	4653      	mov	r3, sl
1a007d20:	2100      	movs	r1, #0
1a007d22:	f843 1b04 	str.w	r1, [r3], #4
1a007d26:	4599      	cmp	r9, r3
1a007d28:	d8fb      	bhi.n	1a007d22 <__multiply+0x42>
1a007d2a:	f104 0e14 	add.w	lr, r4, #20
1a007d2e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a007d32:	f105 0314 	add.w	r3, r5, #20
1a007d36:	45de      	cmp	lr, fp
1a007d38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a007d3c:	d253      	bcs.n	1a007de6 <__multiply+0x106>
1a007d3e:	f8cd 8004 	str.w	r8, [sp, #4]
1a007d42:	4698      	mov	r8, r3
1a007d44:	e005      	b.n	1a007d52 <__multiply+0x72>
1a007d46:	0c09      	lsrs	r1, r1, #16
1a007d48:	d128      	bne.n	1a007d9c <__multiply+0xbc>
1a007d4a:	45f3      	cmp	fp, lr
1a007d4c:	f10a 0a04 	add.w	sl, sl, #4
1a007d50:	d947      	bls.n	1a007de2 <__multiply+0x102>
1a007d52:	f85e 1b04 	ldr.w	r1, [lr], #4
1a007d56:	b28e      	uxth	r6, r1
1a007d58:	2e00      	cmp	r6, #0
1a007d5a:	d0f4      	beq.n	1a007d46 <__multiply+0x66>
1a007d5c:	4645      	mov	r5, r8
1a007d5e:	4654      	mov	r4, sl
1a007d60:	2300      	movs	r3, #0
1a007d62:	f855 1b04 	ldr.w	r1, [r5], #4
1a007d66:	6820      	ldr	r0, [r4, #0]
1a007d68:	b28a      	uxth	r2, r1
1a007d6a:	fa1f fc80 	uxth.w	ip, r0
1a007d6e:	fb06 c202 	mla	r2, r6, r2, ip
1a007d72:	0c09      	lsrs	r1, r1, #16
1a007d74:	0c00      	lsrs	r0, r0, #16
1a007d76:	4413      	add	r3, r2
1a007d78:	fb06 0201 	mla	r2, r6, r1, r0
1a007d7c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a007d80:	b29b      	uxth	r3, r3
1a007d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007d86:	42af      	cmp	r7, r5
1a007d88:	f844 3b04 	str.w	r3, [r4], #4
1a007d8c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a007d90:	d8e7      	bhi.n	1a007d62 <__multiply+0x82>
1a007d92:	6023      	str	r3, [r4, #0]
1a007d94:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a007d98:	0c09      	lsrs	r1, r1, #16
1a007d9a:	d0d6      	beq.n	1a007d4a <__multiply+0x6a>
1a007d9c:	f8da 3000 	ldr.w	r3, [sl]
1a007da0:	4640      	mov	r0, r8
1a007da2:	461a      	mov	r2, r3
1a007da4:	4654      	mov	r4, sl
1a007da6:	f04f 0c00 	mov.w	ip, #0
1a007daa:	8805      	ldrh	r5, [r0, #0]
1a007dac:	0c12      	lsrs	r2, r2, #16
1a007dae:	fb01 2205 	mla	r2, r1, r5, r2
1a007db2:	4494      	add	ip, r2
1a007db4:	b29b      	uxth	r3, r3
1a007db6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a007dba:	f844 3b04 	str.w	r3, [r4], #4
1a007dbe:	f850 3b04 	ldr.w	r3, [r0], #4
1a007dc2:	6822      	ldr	r2, [r4, #0]
1a007dc4:	0c1b      	lsrs	r3, r3, #16
1a007dc6:	b295      	uxth	r5, r2
1a007dc8:	fb01 5303 	mla	r3, r1, r3, r5
1a007dcc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a007dd0:	4287      	cmp	r7, r0
1a007dd2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a007dd6:	d8e8      	bhi.n	1a007daa <__multiply+0xca>
1a007dd8:	45f3      	cmp	fp, lr
1a007dda:	6023      	str	r3, [r4, #0]
1a007ddc:	f10a 0a04 	add.w	sl, sl, #4
1a007de0:	d8b7      	bhi.n	1a007d52 <__multiply+0x72>
1a007de2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a007de6:	f1b8 0f00 	cmp.w	r8, #0
1a007dea:	dd0b      	ble.n	1a007e04 <__multiply+0x124>
1a007dec:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a007df0:	f1a9 0904 	sub.w	r9, r9, #4
1a007df4:	b11b      	cbz	r3, 1a007dfe <__multiply+0x11e>
1a007df6:	e005      	b.n	1a007e04 <__multiply+0x124>
1a007df8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a007dfc:	b913      	cbnz	r3, 1a007e04 <__multiply+0x124>
1a007dfe:	f1b8 0801 	subs.w	r8, r8, #1
1a007e02:	d1f9      	bne.n	1a007df8 <__multiply+0x118>
1a007e04:	9800      	ldr	r0, [sp, #0]
1a007e06:	f8c0 8010 	str.w	r8, [r0, #16]
1a007e0a:	b003      	add	sp, #12
1a007e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a007e10 <__pow5mult>:
1a007e10:	f012 0303 	ands.w	r3, r2, #3
1a007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007e18:	4614      	mov	r4, r2
1a007e1a:	4607      	mov	r7, r0
1a007e1c:	d12e      	bne.n	1a007e7c <__pow5mult+0x6c>
1a007e1e:	460d      	mov	r5, r1
1a007e20:	10a4      	asrs	r4, r4, #2
1a007e22:	d01c      	beq.n	1a007e5e <__pow5mult+0x4e>
1a007e24:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a007e26:	b396      	cbz	r6, 1a007e8e <__pow5mult+0x7e>
1a007e28:	07e3      	lsls	r3, r4, #31
1a007e2a:	f04f 0800 	mov.w	r8, #0
1a007e2e:	d406      	bmi.n	1a007e3e <__pow5mult+0x2e>
1a007e30:	1064      	asrs	r4, r4, #1
1a007e32:	d014      	beq.n	1a007e5e <__pow5mult+0x4e>
1a007e34:	6830      	ldr	r0, [r6, #0]
1a007e36:	b1a8      	cbz	r0, 1a007e64 <__pow5mult+0x54>
1a007e38:	4606      	mov	r6, r0
1a007e3a:	07e3      	lsls	r3, r4, #31
1a007e3c:	d5f8      	bpl.n	1a007e30 <__pow5mult+0x20>
1a007e3e:	4632      	mov	r2, r6
1a007e40:	4629      	mov	r1, r5
1a007e42:	4638      	mov	r0, r7
1a007e44:	f7ff ff4c 	bl	1a007ce0 <__multiply>
1a007e48:	b1b5      	cbz	r5, 1a007e78 <__pow5mult+0x68>
1a007e4a:	686a      	ldr	r2, [r5, #4]
1a007e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a007e4e:	1064      	asrs	r4, r4, #1
1a007e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007e54:	6029      	str	r1, [r5, #0]
1a007e56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a007e5a:	4605      	mov	r5, r0
1a007e5c:	d1ea      	bne.n	1a007e34 <__pow5mult+0x24>
1a007e5e:	4628      	mov	r0, r5
1a007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007e64:	4632      	mov	r2, r6
1a007e66:	4631      	mov	r1, r6
1a007e68:	4638      	mov	r0, r7
1a007e6a:	f7ff ff39 	bl	1a007ce0 <__multiply>
1a007e6e:	6030      	str	r0, [r6, #0]
1a007e70:	f8c0 8000 	str.w	r8, [r0]
1a007e74:	4606      	mov	r6, r0
1a007e76:	e7e0      	b.n	1a007e3a <__pow5mult+0x2a>
1a007e78:	4605      	mov	r5, r0
1a007e7a:	e7d9      	b.n	1a007e30 <__pow5mult+0x20>
1a007e7c:	3b01      	subs	r3, #1
1a007e7e:	4a0b      	ldr	r2, [pc, #44]	; (1a007eac <__pow5mult+0x9c>)
1a007e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a007e84:	2300      	movs	r3, #0
1a007e86:	f7ff fe8b 	bl	1a007ba0 <__multadd>
1a007e8a:	4605      	mov	r5, r0
1a007e8c:	e7c8      	b.n	1a007e20 <__pow5mult+0x10>
1a007e8e:	2101      	movs	r1, #1
1a007e90:	4638      	mov	r0, r7
1a007e92:	f7ff fe55 	bl	1a007b40 <_Balloc>
1a007e96:	f240 2371 	movw	r3, #625	; 0x271
1a007e9a:	6143      	str	r3, [r0, #20]
1a007e9c:	2201      	movs	r2, #1
1a007e9e:	2300      	movs	r3, #0
1a007ea0:	6102      	str	r2, [r0, #16]
1a007ea2:	4606      	mov	r6, r0
1a007ea4:	64b8      	str	r0, [r7, #72]	; 0x48
1a007ea6:	6003      	str	r3, [r0, #0]
1a007ea8:	e7be      	b.n	1a007e28 <__pow5mult+0x18>
1a007eaa:	bf00      	nop
1a007eac:	1a008e60 	.word	0x1a008e60

1a007eb0 <__lshift>:
1a007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007eb4:	690e      	ldr	r6, [r1, #16]
1a007eb6:	460d      	mov	r5, r1
1a007eb8:	ea4f 1962 	mov.w	r9, r2, asr #5
1a007ebc:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a007ec0:	444e      	add	r6, r9
1a007ec2:	1c74      	adds	r4, r6, #1
1a007ec4:	429c      	cmp	r4, r3
1a007ec6:	4690      	mov	r8, r2
1a007ec8:	4607      	mov	r7, r0
1a007eca:	dd04      	ble.n	1a007ed6 <__lshift+0x26>
1a007ecc:	005b      	lsls	r3, r3, #1
1a007ece:	429c      	cmp	r4, r3
1a007ed0:	f101 0101 	add.w	r1, r1, #1
1a007ed4:	dcfa      	bgt.n	1a007ecc <__lshift+0x1c>
1a007ed6:	4638      	mov	r0, r7
1a007ed8:	f7ff fe32 	bl	1a007b40 <_Balloc>
1a007edc:	f1b9 0f00 	cmp.w	r9, #0
1a007ee0:	f100 0c14 	add.w	ip, r0, #20
1a007ee4:	dd0e      	ble.n	1a007f04 <__lshift+0x54>
1a007ee6:	f109 0905 	add.w	r9, r9, #5
1a007eea:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a007eee:	eb00 0109 	add.w	r1, r0, r9
1a007ef2:	4663      	mov	r3, ip
1a007ef4:	2200      	movs	r2, #0
1a007ef6:	f843 2b04 	str.w	r2, [r3], #4
1a007efa:	428b      	cmp	r3, r1
1a007efc:	d1fb      	bne.n	1a007ef6 <__lshift+0x46>
1a007efe:	f1a9 0914 	sub.w	r9, r9, #20
1a007f02:	44cc      	add	ip, r9
1a007f04:	6929      	ldr	r1, [r5, #16]
1a007f06:	f105 0314 	add.w	r3, r5, #20
1a007f0a:	f018 081f 	ands.w	r8, r8, #31
1a007f0e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a007f12:	d01d      	beq.n	1a007f50 <__lshift+0xa0>
1a007f14:	f1c8 0920 	rsb	r9, r8, #32
1a007f18:	2200      	movs	r2, #0
1a007f1a:	6819      	ldr	r1, [r3, #0]
1a007f1c:	fa01 f108 	lsl.w	r1, r1, r8
1a007f20:	4311      	orrs	r1, r2
1a007f22:	f84c 1b04 	str.w	r1, [ip], #4
1a007f26:	f853 2b04 	ldr.w	r2, [r3], #4
1a007f2a:	4573      	cmp	r3, lr
1a007f2c:	fa22 f209 	lsr.w	r2, r2, r9
1a007f30:	d3f3      	bcc.n	1a007f1a <__lshift+0x6a>
1a007f32:	f8cc 2000 	str.w	r2, [ip]
1a007f36:	2a00      	cmp	r2, #0
1a007f38:	bf18      	it	ne
1a007f3a:	4626      	movne	r6, r4
1a007f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a007f3e:	686a      	ldr	r2, [r5, #4]
1a007f40:	6106      	str	r6, [r0, #16]
1a007f42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007f46:	6029      	str	r1, [r5, #0]
1a007f48:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a007f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007f50:	f1ac 0c04 	sub.w	ip, ip, #4
1a007f54:	f853 2b04 	ldr.w	r2, [r3], #4
1a007f58:	f84c 2f04 	str.w	r2, [ip, #4]!
1a007f5c:	459e      	cmp	lr, r3
1a007f5e:	d8f9      	bhi.n	1a007f54 <__lshift+0xa4>
1a007f60:	e7ec      	b.n	1a007f3c <__lshift+0x8c>
1a007f62:	bf00      	nop

1a007f64 <__mcmp>:
1a007f64:	b430      	push	{r4, r5}
1a007f66:	690b      	ldr	r3, [r1, #16]
1a007f68:	4605      	mov	r5, r0
1a007f6a:	6900      	ldr	r0, [r0, #16]
1a007f6c:	1ac0      	subs	r0, r0, r3
1a007f6e:	d110      	bne.n	1a007f92 <__mcmp+0x2e>
1a007f70:	009b      	lsls	r3, r3, #2
1a007f72:	3514      	adds	r5, #20
1a007f74:	3114      	adds	r1, #20
1a007f76:	4419      	add	r1, r3
1a007f78:	442b      	add	r3, r5
1a007f7a:	e001      	b.n	1a007f80 <__mcmp+0x1c>
1a007f7c:	429d      	cmp	r5, r3
1a007f7e:	d208      	bcs.n	1a007f92 <__mcmp+0x2e>
1a007f80:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a007f84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007f88:	4294      	cmp	r4, r2
1a007f8a:	d0f7      	beq.n	1a007f7c <__mcmp+0x18>
1a007f8c:	d203      	bcs.n	1a007f96 <__mcmp+0x32>
1a007f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007f92:	bc30      	pop	{r4, r5}
1a007f94:	4770      	bx	lr
1a007f96:	2001      	movs	r0, #1
1a007f98:	bc30      	pop	{r4, r5}
1a007f9a:	4770      	bx	lr

1a007f9c <__mdiff>:
1a007f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007fa0:	460f      	mov	r7, r1
1a007fa2:	690d      	ldr	r5, [r1, #16]
1a007fa4:	6911      	ldr	r1, [r2, #16]
1a007fa6:	1a6d      	subs	r5, r5, r1
1a007fa8:	2d00      	cmp	r5, #0
1a007faa:	4690      	mov	r8, r2
1a007fac:	4684      	mov	ip, r0
1a007fae:	f107 0414 	add.w	r4, r7, #20
1a007fb2:	f102 0614 	add.w	r6, r2, #20
1a007fb6:	d114      	bne.n	1a007fe2 <__mdiff+0x46>
1a007fb8:	0089      	lsls	r1, r1, #2
1a007fba:	1863      	adds	r3, r4, r1
1a007fbc:	4431      	add	r1, r6
1a007fbe:	e001      	b.n	1a007fc4 <__mdiff+0x28>
1a007fc0:	42a3      	cmp	r3, r4
1a007fc2:	d95d      	bls.n	1a008080 <__mdiff+0xe4>
1a007fc4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a007fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007fcc:	4290      	cmp	r0, r2
1a007fce:	d0f7      	beq.n	1a007fc0 <__mdiff+0x24>
1a007fd0:	d209      	bcs.n	1a007fe6 <__mdiff+0x4a>
1a007fd2:	4622      	mov	r2, r4
1a007fd4:	463b      	mov	r3, r7
1a007fd6:	4634      	mov	r4, r6
1a007fd8:	4647      	mov	r7, r8
1a007fda:	4616      	mov	r6, r2
1a007fdc:	4698      	mov	r8, r3
1a007fde:	2501      	movs	r5, #1
1a007fe0:	e001      	b.n	1a007fe6 <__mdiff+0x4a>
1a007fe2:	dbf6      	blt.n	1a007fd2 <__mdiff+0x36>
1a007fe4:	2500      	movs	r5, #0
1a007fe6:	4660      	mov	r0, ip
1a007fe8:	6879      	ldr	r1, [r7, #4]
1a007fea:	f7ff fda9 	bl	1a007b40 <_Balloc>
1a007fee:	693f      	ldr	r7, [r7, #16]
1a007ff0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a007ff4:	60c5      	str	r5, [r0, #12]
1a007ff6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a007ffa:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a007ffe:	f100 0514 	add.w	r5, r0, #20
1a008002:	2200      	movs	r2, #0
1a008004:	e000      	b.n	1a008008 <__mdiff+0x6c>
1a008006:	460d      	mov	r5, r1
1a008008:	f856 1b04 	ldr.w	r1, [r6], #4
1a00800c:	f854 8b04 	ldr.w	r8, [r4], #4
1a008010:	fa1f f981 	uxth.w	r9, r1
1a008014:	fa12 f388 	uxtah	r3, r2, r8
1a008018:	0c0a      	lsrs	r2, r1, #16
1a00801a:	eba3 0309 	sub.w	r3, r3, r9
1a00801e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a008022:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a008026:	4629      	mov	r1, r5
1a008028:	b29b      	uxth	r3, r3
1a00802a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00802e:	45b6      	cmp	lr, r6
1a008030:	ea4f 4222 	mov.w	r2, r2, asr #16
1a008034:	f841 3b04 	str.w	r3, [r1], #4
1a008038:	46a0      	mov	r8, r4
1a00803a:	d8e4      	bhi.n	1a008006 <__mdiff+0x6a>
1a00803c:	45a4      	cmp	ip, r4
1a00803e:	d916      	bls.n	1a00806e <__mdiff+0xd2>
1a008040:	460e      	mov	r6, r1
1a008042:	f858 5b04 	ldr.w	r5, [r8], #4
1a008046:	fa12 f385 	uxtah	r3, r2, r5
1a00804a:	141a      	asrs	r2, r3, #16
1a00804c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a008050:	b29b      	uxth	r3, r3
1a008052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a008056:	45c4      	cmp	ip, r8
1a008058:	f846 3b04 	str.w	r3, [r6], #4
1a00805c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a008060:	d8ef      	bhi.n	1a008042 <__mdiff+0xa6>
1a008062:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a008066:	1b2d      	subs	r5, r5, r4
1a008068:	f025 0503 	bic.w	r5, r5, #3
1a00806c:	440d      	add	r5, r1
1a00806e:	b923      	cbnz	r3, 1a00807a <__mdiff+0xde>
1a008070:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a008074:	3f01      	subs	r7, #1
1a008076:	2b00      	cmp	r3, #0
1a008078:	d0fa      	beq.n	1a008070 <__mdiff+0xd4>
1a00807a:	6107      	str	r7, [r0, #16]
1a00807c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a008080:	4660      	mov	r0, ip
1a008082:	2100      	movs	r1, #0
1a008084:	f7ff fd5c 	bl	1a007b40 <_Balloc>
1a008088:	2201      	movs	r2, #1
1a00808a:	2300      	movs	r3, #0
1a00808c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a008090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a008094 <__d2b>:
1a008094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a008098:	460f      	mov	r7, r1
1a00809a:	b083      	sub	sp, #12
1a00809c:	2101      	movs	r1, #1
1a00809e:	ec55 4b10 	vmov	r4, r5, d0
1a0080a2:	4616      	mov	r6, r2
1a0080a4:	f7ff fd4c 	bl	1a007b40 <_Balloc>
1a0080a8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a0080ac:	4681      	mov	r9, r0
1a0080ae:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a0080b2:	f1b8 0f00 	cmp.w	r8, #0
1a0080b6:	d001      	beq.n	1a0080bc <__d2b+0x28>
1a0080b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0080bc:	2c00      	cmp	r4, #0
1a0080be:	9301      	str	r3, [sp, #4]
1a0080c0:	d02b      	beq.n	1a00811a <__d2b+0x86>
1a0080c2:	4668      	mov	r0, sp
1a0080c4:	9400      	str	r4, [sp, #0]
1a0080c6:	f7ff fdd1 	bl	1a007c6c <__lo0bits>
1a0080ca:	b9d0      	cbnz	r0, 1a008102 <__d2b+0x6e>
1a0080cc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0080d0:	f8c9 2014 	str.w	r2, [r9, #20]
1a0080d4:	2b00      	cmp	r3, #0
1a0080d6:	bf14      	ite	ne
1a0080d8:	2102      	movne	r1, #2
1a0080da:	2101      	moveq	r1, #1
1a0080dc:	f8c9 3018 	str.w	r3, [r9, #24]
1a0080e0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0080e4:	f1b8 0f00 	cmp.w	r8, #0
1a0080e8:	d024      	beq.n	1a008134 <__d2b+0xa0>
1a0080ea:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a0080ee:	eb08 0300 	add.w	r3, r8, r0
1a0080f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a0080f6:	603b      	str	r3, [r7, #0]
1a0080f8:	6030      	str	r0, [r6, #0]
1a0080fa:	4648      	mov	r0, r9
1a0080fc:	b003      	add	sp, #12
1a0080fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a008102:	e9dd 1300 	ldrd	r1, r3, [sp]
1a008106:	f1c0 0220 	rsb	r2, r0, #32
1a00810a:	fa03 f202 	lsl.w	r2, r3, r2
1a00810e:	430a      	orrs	r2, r1
1a008110:	40c3      	lsrs	r3, r0
1a008112:	9301      	str	r3, [sp, #4]
1a008114:	f8c9 2014 	str.w	r2, [r9, #20]
1a008118:	e7dc      	b.n	1a0080d4 <__d2b+0x40>
1a00811a:	a801      	add	r0, sp, #4
1a00811c:	f7ff fda6 	bl	1a007c6c <__lo0bits>
1a008120:	9b01      	ldr	r3, [sp, #4]
1a008122:	f8c9 3014 	str.w	r3, [r9, #20]
1a008126:	2101      	movs	r1, #1
1a008128:	3020      	adds	r0, #32
1a00812a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00812e:	f1b8 0f00 	cmp.w	r8, #0
1a008132:	d1da      	bne.n	1a0080ea <__d2b+0x56>
1a008134:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a008138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00813c:	6038      	str	r0, [r7, #0]
1a00813e:	6918      	ldr	r0, [r3, #16]
1a008140:	f7ff fd74 	bl	1a007c2c <__hi0bits>
1a008144:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a008148:	6030      	str	r0, [r6, #0]
1a00814a:	4648      	mov	r0, r9
1a00814c:	b003      	add	sp, #12
1a00814e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a008152:	bf00      	nop

1a008154 <_realloc_r>:
1a008154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008158:	4617      	mov	r7, r2
1a00815a:	2900      	cmp	r1, #0
1a00815c:	f000 80bb 	beq.w	1a0082d6 <_realloc_r+0x182>
1a008160:	f107 040b 	add.w	r4, r7, #11
1a008164:	4681      	mov	r9, r0
1a008166:	460d      	mov	r5, r1
1a008168:	f7fc fb2e 	bl	1a0047c8 <__malloc_lock>
1a00816c:	2c16      	cmp	r4, #22
1a00816e:	d85e      	bhi.n	1a00822e <_realloc_r+0xda>
1a008170:	2410      	movs	r4, #16
1a008172:	4622      	mov	r2, r4
1a008174:	42a7      	cmp	r7, r4
1a008176:	d85f      	bhi.n	1a008238 <_realloc_r+0xe4>
1a008178:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00817c:	f02e 0603 	bic.w	r6, lr, #3
1a008180:	f1a5 0808 	sub.w	r8, r5, #8
1a008184:	4296      	cmp	r6, r2
1a008186:	eb08 0a06 	add.w	sl, r8, r6
1a00818a:	f280 8081 	bge.w	1a008290 <_realloc_r+0x13c>
1a00818e:	4bcb      	ldr	r3, [pc, #812]	; (1a0084bc <_realloc_r+0x368>)
1a008190:	f8da 0004 	ldr.w	r0, [sl, #4]
1a008194:	6899      	ldr	r1, [r3, #8]
1a008196:	4551      	cmp	r1, sl
1a008198:	f000 80b5 	beq.w	1a008306 <_realloc_r+0x1b2>
1a00819c:	f020 0301 	bic.w	r3, r0, #1
1a0081a0:	4453      	add	r3, sl
1a0081a2:	685b      	ldr	r3, [r3, #4]
1a0081a4:	07db      	lsls	r3, r3, #31
1a0081a6:	f100 808a 	bmi.w	1a0082be <_realloc_r+0x16a>
1a0081aa:	f020 0003 	bic.w	r0, r0, #3
1a0081ae:	1833      	adds	r3, r6, r0
1a0081b0:	4293      	cmp	r3, r2
1a0081b2:	f280 8112 	bge.w	1a0083da <_realloc_r+0x286>
1a0081b6:	f01e 0f01 	tst.w	lr, #1
1a0081ba:	d10f      	bne.n	1a0081dc <_realloc_r+0x88>
1a0081bc:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a0081c0:	eba8 0b03 	sub.w	fp, r8, r3
1a0081c4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0081c8:	f021 0103 	bic.w	r1, r1, #3
1a0081cc:	4408      	add	r0, r1
1a0081ce:	1983      	adds	r3, r0, r6
1a0081d0:	4293      	cmp	r3, r2
1a0081d2:	f280 8116 	bge.w	1a008402 <_realloc_r+0x2ae>
1a0081d6:	1873      	adds	r3, r6, r1
1a0081d8:	4293      	cmp	r3, r2
1a0081da:	da34      	bge.n	1a008246 <_realloc_r+0xf2>
1a0081dc:	4639      	mov	r1, r7
1a0081de:	4648      	mov	r0, r9
1a0081e0:	f7fb ff50 	bl	1a004084 <_malloc_r>
1a0081e4:	4607      	mov	r7, r0
1a0081e6:	b1e0      	cbz	r0, 1a008222 <_realloc_r+0xce>
1a0081e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0081ec:	f023 0301 	bic.w	r3, r3, #1
1a0081f0:	4443      	add	r3, r8
1a0081f2:	f1a0 0208 	sub.w	r2, r0, #8
1a0081f6:	4293      	cmp	r3, r2
1a0081f8:	f000 80f7 	beq.w	1a0083ea <_realloc_r+0x296>
1a0081fc:	1f32      	subs	r2, r6, #4
1a0081fe:	2a24      	cmp	r2, #36	; 0x24
1a008200:	f200 80fb 	bhi.w	1a0083fa <_realloc_r+0x2a6>
1a008204:	2a13      	cmp	r2, #19
1a008206:	6829      	ldr	r1, [r5, #0]
1a008208:	f200 80c9 	bhi.w	1a00839e <_realloc_r+0x24a>
1a00820c:	4603      	mov	r3, r0
1a00820e:	462a      	mov	r2, r5
1a008210:	6019      	str	r1, [r3, #0]
1a008212:	6851      	ldr	r1, [r2, #4]
1a008214:	6059      	str	r1, [r3, #4]
1a008216:	6892      	ldr	r2, [r2, #8]
1a008218:	609a      	str	r2, [r3, #8]
1a00821a:	4629      	mov	r1, r5
1a00821c:	4648      	mov	r0, r9
1a00821e:	f7fb fde5 	bl	1a003dec <_free_r>
1a008222:	4648      	mov	r0, r9
1a008224:	f7fc fad6 	bl	1a0047d4 <__malloc_unlock>
1a008228:	4638      	mov	r0, r7
1a00822a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00822e:	f024 0407 	bic.w	r4, r4, #7
1a008232:	2c00      	cmp	r4, #0
1a008234:	4622      	mov	r2, r4
1a008236:	da9d      	bge.n	1a008174 <_realloc_r+0x20>
1a008238:	230c      	movs	r3, #12
1a00823a:	f8c9 3000 	str.w	r3, [r9]
1a00823e:	2700      	movs	r7, #0
1a008240:	4638      	mov	r0, r7
1a008242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008246:	465f      	mov	r7, fp
1a008248:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00824c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a008250:	1f32      	subs	r2, r6, #4
1a008252:	2a24      	cmp	r2, #36	; 0x24
1a008254:	60c1      	str	r1, [r0, #12]
1a008256:	eb0b 0a03 	add.w	sl, fp, r3
1a00825a:	6088      	str	r0, [r1, #8]
1a00825c:	f200 80d9 	bhi.w	1a008412 <_realloc_r+0x2be>
1a008260:	2a13      	cmp	r2, #19
1a008262:	6829      	ldr	r1, [r5, #0]
1a008264:	f240 80d3 	bls.w	1a00840e <_realloc_r+0x2ba>
1a008268:	f8cb 1008 	str.w	r1, [fp, #8]
1a00826c:	6869      	ldr	r1, [r5, #4]
1a00826e:	f8cb 100c 	str.w	r1, [fp, #12]
1a008272:	2a1b      	cmp	r2, #27
1a008274:	68a9      	ldr	r1, [r5, #8]
1a008276:	f200 80e0 	bhi.w	1a00843a <_realloc_r+0x2e6>
1a00827a:	f10b 0210 	add.w	r2, fp, #16
1a00827e:	3508      	adds	r5, #8
1a008280:	6011      	str	r1, [r2, #0]
1a008282:	6869      	ldr	r1, [r5, #4]
1a008284:	6051      	str	r1, [r2, #4]
1a008286:	68a9      	ldr	r1, [r5, #8]
1a008288:	6091      	str	r1, [r2, #8]
1a00828a:	461e      	mov	r6, r3
1a00828c:	46d8      	mov	r8, fp
1a00828e:	463d      	mov	r5, r7
1a008290:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a008294:	1b32      	subs	r2, r6, r4
1a008296:	2a0f      	cmp	r2, #15
1a008298:	f003 0301 	and.w	r3, r3, #1
1a00829c:	d820      	bhi.n	1a0082e0 <_realloc_r+0x18c>
1a00829e:	4333      	orrs	r3, r6
1a0082a0:	f8c8 3004 	str.w	r3, [r8, #4]
1a0082a4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0082a8:	f043 0301 	orr.w	r3, r3, #1
1a0082ac:	f8ca 3004 	str.w	r3, [sl, #4]
1a0082b0:	4648      	mov	r0, r9
1a0082b2:	462f      	mov	r7, r5
1a0082b4:	f7fc fa8e 	bl	1a0047d4 <__malloc_unlock>
1a0082b8:	4638      	mov	r0, r7
1a0082ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0082be:	f01e 0f01 	tst.w	lr, #1
1a0082c2:	d18b      	bne.n	1a0081dc <_realloc_r+0x88>
1a0082c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a0082c8:	eba8 0b03 	sub.w	fp, r8, r3
1a0082cc:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0082d0:	f021 0103 	bic.w	r1, r1, #3
1a0082d4:	e77f      	b.n	1a0081d6 <_realloc_r+0x82>
1a0082d6:	4611      	mov	r1, r2
1a0082d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0082dc:	f7fb bed2 	b.w	1a004084 <_malloc_r>
1a0082e0:	eb08 0104 	add.w	r1, r8, r4
1a0082e4:	4323      	orrs	r3, r4
1a0082e6:	f042 0201 	orr.w	r2, r2, #1
1a0082ea:	f8c8 3004 	str.w	r3, [r8, #4]
1a0082ee:	604a      	str	r2, [r1, #4]
1a0082f0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0082f4:	f043 0301 	orr.w	r3, r3, #1
1a0082f8:	3108      	adds	r1, #8
1a0082fa:	f8ca 3004 	str.w	r3, [sl, #4]
1a0082fe:	4648      	mov	r0, r9
1a008300:	f7fb fd74 	bl	1a003dec <_free_r>
1a008304:	e7d4      	b.n	1a0082b0 <_realloc_r+0x15c>
1a008306:	f020 0003 	bic.w	r0, r0, #3
1a00830a:	1831      	adds	r1, r6, r0
1a00830c:	f104 0c10 	add.w	ip, r4, #16
1a008310:	4561      	cmp	r1, ip
1a008312:	da4f      	bge.n	1a0083b4 <_realloc_r+0x260>
1a008314:	f01e 0f01 	tst.w	lr, #1
1a008318:	f47f af60 	bne.w	1a0081dc <_realloc_r+0x88>
1a00831c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a008320:	eba8 0b01 	sub.w	fp, r8, r1
1a008324:	f8db 1004 	ldr.w	r1, [fp, #4]
1a008328:	f021 0103 	bic.w	r1, r1, #3
1a00832c:	4408      	add	r0, r1
1a00832e:	eb00 0a06 	add.w	sl, r0, r6
1a008332:	45d4      	cmp	ip, sl
1a008334:	f73f af4f 	bgt.w	1a0081d6 <_realloc_r+0x82>
1a008338:	465f      	mov	r7, fp
1a00833a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00833e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a008342:	1f32      	subs	r2, r6, #4
1a008344:	2a24      	cmp	r2, #36	; 0x24
1a008346:	60c1      	str	r1, [r0, #12]
1a008348:	6088      	str	r0, [r1, #8]
1a00834a:	f200 8099 	bhi.w	1a008480 <_realloc_r+0x32c>
1a00834e:	2a13      	cmp	r2, #19
1a008350:	6829      	ldr	r1, [r5, #0]
1a008352:	f240 8093 	bls.w	1a00847c <_realloc_r+0x328>
1a008356:	f8cb 1008 	str.w	r1, [fp, #8]
1a00835a:	6869      	ldr	r1, [r5, #4]
1a00835c:	f8cb 100c 	str.w	r1, [fp, #12]
1a008360:	2a1b      	cmp	r2, #27
1a008362:	68a9      	ldr	r1, [r5, #8]
1a008364:	f200 8092 	bhi.w	1a00848c <_realloc_r+0x338>
1a008368:	f10b 0210 	add.w	r2, fp, #16
1a00836c:	3508      	adds	r5, #8
1a00836e:	6011      	str	r1, [r2, #0]
1a008370:	6869      	ldr	r1, [r5, #4]
1a008372:	6051      	str	r1, [r2, #4]
1a008374:	68a9      	ldr	r1, [r5, #8]
1a008376:	6091      	str	r1, [r2, #8]
1a008378:	eb0b 0104 	add.w	r1, fp, r4
1a00837c:	ebaa 0204 	sub.w	r2, sl, r4
1a008380:	f042 0201 	orr.w	r2, r2, #1
1a008384:	6099      	str	r1, [r3, #8]
1a008386:	604a      	str	r2, [r1, #4]
1a008388:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00838c:	f003 0301 	and.w	r3, r3, #1
1a008390:	431c      	orrs	r4, r3
1a008392:	4648      	mov	r0, r9
1a008394:	f8cb 4004 	str.w	r4, [fp, #4]
1a008398:	f7fc fa1c 	bl	1a0047d4 <__malloc_unlock>
1a00839c:	e750      	b.n	1a008240 <_realloc_r+0xec>
1a00839e:	6001      	str	r1, [r0, #0]
1a0083a0:	686b      	ldr	r3, [r5, #4]
1a0083a2:	6043      	str	r3, [r0, #4]
1a0083a4:	2a1b      	cmp	r2, #27
1a0083a6:	d83c      	bhi.n	1a008422 <_realloc_r+0x2ce>
1a0083a8:	f105 0208 	add.w	r2, r5, #8
1a0083ac:	f100 0308 	add.w	r3, r0, #8
1a0083b0:	68a9      	ldr	r1, [r5, #8]
1a0083b2:	e72d      	b.n	1a008210 <_realloc_r+0xbc>
1a0083b4:	eb08 0004 	add.w	r0, r8, r4
1a0083b8:	1b0a      	subs	r2, r1, r4
1a0083ba:	f042 0201 	orr.w	r2, r2, #1
1a0083be:	6098      	str	r0, [r3, #8]
1a0083c0:	6042      	str	r2, [r0, #4]
1a0083c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0083c6:	f003 0301 	and.w	r3, r3, #1
1a0083ca:	431c      	orrs	r4, r3
1a0083cc:	4648      	mov	r0, r9
1a0083ce:	f845 4c04 	str.w	r4, [r5, #-4]
1a0083d2:	f7fc f9ff 	bl	1a0047d4 <__malloc_unlock>
1a0083d6:	462f      	mov	r7, r5
1a0083d8:	e732      	b.n	1a008240 <_realloc_r+0xec>
1a0083da:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0083de:	461e      	mov	r6, r3
1a0083e0:	60ca      	str	r2, [r1, #12]
1a0083e2:	eb08 0a03 	add.w	sl, r8, r3
1a0083e6:	6091      	str	r1, [r2, #8]
1a0083e8:	e752      	b.n	1a008290 <_realloc_r+0x13c>
1a0083ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0083ee:	f023 0303 	bic.w	r3, r3, #3
1a0083f2:	441e      	add	r6, r3
1a0083f4:	eb08 0a06 	add.w	sl, r8, r6
1a0083f8:	e74a      	b.n	1a008290 <_realloc_r+0x13c>
1a0083fa:	4629      	mov	r1, r5
1a0083fc:	f7ff fb38 	bl	1a007a70 <memmove>
1a008400:	e70b      	b.n	1a00821a <_realloc_r+0xc6>
1a008402:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a008406:	465f      	mov	r7, fp
1a008408:	60ca      	str	r2, [r1, #12]
1a00840a:	6091      	str	r1, [r2, #8]
1a00840c:	e71c      	b.n	1a008248 <_realloc_r+0xf4>
1a00840e:	463a      	mov	r2, r7
1a008410:	e736      	b.n	1a008280 <_realloc_r+0x12c>
1a008412:	4629      	mov	r1, r5
1a008414:	4638      	mov	r0, r7
1a008416:	461e      	mov	r6, r3
1a008418:	46d8      	mov	r8, fp
1a00841a:	f7ff fb29 	bl	1a007a70 <memmove>
1a00841e:	463d      	mov	r5, r7
1a008420:	e736      	b.n	1a008290 <_realloc_r+0x13c>
1a008422:	68ab      	ldr	r3, [r5, #8]
1a008424:	6083      	str	r3, [r0, #8]
1a008426:	68eb      	ldr	r3, [r5, #12]
1a008428:	60c3      	str	r3, [r0, #12]
1a00842a:	2a24      	cmp	r2, #36	; 0x24
1a00842c:	d011      	beq.n	1a008452 <_realloc_r+0x2fe>
1a00842e:	f105 0210 	add.w	r2, r5, #16
1a008432:	f100 0310 	add.w	r3, r0, #16
1a008436:	6929      	ldr	r1, [r5, #16]
1a008438:	e6ea      	b.n	1a008210 <_realloc_r+0xbc>
1a00843a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00843e:	68e9      	ldr	r1, [r5, #12]
1a008440:	f8cb 1014 	str.w	r1, [fp, #20]
1a008444:	2a24      	cmp	r2, #36	; 0x24
1a008446:	d00e      	beq.n	1a008466 <_realloc_r+0x312>
1a008448:	6929      	ldr	r1, [r5, #16]
1a00844a:	f10b 0218 	add.w	r2, fp, #24
1a00844e:	3510      	adds	r5, #16
1a008450:	e716      	b.n	1a008280 <_realloc_r+0x12c>
1a008452:	692b      	ldr	r3, [r5, #16]
1a008454:	6103      	str	r3, [r0, #16]
1a008456:	696b      	ldr	r3, [r5, #20]
1a008458:	6143      	str	r3, [r0, #20]
1a00845a:	69a9      	ldr	r1, [r5, #24]
1a00845c:	f105 0218 	add.w	r2, r5, #24
1a008460:	f100 0318 	add.w	r3, r0, #24
1a008464:	e6d4      	b.n	1a008210 <_realloc_r+0xbc>
1a008466:	692a      	ldr	r2, [r5, #16]
1a008468:	f8cb 2018 	str.w	r2, [fp, #24]
1a00846c:	696a      	ldr	r2, [r5, #20]
1a00846e:	f8cb 201c 	str.w	r2, [fp, #28]
1a008472:	69a9      	ldr	r1, [r5, #24]
1a008474:	f10b 0220 	add.w	r2, fp, #32
1a008478:	3518      	adds	r5, #24
1a00847a:	e701      	b.n	1a008280 <_realloc_r+0x12c>
1a00847c:	463a      	mov	r2, r7
1a00847e:	e776      	b.n	1a00836e <_realloc_r+0x21a>
1a008480:	4629      	mov	r1, r5
1a008482:	4638      	mov	r0, r7
1a008484:	f7ff faf4 	bl	1a007a70 <memmove>
1a008488:	4b0c      	ldr	r3, [pc, #48]	; (1a0084bc <_realloc_r+0x368>)
1a00848a:	e775      	b.n	1a008378 <_realloc_r+0x224>
1a00848c:	f8cb 1010 	str.w	r1, [fp, #16]
1a008490:	68e9      	ldr	r1, [r5, #12]
1a008492:	f8cb 1014 	str.w	r1, [fp, #20]
1a008496:	2a24      	cmp	r2, #36	; 0x24
1a008498:	d004      	beq.n	1a0084a4 <_realloc_r+0x350>
1a00849a:	6929      	ldr	r1, [r5, #16]
1a00849c:	f10b 0218 	add.w	r2, fp, #24
1a0084a0:	3510      	adds	r5, #16
1a0084a2:	e764      	b.n	1a00836e <_realloc_r+0x21a>
1a0084a4:	692a      	ldr	r2, [r5, #16]
1a0084a6:	f8cb 2018 	str.w	r2, [fp, #24]
1a0084aa:	696a      	ldr	r2, [r5, #20]
1a0084ac:	f8cb 201c 	str.w	r2, [fp, #28]
1a0084b0:	69a9      	ldr	r1, [r5, #24]
1a0084b2:	f10b 0220 	add.w	r2, fp, #32
1a0084b6:	3518      	adds	r5, #24
1a0084b8:	e759      	b.n	1a00836e <_realloc_r+0x21a>
1a0084ba:	bf00      	nop
1a0084bc:	10000470 	.word	0x10000470

1a0084c0 <frexp>:
1a0084c0:	ec53 2b10 	vmov	r2, r3, d0
1a0084c4:	b570      	push	{r4, r5, r6, lr}
1a0084c6:	4e16      	ldr	r6, [pc, #88]	; (1a008520 <frexp+0x60>)
1a0084c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a0084cc:	2500      	movs	r5, #0
1a0084ce:	42b1      	cmp	r1, r6
1a0084d0:	4604      	mov	r4, r0
1a0084d2:	6005      	str	r5, [r0, #0]
1a0084d4:	dc21      	bgt.n	1a00851a <frexp+0x5a>
1a0084d6:	ee10 6a10 	vmov	r6, s0
1a0084da:	430e      	orrs	r6, r1
1a0084dc:	d01d      	beq.n	1a00851a <frexp+0x5a>
1a0084de:	4e11      	ldr	r6, [pc, #68]	; (1a008524 <frexp+0x64>)
1a0084e0:	401e      	ands	r6, r3
1a0084e2:	4618      	mov	r0, r3
1a0084e4:	b966      	cbnz	r6, 1a008500 <frexp+0x40>
1a0084e6:	4619      	mov	r1, r3
1a0084e8:	2200      	movs	r2, #0
1a0084ea:	ee10 0a10 	vmov	r0, s0
1a0084ee:	4b0e      	ldr	r3, [pc, #56]	; (1a008528 <frexp+0x68>)
1a0084f0:	f7fa fe32 	bl	1a003158 <__aeabi_dmul>
1a0084f4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0084f8:	4602      	mov	r2, r0
1a0084fa:	4608      	mov	r0, r1
1a0084fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a008500:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a008504:	1509      	asrs	r1, r1, #20
1a008506:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00850a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00850e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a008512:	4429      	add	r1, r5
1a008514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a008518:	6021      	str	r1, [r4, #0]
1a00851a:	ec43 2b10 	vmov	d0, r2, r3
1a00851e:	bd70      	pop	{r4, r5, r6, pc}
1a008520:	7fefffff 	.word	0x7fefffff
1a008524:	7ff00000 	.word	0x7ff00000
1a008528:	43500000 	.word	0x43500000

1a00852c <strncpy>:
1a00852c:	b470      	push	{r4, r5, r6}
1a00852e:	ea40 0401 	orr.w	r4, r0, r1
1a008532:	07a3      	lsls	r3, r4, #30
1a008534:	d127      	bne.n	1a008586 <strncpy+0x5a>
1a008536:	2a03      	cmp	r2, #3
1a008538:	d925      	bls.n	1a008586 <strncpy+0x5a>
1a00853a:	460b      	mov	r3, r1
1a00853c:	4606      	mov	r6, r0
1a00853e:	4619      	mov	r1, r3
1a008540:	f853 5b04 	ldr.w	r5, [r3], #4
1a008544:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a008548:	ea24 0405 	bic.w	r4, r4, r5
1a00854c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a008550:	d106      	bne.n	1a008560 <strncpy+0x34>
1a008552:	3a04      	subs	r2, #4
1a008554:	2a03      	cmp	r2, #3
1a008556:	f846 5b04 	str.w	r5, [r6], #4
1a00855a:	4619      	mov	r1, r3
1a00855c:	d8ef      	bhi.n	1a00853e <strncpy+0x12>
1a00855e:	b182      	cbz	r2, 1a008582 <strncpy+0x56>
1a008560:	4633      	mov	r3, r6
1a008562:	780c      	ldrb	r4, [r1, #0]
1a008564:	f803 4b01 	strb.w	r4, [r3], #1
1a008568:	1e55      	subs	r5, r2, #1
1a00856a:	b174      	cbz	r4, 1a00858a <strncpy+0x5e>
1a00856c:	4432      	add	r2, r6
1a00856e:	442e      	add	r6, r5
1a008570:	e005      	b.n	1a00857e <strncpy+0x52>
1a008572:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a008576:	1af5      	subs	r5, r6, r3
1a008578:	f803 4b01 	strb.w	r4, [r3], #1
1a00857c:	b12c      	cbz	r4, 1a00858a <strncpy+0x5e>
1a00857e:	429a      	cmp	r2, r3
1a008580:	d1f7      	bne.n	1a008572 <strncpy+0x46>
1a008582:	bc70      	pop	{r4, r5, r6}
1a008584:	4770      	bx	lr
1a008586:	4606      	mov	r6, r0
1a008588:	e7e9      	b.n	1a00855e <strncpy+0x32>
1a00858a:	2d00      	cmp	r5, #0
1a00858c:	d0f9      	beq.n	1a008582 <strncpy+0x56>
1a00858e:	441d      	add	r5, r3
1a008590:	2200      	movs	r2, #0
1a008592:	f803 2b01 	strb.w	r2, [r3], #1
1a008596:	42ab      	cmp	r3, r5
1a008598:	d1fb      	bne.n	1a008592 <strncpy+0x66>
1a00859a:	bc70      	pop	{r4, r5, r6}
1a00859c:	4770      	bx	lr
1a00859e:	bf00      	nop

1a0085a0 <__sprint_r.part.0>:
1a0085a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0085a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a0085a6:	049c      	lsls	r4, r3, #18
1a0085a8:	4693      	mov	fp, r2
1a0085aa:	d52d      	bpl.n	1a008608 <__sprint_r.part.0+0x68>
1a0085ac:	6893      	ldr	r3, [r2, #8]
1a0085ae:	6812      	ldr	r2, [r2, #0]
1a0085b0:	b343      	cbz	r3, 1a008604 <__sprint_r.part.0+0x64>
1a0085b2:	460e      	mov	r6, r1
1a0085b4:	4607      	mov	r7, r0
1a0085b6:	f102 0908 	add.w	r9, r2, #8
1a0085ba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a0085be:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a0085c2:	d015      	beq.n	1a0085f0 <__sprint_r.part.0+0x50>
1a0085c4:	3d04      	subs	r5, #4
1a0085c6:	2400      	movs	r4, #0
1a0085c8:	e001      	b.n	1a0085ce <__sprint_r.part.0+0x2e>
1a0085ca:	45a0      	cmp	r8, r4
1a0085cc:	d00e      	beq.n	1a0085ec <__sprint_r.part.0+0x4c>
1a0085ce:	4632      	mov	r2, r6
1a0085d0:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a0085d4:	4638      	mov	r0, r7
1a0085d6:	f000 f8a9 	bl	1a00872c <_fputwc_r>
1a0085da:	1c43      	adds	r3, r0, #1
1a0085dc:	f104 0401 	add.w	r4, r4, #1
1a0085e0:	d1f3      	bne.n	1a0085ca <__sprint_r.part.0+0x2a>
1a0085e2:	2300      	movs	r3, #0
1a0085e4:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a0085e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0085ec:	f8db 3008 	ldr.w	r3, [fp, #8]
1a0085f0:	f02a 0a03 	bic.w	sl, sl, #3
1a0085f4:	eba3 030a 	sub.w	r3, r3, sl
1a0085f8:	f8cb 3008 	str.w	r3, [fp, #8]
1a0085fc:	f109 0908 	add.w	r9, r9, #8
1a008600:	2b00      	cmp	r3, #0
1a008602:	d1da      	bne.n	1a0085ba <__sprint_r.part.0+0x1a>
1a008604:	2000      	movs	r0, #0
1a008606:	e7ec      	b.n	1a0085e2 <__sprint_r.part.0+0x42>
1a008608:	f7fe ffdc 	bl	1a0075c4 <__sfvwrite_r>
1a00860c:	2300      	movs	r3, #0
1a00860e:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a008612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008616:	bf00      	nop

1a008618 <__sprint_r>:
1a008618:	6893      	ldr	r3, [r2, #8]
1a00861a:	b10b      	cbz	r3, 1a008620 <__sprint_r+0x8>
1a00861c:	f7ff bfc0 	b.w	1a0085a0 <__sprint_r.part.0>
1a008620:	b410      	push	{r4}
1a008622:	4618      	mov	r0, r3
1a008624:	6053      	str	r3, [r2, #4]
1a008626:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00862a:	4770      	bx	lr

1a00862c <_calloc_r>:
1a00862c:	b510      	push	{r4, lr}
1a00862e:	fb02 f101 	mul.w	r1, r2, r1
1a008632:	f7fb fd27 	bl	1a004084 <_malloc_r>
1a008636:	4604      	mov	r4, r0
1a008638:	b168      	cbz	r0, 1a008656 <_calloc_r+0x2a>
1a00863a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00863e:	f022 0203 	bic.w	r2, r2, #3
1a008642:	3a04      	subs	r2, #4
1a008644:	2a24      	cmp	r2, #36	; 0x24
1a008646:	d818      	bhi.n	1a00867a <_calloc_r+0x4e>
1a008648:	2a13      	cmp	r2, #19
1a00864a:	d806      	bhi.n	1a00865a <_calloc_r+0x2e>
1a00864c:	4602      	mov	r2, r0
1a00864e:	2300      	movs	r3, #0
1a008650:	e9c2 3300 	strd	r3, r3, [r2]
1a008654:	6093      	str	r3, [r2, #8]
1a008656:	4620      	mov	r0, r4
1a008658:	bd10      	pop	{r4, pc}
1a00865a:	2300      	movs	r3, #0
1a00865c:	2a1b      	cmp	r2, #27
1a00865e:	e9c0 3300 	strd	r3, r3, [r0]
1a008662:	d90f      	bls.n	1a008684 <_calloc_r+0x58>
1a008664:	2a24      	cmp	r2, #36	; 0x24
1a008666:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00866a:	bf12      	itee	ne
1a00866c:	f100 0210 	addne.w	r2, r0, #16
1a008670:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a008674:	f100 0218 	addeq.w	r2, r0, #24
1a008678:	e7e9      	b.n	1a00864e <_calloc_r+0x22>
1a00867a:	2100      	movs	r1, #0
1a00867c:	f7fc f854 	bl	1a004728 <memset>
1a008680:	4620      	mov	r0, r4
1a008682:	bd10      	pop	{r4, pc}
1a008684:	f100 0208 	add.w	r2, r0, #8
1a008688:	e7e1      	b.n	1a00864e <_calloc_r+0x22>
1a00868a:	bf00      	nop

1a00868c <__fputwc>:
1a00868c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a008690:	b082      	sub	sp, #8
1a008692:	4680      	mov	r8, r0
1a008694:	4689      	mov	r9, r1
1a008696:	4614      	mov	r4, r2
1a008698:	f000 f87a 	bl	1a008790 <__locale_mb_cur_max>
1a00869c:	2801      	cmp	r0, #1
1a00869e:	d103      	bne.n	1a0086a8 <__fputwc+0x1c>
1a0086a0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a0086a4:	2bfe      	cmp	r3, #254	; 0xfe
1a0086a6:	d933      	bls.n	1a008710 <__fputwc+0x84>
1a0086a8:	464a      	mov	r2, r9
1a0086aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a0086ae:	a901      	add	r1, sp, #4
1a0086b0:	4640      	mov	r0, r8
1a0086b2:	f000 f8e1 	bl	1a008878 <_wcrtomb_r>
1a0086b6:	1c42      	adds	r2, r0, #1
1a0086b8:	4606      	mov	r6, r0
1a0086ba:	d02f      	beq.n	1a00871c <__fputwc+0x90>
1a0086bc:	b320      	cbz	r0, 1a008708 <__fputwc+0x7c>
1a0086be:	f89d c004 	ldrb.w	ip, [sp, #4]
1a0086c2:	2500      	movs	r5, #0
1a0086c4:	f10d 0a04 	add.w	sl, sp, #4
1a0086c8:	e009      	b.n	1a0086de <__fputwc+0x52>
1a0086ca:	6823      	ldr	r3, [r4, #0]
1a0086cc:	1c5a      	adds	r2, r3, #1
1a0086ce:	6022      	str	r2, [r4, #0]
1a0086d0:	f883 c000 	strb.w	ip, [r3]
1a0086d4:	3501      	adds	r5, #1
1a0086d6:	42b5      	cmp	r5, r6
1a0086d8:	d216      	bcs.n	1a008708 <__fputwc+0x7c>
1a0086da:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a0086de:	68a3      	ldr	r3, [r4, #8]
1a0086e0:	3b01      	subs	r3, #1
1a0086e2:	2b00      	cmp	r3, #0
1a0086e4:	60a3      	str	r3, [r4, #8]
1a0086e6:	daf0      	bge.n	1a0086ca <__fputwc+0x3e>
1a0086e8:	69a7      	ldr	r7, [r4, #24]
1a0086ea:	42bb      	cmp	r3, r7
1a0086ec:	4661      	mov	r1, ip
1a0086ee:	4622      	mov	r2, r4
1a0086f0:	4640      	mov	r0, r8
1a0086f2:	db02      	blt.n	1a0086fa <__fputwc+0x6e>
1a0086f4:	f1bc 0f0a 	cmp.w	ip, #10
1a0086f8:	d1e7      	bne.n	1a0086ca <__fputwc+0x3e>
1a0086fa:	f000 f865 	bl	1a0087c8 <__swbuf_r>
1a0086fe:	1c43      	adds	r3, r0, #1
1a008700:	d1e8      	bne.n	1a0086d4 <__fputwc+0x48>
1a008702:	b002      	add	sp, #8
1a008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a008708:	4648      	mov	r0, r9
1a00870a:	b002      	add	sp, #8
1a00870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a008710:	fa5f fc89 	uxtb.w	ip, r9
1a008714:	4606      	mov	r6, r0
1a008716:	f88d c004 	strb.w	ip, [sp, #4]
1a00871a:	e7d2      	b.n	1a0086c2 <__fputwc+0x36>
1a00871c:	89a3      	ldrh	r3, [r4, #12]
1a00871e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008722:	81a3      	strh	r3, [r4, #12]
1a008724:	b002      	add	sp, #8
1a008726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00872a:	bf00      	nop

1a00872c <_fputwc_r>:
1a00872c:	b530      	push	{r4, r5, lr}
1a00872e:	4605      	mov	r5, r0
1a008730:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a008732:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a008736:	07c0      	lsls	r0, r0, #31
1a008738:	4614      	mov	r4, r2
1a00873a:	b083      	sub	sp, #12
1a00873c:	b29a      	uxth	r2, r3
1a00873e:	d401      	bmi.n	1a008744 <_fputwc_r+0x18>
1a008740:	0590      	lsls	r0, r2, #22
1a008742:	d51c      	bpl.n	1a00877e <_fputwc_r+0x52>
1a008744:	0490      	lsls	r0, r2, #18
1a008746:	d406      	bmi.n	1a008756 <_fputwc_r+0x2a>
1a008748:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00874a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00874e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a008752:	81a3      	strh	r3, [r4, #12]
1a008754:	6662      	str	r2, [r4, #100]	; 0x64
1a008756:	4628      	mov	r0, r5
1a008758:	4622      	mov	r2, r4
1a00875a:	f7ff ff97 	bl	1a00868c <__fputwc>
1a00875e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a008760:	07da      	lsls	r2, r3, #31
1a008762:	4605      	mov	r5, r0
1a008764:	d402      	bmi.n	1a00876c <_fputwc_r+0x40>
1a008766:	89a3      	ldrh	r3, [r4, #12]
1a008768:	059b      	lsls	r3, r3, #22
1a00876a:	d502      	bpl.n	1a008772 <_fputwc_r+0x46>
1a00876c:	4628      	mov	r0, r5
1a00876e:	b003      	add	sp, #12
1a008770:	bd30      	pop	{r4, r5, pc}
1a008772:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a008774:	f7fb fc84 	bl	1a004080 <__retarget_lock_release_recursive>
1a008778:	4628      	mov	r0, r5
1a00877a:	b003      	add	sp, #12
1a00877c:	bd30      	pop	{r4, r5, pc}
1a00877e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a008780:	9101      	str	r1, [sp, #4]
1a008782:	f7fb fc7b 	bl	1a00407c <__retarget_lock_acquire_recursive>
1a008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00878a:	9901      	ldr	r1, [sp, #4]
1a00878c:	b29a      	uxth	r2, r3
1a00878e:	e7d9      	b.n	1a008744 <_fputwc_r+0x18>

1a008790 <__locale_mb_cur_max>:
1a008790:	4b01      	ldr	r3, [pc, #4]	; (1a008798 <__locale_mb_cur_max+0x8>)
1a008792:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a008796:	4770      	bx	lr
1a008798:	10000880 	.word	0x10000880

1a00879c <__ascii_mbtowc>:
1a00879c:	b082      	sub	sp, #8
1a00879e:	b149      	cbz	r1, 1a0087b4 <__ascii_mbtowc+0x18>
1a0087a0:	b15a      	cbz	r2, 1a0087ba <__ascii_mbtowc+0x1e>
1a0087a2:	b16b      	cbz	r3, 1a0087c0 <__ascii_mbtowc+0x24>
1a0087a4:	7813      	ldrb	r3, [r2, #0]
1a0087a6:	600b      	str	r3, [r1, #0]
1a0087a8:	7812      	ldrb	r2, [r2, #0]
1a0087aa:	1c10      	adds	r0, r2, #0
1a0087ac:	bf18      	it	ne
1a0087ae:	2001      	movne	r0, #1
1a0087b0:	b002      	add	sp, #8
1a0087b2:	4770      	bx	lr
1a0087b4:	a901      	add	r1, sp, #4
1a0087b6:	2a00      	cmp	r2, #0
1a0087b8:	d1f3      	bne.n	1a0087a2 <__ascii_mbtowc+0x6>
1a0087ba:	4610      	mov	r0, r2
1a0087bc:	b002      	add	sp, #8
1a0087be:	4770      	bx	lr
1a0087c0:	f06f 0001 	mvn.w	r0, #1
1a0087c4:	e7f4      	b.n	1a0087b0 <__ascii_mbtowc+0x14>
1a0087c6:	bf00      	nop

1a0087c8 <__swbuf_r>:
1a0087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0087ca:	460d      	mov	r5, r1
1a0087cc:	4614      	mov	r4, r2
1a0087ce:	4606      	mov	r6, r0
1a0087d0:	b110      	cbz	r0, 1a0087d8 <__swbuf_r+0x10>
1a0087d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0087d4:	2b00      	cmp	r3, #0
1a0087d6:	d043      	beq.n	1a008860 <__swbuf_r+0x98>
1a0087d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0087dc:	69a3      	ldr	r3, [r4, #24]
1a0087de:	60a3      	str	r3, [r4, #8]
1a0087e0:	b291      	uxth	r1, r2
1a0087e2:	0708      	lsls	r0, r1, #28
1a0087e4:	d51b      	bpl.n	1a00881e <__swbuf_r+0x56>
1a0087e6:	6923      	ldr	r3, [r4, #16]
1a0087e8:	b1cb      	cbz	r3, 1a00881e <__swbuf_r+0x56>
1a0087ea:	b2ed      	uxtb	r5, r5
1a0087ec:	0489      	lsls	r1, r1, #18
1a0087ee:	462f      	mov	r7, r5
1a0087f0:	d522      	bpl.n	1a008838 <__swbuf_r+0x70>
1a0087f2:	6822      	ldr	r2, [r4, #0]
1a0087f4:	6961      	ldr	r1, [r4, #20]
1a0087f6:	1ad3      	subs	r3, r2, r3
1a0087f8:	4299      	cmp	r1, r3
1a0087fa:	dd29      	ble.n	1a008850 <__swbuf_r+0x88>
1a0087fc:	3301      	adds	r3, #1
1a0087fe:	68a1      	ldr	r1, [r4, #8]
1a008800:	1c50      	adds	r0, r2, #1
1a008802:	3901      	subs	r1, #1
1a008804:	60a1      	str	r1, [r4, #8]
1a008806:	6020      	str	r0, [r4, #0]
1a008808:	7015      	strb	r5, [r2, #0]
1a00880a:	6962      	ldr	r2, [r4, #20]
1a00880c:	429a      	cmp	r2, r3
1a00880e:	d02a      	beq.n	1a008866 <__swbuf_r+0x9e>
1a008810:	89a3      	ldrh	r3, [r4, #12]
1a008812:	07db      	lsls	r3, r3, #31
1a008814:	d501      	bpl.n	1a00881a <__swbuf_r+0x52>
1a008816:	2d0a      	cmp	r5, #10
1a008818:	d025      	beq.n	1a008866 <__swbuf_r+0x9e>
1a00881a:	4638      	mov	r0, r7
1a00881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00881e:	4621      	mov	r1, r4
1a008820:	4630      	mov	r0, r6
1a008822:	f7fd fea9 	bl	1a006578 <__swsetup_r>
1a008826:	bb20      	cbnz	r0, 1a008872 <__swbuf_r+0xaa>
1a008828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00882c:	6923      	ldr	r3, [r4, #16]
1a00882e:	b291      	uxth	r1, r2
1a008830:	b2ed      	uxtb	r5, r5
1a008832:	0489      	lsls	r1, r1, #18
1a008834:	462f      	mov	r7, r5
1a008836:	d4dc      	bmi.n	1a0087f2 <__swbuf_r+0x2a>
1a008838:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00883a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00883e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a008842:	81a2      	strh	r2, [r4, #12]
1a008844:	6822      	ldr	r2, [r4, #0]
1a008846:	6661      	str	r1, [r4, #100]	; 0x64
1a008848:	6961      	ldr	r1, [r4, #20]
1a00884a:	1ad3      	subs	r3, r2, r3
1a00884c:	4299      	cmp	r1, r3
1a00884e:	dcd5      	bgt.n	1a0087fc <__swbuf_r+0x34>
1a008850:	4621      	mov	r1, r4
1a008852:	4630      	mov	r0, r6
1a008854:	f7fb f9e8 	bl	1a003c28 <_fflush_r>
1a008858:	b958      	cbnz	r0, 1a008872 <__swbuf_r+0xaa>
1a00885a:	6822      	ldr	r2, [r4, #0]
1a00885c:	2301      	movs	r3, #1
1a00885e:	e7ce      	b.n	1a0087fe <__swbuf_r+0x36>
1a008860:	f7fb fa3e 	bl	1a003ce0 <__sinit>
1a008864:	e7b8      	b.n	1a0087d8 <__swbuf_r+0x10>
1a008866:	4621      	mov	r1, r4
1a008868:	4630      	mov	r0, r6
1a00886a:	f7fb f9dd 	bl	1a003c28 <_fflush_r>
1a00886e:	2800      	cmp	r0, #0
1a008870:	d0d3      	beq.n	1a00881a <__swbuf_r+0x52>
1a008872:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a008876:	e7d0      	b.n	1a00881a <__swbuf_r+0x52>

1a008878 <_wcrtomb_r>:
1a008878:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00887a:	4c0b      	ldr	r4, [pc, #44]	; (1a0088a8 <_wcrtomb_r+0x30>)
1a00887c:	b085      	sub	sp, #20
1a00887e:	4606      	mov	r6, r0
1a008880:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a008884:	461f      	mov	r7, r3
1a008886:	b121      	cbz	r1, 1a008892 <_wcrtomb_r+0x1a>
1a008888:	47a0      	blx	r4
1a00888a:	1c43      	adds	r3, r0, #1
1a00888c:	d006      	beq.n	1a00889c <_wcrtomb_r+0x24>
1a00888e:	b005      	add	sp, #20
1a008890:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a008892:	460a      	mov	r2, r1
1a008894:	a901      	add	r1, sp, #4
1a008896:	47a0      	blx	r4
1a008898:	1c43      	adds	r3, r0, #1
1a00889a:	d1f8      	bne.n	1a00888e <_wcrtomb_r+0x16>
1a00889c:	2200      	movs	r2, #0
1a00889e:	238a      	movs	r3, #138	; 0x8a
1a0088a0:	603a      	str	r2, [r7, #0]
1a0088a2:	6033      	str	r3, [r6, #0]
1a0088a4:	b005      	add	sp, #20
1a0088a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0088a8:	10000880 	.word	0x10000880

1a0088ac <__ascii_wctomb>:
1a0088ac:	b149      	cbz	r1, 1a0088c2 <__ascii_wctomb+0x16>
1a0088ae:	2aff      	cmp	r2, #255	; 0xff
1a0088b0:	d802      	bhi.n	1a0088b8 <__ascii_wctomb+0xc>
1a0088b2:	700a      	strb	r2, [r1, #0]
1a0088b4:	2001      	movs	r0, #1
1a0088b6:	4770      	bx	lr
1a0088b8:	238a      	movs	r3, #138	; 0x8a
1a0088ba:	6003      	str	r3, [r0, #0]
1a0088bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0088c0:	4770      	bx	lr
1a0088c2:	4608      	mov	r0, r1
1a0088c4:	4770      	bx	lr
1a0088c6:	bf00      	nop
1a0088c8:	6c707041 	.word	0x6c707041
1a0088cc:	74616369 	.word	0x74616369
1a0088d0:	206e6f69 	.word	0x206e6f69
1a0088d4:	6c6c614d 	.word	0x6c6c614d
1a0088d8:	4620636f 	.word	0x4620636f
1a0088dc:	656c6961 	.word	0x656c6961
1a0088e0:	6f482064 	.word	0x6f482064
1a0088e4:	0d216b6f 	.word	0x0d216b6f
1a0088e8:	00000000 	.word	0x00000000
1a0088ec:	7362696c 	.word	0x7362696c
1a0088f0:	6572662f 	.word	0x6572662f
1a0088f4:	6f747265 	.word	0x6f747265
1a0088f8:	6f732f73 	.word	0x6f732f73
1a0088fc:	65637275 	.word	0x65637275
1a008900:	6f6f682f 	.word	0x6f6f682f
1a008904:	632e736b 	.word	0x632e736b
1a008908:	ffffff00 	.word	0xffffff00
1a00890c:	70410a0d 	.word	0x70410a0d
1a008910:	63696c70 	.word	0x63696c70
1a008914:	6f697461 	.word	0x6f697461
1a008918:	7453206e 	.word	0x7453206e
1a00891c:	206b6361 	.word	0x206b6361
1a008920:	7265764f 	.word	0x7265764f
1a008924:	776f6c66 	.word	0x776f6c66
1a008928:	6f202121 	.word	0x6f202121
1a00892c:	6154206e 	.word	0x6154206e
1a008930:	203a6b73 	.word	0x203a6b73
1a008934:	0a0d7325 	.word	0x0a0d7325
1a008938:	ffffff00 	.word	0xffffff00
1a00893c:	41760a0d 	.word	0x41760a0d
1a008940:	72657373 	.word	0x72657373
1a008944:	6c614374 	.word	0x6c614374
1a008948:	2864656c 	.word	0x2864656c
1a00894c:	200a0d29 	.word	0x200a0d29
1a008950:	4c4c2020 	.word	0x4c4c2020
1a008954:	20656e69 	.word	0x20656e69
1a008958:	626d754e 	.word	0x626d754e
1a00895c:	3d207265 	.word	0x3d207265
1a008960:	0d642520 	.word	0x0d642520
1a008964:	2020200a 	.word	0x2020200a
1a008968:	656c6946 	.word	0x656c6946
1a00896c:	6d614e20 	.word	0x6d614e20
1a008970:	203d2065 	.word	0x203d2065
1a008974:	0a0d7325 	.word	0x0a0d7325
1a008978:	ff000a0d 	.word	0xff000a0d
1a00897c:	454c4449 	.word	0x454c4449
1a008980:	ffffff00 	.word	0xffffff00
1a008984:	51726d54 	.word	0x51726d54
1a008988:	ffffff00 	.word	0xffffff00
1a00898c:	20726d54 	.word	0x20726d54
1a008990:	00637653 	.word	0x00637653

1a008994 <ExtRateIn>:
1a008994:	00000000                                ....

1a008998 <GpioButtons>:
1a008998:	08000400 09010900                       ........

1a0089a0 <GpioLeds>:
1a0089a0:	01050005 0e000205 0c010b01              ............

1a0089ac <GpioPorts>:
1a0089ac:	03030003 0f050403 05031005 07030603     ................
1a0089bc:	ffff0802                                ....

1a0089c0 <OscRateIn>:
1a0089c0:	00b71b00                                ....

1a0089c4 <InitClkStates>:
1a0089c4:	01010f01                                ....

1a0089c8 <pinmuxing>:
1a0089c8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0089d8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0089e8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0089f8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a008a08:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a008a18:	00d50301 00d50401 00160107 00560207     ..............V.
1a008a28:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a008a38:	00570206                                ..W.

1a008a3c <UART_BClock>:
1a008a3c:	01a201c2 01620182                       ......b.

1a008a44 <UART_PClock>:
1a008a44:	00820081 00a200a1 08040201 0f0f0f03     ................
1a008a54:	ffff00ff                                ....

1a008a58 <periph_to_base>:
1a008a58:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a008a68:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a008a78:	000100e0 01000100 01200003 00060120     .......... . ...
1a008a88:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008a98:	01820013 00120182 01a201a2 01c20011     ................
1a008aa8:	001001c2 01e201e2 0202000f 000e0202     ................
1a008ab8:	02220222 0223000d 001c0223              "."...#.#...

1a008ac4 <InitClkStates>:
1a008ac4:	00010100 00010909 0001090a 01010701     ................
1a008ad4:	00010902 00010906 0101090c 0001090d     ................
1a008ae4:	0001090e 0001090f 00010910 00010911     ................
1a008af4:	00010912 00010913 00011114 00011119     ................
1a008b04:	0001111a 0001111b                       ........

1a008b0c <gpioPinsInit>:
1a008b0c:	02000104 00050701 05010d03 04080100     ................
1a008b1c:	02020002 02000304 00000403 04070002     ................
1a008b2c:	030c0300 09050402 05040103 04030208     ................
1a008b3c:	04020305 06040504 0802000c 03000b06     ................
1a008b4c:	00090607 07060503 060f0504 03030004     ................
1a008b5c:	02000404 00050404 06040502 04060200     ................
1a008b6c:	0c050408 05040a04 0003010e 14010a00     ................
1a008b7c:	010f0000 0d000012 00001101 0010010c     ................
1a008b8c:	07070300 000f0300 01000001 00000000     ................
1a008b9c:	000a0600 08060603 06100504 04030005     ................
1a008bac:	03000106 04090400 04010d05 010b0000     ................
1a008bbc:	0200000f 00000001 00010104 02010800     ................
1a008bcc:	01090000 09010006 05040002 04010200     ................
1a008bdc:	02020105 02020504 0e00000a 01000b02     ................
1a008bec:	000c020b ffff0c01                       ........

1a008bf4 <_ctype_>:
1a008bf4:	20202000 20202020 28282020 20282828     .         ((((( 
1a008c04:	20202020 20202020 20202020 20202020                     
1a008c14:	10108820 10101010 10101010 10101010      ...............
1a008c24:	04040410 04040404 10040404 10101010     ................
1a008c34:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a008c44:	01010101 01010101 01010101 10101010     ................
1a008c54:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a008c64:	02020202 02020202 02020202 10101010     ................
1a008c74:	00000020 00000000 00000000 00000000      ...............
	...
1a008cf4:	ffffff00 00464e49 00666e69 004e414e     ....INF.inf.NAN.
1a008d04:	006e616e 33323130 37363534 42413938     nan.0123456789AB
1a008d14:	46454443 00000000 33323130 37363534     CDEF....01234567
1a008d24:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
1a008d34:	0000296c ffff0030                       l)..0...

1a008d3c <blanks.8693>:
1a008d3c:	20202020 20202020 20202020 20202020                     

1a008d4c <zeroes.8694>:
1a008d4c:	30303030 30303030 30303030 30303030     0000000000000000
1a008d5c:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....
1a008d6c:	ffffffff                                ....

1a008d70 <__mprec_bigtens>:
1a008d70:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a008d80:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a008d90:	7f73bf3c 75154fdd                       <.s..O.u

1a008d98 <__mprec_tens>:
1a008d98:	00000000 3ff00000 00000000 40240000     .......?......$@
1a008da8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a008db8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a008dc8:	00000000 412e8480 00000000 416312d0     .......A......cA
1a008dd8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a008de8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a008df8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a008e08:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a008e18:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a008e28:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a008e38:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a008e48:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a008e58:	79d99db4 44ea7843                       ...yCx.D

1a008e60 <p05.7442>:
1a008e60:	00000005 00000019 0000007d 00000043     ........}...C...
1a008e70:	49534f50 ffff0058 0000002e              POSIX.......
