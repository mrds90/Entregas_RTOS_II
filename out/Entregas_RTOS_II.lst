
MyCIAAPrograms/RTOS2_15CO/Entregas_RTOS_II/out/Entregas_RTOS_II.elf:     file format elf32-littlearm
MyCIAAPrograms/RTOS2_15CO/Entregas_RTOS_II/out/Entregas_RTOS_II.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000695

Program Header:
0x70000001 off    0x0001b518 vaddr 0x1a00b518 paddr 0x1a00b518 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003d38 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000b520 memsz 0x0000b520 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00b520 align 2**16
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b514  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a2c  10000000  1a00b520  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a2c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a2c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a2c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a2c  2**2
                  CONTENTS
  6 .bss          0000330c  10000a2c  10000a2c  00000a2c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a2c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a2c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a2c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a2c  2**2
                  CONTENTS
 11 .init_array   00000004  1a00b514  1a00b514  0001b514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00b518  1a00b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020a2c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020a2c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020a2c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020a2c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020a2c  2**2
                  CONTENTS
 18 .noinit       00000000  10003d38  10003d38  00020a2c  2**2
                  CONTENTS
 19 .debug_info   0002f961  00000000  00000000  00020a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006506  00000000  00000000  0005038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000d629  00000000  00000000  00056893  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000f88  00000000  00000000  00063ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001210  00000000  00000000  00064e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00010f71  00000000  00000000  00066054  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001d1c3  00000000  00000000  00076fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031a14  00000000  00000000  00094188  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000c5b9c  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000c5c04  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000039a4  00000000  00000000  000c5c38  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a2c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00b514 l    d  .init_array	00000000 .init_array
1a00b518 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003d38 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003158 l     F .text	000000c8 uartProcessIRQ
10003c64 l     O .bss	00000004 rxIsrCallbackUART0
10003c68 l     O .bss	00000004 rxIsrCallbackUART0Params
10003c6c l     O .bss	00000004 rxIsrCallbackUART2
10003c70 l     O .bss	00000004 rxIsrCallbackUART2Params
10003c74 l     O .bss	00000004 rxIsrCallbackUART3
10003c78 l     O .bss	00000004 rxIsrCallbackUART3Params
10003c7c l     O .bss	00000004 txIsrCallbackUART0
10003c80 l     O .bss	00000004 txIsrCallbackUART0Params
10003c84 l     O .bss	00000004 txIsrCallbackUART2
10003c88 l     O .bss	00000004 txIsrCallbackUART2Params
10003c8c l     O .bss	00000004 txIsrCallbackUART3
10003c90 l     O .bss	00000004 txIsrCallbackUART3Params
1a00b13c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 frame_processor.c
10000a2c l     O .bss	00000008 app_buffer_handler_receive.14723
10000a34 l     O .bss	00000008 app_buffer_handler_send.14724
10000a3c l     O .bss	000007d0 memory_pool.14722
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 frame_packer.c
1a0004e0 l     F .text	000000bc UART_RX_ISRFunction
1a00059c l     F .text	00000026 UART_RX_Init
1000120c l     O .bss	00000001 buff_ind
1000120d l     O .bss	00000001 frame_active.14845
10001210 l     O .bss	00000010 frame_api.14822
10001220 l     O .bss	00000008 raw_frame.14821
10001228 l     O .bss	00000001 state.14823
00000000 l    df *ABS*	00000000 system.c
1000122c l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a0007e8 l     F .text	00000064 prvHeapInit
10001234 l     O .bss	00002000 ucHeap
1a00084c l     F .text	00000058 prvInsertBlockIntoFreeList
10001230 l     O .bss	00000004 pxEnd
10003234 l     O .bss	00000004 xBlockAllocatedBit
10003238 l     O .bss	00000004 xFreeBytesRemaining
1000323c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10003240 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000a30 l     F .text	0000001e prvIsQueueFull
1a000a4e l     F .text	0000001a prvIsQueueEmpty
1a000a68 l     F .text	00000076 prvCopyDataToQueue
1a000ade l     F .text	00000024 prvCopyDataFromQueue
1a000b02 l     F .text	0000006e prvUnlockQueue
1a000bf4 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10003248 l     O .bss	00000168 uxIdleTaskStack.10813
100033b0 l     O .bss	000005a0 uxTimerTaskStack.10820
10003950 l     O .bss	00000060 xIdleTaskTCB.10812
100039b0 l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001240 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00126c l     F .text	00000090 prvInitialiseNewTask
1a0012fc l     F .text	0000005c prvInitialiseTaskLists
1a001358 l     F .text	000000ac prvAddNewTaskToReadyList
1a001404 l     F .text	00000038 prvDeleteTCB
1a00143c l     F .text	0000004c prvCheckTasksWaitingTermination
1a001488 l     F .text	00000028 prvIdleTask
1a0014b0 l     F .text	0000007c prvAddCurrentTaskToDelayedList
10003a14 l     O .bss	00000004 pxDelayedTaskList
10003a18 l     O .bss	00000004 pxOverflowDelayedTaskList
10003a1c l     O .bss	0000008c pxReadyTasksLists
10003aa8 l     O .bss	00000004 uxCurrentNumberOfTasks
10003aac l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10003ab0 l     O .bss	00000004 uxPendedTicks
10003ab4 l     O .bss	00000004 uxSchedulerSuspended
10003ab8 l     O .bss	00000004 uxTaskNumber
10003abc l     O .bss	00000004 uxTopReadyPriority
10003ac0 l     O .bss	00000014 xDelayedTaskList1
10003ad4 l     O .bss	00000014 xDelayedTaskList2
10003ae8 l     O .bss	00000004 xNextTaskUnblockTime
10003aec l     O .bss	00000004 xNumOfOverflows
10003af0 l     O .bss	00000014 xPendingReadyList
10003b04 l     O .bss	00000004 xSchedulerRunning
10003b08 l     O .bss	00000014 xTasksWaitingTermination
10003b1c l     O .bss	00000004 xTickCount
10003b20 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001bf8 l     F .text	00000020 prvGetNextExpireTime
1a001c18 l     F .text	00000048 prvInsertTimerInActiveList
1a001c60 l     F .text	00000070 prvCheckForValidListAndQueue
1a002014 l     F .text	00000016 prvTimerTask
1a001da0 l     F .text	00000078 prvSwitchTimerLists
1a001e18 l     F .text	0000002c prvSampleTimeNow
1a001e44 l     F .text	00000060 prvProcessExpiredTimer
1a001ea4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001f18 l     F .text	000000fc prvProcessReceivedCommands
10003b24 l     O .bss	00000004 pxCurrentTimerList
10003b28 l     O .bss	00000004 pxOverflowTimerList
10003b2c l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10003bcc l     O .bss	00000014 xActiveTimerList1
10003be0 l     O .bss	00000014 xActiveTimerList2
10003bf4 l     O .bss	00000004 xLastTime.11863
10003bf8 l     O .bss	00000050 xStaticTimerQueue.11913
10003c48 l     O .bss	00000004 xTimerQueue
10003c4c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00202c l     F .text	00000040 prvTaskExitError
1a00206c l     F .text	00000022 prvPortStartFirstTask
1a002094 l     F .text	0000000e vPortEnableVFP
1a002100 l       .text	00000000 pxCurrentTCBConst2
1a0021e0 l       .text	00000000 pxCurrentTCBConst
10003c50 l     O .bss	00000001 ucMaxSysCallPriority
10003c54 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0023d4 l     F .text	00000044 Board_LED_Init
1a002418 l     F .text	00000040 Board_TEC_Init
1a002458 l     F .text	00000040 Board_GPIO_Init
1a002498 l     F .text	00000030 Board_ADC_Init
1a0024c8 l     F .text	00000038 Board_SPI_Init
1a002500 l     F .text	00000024 Board_I2C_Init
1a00afc8 l     O .text	00000008 GpioButtons
1a00afd0 l     O .text	0000000c GpioLeds
1a00afdc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00aff4 l     O .text	00000004 InitClkStates
1a00aff8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0026f0 l     F .text	0000002c Chip_UART_GetIndex
1a00b06c l     O .text	00000008 UART_BClock
1a00b074 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00288c l     F .text	00000014 Chip_ADC_GetClockIndex
1a0028a0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002968 l     F .text	000000a0 pll_calc_divs
1a002a08 l     F .text	0000010c pll_get_frac
1a002b14 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002d88 l     F .text	00000022 Chip_Clock_GetDivRate
10003c5c l     O .bss	00000008 audio_usb_pll_freq
1a00b088 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00b0f4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003050 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003064 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003410 l     F .text	00000002 errorOcurred
1a003412 l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00351c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10003c94 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004628 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a00b3b8 l     O .text	00000010 blanks.8678
1a00b3c8 l     O .text	00000010 zeroes.8679
00000000 l    df *ABS*	00000000 vfprintf.c
1a0089f4 l     F .text	00000084 __sbprintf
1a00b3d8 l     O .text	00000010 blanks.8693
1a00b3e8 l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a008b48 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00b4f8 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a00ab98 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000088 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00b518 l       .init_array	00000000 __init_array_end
1a00b514 l       .bss_RAM5	00000000 __preinit_array_end
1a00b514 l       .init_array	00000000 __init_array_start
1a00b514 l       .bss_RAM5	00000000 __preinit_array_start
1a004030 g     F .text	0000002c .hidden __aeabi_dcmpun
1a002bac g     F .text	0000001c Chip_Clock_GetDividerSource
1a000734 g     F .text	00000012 _isatty_r
1a003ff4 g     F .text	00000012 .hidden __aeabi_dcmple
1a0051ac g     F .text	0000009c _puts_r
1a003494 g     F .text	00000044 TIMER2_IRQHandler
1a00336c g     F .text	00000014 uartRxRead
1a003f30 g     F .text	0000007a .hidden __cmpdf2
1a000746 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a003f30 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002148 g     F .text	0000002c vPortExitCritical
1a003aa0 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a005184 g     F .text	00000028 printf
1a0025ba g     F .text	00000008 __stdio_init
10003d14 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00ae70 g     F .text	00000034 _wcrtomb_r
1a005348 g     F .text	00000020 __sseek
1a004684 g     F .text	00000054 __sinit
1a00adc0 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0010cc g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a002946 g     F .text	0000000c Chip_ADC_SetResolution
1a005178 g     F .text	0000000c __malloc_unlock
1a0021e4 g     F .text	0000002c SysTick_Handler
1a002770 g     F .text	00000040 Chip_UART_SetBaud
10003d18 g     O .bss	00000001 __lock___arc4random_mutex
1a000690  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00255c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a009f70 g     F .text	000000ce memmove
1a002180 g     F .text	00000064 PendSV_Handler
1a000300 g     F .text	000000ec TASK_FrameProcessor
1a005258 g     F .text	0000008c snprintf
1a000e78 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00a040 g     F .text	0000004c _Balloc
1a00b520 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a003f20 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10003a10 g     O .bss	00000004 pxCurrentTCB
1a00072a g     F .text	0000000a _fstat_r
53ff71fa g       *ABS*	00000000 __valid_user_code_checksum
1a00b520 g       .ARM.exidx	00000000 _etext
1a003fbc g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001a88 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0034d8 g     F .text	00000044 TIMER3_IRQHandler
1a002e2a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002248 g     F .text	00000110 xPortStartScheduler
1a004f98 g     F .text	00000134 memcpy
1a001994 g     F .text	00000030 vTaskPlaceOnEventList
1a003fac g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004678 g     F .text	0000000c _cleanup_r
1a005460 g     F .text	00001a3c _svfprintf_r
1a003a28 g     F .text	00000022 .hidden __floatsidf
1a002210  w    F .text	00000038 vPortSetupTimerInterrupt
1a003f28 g     F .text	00000082 .hidden __ltdf2
1a0040ac g     F .text	00000000 .hidden __aeabi_uldivmod
10003d38 g       .noinit	00000000 _noinit
1a005248 g     F .text	00000010 puts
1a0009c0 g     F .text	00000070 vPortFree
10003d0c g     O .bss	00000004 SystemCoreClock
1a00271c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002358 g     F .text	0000005c vPortValidateInterruptPriority
1a000650 g     F .text	00000040 TASK_FramePrinter
1a00b430 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a002ea8 g     F .text	0000004c Chip_Clock_GetRate
1a00113a g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10003cc8 g     O .bss	00000004 __malloc_top_pad
1a0025fc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003a08 g     F .text	0000001e .hidden __aeabi_ui2d
1a009dcc g     F .text	00000008 _localeconv_r
1a00a1cc g     F .text	00000012 __i2b
1a009ac4 g     F .text	00000308 __sfvwrite_r
1a0040dc g     F .text	000002d0 .hidden __udivmoddi4
1a003784 g     F .text	00000000 .hidden __aeabi_drsub
1a0007c8 g     F .text	00000020 _sbrk_r
1a00afc4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000750 g     F .text	0000004e _read_r
1a001134 g     F .text	00000006 vListInitialiseItem
1a003fe0 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0043b0 g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000f48 g     F .text	0000015c xQueueReceive
10003ccc g     O .bss	00000040 xQueueRegistry
10003cc0 g     O .bss	00000004 __malloc_max_sbrked_mem
1a003a4c g     F .text	00000042 .hidden __extendsfdf2
1a003d50 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0011c4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003790 g     F .text	00000276 .hidden __adddf3
1a00b518 g       .ARM.exidx	00000000 __exidx_start
10003d1c g     O .bss	00000001 __lock___env_recursive_mutex
1a003afc g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10003d20 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00a654 g     F .text	0000036c _realloc_r
1a0049d0 g     F .text	00000048 __libc_init_array
1a00ad24 g     F .text	00000064 _fputwc_r
1a00b408 g     O .text	00000028 __mprec_bigtens
1a003a08 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00a464 g     F .text	00000038 __mcmp
1a0008a4 g     F .text	0000011c pvPortMalloc
1a002578 g     F .text	00000030 Board_Init
1a00071e  w    F .text	00000002 _init
1a00111e g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0016a8 g     F .text	0000000c xTaskGetTickCount
1a000cf8 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003d38 g       .bss	00000000 _ebss
1a003414 g     F .text	00000040 TIMER0_IRQHandler
1a000456 g     F .text	00000044 QMPool_get
1a000694 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00a12c g     F .text	00000040 __hi0bits
1a0026b8 g     F .text	00000038 Chip_I2C_SetClockRate
1a00405c g     F .text	0000004e .hidden __fixdfsi
1a001b44 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002b60 g     F .text	0000004c Chip_Clock_EnableCrystal
10003d24 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0019fc g     F .text	0000008c xTaskRemoveFromEventList
1a001208  w    F .text	0000001c vApplicationMallocFailedHook
1a003790 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a003f28 g     F .text	00000082 .hidden __ledf2
1a00a310 g     F .text	000000a0 __pow5mult
1a003a90 g     F .text	0000006a .hidden __aeabi_ul2d
1a003454 g     F .text	00000040 TIMER1_IRQHandler
1a002694 g     F .text	00000024 Chip_I2C_Init
1a004a24 g     F .text	00000002 __retarget_lock_release_recursive
1a0033fc g     F .text	0000000a UART2_IRQHandler
1a002d1c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00b184 g     O .text	000000e6 gpioPinsInit
1a003220 g     F .text	00000090 uartInterrupt
1a0011dc  w    F .text	0000002c vAssertCalled
1a00307c g     F .text	00000012 Chip_SSP_SetClockRate
1a00401c g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0046d8 g     F .text	0000000c __sfp_lock_acquire
1a009ed0 g     F .text	00000000 memchr
1a001aa0 g     F .text	00000078 xTaskCheckForTimeOut
1a004790 g     F .text	000001ec _free_r
1a002e04 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00ad88 g     F .text	0000000c __locale_mb_cur_max
1a004008 g     F .text	00000012 .hidden __aeabi_dcmpge
10000a2c g       .bss	00000000 _bss
1a002914 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00378c g     F .text	0000027a .hidden __aeabi_dsub
100008b8 g     O .data	00000004 __malloc_sbrk_base
10003c58 g     O .bss	00000004 freeRtosInterruptCallback
1a001698 g     F .text	00000010 vTaskSuspendAll
1a003a90 g     F .text	0000006a .hidden __floatundidf
1a00a3b0 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00aaa0 g     F .text	000000f6 __ssprint_r
1a00308e g     F .text	0000003e Chip_SSP_SetBitRate
1a001184 g     F .text	00000026 uxListRemove
1a00304c g     F .text	00000002 Chip_GPIO_Init
1a00aff0 g     O .text	00000004 OscRateIn
1a003380 g     F .text	0000007c uartInit
1a00a1e0 g     F .text	00000130 __multiply
1a00152c g     F .text	00000072 xTaskCreateStatic
10003d38 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00aa2c g     F .text	00000072 strncpy
10003c98 g     O .bss	00000028 __malloc_current_mallinfo
1a00a594 g     F .text	000000be __d2b
1a0018c8 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000c16 g     F .text	00000092 xQueueGenericCreateStatic
1a0019c4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000720 g     F .text	0000000a _close_r
1a003a28 g     F .text	00000022 .hidden __aeabi_i2d
1a003550 g     F .text	000001ac gpioInit
1a0011ac g     F .text	00000018 vApplicationGetIdleTaskMemory
1a004a1c g     F .text	00000002 __retarget_lock_close_recursive
1a001d34 g     F .text	0000006c xTimerGenericCommand
1a008a78 g     F .text	000000d0 __swsetup_r
1a001224  w    F .text	0000001c vApplicationStackOverflowHook
1a0043ac  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003d50 g     F .text	000001d0 .hidden __divdf3
100004b0 g     O .data	00000408 __malloc_av_
1a003afc g     F .text	00000254 .hidden __muldf3
1a0052e4 g     F .text	00000022 __sread
1a0036fc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00516c g     F .text	0000000c __malloc_lock
1a002548 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0045cc g     F .text	0000005a _fflush_r
1a00ac24 g     F .text	0000005e _calloc_r
1a002bc8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004a20 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0050cc g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00049c g     F .text	00000044 main
10003cc4 g     O .bss	00000004 __malloc_max_total_mem
1a004a18 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001150 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0020e0 g     F .text	00000024 SVC_Handler
1a005368 g     F .text	00000008 __sclose
1a001cd0 g     F .text	00000064 xTimerCreateTimerTask
1a008c70 g     F .text	00000e54 _dtoa_r
1a004a28 g     F .text	00000570 _malloc_r
1a00aea4 g     F .text	0000001a __ascii_wctomb
1a003aa0 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002e38 g     F .text	0000003c Chip_Clock_EnableOpts
1a0025b2 g     F .text	00000008 __stdio_getchar
1a000ca8 g     F .text	0000004e xQueueGenericCreate
1a0046f0 g     F .text	000000a0 _malloc_trim_r
1a002be4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002c9c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003104 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003f30 g     F .text	0000007a .hidden __nedf2
1a00071c  w    F .text	00000002 _fini
1a0017cc g     F .text	000000fc xTaskResumeAll
1a001604 g     F .text	00000094 vTaskStartScheduler
1a0028d4 g     F .text	00000040 Chip_ADC_Init
10003d10 g     O .bss	00000004 g_pUsbApi
1a0025c4 g     F .text	00000038 Board_SetupMuxing
1a000438 g     F .text	0000001e QMPool_put
1a0027b0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00079e g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000080 g     O .data	00000004 _impure_ptr
1a004480 g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00ad94 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a001b18 g     F .text	0000000c vTaskMissedYield
10003d38 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0030cc g     F .text	00000038 Chip_SSP_Init
1a0010a4 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0016b4 g     F .text	00000118 xTaskIncrementTick
1a009dd4 g     F .text	0000005c __swhatbuf_r
1a0023b4 g     F .text	00000020 DAC_IRQHandler
1a002524 g     F .text	00000024 Board_Debug_Init
1a003fcc g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0025a8 g     F .text	0000000a __stdio_putchar
1a000b70 g     F .text	00000084 xQueueGenericReset
10000a2c g       .data	00000000 _edata
1a002674 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00ac84 g     F .text	0000009e __fputwc
10003d28 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0005c4 g     F .text	0000008c TASK_FramePacker
1a00159e g     F .text	00000066 xTaskCreate
1a002ef4 g     F .text	00000158 Chip_SetupCoreClock
1a005308 g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
100008bc g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a00497c g     F .text	00000052 _fwalk_reent
1a002954 g     F .text	00000014 SystemCoreClockUpdate
1a00a49c g     F .text	000000f8 __mdiff
1a00405c g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0046e4 g     F .text	0000000c __sfp_lock_release
1a0003ec g     F .text	0000004c QMPool_init
1a001b24 g     F .text	00000020 xTaskGetSchedulerState
1a00b26c g     O .text	00000101 _ctype_
1a0043ac  w    F .text	00000002 .hidden __aeabi_idiv0
1a004030 g     F .text	0000002c .hidden __unorddf2
1a0032b0 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
10003d2c g     O .bss	00000001 __lock___dd_hash_mutex
1a009e30 g     F .text	00000094 __smakebuf_r
10003d30 g     O .bss	00000001 __lock___tz_mutex
1a005380 g     F .text	000000dc strlen
1a0020a8 g     F .text	0000002c pxPortInitialiseStack
1a002e74 g     F .text	00000034 Chip_Clock_Enable
1a003fbc g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a003f20 g     F .text	0000008a .hidden __gedf2
1a003406 g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00ac10 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a003a4c g     F .text	00000042 .hidden __aeabi_f2d
1a003718 g     F .text	0000006c boardInit
1a002104 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a00378c g     F .text	0000027a .hidden __subdf3
1a006ea0 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00a16c g     F .text	00000060 __lo0bits
1a00a9c0 g     F .text	0000006c frexp
100008c0 g     O .data	0000016c __global_locale
1a002dac g     F .text	00000058 Chip_Clock_SetBaseClock
1a00313c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10003d34 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a002668 g     F .text	0000000c Board_SystemInit
1a00a0a0 g     F .text	0000008a __multadd
1a00a08c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 95 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fa 71 ff 53     }............q.S
	...
1a00002c:	e1 20 00 1a 85 01 00 1a 00 00 00 00 81 21 00 1a     . ...........!..
1a00003c:	e5 21 00 1a                                         .!..

1a000040 <g_pfnVendorVectors>:
1a000040:	b5 23 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .#..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	fd 36 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .6..............
1a000070:	15 34 00 1a 55 34 00 1a 95 34 00 1a d9 34 00 1a     .4..U4...4...4..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a fd 33 00 1a 07 34 00 1a     .........3...4..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00b520 	.word	0x1a00b520
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a2c 	.word	0x00000a2c
1a000120:	1a00b520 	.word	0x1a00b520
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00b520 	.word	0x1a00b520
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00b520 	.word	0x1a00b520
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00b520 	.word	0x1a00b520
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a2c 	.word	0x10000a2c
1a000154:	0000330c 	.word	0x0000330c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f002 ffca 	bl	1a003158 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <TASK_FrameProcessor>:
/*=====[Prototypes (declarations) of private functions]======================*/

/*=====[Implementations of public functions]=================================*/

// Task implementation
void TASK_FrameProcessor( void* taskParmPtr ) {
1a000300:	b510      	push	{r4, lr}
1a000302:	b084      	sub	sp, #16
   };
   static buffer_handler_t app_buffer_handler_send = {
      .queue = NULL,
      .pool = NULL
   };
   QMPool_init( app_buffer_handler_receive.pool, (void*) memory_pool, POOL_SIZE_BYTES , POOL_PACKET_SIZE);
1a000304:	4c32      	ldr	r4, [pc, #200]	; (1a0003d0 <TASK_FrameProcessor+0xd0>)
1a000306:	23c8      	movs	r3, #200	; 0xc8
1a000308:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a00030c:	4931      	ldr	r1, [pc, #196]	; (1a0003d4 <TASK_FrameProcessor+0xd4>)
1a00030e:	6820      	ldr	r0, [r4, #0]
1a000310:	f000 f86c 	bl	1a0003ec <QMPool_init>
   if ( app_buffer_handler_receive.queue == NULL ) {
1a000314:	6863      	ldr	r3, [r4, #4]
1a000316:	b303      	cbz	r3, 1a00035a <TASK_FrameProcessor+0x5a>
      app_buffer_handler_receive.queue = xQueueCreate( QUEUE_SIZE, sizeof( frame_t ) );
   }
   configASSERT( app_buffer_handler_receive.queue != NULL );
1a000318:	4b2d      	ldr	r3, [pc, #180]	; (1a0003d0 <TASK_FrameProcessor+0xd0>)
1a00031a:	685b      	ldr	r3, [r3, #4]
1a00031c:	b323      	cbz	r3, 1a000368 <TASK_FrameProcessor+0x68>

   if ( app_buffer_handler_send.queue == NULL ) {
1a00031e:	4b2e      	ldr	r3, [pc, #184]	; (1a0003d8 <TASK_FrameProcessor+0xd8>)
1a000320:	685b      	ldr	r3, [r3, #4]
1a000322:	b353      	cbz	r3, 1a00037a <TASK_FrameProcessor+0x7a>
      app_buffer_handler_send.queue = xQueueCreate( QUEUE_SIZE, sizeof( frame_t ) );
   }
   configASSERT( app_buffer_handler_send.queue != NULL );
1a000324:	4b2c      	ldr	r3, [pc, #176]	; (1a0003d8 <TASK_FrameProcessor+0xd8>)
1a000326:	685b      	ldr	r3, [r3, #4]
1a000328:	b37b      	cbz	r3, 1a00038a <TASK_FrameProcessor+0x8a>
   app_buffer_handler_send.pool = app_buffer_handler_receive.pool;
1a00032a:	4b29      	ldr	r3, [pc, #164]	; (1a0003d0 <TASK_FrameProcessor+0xd0>)
1a00032c:	6819      	ldr	r1, [r3, #0]
1a00032e:	4a2a      	ldr	r2, [pc, #168]	; (1a0003d8 <TASK_FrameProcessor+0xd8>)
1a000330:	6011      	str	r1, [r2, #0]

   BaseType_t xReturned = xTaskCreate(
1a000332:	2200      	movs	r2, #0
1a000334:	9201      	str	r2, [sp, #4]
1a000336:	2202      	movs	r2, #2
1a000338:	9200      	str	r2, [sp, #0]
1a00033a:	225a      	movs	r2, #90	; 0x5a
1a00033c:	4927      	ldr	r1, [pc, #156]	; (1a0003dc <TASK_FrameProcessor+0xdc>)
1a00033e:	4828      	ldr	r0, [pc, #160]	; (1a0003e0 <TASK_FrameProcessor+0xe0>)
1a000340:	f001 f92d 	bl	1a00159e <xTaskCreate>
      configMINIMAL_STACK_SIZE,
      (void *)&app_buffer_handler_receive,
      tskIDLE_PRIORITY + 2,
      NULL
   );
   configASSERT( xReturned == pdPASS );
1a000344:	2801      	cmp	r0, #1
1a000346:	d029      	beq.n	1a00039c <TASK_FrameProcessor+0x9c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000348:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00034c:	f383 8811 	msr	BASEPRI, r3
1a000350:	f3bf 8f6f 	isb	sy
1a000354:	f3bf 8f4f 	dsb	sy
1a000358:	e7fe      	b.n	1a000358 <TASK_FrameProcessor+0x58>
      app_buffer_handler_receive.queue = xQueueCreate( QUEUE_SIZE, sizeof( frame_t ) );
1a00035a:	2200      	movs	r2, #0
1a00035c:	2110      	movs	r1, #16
1a00035e:	200a      	movs	r0, #10
1a000360:	f000 fca2 	bl	1a000ca8 <xQueueGenericCreate>
1a000364:	6060      	str	r0, [r4, #4]
1a000366:	e7d7      	b.n	1a000318 <TASK_FrameProcessor+0x18>
1a000368:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00036c:	f383 8811 	msr	BASEPRI, r3
1a000370:	f3bf 8f6f 	isb	sy
1a000374:	f3bf 8f4f 	dsb	sy
   configASSERT( app_buffer_handler_receive.queue != NULL );
1a000378:	e7fe      	b.n	1a000378 <TASK_FrameProcessor+0x78>
      app_buffer_handler_send.queue = xQueueCreate( QUEUE_SIZE, sizeof( frame_t ) );
1a00037a:	2200      	movs	r2, #0
1a00037c:	2110      	movs	r1, #16
1a00037e:	200a      	movs	r0, #10
1a000380:	f000 fc92 	bl	1a000ca8 <xQueueGenericCreate>
1a000384:	4b14      	ldr	r3, [pc, #80]	; (1a0003d8 <TASK_FrameProcessor+0xd8>)
1a000386:	6058      	str	r0, [r3, #4]
1a000388:	e7cc      	b.n	1a000324 <TASK_FrameProcessor+0x24>
1a00038a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00038e:	f383 8811 	msr	BASEPRI, r3
1a000392:	f3bf 8f6f 	isb	sy
1a000396:	f3bf 8f4f 	dsb	sy
   configASSERT( app_buffer_handler_send.queue != NULL );
1a00039a:	e7fe      	b.n	1a00039a <TASK_FrameProcessor+0x9a>

   xReturned = xTaskCreate(
1a00039c:	2300      	movs	r3, #0
1a00039e:	9301      	str	r3, [sp, #4]
1a0003a0:	2301      	movs	r3, #1
1a0003a2:	9300      	str	r3, [sp, #0]
1a0003a4:	4b0c      	ldr	r3, [pc, #48]	; (1a0003d8 <TASK_FrameProcessor+0xd8>)
1a0003a6:	225a      	movs	r2, #90	; 0x5a
1a0003a8:	490e      	ldr	r1, [pc, #56]	; (1a0003e4 <TASK_FrameProcessor+0xe4>)
1a0003aa:	480f      	ldr	r0, [pc, #60]	; (1a0003e8 <TASK_FrameProcessor+0xe8>)
1a0003ac:	f001 f8f7 	bl	1a00159e <xTaskCreate>
   );

   frame_t *frame;
   
   while( true ) {
      xQueueReceive(app_buffer_handler_receive.queue, &frame, portMAX_DELAY);
1a0003b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0003b4:	a903      	add	r1, sp, #12
1a0003b6:	4b06      	ldr	r3, [pc, #24]	; (1a0003d0 <TASK_FrameProcessor+0xd0>)
1a0003b8:	6858      	ldr	r0, [r3, #4]
1a0003ba:	f000 fdc5 	bl	1a000f48 <xQueueReceive>
      // Do something with the frame

      xQueueSend(app_buffer_handler_send.queue, &frame, portMAX_DELAY);
1a0003be:	2300      	movs	r3, #0
1a0003c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0003c4:	a903      	add	r1, sp, #12
1a0003c6:	4804      	ldr	r0, [pc, #16]	; (1a0003d8 <TASK_FrameProcessor+0xd8>)
1a0003c8:	6840      	ldr	r0, [r0, #4]
1a0003ca:	f000 fc95 	bl	1a000cf8 <xQueueGenericSend>
1a0003ce:	e7ef      	b.n	1a0003b0 <TASK_FrameProcessor+0xb0>
1a0003d0:	10000a2c 	.word	0x10000a2c
1a0003d4:	10000a3c 	.word	0x10000a3c
1a0003d8:	10000a34 	.word	0x10000a34
1a0003dc:	1a00aec0 	.word	0x1a00aec0
1a0003e0:	1a0005c5 	.word	0x1a0005c5
1a0003e4:	1a00aed0 	.word	0x1a00aed0
1a0003e8:	1a000651 	.word	0x1a000651

1a0003ec <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init( QMPool * const me, void * const poolSto,
                  unsigned int poolSize, unsigned short blockSize )
{
1a0003ec:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock *fb;
    unsigned short nblocks;

    me->free_head = poolSto;
1a0003ee:	6001      	str	r1, [r0, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = ( QMPoolSize )sizeof( QFreeBlock ); /* start with just one */
1a0003f0:	2404      	movs	r4, #4
1a0003f2:	8184      	strh	r4, [r0, #12]
    nblocks = ( unsigned short )1; /* #free blocks that fit in one memory block */
1a0003f4:	2501      	movs	r5, #1
    while ( me->blockSize < ( QMPoolSize )blockSize )
1a0003f6:	8984      	ldrh	r4, [r0, #12]
1a0003f8:	429c      	cmp	r4, r3
1a0003fa:	d204      	bcs.n	1a000406 <QMPool_init+0x1a>
    {
        me->blockSize += ( QMPoolSize )sizeof( QFreeBlock );
1a0003fc:	3404      	adds	r4, #4
1a0003fe:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a000400:	3501      	adds	r5, #1
1a000402:	b2ad      	uxth	r5, r5
1a000404:	e7f7      	b.n	1a0003f6 <QMPool_init+0xa>
    }
    blockSize = ( unsigned short )me->blockSize; /* round-up to nearest block */

    /* chain all blocks together in a free-list... */
    poolSize -= ( unsigned int )blockSize; /* don't count the last block */
1a000406:	4627      	mov	r7, r4
1a000408:	1b14      	subs	r4, r2, r4
    me->nTot  = ( QMPoolCtr )1;  /* the last block already in the pool */
1a00040a:	2301      	movs	r3, #1
1a00040c:	81c3      	strh	r3, [r0, #14]
    fb = ( QFreeBlock * )me->free_head; /* start at the head of the free list */
1a00040e:	6803      	ldr	r3, [r0, #0]

    /* chain all blocks together in a free-list... */
    while ( poolSize >= ( unsigned int )blockSize )
1a000410:	e007      	b.n	1a000422 <QMPool_init+0x36>
    {
        fb->next = &QF_PTR_AT_( fb, nblocks ); /*point next link to next block */
1a000412:	eb03 0285 	add.w	r2, r3, r5, lsl #2
1a000416:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
1a000418:	681b      	ldr	r3, [r3, #0]
        poolSize -= ( unsigned int )blockSize; /* reduce available pool size */
1a00041a:	1be4      	subs	r4, r4, r7
        ++me->nTot;              /* increment the number of blocks so far */
1a00041c:	89c6      	ldrh	r6, [r0, #14]
1a00041e:	3601      	adds	r6, #1
1a000420:	81c6      	strh	r6, [r0, #14]
    while ( poolSize >= ( unsigned int )blockSize )
1a000422:	42a7      	cmp	r7, r4
1a000424:	d9f5      	bls.n	1a000412 <QMPool_init+0x26>
    }

    fb->next  = ( QFreeBlock * )0; /* the last link points to NULL */
1a000426:	2200      	movs	r2, #0
1a000428:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
1a00042a:	89c2      	ldrh	r2, [r0, #14]
1a00042c:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
1a00042e:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;         /* the original start this pool buffer */
1a000430:	6041      	str	r1, [r0, #4]
    me->end   = fb;              /* the last block in this pool */
1a000432:	6083      	str	r3, [r0, #8]
}
1a000434:	bcf0      	pop	{r4, r5, r6, r7}
1a000436:	4770      	bx	lr

1a000438 <QMPool_put>:
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put( QMPool * const me, void *b )
{
1a000438:	b538      	push	{r3, r4, r5, lr}
1a00043a:	4604      	mov	r4, r0
1a00043c:	460d      	mov	r5, r1
    //UBaseType_t uxSavedInterruptStatus;
    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */

    portENTER_CRITICAL(); //Enter on critical section
1a00043e:	f001 fe61 	bl	1a002104 <vPortEnterCritical>
    //uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();

    ( ( QFreeBlock * )b )->next = ( QFreeBlock * )me->free_head; /* link into list */
1a000442:	6823      	ldr	r3, [r4, #0]
1a000444:	602b      	str	r3, [r5, #0]
    me->free_head = b;      /* set as new head of the free list */
1a000446:	6025      	str	r5, [r4, #0]
    ++me->nFree;            /* one more free block in this pool */
1a000448:	8a23      	ldrh	r3, [r4, #16]
1a00044a:	3301      	adds	r3, #1
1a00044c:	b29b      	uxth	r3, r3
1a00044e:	8223      	strh	r3, [r4, #16]
    //taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    portEXIT_CRITICAL(); //Exit from critical section
1a000450:	f001 fe7a 	bl	1a002148 <vPortExitCritical>
}
1a000454:	bd38      	pop	{r3, r4, r5, pc}

1a000456 <QMPool_get>:
* @usage
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get( QMPool * const me, unsigned short const margin )
{
1a000456:	b538      	push	{r3, r4, r5, lr}
1a000458:	4604      	mov	r4, r0
1a00045a:	460d      	mov	r5, r1
    QFreeBlock *fb;

    portENTER_CRITICAL(); //Enter on critical section
1a00045c:	f001 fe52 	bl	1a002104 <vPortEnterCritical>

    /* have more free blocks than the requested margin? */
    if ( me->nFree > ( QMPoolCtr )margin )
1a000460:	8a23      	ldrh	r3, [r4, #16]
1a000462:	b29b      	uxth	r3, r3
1a000464:	42ab      	cmp	r3, r5
1a000466:	d916      	bls.n	1a000496 <QMPool_get+0x40>
    {
        void *fb_next;
        fb = ( QFreeBlock * )me->free_head; /* get a free block */
1a000468:	6825      	ldr	r5, [r4, #0]

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
1a00046a:	682a      	ldr	r2, [r5, #0]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
1a00046c:	8a23      	ldrh	r3, [r4, #16]
1a00046e:	3b01      	subs	r3, #1
1a000470:	b29b      	uxth	r3, r3
1a000472:	8223      	strh	r3, [r4, #16]
        if ( me->nFree == ( QMPoolCtr )0 )
1a000474:	8a23      	ldrh	r3, [r4, #16]
1a000476:	b29b      	uxth	r3, r3
1a000478:	b92b      	cbnz	r3, 1a000486 <QMPool_get+0x30>
        {

            me->nMin = ( QMPoolCtr )0; /* remember that the pool got empty */
1a00047a:	8263      	strh	r3, [r4, #18]
            {
                me->nMin = me->nFree; /* remember the new minimum */
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
1a00047c:	6022      	str	r2, [r4, #0]

        fb = ( QFreeBlock * )0;

    }

    portEXIT_CRITICAL(); //Exit from critical section
1a00047e:	f001 fe63 	bl	1a002148 <vPortExitCritical>

    return fb;  /* return the block or NULL pointer to the caller */
}
1a000482:	4628      	mov	r0, r5
1a000484:	bd38      	pop	{r3, r4, r5, pc}
            if ( me->nMin > me->nFree )
1a000486:	8a61      	ldrh	r1, [r4, #18]
1a000488:	8a23      	ldrh	r3, [r4, #16]
1a00048a:	b29b      	uxth	r3, r3
1a00048c:	4299      	cmp	r1, r3
1a00048e:	d9f5      	bls.n	1a00047c <QMPool_get+0x26>
                me->nMin = me->nFree; /* remember the new minimum */
1a000490:	8a23      	ldrh	r3, [r4, #16]
1a000492:	8263      	strh	r3, [r4, #18]
1a000494:	e7f2      	b.n	1a00047c <QMPool_get+0x26>
        fb = ( QFreeBlock * )0;
1a000496:	2500      	movs	r5, #0
1a000498:	e7f1      	b.n	1a00047e <QMPool_get+0x28>
1a00049a:	Address 0x000000001a00049a is out of bounds.


1a00049c <main>:
/*=====[Implementations of public functions]=================================*/



int main( void )
{
1a00049c:	b500      	push	{lr}
1a00049e:	b083      	sub	sp, #12
   /* Inicializar la placa */
   boardConfig();
1a0004a0:	f003 f93a 	bl	1a003718 <boardInit>
   BaseType_t xReturned = xTaskCreate(
1a0004a4:	2300      	movs	r3, #0
1a0004a6:	9301      	str	r3, [sp, #4]
1a0004a8:	2201      	movs	r2, #1
1a0004aa:	9200      	str	r2, [sp, #0]
1a0004ac:	225a      	movs	r2, #90	; 0x5a
1a0004ae:	490a      	ldr	r1, [pc, #40]	; (1a0004d8 <main+0x3c>)
1a0004b0:	480a      	ldr	r0, [pc, #40]	; (1a0004dc <main+0x40>)
1a0004b2:	f001 f874 	bl	1a00159e <xTaskCreate>
      configMINIMAL_STACK_SIZE,
      NULL,
      tskIDLE_PRIORITY + 1,
      NULL
   );
   configASSERT(xReturned == pdPASS);
1a0004b6:	2801      	cmp	r0, #1
1a0004b8:	d008      	beq.n	1a0004cc <main+0x30>
1a0004ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004be:	f383 8811 	msr	BASEPRI, r3
1a0004c2:	f3bf 8f6f 	isb	sy
1a0004c6:	f3bf 8f4f 	dsb	sy
1a0004ca:	e7fe      	b.n	1a0004ca <main+0x2e>
   /* arranco el scheduler */
   vTaskStartScheduler();
1a0004cc:	f001 f89a 	bl	1a001604 <vTaskStartScheduler>
   return 0;
}
1a0004d0:	2000      	movs	r0, #0
1a0004d2:	b003      	add	sp, #12
1a0004d4:	f85d fb04 	ldr.w	pc, [sp], #4
1a0004d8:	1a00aee0 	.word	0x1a00aee0
1a0004dc:	1a000301 	.word	0x1a000301

1a0004e0 <UART_RX_ISRFunction>:
   uartInterrupt(UART_USB, true);
}

/*=====[Implementations of interrupt functions]==============================*/

static void UART_RX_ISRFunction( void *parameter ) {
1a0004e0:	b510      	push	{r4, lr}
1a0004e2:	b082      	sub	sp, #8
1a0004e4:	4604      	mov	r4, r0
	static uint8_t frame_active = 0;
	static raw_frame_t *raw_frame; 
	BaseType_t px_higher_priority_task_woken = pdFALSE;
1a0004e6:	2300      	movs	r3, #0
1a0004e8:	9301      	str	r3, [sp, #4]
	buffer_handler_t* buffer_handler = (buffer_handler_t*) parameter;
	char character;
	character = uartRxRead(UART_USB);
1a0004ea:	2003      	movs	r0, #3
1a0004ec:	f002 ff3e 	bl	1a00336c <uartRxRead>

	if (character == START_OF_MESSAGE) {
1a0004f0:	2828      	cmp	r0, #40	; 0x28
1a0004f2:	d00b      	beq.n	1a00050c <UART_RX_ISRFunction+0x2c>
		if (raw_frame->data != NULL) {
			buff_ind = 0;
			frame_active = 1;
		}
	}
	else if ((character == END_OF_MESSAGE) && frame_active) {
1a0004f4:	2829      	cmp	r0, #41	; 0x29
1a0004f6:	d01e      	beq.n	1a000536 <UART_RX_ISRFunction+0x56>
			if (px_higher_priority_task_woken == pdTRUE) {
				portYIELD_FROM_ISR(px_higher_priority_task_woken);
			}
		}
	}
	else if (frame_active) {
1a0004f8:	4b25      	ldr	r3, [pc, #148]	; (1a000590 <UART_RX_ISRFunction+0xb0>)
1a0004fa:	781b      	ldrb	r3, [r3, #0]
1a0004fc:	2b00      	cmp	r3, #0
1a0004fe:	d039      	beq.n	1a000574 <UART_RX_ISRFunction+0x94>
		RxBuff[buff_ind++] = character;
1a000500:	4a24      	ldr	r2, [pc, #144]	; (1a000594 <UART_RX_ISRFunction+0xb4>)
1a000502:	7813      	ldrb	r3, [r2, #0]
1a000504:	3301      	adds	r3, #1
1a000506:	7013      	strb	r3, [r2, #0]
	else if (buff_ind >= MAX_BUFF) {
		buff_ind = 0;
		frame_active = 0;
		QMPool_put(buffer_handler->pool, (void*) raw_frame->data);
	}
}
1a000508:	b002      	add	sp, #8
1a00050a:	bd10      	pop	{r4, pc}
		if(frame_active == 0) {
1a00050c:	4b20      	ldr	r3, [pc, #128]	; (1a000590 <UART_RX_ISRFunction+0xb0>)
1a00050e:	781b      	ldrb	r3, [r3, #0]
1a000510:	b153      	cbz	r3, 1a000528 <UART_RX_ISRFunction+0x48>
		if (raw_frame->data != NULL) {
1a000512:	2300      	movs	r3, #0
1a000514:	681b      	ldr	r3, [r3, #0]
1a000516:	2b00      	cmp	r3, #0
1a000518:	d0f6      	beq.n	1a000508 <UART_RX_ISRFunction+0x28>
			buff_ind = 0;
1a00051a:	4b1e      	ldr	r3, [pc, #120]	; (1a000594 <UART_RX_ISRFunction+0xb4>)
1a00051c:	2200      	movs	r2, #0
1a00051e:	701a      	strb	r2, [r3, #0]
			frame_active = 1;
1a000520:	4b1b      	ldr	r3, [pc, #108]	; (1a000590 <UART_RX_ISRFunction+0xb0>)
1a000522:	2201      	movs	r2, #1
1a000524:	701a      	strb	r2, [r3, #0]
1a000526:	e7ef      	b.n	1a000508 <UART_RX_ISRFunction+0x28>
			raw_frame->data = (char*) QMPool_get(buffer_handler->pool,0);
1a000528:	2100      	movs	r1, #0
1a00052a:	6820      	ldr	r0, [r4, #0]
1a00052c:	f7ff ff93 	bl	1a000456 <QMPool_get>
1a000530:	2300      	movs	r3, #0
1a000532:	6018      	str	r0, [r3, #0]
1a000534:	e7ed      	b.n	1a000512 <UART_RX_ISRFunction+0x32>
	else if ((character == END_OF_MESSAGE) && frame_active) {
1a000536:	4b16      	ldr	r3, [pc, #88]	; (1a000590 <UART_RX_ISRFunction+0xb0>)
1a000538:	781b      	ldrb	r3, [r3, #0]
1a00053a:	2b00      	cmp	r3, #0
1a00053c:	d0dc      	beq.n	1a0004f8 <UART_RX_ISRFunction+0x18>
		frame_active = 0;
1a00053e:	2300      	movs	r3, #0
1a000540:	4a13      	ldr	r2, [pc, #76]	; (1a000590 <UART_RX_ISRFunction+0xb0>)
1a000542:	7013      	strb	r3, [r2, #0]
		raw_frame->data_size = buff_ind;
1a000544:	4a13      	ldr	r2, [pc, #76]	; (1a000594 <UART_RX_ISRFunction+0xb4>)
1a000546:	7812      	ldrb	r2, [r2, #0]
1a000548:	711a      	strb	r2, [r3, #4]
		if(buffer_handler->queue != NULL) {
1a00054a:	6860      	ldr	r0, [r4, #4]
1a00054c:	2800      	cmp	r0, #0
1a00054e:	d0db      	beq.n	1a000508 <UART_RX_ISRFunction+0x28>
			xQueueSendFromISR(buffer_handler->queue, raw_frame, &px_higher_priority_task_woken);
1a000550:	aa01      	add	r2, sp, #4
1a000552:	4619      	mov	r1, r3
1a000554:	f000 fc90 	bl	1a000e78 <xQueueGenericSendFromISR>
			if (px_higher_priority_task_woken == pdTRUE) {
1a000558:	9b01      	ldr	r3, [sp, #4]
1a00055a:	2b01      	cmp	r3, #1
1a00055c:	d1d4      	bne.n	1a000508 <UART_RX_ISRFunction+0x28>
				portYIELD_FROM_ISR(px_higher_priority_task_woken);
1a00055e:	2b00      	cmp	r3, #0
1a000560:	d0d2      	beq.n	1a000508 <UART_RX_ISRFunction+0x28>
1a000562:	4b0d      	ldr	r3, [pc, #52]	; (1a000598 <UART_RX_ISRFunction+0xb8>)
1a000564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000568:	601a      	str	r2, [r3, #0]
1a00056a:	f3bf 8f4f 	dsb	sy
1a00056e:	f3bf 8f6f 	isb	sy
1a000572:	e7c9      	b.n	1a000508 <UART_RX_ISRFunction+0x28>
	else if (buff_ind >= MAX_BUFF) {
1a000574:	4b07      	ldr	r3, [pc, #28]	; (1a000594 <UART_RX_ISRFunction+0xb4>)
1a000576:	781b      	ldrb	r3, [r3, #0]
1a000578:	2bc7      	cmp	r3, #199	; 0xc7
1a00057a:	d9c5      	bls.n	1a000508 <UART_RX_ISRFunction+0x28>
		buff_ind = 0;
1a00057c:	2300      	movs	r3, #0
1a00057e:	4a05      	ldr	r2, [pc, #20]	; (1a000594 <UART_RX_ISRFunction+0xb4>)
1a000580:	7013      	strb	r3, [r2, #0]
		frame_active = 0;
1a000582:	4a03      	ldr	r2, [pc, #12]	; (1a000590 <UART_RX_ISRFunction+0xb0>)
1a000584:	7013      	strb	r3, [r2, #0]
		QMPool_put(buffer_handler->pool, (void*) raw_frame->data);
1a000586:	6819      	ldr	r1, [r3, #0]
1a000588:	6820      	ldr	r0, [r4, #0]
1a00058a:	f7ff ff55 	bl	1a000438 <QMPool_put>
}
1a00058e:	e7bb      	b.n	1a000508 <UART_RX_ISRFunction+0x28>
1a000590:	1000120d 	.word	0x1000120d
1a000594:	1000120c 	.word	0x1000120c
1a000598:	e000ed04 	.word	0xe000ed04

1a00059c <UART_RX_Init>:
static void UART_RX_Init( void *UARTCallBackFunc, void *parameter ) {
1a00059c:	b538      	push	{r3, r4, r5, lr}
1a00059e:	4604      	mov	r4, r0
1a0005a0:	460d      	mov	r5, r1
   uartConfig(UART_USB, 115200);
1a0005a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005a6:	2003      	movs	r0, #3
1a0005a8:	f002 feea 	bl	1a003380 <uartInit>
   uartCallbackSet(UART_USB, UART_RECEIVE, UARTCallBackFunc, parameter);
1a0005ac:	462b      	mov	r3, r5
1a0005ae:	4622      	mov	r2, r4
1a0005b0:	2100      	movs	r1, #0
1a0005b2:	2003      	movs	r0, #3
1a0005b4:	f002 fe7c 	bl	1a0032b0 <uartCallbackSet>
   uartInterrupt(UART_USB, true);
1a0005b8:	2101      	movs	r1, #1
1a0005ba:	2003      	movs	r0, #3
1a0005bc:	f002 fe30 	bl	1a003220 <uartInterrupt>
}
1a0005c0:	bd38      	pop	{r3, r4, r5, pc}
1a0005c2:	Address 0x000000001a0005c2 is out of bounds.


1a0005c4 <TASK_FramePacker>:
void TASK_FramePacker(void* taskParmPtr) {
1a0005c4:	b570      	push	{r4, r5, r6, lr}
1a0005c6:	4606      	mov	r6, r0
	buffer_handler_isr->queue = NULL;
1a0005c8:	2400      	movs	r4, #0
1a0005ca:	6064      	str	r4, [r4, #4]
	buffer_handler_isr->pool = buffer_handler_app->pool;
1a0005cc:	6803      	ldr	r3, [r0, #0]
1a0005ce:	6023      	str	r3, [r4, #0]
      buffer_handler_isr->queue = xQueueCreate( QUEUE_SIZE, sizeof( frame_t ) );
1a0005d0:	4622      	mov	r2, r4
1a0005d2:	2110      	movs	r1, #16
1a0005d4:	200a      	movs	r0, #10
1a0005d6:	f000 fb67 	bl	1a000ca8 <xQueueGenericCreate>
1a0005da:	6060      	str	r0, [r4, #4]
	configASSERT(buffer_handler_isr->queue != NULL);
1a0005dc:	b120      	cbz	r0, 1a0005e8 <TASK_FramePacker+0x24>
	UART_RX_Init(UART_RX_ISRFunction, (void*) buffer_handler_isr);
1a0005de:	2100      	movs	r1, #0
1a0005e0:	4817      	ldr	r0, [pc, #92]	; (1a000640 <TASK_FramePacker+0x7c>)
1a0005e2:	f7ff ffdb 	bl	1a00059c <UART_RX_Init>
1a0005e6:	e011      	b.n	1a00060c <TASK_FramePacker+0x48>
1a0005e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0005ec:	f383 8811 	msr	BASEPRI, r3
1a0005f0:	f3bf 8f6f 	isb	sy
1a0005f4:	f3bf 8f4f 	dsb	sy
	configASSERT(buffer_handler_isr->queue != NULL);
1a0005f8:	e7fe      	b.n	1a0005f8 <TASK_FramePacker+0x34>
				state = FRAME_WAITING;
1a0005fa:	2400      	movs	r4, #0
1a0005fc:	4b11      	ldr	r3, [pc, #68]	; (1a000644 <TASK_FramePacker+0x80>)
1a0005fe:	701c      	strb	r4, [r3, #0]
				QMPool_put(buffer_handler_isr->pool, raw_frame.data);
1a000600:	4d11      	ldr	r5, [pc, #68]	; (1a000648 <TASK_FramePacker+0x84>)
1a000602:	6829      	ldr	r1, [r5, #0]
1a000604:	6820      	ldr	r0, [r4, #0]
1a000606:	f7ff ff17 	bl	1a000438 <QMPool_put>
				raw_frame.data = NULL;
1a00060a:	602c      	str	r4, [r5, #0]
		switch (state) {
1a00060c:	4b0d      	ldr	r3, [pc, #52]	; (1a000644 <TASK_FramePacker+0x80>)
1a00060e:	781b      	ldrb	r3, [r3, #0]
1a000610:	2b02      	cmp	r3, #2
1a000612:	d0f2      	beq.n	1a0005fa <TASK_FramePacker+0x36>
1a000614:	2b03      	cmp	r3, #3
1a000616:	d00b      	beq.n	1a000630 <TASK_FramePacker+0x6c>
1a000618:	2b00      	cmp	r3, #0
1a00061a:	d1f7      	bne.n	1a00060c <TASK_FramePacker+0x48>
			xQueueReceive(buffer_handler_isr->queue, &raw_frame, portMAX_DELAY);
1a00061c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000620:	4909      	ldr	r1, [pc, #36]	; (1a000648 <TASK_FramePacker+0x84>)
1a000622:	6858      	ldr	r0, [r3, #4]
1a000624:	f000 fc90 	bl	1a000f48 <xQueueReceive>
			state = FRAME_CRC_CHECK;
1a000628:	4b06      	ldr	r3, [pc, #24]	; (1a000644 <TASK_FramePacker+0x80>)
1a00062a:	2201      	movs	r2, #1
1a00062c:	701a      	strb	r2, [r3, #0]
			break;
1a00062e:	e7ed      	b.n	1a00060c <TASK_FramePacker+0x48>
			xQueueSend(buffer_handler_app->queue, &frame_api, portMAX_DELAY);
1a000630:	2300      	movs	r3, #0
1a000632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000636:	4905      	ldr	r1, [pc, #20]	; (1a00064c <TASK_FramePacker+0x88>)
1a000638:	6870      	ldr	r0, [r6, #4]
1a00063a:	f000 fb5d 	bl	1a000cf8 <xQueueGenericSend>
			break;
1a00063e:	e7e5      	b.n	1a00060c <TASK_FramePacker+0x48>
1a000640:	1a0004e1 	.word	0x1a0004e1
1a000644:	10001228 	.word	0x10001228
1a000648:	10001220 	.word	0x10001220
1a00064c:	10001210 	.word	0x10001210

1a000650 <TASK_FramePrinter>:
void TASK_FramePrinter(void* taskParmPtr) {
1a000650:	b510      	push	{r4, lr}
1a000652:	b086      	sub	sp, #24
1a000654:	4604      	mov	r4, r0
      xQueueReceive(buffer_handler_print->queue, &frame_print, portMAX_DELAY);
1a000656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00065a:	a902      	add	r1, sp, #8
1a00065c:	6860      	ldr	r0, [r4, #4]
1a00065e:	f000 fc73 	bl	1a000f48 <xQueueReceive>
	  snprintf(frame_print.id, frame_print.data_size + 1, "%s%s%s", frame_print.id, frame_print.cmd, frame_print.data); 
1a000662:	f89d 1014 	ldrb.w	r1, [sp, #20]
1a000666:	9b04      	ldr	r3, [sp, #16]
1a000668:	9301      	str	r3, [sp, #4]
1a00066a:	9b03      	ldr	r3, [sp, #12]
1a00066c:	9300      	str	r3, [sp, #0]
1a00066e:	9b02      	ldr	r3, [sp, #8]
1a000670:	4a06      	ldr	r2, [pc, #24]	; (1a00068c <TASK_FramePrinter+0x3c>)
1a000672:	3101      	adds	r1, #1
1a000674:	4618      	mov	r0, r3
1a000676:	f004 fdef 	bl	1a005258 <snprintf>
	  printf("%s\n", frame_print.id);
1a00067a:	9802      	ldr	r0, [sp, #8]
1a00067c:	f004 fde4 	bl	1a005248 <puts>
	  QMPool_put(buffer_handler_print->pool, frame_print.id);
1a000680:	9902      	ldr	r1, [sp, #8]
1a000682:	6820      	ldr	r0, [r4, #0]
1a000684:	f7ff fed8 	bl	1a000438 <QMPool_put>
1a000688:	e7e5      	b.n	1a000656 <TASK_FramePrinter+0x6>
1a00068a:	bf00      	nop
1a00068c:	1a00aef0 	.word	0x1a00aef0

1a000690 <initialise_monitor_handles>:
}
1a000690:	4770      	bx	lr
1a000692:	Address 0x000000001a000692 is out of bounds.


1a000694 <Reset_Handler>:
void Reset_Handler(void) {
1a000694:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000696:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000698:	4b19      	ldr	r3, [pc, #100]	; (1a000700 <Reset_Handler+0x6c>)
1a00069a:	4a1a      	ldr	r2, [pc, #104]	; (1a000704 <Reset_Handler+0x70>)
1a00069c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00069e:	3304      	adds	r3, #4
1a0006a0:	4a19      	ldr	r2, [pc, #100]	; (1a000708 <Reset_Handler+0x74>)
1a0006a2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006a4:	2300      	movs	r3, #0
1a0006a6:	e005      	b.n	1a0006b4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0006a8:	4a18      	ldr	r2, [pc, #96]	; (1a00070c <Reset_Handler+0x78>)
1a0006aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006b2:	3301      	adds	r3, #1
1a0006b4:	2b07      	cmp	r3, #7
1a0006b6:	d9f7      	bls.n	1a0006a8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0006b8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0006ba:	4b15      	ldr	r3, [pc, #84]	; (1a000710 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0006bc:	e007      	b.n	1a0006ce <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0006be:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0006c2:	689a      	ldr	r2, [r3, #8]
1a0006c4:	6859      	ldr	r1, [r3, #4]
1a0006c6:	6818      	ldr	r0, [r3, #0]
1a0006c8:	f7ff fd5f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0006cc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0006ce:	4a11      	ldr	r2, [pc, #68]	; (1a000714 <Reset_Handler+0x80>)
1a0006d0:	4293      	cmp	r3, r2
1a0006d2:	d3f4      	bcc.n	1a0006be <Reset_Handler+0x2a>
1a0006d4:	e006      	b.n	1a0006e4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0006d6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0006d8:	6859      	ldr	r1, [r3, #4]
1a0006da:	f854 0b08 	ldr.w	r0, [r4], #8
1a0006de:	f7ff fd63 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0006e2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0006e4:	4a0c      	ldr	r2, [pc, #48]	; (1a000718 <Reset_Handler+0x84>)
1a0006e6:	4293      	cmp	r3, r2
1a0006e8:	d3f5      	bcc.n	1a0006d6 <Reset_Handler+0x42>
    SystemInit();
1a0006ea:	f002 fd0b 	bl	1a003104 <SystemInit>
    __libc_init_array();
1a0006ee:	f004 f96f 	bl	1a0049d0 <__libc_init_array>
    initialise_monitor_handles();
1a0006f2:	f7ff ffcd 	bl	1a000690 <initialise_monitor_handles>
    main();
1a0006f6:	f7ff fed1 	bl	1a00049c <main>
        __asm__ volatile("wfi");
1a0006fa:	bf30      	wfi
1a0006fc:	e7fd      	b.n	1a0006fa <Reset_Handler+0x66>
1a0006fe:	bf00      	nop
1a000700:	40053100 	.word	0x40053100
1a000704:	10df1000 	.word	0x10df1000
1a000708:	01dff7ff 	.word	0x01dff7ff
1a00070c:	e000e280 	.word	0xe000e280
1a000710:	1a000114 	.word	0x1a000114
1a000714:	1a000150 	.word	0x1a000150
1a000718:	1a000178 	.word	0x1a000178

1a00071c <_fini>:
void _fini(void) {}
1a00071c:	4770      	bx	lr

1a00071e <_init>:
void _init(void) {}
1a00071e:	4770      	bx	lr

1a000720 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000720:	2309      	movs	r3, #9
1a000722:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000728:	4770      	bx	lr

1a00072a <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00072a:	2358      	movs	r3, #88	; 0x58
1a00072c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00072e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000732:	4770      	bx	lr

1a000734 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000734:	2902      	cmp	r1, #2
1a000736:	d904      	bls.n	1a000742 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000738:	2309      	movs	r3, #9
1a00073a:	6003      	str	r3, [r0, #0]
       return -1;
1a00073c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000740:	4770      	bx	lr
       return 1;
1a000742:	2001      	movs	r0, #1
   }
}
1a000744:	4770      	bx	lr

1a000746 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000746:	2358      	movs	r3, #88	; 0x58
1a000748:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00074a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00074e:	4770      	bx	lr

1a000750 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000750:	2902      	cmp	r1, #2
1a000752:	d81f      	bhi.n	1a000794 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000758:	461d      	mov	r5, r3
1a00075a:	4617      	mov	r7, r2
1a00075c:	4606      	mov	r6, r0
  size_t i = 0;
1a00075e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000760:	42ac      	cmp	r4, r5
1a000762:	d211      	bcs.n	1a000788 <_read_r+0x38>
         int c = __stdio_getchar();
1a000764:	f001 ff25 	bl	1a0025b2 <__stdio_getchar>
         if( c != -1 ){
1a000768:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00076c:	d0f8      	beq.n	1a000760 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00076e:	f104 0801 	add.w	r8, r4, #1
1a000772:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000774:	280d      	cmp	r0, #13
1a000776:	d003      	beq.n	1a000780 <_read_r+0x30>
1a000778:	280a      	cmp	r0, #10
1a00077a:	d001      	beq.n	1a000780 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a00077c:	4644      	mov	r4, r8
1a00077e:	e7ef      	b.n	1a000760 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000780:	f001 ff17 	bl	1a0025b2 <__stdio_getchar>
               return i;
1a000784:	4640      	mov	r0, r8
1a000786:	e003      	b.n	1a000790 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000788:	2313      	movs	r3, #19
1a00078a:	6033      	str	r3, [r6, #0]
      return -1;
1a00078c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000794:	2313      	movs	r3, #19
1a000796:	6003      	str	r3, [r0, #0]
      return -1;
1a000798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00079c:	4770      	bx	lr

1a00079e <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00079e:	2902      	cmp	r1, #2
1a0007a0:	d80c      	bhi.n	1a0007bc <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0007a2:	b570      	push	{r4, r5, r6, lr}
1a0007a4:	461d      	mov	r5, r3
1a0007a6:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0007a8:	2400      	movs	r4, #0
1a0007aa:	42ac      	cmp	r4, r5
1a0007ac:	d204      	bcs.n	1a0007b8 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0007ae:	5d30      	ldrb	r0, [r6, r4]
1a0007b0:	f001 fefa 	bl	1a0025a8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0007b4:	3401      	adds	r4, #1
1a0007b6:	e7f8      	b.n	1a0007aa <_write_r+0xc>
       return n;
1a0007b8:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0007ba:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0007bc:	2313      	movs	r3, #19
1a0007be:	6003      	str	r3, [r0, #0]
       return -1;
1a0007c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0007c4:	4770      	bx	lr
1a0007c6:	Address 0x000000001a0007c6 is out of bounds.


1a0007c8 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0007c8:	4b05      	ldr	r3, [pc, #20]	; (1a0007e0 <_sbrk_r+0x18>)
1a0007ca:	681b      	ldr	r3, [r3, #0]
1a0007cc:	b123      	cbz	r3, 1a0007d8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0007ce:	4b04      	ldr	r3, [pc, #16]	; (1a0007e0 <_sbrk_r+0x18>)
1a0007d0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0007d2:	4401      	add	r1, r0
1a0007d4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0007d6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0007d8:	4b01      	ldr	r3, [pc, #4]	; (1a0007e0 <_sbrk_r+0x18>)
1a0007da:	4a02      	ldr	r2, [pc, #8]	; (1a0007e4 <_sbrk_r+0x1c>)
1a0007dc:	601a      	str	r2, [r3, #0]
1a0007de:	e7f6      	b.n	1a0007ce <_sbrk_r+0x6>
1a0007e0:	1000122c 	.word	0x1000122c
1a0007e4:	10003d38 	.word	0x10003d38

1a0007e8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a0007e8:	4a12      	ldr	r2, [pc, #72]	; (1a000834 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0007ea:	f012 0f07 	tst.w	r2, #7
1a0007ee:	d007      	beq.n	1a000800 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0007f0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007f2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0007f6:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0007fa:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007fc:	460a      	mov	r2, r1
1a0007fe:	e001      	b.n	1a000804 <prvHeapInit+0x1c>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000804:	480c      	ldr	r0, [pc, #48]	; (1a000838 <prvHeapInit+0x50>)
1a000806:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000808:	2100      	movs	r1, #0
1a00080a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a00080c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a00080e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000810:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000814:	4809      	ldr	r0, [pc, #36]	; (1a00083c <prvHeapInit+0x54>)
1a000816:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000818:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a00081a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a00081c:	1a99      	subs	r1, r3, r2
1a00081e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000820:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000822:	4b07      	ldr	r3, [pc, #28]	; (1a000840 <prvHeapInit+0x58>)
1a000824:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000826:	4b07      	ldr	r3, [pc, #28]	; (1a000844 <prvHeapInit+0x5c>)
1a000828:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a00082a:	4b07      	ldr	r3, [pc, #28]	; (1a000848 <prvHeapInit+0x60>)
1a00082c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000830:	601a      	str	r2, [r3, #0]
}
1a000832:	4770      	bx	lr
1a000834:	10001234 	.word	0x10001234
1a000838:	10003240 	.word	0x10003240
1a00083c:	10001230 	.word	0x10001230
1a000840:	1000323c 	.word	0x1000323c
1a000844:	10003238 	.word	0x10003238
1a000848:	10003234 	.word	0x10003234

1a00084c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a00084c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00084e:	4a13      	ldr	r2, [pc, #76]	; (1a00089c <prvInsertBlockIntoFreeList+0x50>)
1a000850:	e000      	b.n	1a000854 <prvInsertBlockIntoFreeList+0x8>
1a000852:	461a      	mov	r2, r3
1a000854:	6813      	ldr	r3, [r2, #0]
1a000856:	4283      	cmp	r3, r0
1a000858:	d3fb      	bcc.n	1a000852 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a00085a:	6851      	ldr	r1, [r2, #4]
1a00085c:	1854      	adds	r4, r2, r1
1a00085e:	4284      	cmp	r4, r0
1a000860:	d00a      	beq.n	1a000878 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000862:	6841      	ldr	r1, [r0, #4]
1a000864:	1844      	adds	r4, r0, r1
1a000866:	42a3      	cmp	r3, r4
1a000868:	d00b      	beq.n	1a000882 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a00086a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00086c:	4290      	cmp	r0, r2
1a00086e:	d000      	beq.n	1a000872 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000870:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000872:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000876:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000878:	6840      	ldr	r0, [r0, #4]
1a00087a:	4401      	add	r1, r0
1a00087c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a00087e:	4610      	mov	r0, r2
1a000880:	e7ef      	b.n	1a000862 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000882:	4c07      	ldr	r4, [pc, #28]	; (1a0008a0 <prvInsertBlockIntoFreeList+0x54>)
1a000884:	6824      	ldr	r4, [r4, #0]
1a000886:	42a3      	cmp	r3, r4
1a000888:	d006      	beq.n	1a000898 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a00088a:	685b      	ldr	r3, [r3, #4]
1a00088c:	4419      	add	r1, r3
1a00088e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000890:	6813      	ldr	r3, [r2, #0]
1a000892:	681b      	ldr	r3, [r3, #0]
1a000894:	6003      	str	r3, [r0, #0]
1a000896:	e7e9      	b.n	1a00086c <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000898:	6004      	str	r4, [r0, #0]
1a00089a:	e7e7      	b.n	1a00086c <prvInsertBlockIntoFreeList+0x20>
1a00089c:	10003240 	.word	0x10003240
1a0008a0:	10001230 	.word	0x10001230

1a0008a4 <pvPortMalloc>:
{
1a0008a4:	b570      	push	{r4, r5, r6, lr}
1a0008a6:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0008a8:	f000 fef6 	bl	1a001698 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0008ac:	4b3f      	ldr	r3, [pc, #252]	; (1a0009ac <pvPortMalloc+0x108>)
1a0008ae:	681b      	ldr	r3, [r3, #0]
1a0008b0:	b1bb      	cbz	r3, 1a0008e2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0008b2:	4b3f      	ldr	r3, [pc, #252]	; (1a0009b0 <pvPortMalloc+0x10c>)
1a0008b4:	681b      	ldr	r3, [r3, #0]
1a0008b6:	421c      	tst	r4, r3
1a0008b8:	d116      	bne.n	1a0008e8 <pvPortMalloc+0x44>
			if( xWantedSize > 0 )
1a0008ba:	b334      	cbz	r4, 1a00090a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a0008bc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0008be:	f014 0f07 	tst.w	r4, #7
1a0008c2:	d022      	beq.n	1a00090a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0008c4:	f024 0407 	bic.w	r4, r4, #7
1a0008c8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0008ca:	f004 0307 	and.w	r3, r4, #7
1a0008ce:	b1e3      	cbz	r3, 1a00090a <pvPortMalloc+0x66>
1a0008d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008d4:	f383 8811 	msr	BASEPRI, r3
1a0008d8:	f3bf 8f6f 	isb	sy
1a0008dc:	f3bf 8f4f 	dsb	sy
1a0008e0:	e7fe      	b.n	1a0008e0 <pvPortMalloc+0x3c>
			prvHeapInit();
1a0008e2:	f7ff ff81 	bl	1a0007e8 <prvHeapInit>
1a0008e6:	e7e4      	b.n	1a0008b2 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a0008e8:	f000 ff70 	bl	1a0017cc <xTaskResumeAll>
void *pvReturn = NULL;
1a0008ec:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0008ee:	f000 fc8b 	bl	1a001208 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0008f2:	f016 0f07 	tst.w	r6, #7
1a0008f6:	d057      	beq.n	1a0009a8 <pvPortMalloc+0x104>
1a0008f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008fc:	f383 8811 	msr	BASEPRI, r3
1a000900:	f3bf 8f6f 	isb	sy
1a000904:	f3bf 8f4f 	dsb	sy
1a000908:	e7fe      	b.n	1a000908 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00090a:	b134      	cbz	r4, 1a00091a <pvPortMalloc+0x76>
1a00090c:	4b29      	ldr	r3, [pc, #164]	; (1a0009b4 <pvPortMalloc+0x110>)
1a00090e:	681b      	ldr	r3, [r3, #0]
1a000910:	42a3      	cmp	r3, r4
1a000912:	d306      	bcc.n	1a000922 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000914:	4b28      	ldr	r3, [pc, #160]	; (1a0009b8 <pvPortMalloc+0x114>)
1a000916:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000918:	e009      	b.n	1a00092e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00091a:	f000 ff57 	bl	1a0017cc <xTaskResumeAll>
void *pvReturn = NULL;
1a00091e:	2600      	movs	r6, #0
1a000920:	e7e5      	b.n	1a0008ee <pvPortMalloc+0x4a>
	( void ) xTaskResumeAll();
1a000922:	f000 ff53 	bl	1a0017cc <xTaskResumeAll>
void *pvReturn = NULL;
1a000926:	2600      	movs	r6, #0
1a000928:	e7e1      	b.n	1a0008ee <pvPortMalloc+0x4a>
					pxPreviousBlock = pxBlock;
1a00092a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a00092c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00092e:	686a      	ldr	r2, [r5, #4]
1a000930:	42a2      	cmp	r2, r4
1a000932:	d202      	bcs.n	1a00093a <pvPortMalloc+0x96>
1a000934:	682a      	ldr	r2, [r5, #0]
1a000936:	2a00      	cmp	r2, #0
1a000938:	d1f7      	bne.n	1a00092a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00093a:	4a1c      	ldr	r2, [pc, #112]	; (1a0009ac <pvPortMalloc+0x108>)
1a00093c:	6812      	ldr	r2, [r2, #0]
1a00093e:	42aa      	cmp	r2, r5
1a000940:	d014      	beq.n	1a00096c <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000942:	681e      	ldr	r6, [r3, #0]
1a000944:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000946:	682a      	ldr	r2, [r5, #0]
1a000948:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00094a:	686b      	ldr	r3, [r5, #4]
1a00094c:	1b1b      	subs	r3, r3, r4
1a00094e:	2b10      	cmp	r3, #16
1a000950:	d914      	bls.n	1a00097c <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000952:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000954:	f010 0f07 	tst.w	r0, #7
1a000958:	d00c      	beq.n	1a000974 <pvPortMalloc+0xd0>
1a00095a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00095e:	f383 8811 	msr	BASEPRI, r3
1a000962:	f3bf 8f6f 	isb	sy
1a000966:	f3bf 8f4f 	dsb	sy
1a00096a:	e7fe      	b.n	1a00096a <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a00096c:	f000 ff2e 	bl	1a0017cc <xTaskResumeAll>
void *pvReturn = NULL;
1a000970:	2600      	movs	r6, #0
1a000972:	e7bc      	b.n	1a0008ee <pvPortMalloc+0x4a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000974:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000976:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000978:	f7ff ff68 	bl	1a00084c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a00097c:	686a      	ldr	r2, [r5, #4]
1a00097e:	490d      	ldr	r1, [pc, #52]	; (1a0009b4 <pvPortMalloc+0x110>)
1a000980:	680b      	ldr	r3, [r1, #0]
1a000982:	1a9b      	subs	r3, r3, r2
1a000984:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000986:	490d      	ldr	r1, [pc, #52]	; (1a0009bc <pvPortMalloc+0x118>)
1a000988:	6809      	ldr	r1, [r1, #0]
1a00098a:	428b      	cmp	r3, r1
1a00098c:	d201      	bcs.n	1a000992 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a00098e:	490b      	ldr	r1, [pc, #44]	; (1a0009bc <pvPortMalloc+0x118>)
1a000990:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000992:	4b07      	ldr	r3, [pc, #28]	; (1a0009b0 <pvPortMalloc+0x10c>)
1a000994:	681b      	ldr	r3, [r3, #0]
1a000996:	4313      	orrs	r3, r2
1a000998:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a00099a:	2300      	movs	r3, #0
1a00099c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a00099e:	f000 ff15 	bl	1a0017cc <xTaskResumeAll>
		if( pvReturn == NULL )
1a0009a2:	2e00      	cmp	r6, #0
1a0009a4:	d1a5      	bne.n	1a0008f2 <pvPortMalloc+0x4e>
1a0009a6:	e7a2      	b.n	1a0008ee <pvPortMalloc+0x4a>
}
1a0009a8:	4630      	mov	r0, r6
1a0009aa:	bd70      	pop	{r4, r5, r6, pc}
1a0009ac:	10001230 	.word	0x10001230
1a0009b0:	10003234 	.word	0x10003234
1a0009b4:	10003238 	.word	0x10003238
1a0009b8:	10003240 	.word	0x10003240
1a0009bc:	1000323c 	.word	0x1000323c

1a0009c0 <vPortFree>:
	if( pv != NULL )
1a0009c0:	b380      	cbz	r0, 1a000a24 <vPortFree+0x64>
{
1a0009c2:	b538      	push	{r3, r4, r5, lr}
1a0009c4:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0009c6:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0009ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0009ce:	4916      	ldr	r1, [pc, #88]	; (1a000a28 <vPortFree+0x68>)
1a0009d0:	6809      	ldr	r1, [r1, #0]
1a0009d2:	420a      	tst	r2, r1
1a0009d4:	d108      	bne.n	1a0009e8 <vPortFree+0x28>
1a0009d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009da:	f383 8811 	msr	BASEPRI, r3
1a0009de:	f3bf 8f6f 	isb	sy
1a0009e2:	f3bf 8f4f 	dsb	sy
1a0009e6:	e7fe      	b.n	1a0009e6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a0009e8:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0009ec:	b140      	cbz	r0, 1a000a00 <vPortFree+0x40>
1a0009ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f2:	f383 8811 	msr	BASEPRI, r3
1a0009f6:	f3bf 8f6f 	isb	sy
1a0009fa:	f3bf 8f4f 	dsb	sy
1a0009fe:	e7fe      	b.n	1a0009fe <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000a00:	ea22 0201 	bic.w	r2, r2, r1
1a000a04:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000a08:	f000 fe46 	bl	1a001698 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000a0c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000a10:	4a06      	ldr	r2, [pc, #24]	; (1a000a2c <vPortFree+0x6c>)
1a000a12:	6813      	ldr	r3, [r2, #0]
1a000a14:	440b      	add	r3, r1
1a000a16:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000a18:	4628      	mov	r0, r5
1a000a1a:	f7ff ff17 	bl	1a00084c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000a1e:	f000 fed5 	bl	1a0017cc <xTaskResumeAll>
}
1a000a22:	bd38      	pop	{r3, r4, r5, pc}
1a000a24:	4770      	bx	lr
1a000a26:	bf00      	nop
1a000a28:	10003234 	.word	0x10003234
1a000a2c:	10003238 	.word	0x10003238

1a000a30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000a30:	b510      	push	{r4, lr}
1a000a32:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000a34:	f001 fb66 	bl	1a002104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000a38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000a3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a3c:	429a      	cmp	r2, r3
1a000a3e:	d004      	beq.n	1a000a4a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000a40:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000a42:	f001 fb81 	bl	1a002148 <vPortExitCritical>

	return xReturn;
}
1a000a46:	4620      	mov	r0, r4
1a000a48:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000a4a:	2401      	movs	r4, #1
1a000a4c:	e7f9      	b.n	1a000a42 <prvIsQueueFull+0x12>

1a000a4e <prvIsQueueEmpty>:
{
1a000a4e:	b510      	push	{r4, lr}
1a000a50:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000a52:	f001 fb57 	bl	1a002104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000a58:	b923      	cbnz	r3, 1a000a64 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000a5a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000a5c:	f001 fb74 	bl	1a002148 <vPortExitCritical>
}
1a000a60:	4620      	mov	r0, r4
1a000a62:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000a64:	2400      	movs	r4, #0
1a000a66:	e7f9      	b.n	1a000a5c <prvIsQueueEmpty+0xe>

1a000a68 <prvCopyDataToQueue>:
{
1a000a68:	b570      	push	{r4, r5, r6, lr}
1a000a6a:	4604      	mov	r4, r0
1a000a6c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000a6e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000a70:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a72:	b95a      	cbnz	r2, 1a000a8c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000a74:	6803      	ldr	r3, [r0, #0]
1a000a76:	b11b      	cbz	r3, 1a000a80 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000a78:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000a7a:	3501      	adds	r5, #1
1a000a7c:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000a7e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000a80:	6840      	ldr	r0, [r0, #4]
1a000a82:	f001 f85f 	bl	1a001b44 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000a86:	2300      	movs	r3, #0
1a000a88:	6063      	str	r3, [r4, #4]
1a000a8a:	e7f6      	b.n	1a000a7a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000a8c:	b96e      	cbnz	r6, 1a000aaa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000a8e:	6880      	ldr	r0, [r0, #8]
1a000a90:	f004 fa82 	bl	1a004f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000a94:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000a96:	68a3      	ldr	r3, [r4, #8]
1a000a98:	4413      	add	r3, r2
1a000a9a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000a9c:	6862      	ldr	r2, [r4, #4]
1a000a9e:	4293      	cmp	r3, r2
1a000aa0:	d319      	bcc.n	1a000ad6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000aa2:	6823      	ldr	r3, [r4, #0]
1a000aa4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000aa6:	2000      	movs	r0, #0
1a000aa8:	e7e7      	b.n	1a000a7a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000aaa:	68c0      	ldr	r0, [r0, #12]
1a000aac:	f004 fa74 	bl	1a004f98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000ab0:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000ab2:	4252      	negs	r2, r2
1a000ab4:	68e3      	ldr	r3, [r4, #12]
1a000ab6:	4413      	add	r3, r2
1a000ab8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000aba:	6821      	ldr	r1, [r4, #0]
1a000abc:	428b      	cmp	r3, r1
1a000abe:	d202      	bcs.n	1a000ac6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000ac0:	6863      	ldr	r3, [r4, #4]
1a000ac2:	441a      	add	r2, r3
1a000ac4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000ac6:	2e02      	cmp	r6, #2
1a000ac8:	d001      	beq.n	1a000ace <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000aca:	2000      	movs	r0, #0
1a000acc:	e7d5      	b.n	1a000a7a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000ace:	b125      	cbz	r5, 1a000ada <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000ad0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000ad2:	2000      	movs	r0, #0
1a000ad4:	e7d1      	b.n	1a000a7a <prvCopyDataToQueue+0x12>
1a000ad6:	2000      	movs	r0, #0
1a000ad8:	e7cf      	b.n	1a000a7a <prvCopyDataToQueue+0x12>
1a000ada:	2000      	movs	r0, #0
1a000adc:	e7cd      	b.n	1a000a7a <prvCopyDataToQueue+0x12>

1a000ade <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000ade:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000ae0:	b172      	cbz	r2, 1a000b00 <prvCopyDataFromQueue+0x22>
{
1a000ae2:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000ae4:	68c3      	ldr	r3, [r0, #12]
1a000ae6:	4413      	add	r3, r2
1a000ae8:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000aea:	6844      	ldr	r4, [r0, #4]
1a000aec:	42a3      	cmp	r3, r4
1a000aee:	d301      	bcc.n	1a000af4 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000af0:	6803      	ldr	r3, [r0, #0]
1a000af2:	60c3      	str	r3, [r0, #12]
1a000af4:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000af6:	68c1      	ldr	r1, [r0, #12]
1a000af8:	4620      	mov	r0, r4
1a000afa:	f004 fa4d 	bl	1a004f98 <memcpy>
}
1a000afe:	bd10      	pop	{r4, pc}
1a000b00:	4770      	bx	lr

1a000b02 <prvUnlockQueue>:
{
1a000b02:	b538      	push	{r3, r4, r5, lr}
1a000b04:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000b06:	f001 fafd 	bl	1a002104 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000b0a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000b0e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000b10:	e003      	b.n	1a000b1a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000b12:	f001 f801 	bl	1a001b18 <vTaskMissedYield>
			--cTxLock;
1a000b16:	3c01      	subs	r4, #1
1a000b18:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000b1a:	2c00      	cmp	r4, #0
1a000b1c:	dd08      	ble.n	1a000b30 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000b20:	b133      	cbz	r3, 1a000b30 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b22:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000b26:	f000 ff69 	bl	1a0019fc <xTaskRemoveFromEventList>
1a000b2a:	2800      	cmp	r0, #0
1a000b2c:	d0f3      	beq.n	1a000b16 <prvUnlockQueue+0x14>
1a000b2e:	e7f0      	b.n	1a000b12 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000b30:	23ff      	movs	r3, #255	; 0xff
1a000b32:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000b36:	f001 fb07 	bl	1a002148 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000b3a:	f001 fae3 	bl	1a002104 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000b3e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000b42:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b44:	e003      	b.n	1a000b4e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000b46:	f000 ffe7 	bl	1a001b18 <vTaskMissedYield>
				--cRxLock;
1a000b4a:	3c01      	subs	r4, #1
1a000b4c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000b4e:	2c00      	cmp	r4, #0
1a000b50:	dd08      	ble.n	1a000b64 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000b52:	692b      	ldr	r3, [r5, #16]
1a000b54:	b133      	cbz	r3, 1a000b64 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000b56:	f105 0010 	add.w	r0, r5, #16
1a000b5a:	f000 ff4f 	bl	1a0019fc <xTaskRemoveFromEventList>
1a000b5e:	2800      	cmp	r0, #0
1a000b60:	d0f3      	beq.n	1a000b4a <prvUnlockQueue+0x48>
1a000b62:	e7f0      	b.n	1a000b46 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000b64:	23ff      	movs	r3, #255	; 0xff
1a000b66:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000b6a:	f001 faed 	bl	1a002148 <vPortExitCritical>
}
1a000b6e:	bd38      	pop	{r3, r4, r5, pc}

1a000b70 <xQueueGenericReset>:
{
1a000b70:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000b72:	b1e0      	cbz	r0, 1a000bae <xQueueGenericReset+0x3e>
1a000b74:	4604      	mov	r4, r0
1a000b76:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000b78:	f001 fac4 	bl	1a002104 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000b7c:	6821      	ldr	r1, [r4, #0]
1a000b7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000b82:	fb03 1002 	mla	r0, r3, r2, r1
1a000b86:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000b88:	2000      	movs	r0, #0
1a000b8a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000b8c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000b8e:	3a01      	subs	r2, #1
1a000b90:	fb02 1303 	mla	r3, r2, r3, r1
1a000b94:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000b96:	23ff      	movs	r3, #255	; 0xff
1a000b98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000ba0:	b9ed      	cbnz	r5, 1a000bde <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000ba2:	6923      	ldr	r3, [r4, #16]
1a000ba4:	b963      	cbnz	r3, 1a000bc0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000ba6:	f001 facf 	bl	1a002148 <vPortExitCritical>
}
1a000baa:	2001      	movs	r0, #1
1a000bac:	bd38      	pop	{r3, r4, r5, pc}
1a000bae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bb2:	f383 8811 	msr	BASEPRI, r3
1a000bb6:	f3bf 8f6f 	isb	sy
1a000bba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000bbe:	e7fe      	b.n	1a000bbe <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000bc0:	f104 0010 	add.w	r0, r4, #16
1a000bc4:	f000 ff1a 	bl	1a0019fc <xTaskRemoveFromEventList>
1a000bc8:	2800      	cmp	r0, #0
1a000bca:	d0ec      	beq.n	1a000ba6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a000bcc:	4b08      	ldr	r3, [pc, #32]	; (1a000bf0 <xQueueGenericReset+0x80>)
1a000bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bd2:	601a      	str	r2, [r3, #0]
1a000bd4:	f3bf 8f4f 	dsb	sy
1a000bd8:	f3bf 8f6f 	isb	sy
1a000bdc:	e7e3      	b.n	1a000ba6 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000bde:	f104 0010 	add.w	r0, r4, #16
1a000be2:	f000 fa9c 	bl	1a00111e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000be6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bea:	f000 fa98 	bl	1a00111e <vListInitialise>
1a000bee:	e7da      	b.n	1a000ba6 <xQueueGenericReset+0x36>
1a000bf0:	e000ed04 	.word	0xe000ed04

1a000bf4 <prvInitialiseNewQueue>:
{
1a000bf4:	b538      	push	{r3, r4, r5, lr}
1a000bf6:	461d      	mov	r5, r3
1a000bf8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000bfa:	460b      	mov	r3, r1
1a000bfc:	b949      	cbnz	r1, 1a000c12 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000bfe:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000c00:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000c02:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000c04:	2101      	movs	r1, #1
1a000c06:	4620      	mov	r0, r4
1a000c08:	f7ff ffb2 	bl	1a000b70 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000c0c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000c10:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000c12:	6022      	str	r2, [r4, #0]
1a000c14:	e7f4      	b.n	1a000c00 <prvInitialiseNewQueue+0xc>

1a000c16 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000c16:	b940      	cbnz	r0, 1a000c2a <xQueueGenericCreateStatic+0x14>
1a000c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c1c:	f383 8811 	msr	BASEPRI, r3
1a000c20:	f3bf 8f6f 	isb	sy
1a000c24:	f3bf 8f4f 	dsb	sy
1a000c28:	e7fe      	b.n	1a000c28 <xQueueGenericCreateStatic+0x12>
	{
1a000c2a:	b510      	push	{r4, lr}
1a000c2c:	b084      	sub	sp, #16
1a000c2e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000c30:	b153      	cbz	r3, 1a000c48 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000c32:	b192      	cbz	r2, 1a000c5a <xQueueGenericCreateStatic+0x44>
1a000c34:	b989      	cbnz	r1, 1a000c5a <xQueueGenericCreateStatic+0x44>
1a000c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c3a:	f383 8811 	msr	BASEPRI, r3
1a000c3e:	f3bf 8f6f 	isb	sy
1a000c42:	f3bf 8f4f 	dsb	sy
1a000c46:	e7fe      	b.n	1a000c46 <xQueueGenericCreateStatic+0x30>
1a000c48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c4c:	f383 8811 	msr	BASEPRI, r3
1a000c50:	f3bf 8f6f 	isb	sy
1a000c54:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a000c58:	e7fe      	b.n	1a000c58 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000c5a:	b16a      	cbz	r2, 1a000c78 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000c5c:	2050      	movs	r0, #80	; 0x50
1a000c5e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000c60:	9803      	ldr	r0, [sp, #12]
1a000c62:	2850      	cmp	r0, #80	; 0x50
1a000c64:	d013      	beq.n	1a000c8e <xQueueGenericCreateStatic+0x78>
1a000c66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c6a:	f383 8811 	msr	BASEPRI, r3
1a000c6e:	f3bf 8f6f 	isb	sy
1a000c72:	f3bf 8f4f 	dsb	sy
1a000c76:	e7fe      	b.n	1a000c76 <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000c78:	2900      	cmp	r1, #0
1a000c7a:	d0ef      	beq.n	1a000c5c <xQueueGenericCreateStatic+0x46>
1a000c7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c80:	f383 8811 	msr	BASEPRI, r3
1a000c84:	f3bf 8f6f 	isb	sy
1a000c88:	f3bf 8f4f 	dsb	sy
1a000c8c:	e7fe      	b.n	1a000c8c <xQueueGenericCreateStatic+0x76>
1a000c8e:	4620      	mov	r0, r4
1a000c90:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000c92:	2301      	movs	r3, #1
1a000c94:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000c98:	9400      	str	r4, [sp, #0]
1a000c9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000c9e:	f7ff ffa9 	bl	1a000bf4 <prvInitialiseNewQueue>
	}
1a000ca2:	4620      	mov	r0, r4
1a000ca4:	b004      	add	sp, #16
1a000ca6:	bd10      	pop	{r4, pc}

1a000ca8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ca8:	b940      	cbnz	r0, 1a000cbc <xQueueGenericCreate+0x14>
1a000caa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cae:	f383 8811 	msr	BASEPRI, r3
1a000cb2:	f3bf 8f6f 	isb	sy
1a000cb6:	f3bf 8f4f 	dsb	sy
1a000cba:	e7fe      	b.n	1a000cba <xQueueGenericCreate+0x12>
	{
1a000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cbe:	b083      	sub	sp, #12
1a000cc0:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000cc2:	b1b1      	cbz	r1, 1a000cf2 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000cc4:	fb01 f000 	mul.w	r0, r1, r0
1a000cc8:	4617      	mov	r7, r2
1a000cca:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000ccc:	3050      	adds	r0, #80	; 0x50
1a000cce:	f7ff fde9 	bl	1a0008a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000cd2:	4605      	mov	r5, r0
1a000cd4:	b150      	cbz	r0, 1a000cec <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000cd6:	2300      	movs	r3, #0
1a000cd8:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000cdc:	9000      	str	r0, [sp, #0]
1a000cde:	463b      	mov	r3, r7
1a000ce0:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000ce4:	4621      	mov	r1, r4
1a000ce6:	4630      	mov	r0, r6
1a000ce8:	f7ff ff84 	bl	1a000bf4 <prvInitialiseNewQueue>
	}
1a000cec:	4628      	mov	r0, r5
1a000cee:	b003      	add	sp, #12
1a000cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a000cf2:	2000      	movs	r0, #0
1a000cf4:	e7e8      	b.n	1a000cc8 <xQueueGenericCreate+0x20>
1a000cf6:	Address 0x000000001a000cf6 is out of bounds.


1a000cf8 <xQueueGenericSend>:
{
1a000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cfa:	b085      	sub	sp, #20
1a000cfc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000cfe:	b178      	cbz	r0, 1a000d20 <xQueueGenericSend+0x28>
1a000d00:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d02:	b1b1      	cbz	r1, 1a000d32 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000d04:	2b02      	cmp	r3, #2
1a000d06:	d120      	bne.n	1a000d4a <xQueueGenericSend+0x52>
1a000d08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000d0a:	2a01      	cmp	r2, #1
1a000d0c:	d01d      	beq.n	1a000d4a <xQueueGenericSend+0x52>
1a000d0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d12:	f383 8811 	msr	BASEPRI, r3
1a000d16:	f3bf 8f6f 	isb	sy
1a000d1a:	f3bf 8f4f 	dsb	sy
1a000d1e:	e7fe      	b.n	1a000d1e <xQueueGenericSend+0x26>
1a000d20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d24:	f383 8811 	msr	BASEPRI, r3
1a000d28:	f3bf 8f6f 	isb	sy
1a000d2c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000d30:	e7fe      	b.n	1a000d30 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d32:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000d34:	2a00      	cmp	r2, #0
1a000d36:	d0e5      	beq.n	1a000d04 <xQueueGenericSend+0xc>
1a000d38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d3c:	f383 8811 	msr	BASEPRI, r3
1a000d40:	f3bf 8f6f 	isb	sy
1a000d44:	f3bf 8f4f 	dsb	sy
1a000d48:	e7fe      	b.n	1a000d48 <xQueueGenericSend+0x50>
1a000d4a:	461e      	mov	r6, r3
1a000d4c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d4e:	f000 fee9 	bl	1a001b24 <xTaskGetSchedulerState>
1a000d52:	b950      	cbnz	r0, 1a000d6a <xQueueGenericSend+0x72>
1a000d54:	9b01      	ldr	r3, [sp, #4]
1a000d56:	b153      	cbz	r3, 1a000d6e <xQueueGenericSend+0x76>
1a000d58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d5c:	f383 8811 	msr	BASEPRI, r3
1a000d60:	f3bf 8f6f 	isb	sy
1a000d64:	f3bf 8f4f 	dsb	sy
1a000d68:	e7fe      	b.n	1a000d68 <xQueueGenericSend+0x70>
1a000d6a:	2500      	movs	r5, #0
1a000d6c:	e03b      	b.n	1a000de6 <xQueueGenericSend+0xee>
1a000d6e:	2500      	movs	r5, #0
1a000d70:	e039      	b.n	1a000de6 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000d72:	4632      	mov	r2, r6
1a000d74:	4639      	mov	r1, r7
1a000d76:	4620      	mov	r0, r4
1a000d78:	f7ff fe76 	bl	1a000a68 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000d7e:	b96b      	cbnz	r3, 1a000d9c <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a000d80:	b138      	cbz	r0, 1a000d92 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a000d82:	4b3c      	ldr	r3, [pc, #240]	; (1a000e74 <xQueueGenericSend+0x17c>)
1a000d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d88:	601a      	str	r2, [r3, #0]
1a000d8a:	f3bf 8f4f 	dsb	sy
1a000d8e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000d92:	f001 f9d9 	bl	1a002148 <vPortExitCritical>
				return pdPASS;
1a000d96:	2001      	movs	r0, #1
}
1a000d98:	b005      	add	sp, #20
1a000d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000da0:	f000 fe2c 	bl	1a0019fc <xTaskRemoveFromEventList>
1a000da4:	2800      	cmp	r0, #0
1a000da6:	d0f4      	beq.n	1a000d92 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000da8:	4b32      	ldr	r3, [pc, #200]	; (1a000e74 <xQueueGenericSend+0x17c>)
1a000daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dae:	601a      	str	r2, [r3, #0]
1a000db0:	f3bf 8f4f 	dsb	sy
1a000db4:	f3bf 8f6f 	isb	sy
1a000db8:	e7eb      	b.n	1a000d92 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000dba:	f001 f9c5 	bl	1a002148 <vPortExitCritical>
					return errQUEUE_FULL;
1a000dbe:	2000      	movs	r0, #0
1a000dc0:	e7ea      	b.n	1a000d98 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000dc2:	a802      	add	r0, sp, #8
1a000dc4:	f000 fe60 	bl	1a001a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000dc8:	2501      	movs	r5, #1
1a000dca:	e019      	b.n	1a000e00 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000dcc:	2300      	movs	r3, #0
1a000dce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000dd2:	e021      	b.n	1a000e18 <xQueueGenericSend+0x120>
1a000dd4:	2300      	movs	r3, #0
1a000dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dda:	e023      	b.n	1a000e24 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000ddc:	4620      	mov	r0, r4
1a000dde:	f7ff fe90 	bl	1a000b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000de2:	f000 fcf3 	bl	1a0017cc <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000de6:	f001 f98d 	bl	1a002104 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000dea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000dee:	429a      	cmp	r2, r3
1a000df0:	d3bf      	bcc.n	1a000d72 <xQueueGenericSend+0x7a>
1a000df2:	2e02      	cmp	r6, #2
1a000df4:	d0bd      	beq.n	1a000d72 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000df6:	9b01      	ldr	r3, [sp, #4]
1a000df8:	2b00      	cmp	r3, #0
1a000dfa:	d0de      	beq.n	1a000dba <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a000dfc:	2d00      	cmp	r5, #0
1a000dfe:	d0e0      	beq.n	1a000dc2 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a000e00:	f001 f9a2 	bl	1a002148 <vPortExitCritical>
		vTaskSuspendAll();
1a000e04:	f000 fc48 	bl	1a001698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e08:	f001 f97c 	bl	1a002104 <vPortEnterCritical>
1a000e0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e10:	b25b      	sxtb	r3, r3
1a000e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e16:	d0d9      	beq.n	1a000dcc <xQueueGenericSend+0xd4>
1a000e18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e1c:	b25b      	sxtb	r3, r3
1a000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e22:	d0d7      	beq.n	1a000dd4 <xQueueGenericSend+0xdc>
1a000e24:	f001 f990 	bl	1a002148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e28:	a901      	add	r1, sp, #4
1a000e2a:	a802      	add	r0, sp, #8
1a000e2c:	f000 fe38 	bl	1a001aa0 <xTaskCheckForTimeOut>
1a000e30:	b9c8      	cbnz	r0, 1a000e66 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000e32:	4620      	mov	r0, r4
1a000e34:	f7ff fdfc 	bl	1a000a30 <prvIsQueueFull>
1a000e38:	2800      	cmp	r0, #0
1a000e3a:	d0cf      	beq.n	1a000ddc <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000e3c:	9901      	ldr	r1, [sp, #4]
1a000e3e:	f104 0010 	add.w	r0, r4, #16
1a000e42:	f000 fda7 	bl	1a001994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e46:	4620      	mov	r0, r4
1a000e48:	f7ff fe5b 	bl	1a000b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e4c:	f000 fcbe 	bl	1a0017cc <xTaskResumeAll>
1a000e50:	2800      	cmp	r0, #0
1a000e52:	d1c8      	bne.n	1a000de6 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000e54:	4b07      	ldr	r3, [pc, #28]	; (1a000e74 <xQueueGenericSend+0x17c>)
1a000e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e5a:	601a      	str	r2, [r3, #0]
1a000e5c:	f3bf 8f4f 	dsb	sy
1a000e60:	f3bf 8f6f 	isb	sy
1a000e64:	e7bf      	b.n	1a000de6 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000e66:	4620      	mov	r0, r4
1a000e68:	f7ff fe4b 	bl	1a000b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e6c:	f000 fcae 	bl	1a0017cc <xTaskResumeAll>
			return errQUEUE_FULL;
1a000e70:	2000      	movs	r0, #0
1a000e72:	e791      	b.n	1a000d98 <xQueueGenericSend+0xa0>
1a000e74:	e000ed04 	.word	0xe000ed04

1a000e78 <xQueueGenericSendFromISR>:
{
1a000e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000e7c:	b178      	cbz	r0, 1a000e9e <xQueueGenericSendFromISR+0x26>
1a000e7e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e80:	b1b1      	cbz	r1, 1a000eb0 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000e82:	2b02      	cmp	r3, #2
1a000e84:	d120      	bne.n	1a000ec8 <xQueueGenericSendFromISR+0x50>
1a000e86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000e88:	2801      	cmp	r0, #1
1a000e8a:	d01d      	beq.n	1a000ec8 <xQueueGenericSendFromISR+0x50>
1a000e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e90:	f383 8811 	msr	BASEPRI, r3
1a000e94:	f3bf 8f6f 	isb	sy
1a000e98:	f3bf 8f4f 	dsb	sy
1a000e9c:	e7fe      	b.n	1a000e9c <xQueueGenericSendFromISR+0x24>
1a000e9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ea2:	f383 8811 	msr	BASEPRI, r3
1a000ea6:	f3bf 8f6f 	isb	sy
1a000eaa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000eae:	e7fe      	b.n	1a000eae <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000eb0:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000eb2:	2800      	cmp	r0, #0
1a000eb4:	d0e5      	beq.n	1a000e82 <xQueueGenericSendFromISR+0xa>
1a000eb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eba:	f383 8811 	msr	BASEPRI, r3
1a000ebe:	f3bf 8f6f 	isb	sy
1a000ec2:	f3bf 8f4f 	dsb	sy
1a000ec6:	e7fe      	b.n	1a000ec6 <xQueueGenericSendFromISR+0x4e>
1a000ec8:	461f      	mov	r7, r3
1a000eca:	4690      	mov	r8, r2
1a000ecc:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ece:	f001 fa43 	bl	1a002358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000ed2:	f3ef 8611 	mrs	r6, BASEPRI
1a000ed6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eda:	f383 8811 	msr	BASEPRI, r3
1a000ede:	f3bf 8f6f 	isb	sy
1a000ee2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000ee8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000eea:	429a      	cmp	r2, r3
1a000eec:	d306      	bcc.n	1a000efc <xQueueGenericSendFromISR+0x84>
1a000eee:	2f02      	cmp	r7, #2
1a000ef0:	d004      	beq.n	1a000efc <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a000ef2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000ef4:	f386 8811 	msr	BASEPRI, r6
}
1a000ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a000efc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000f00:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000f02:	463a      	mov	r2, r7
1a000f04:	4649      	mov	r1, r9
1a000f06:	4620      	mov	r0, r4
1a000f08:	f7ff fdae 	bl	1a000a68 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000f0c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000f10:	d005      	beq.n	1a000f1e <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000f12:	1c6b      	adds	r3, r5, #1
1a000f14:	b25b      	sxtb	r3, r3
1a000f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000f1a:	2001      	movs	r0, #1
1a000f1c:	e7ea      	b.n	1a000ef4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000f20:	b90b      	cbnz	r3, 1a000f26 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a000f22:	2001      	movs	r0, #1
1a000f24:	e7e6      	b.n	1a000ef4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000f26:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f2a:	f000 fd67 	bl	1a0019fc <xTaskRemoveFromEventList>
1a000f2e:	b130      	cbz	r0, 1a000f3e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000f30:	f1b8 0f00 	cmp.w	r8, #0
1a000f34:	d005      	beq.n	1a000f42 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000f36:	2001      	movs	r0, #1
1a000f38:	f8c8 0000 	str.w	r0, [r8]
1a000f3c:	e7da      	b.n	1a000ef4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a000f3e:	2001      	movs	r0, #1
1a000f40:	e7d8      	b.n	1a000ef4 <xQueueGenericSendFromISR+0x7c>
1a000f42:	2001      	movs	r0, #1
1a000f44:	e7d6      	b.n	1a000ef4 <xQueueGenericSendFromISR+0x7c>
1a000f46:	Address 0x000000001a000f46 is out of bounds.


1a000f48 <xQueueReceive>:
{
1a000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f4a:	b085      	sub	sp, #20
1a000f4c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000f4e:	b180      	cbz	r0, 1a000f72 <xQueueReceive+0x2a>
1a000f50:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f52:	b1b9      	cbz	r1, 1a000f84 <xQueueReceive+0x3c>
1a000f54:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000f56:	f000 fde5 	bl	1a001b24 <xTaskGetSchedulerState>
1a000f5a:	b9f8      	cbnz	r0, 1a000f9c <xQueueReceive+0x54>
1a000f5c:	9b01      	ldr	r3, [sp, #4]
1a000f5e:	b1fb      	cbz	r3, 1a000fa0 <xQueueReceive+0x58>
	__asm volatile
1a000f60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f64:	f383 8811 	msr	BASEPRI, r3
1a000f68:	f3bf 8f6f 	isb	sy
1a000f6c:	f3bf 8f4f 	dsb	sy
1a000f70:	e7fe      	b.n	1a000f70 <xQueueReceive+0x28>
1a000f72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f76:	f383 8811 	msr	BASEPRI, r3
1a000f7a:	f3bf 8f6f 	isb	sy
1a000f7e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000f82:	e7fe      	b.n	1a000f82 <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f84:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000f86:	2b00      	cmp	r3, #0
1a000f88:	d0e4      	beq.n	1a000f54 <xQueueReceive+0xc>
1a000f8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f8e:	f383 8811 	msr	BASEPRI, r3
1a000f92:	f3bf 8f6f 	isb	sy
1a000f96:	f3bf 8f4f 	dsb	sy
1a000f9a:	e7fe      	b.n	1a000f9a <xQueueReceive+0x52>
1a000f9c:	2600      	movs	r6, #0
1a000f9e:	e03e      	b.n	1a00101e <xQueueReceive+0xd6>
1a000fa0:	2600      	movs	r6, #0
1a000fa2:	e03c      	b.n	1a00101e <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000fa4:	4639      	mov	r1, r7
1a000fa6:	4620      	mov	r0, r4
1a000fa8:	f7ff fd99 	bl	1a000ade <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000fac:	3d01      	subs	r5, #1
1a000fae:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000fb0:	6923      	ldr	r3, [r4, #16]
1a000fb2:	b923      	cbnz	r3, 1a000fbe <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a000fb4:	f001 f8c8 	bl	1a002148 <vPortExitCritical>
				return pdPASS;
1a000fb8:	2001      	movs	r0, #1
}
1a000fba:	b005      	add	sp, #20
1a000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000fbe:	f104 0010 	add.w	r0, r4, #16
1a000fc2:	f000 fd1b 	bl	1a0019fc <xTaskRemoveFromEventList>
1a000fc6:	2800      	cmp	r0, #0
1a000fc8:	d0f4      	beq.n	1a000fb4 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a000fca:	4b35      	ldr	r3, [pc, #212]	; (1a0010a0 <xQueueReceive+0x158>)
1a000fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fd0:	601a      	str	r2, [r3, #0]
1a000fd2:	f3bf 8f4f 	dsb	sy
1a000fd6:	f3bf 8f6f 	isb	sy
1a000fda:	e7eb      	b.n	1a000fb4 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a000fdc:	f001 f8b4 	bl	1a002148 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000fe0:	2000      	movs	r0, #0
1a000fe2:	e7ea      	b.n	1a000fba <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000fe4:	a802      	add	r0, sp, #8
1a000fe6:	f000 fd4f 	bl	1a001a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000fea:	2601      	movs	r6, #1
1a000fec:	e021      	b.n	1a001032 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a000fee:	2300      	movs	r3, #0
1a000ff0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ff4:	e029      	b.n	1a00104a <xQueueReceive+0x102>
1a000ff6:	2300      	movs	r3, #0
1a000ff8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ffc:	e02b      	b.n	1a001056 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a000ffe:	4620      	mov	r0, r4
1a001000:	f7ff fd7f 	bl	1a000b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001004:	f000 fbe2 	bl	1a0017cc <xTaskResumeAll>
1a001008:	e009      	b.n	1a00101e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a00100a:	4620      	mov	r0, r4
1a00100c:	f7ff fd79 	bl	1a000b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001010:	f000 fbdc 	bl	1a0017cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001014:	4620      	mov	r0, r4
1a001016:	f7ff fd1a 	bl	1a000a4e <prvIsQueueEmpty>
1a00101a:	2800      	cmp	r0, #0
1a00101c:	d13d      	bne.n	1a00109a <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a00101e:	f001 f871 	bl	1a002104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001022:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001024:	2d00      	cmp	r5, #0
1a001026:	d1bd      	bne.n	1a000fa4 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001028:	9b01      	ldr	r3, [sp, #4]
1a00102a:	2b00      	cmp	r3, #0
1a00102c:	d0d6      	beq.n	1a000fdc <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a00102e:	2e00      	cmp	r6, #0
1a001030:	d0d8      	beq.n	1a000fe4 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a001032:	f001 f889 	bl	1a002148 <vPortExitCritical>
		vTaskSuspendAll();
1a001036:	f000 fb2f 	bl	1a001698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00103a:	f001 f863 	bl	1a002104 <vPortEnterCritical>
1a00103e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001042:	b25b      	sxtb	r3, r3
1a001044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001048:	d0d1      	beq.n	1a000fee <xQueueReceive+0xa6>
1a00104a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00104e:	b25b      	sxtb	r3, r3
1a001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001054:	d0cf      	beq.n	1a000ff6 <xQueueReceive+0xae>
1a001056:	f001 f877 	bl	1a002148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00105a:	a901      	add	r1, sp, #4
1a00105c:	a802      	add	r0, sp, #8
1a00105e:	f000 fd1f 	bl	1a001aa0 <xTaskCheckForTimeOut>
1a001062:	2800      	cmp	r0, #0
1a001064:	d1d1      	bne.n	1a00100a <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001066:	4620      	mov	r0, r4
1a001068:	f7ff fcf1 	bl	1a000a4e <prvIsQueueEmpty>
1a00106c:	2800      	cmp	r0, #0
1a00106e:	d0c6      	beq.n	1a000ffe <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001070:	9901      	ldr	r1, [sp, #4]
1a001072:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001076:	f000 fc8d 	bl	1a001994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00107a:	4620      	mov	r0, r4
1a00107c:	f7ff fd41 	bl	1a000b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001080:	f000 fba4 	bl	1a0017cc <xTaskResumeAll>
1a001084:	2800      	cmp	r0, #0
1a001086:	d1ca      	bne.n	1a00101e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001088:	4b05      	ldr	r3, [pc, #20]	; (1a0010a0 <xQueueReceive+0x158>)
1a00108a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00108e:	601a      	str	r2, [r3, #0]
1a001090:	f3bf 8f4f 	dsb	sy
1a001094:	f3bf 8f6f 	isb	sy
1a001098:	e7c1      	b.n	1a00101e <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a00109a:	2000      	movs	r0, #0
1a00109c:	e78d      	b.n	1a000fba <xQueueReceive+0x72>
1a00109e:	bf00      	nop
1a0010a0:	e000ed04 	.word	0xe000ed04

1a0010a4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0010a4:	2300      	movs	r3, #0
1a0010a6:	2b07      	cmp	r3, #7
1a0010a8:	d80c      	bhi.n	1a0010c4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0010aa:	4a07      	ldr	r2, [pc, #28]	; (1a0010c8 <vQueueAddToRegistry+0x24>)
1a0010ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0010b0:	b10a      	cbz	r2, 1a0010b6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0010b2:	3301      	adds	r3, #1
1a0010b4:	e7f7      	b.n	1a0010a6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0010b6:	4a04      	ldr	r2, [pc, #16]	; (1a0010c8 <vQueueAddToRegistry+0x24>)
1a0010b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0010bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0010c0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0010c2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0010c4:	4770      	bx	lr
1a0010c6:	bf00      	nop
1a0010c8:	10003ccc 	.word	0x10003ccc

1a0010cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0010cc:	b570      	push	{r4, r5, r6, lr}
1a0010ce:	4604      	mov	r4, r0
1a0010d0:	460d      	mov	r5, r1
1a0010d2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0010d4:	f001 f816 	bl	1a002104 <vPortEnterCritical>
1a0010d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010dc:	b25b      	sxtb	r3, r3
1a0010de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010e2:	d00d      	beq.n	1a001100 <vQueueWaitForMessageRestricted+0x34>
1a0010e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010e8:	b25b      	sxtb	r3, r3
1a0010ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010ee:	d00b      	beq.n	1a001108 <vQueueWaitForMessageRestricted+0x3c>
1a0010f0:	f001 f82a 	bl	1a002148 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0010f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0010f6:	b15b      	cbz	r3, 1a001110 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0010f8:	4620      	mov	r0, r4
1a0010fa:	f7ff fd02 	bl	1a000b02 <prvUnlockQueue>
	}
1a0010fe:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001100:	2300      	movs	r3, #0
1a001102:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001106:	e7ed      	b.n	1a0010e4 <vQueueWaitForMessageRestricted+0x18>
1a001108:	2300      	movs	r3, #0
1a00110a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00110e:	e7ef      	b.n	1a0010f0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001110:	4632      	mov	r2, r6
1a001112:	4629      	mov	r1, r5
1a001114:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001118:	f000 fc54 	bl	1a0019c4 <vTaskPlaceOnEventListRestricted>
1a00111c:	e7ec      	b.n	1a0010f8 <vQueueWaitForMessageRestricted+0x2c>

1a00111e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00111e:	f100 0308 	add.w	r3, r0, #8
1a001122:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001128:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00112a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00112c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00112e:	2300      	movs	r3, #0
1a001130:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001132:	4770      	bx	lr

1a001134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001134:	2300      	movs	r3, #0
1a001136:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001138:	4770      	bx	lr

1a00113a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00113a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a00113c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00113e:	689a      	ldr	r2, [r3, #8]
1a001140:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001142:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001144:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001146:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001148:	6803      	ldr	r3, [r0, #0]
1a00114a:	3301      	adds	r3, #1
1a00114c:	6003      	str	r3, [r0, #0]
}
1a00114e:	4770      	bx	lr

1a001150 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001150:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001152:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001154:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001158:	d002      	beq.n	1a001160 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00115a:	f100 0208 	add.w	r2, r0, #8
1a00115e:	e002      	b.n	1a001166 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001160:	6902      	ldr	r2, [r0, #16]
1a001162:	e004      	b.n	1a00116e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001164:	461a      	mov	r2, r3
1a001166:	6853      	ldr	r3, [r2, #4]
1a001168:	681c      	ldr	r4, [r3, #0]
1a00116a:	42ac      	cmp	r4, r5
1a00116c:	d9fa      	bls.n	1a001164 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00116e:	6853      	ldr	r3, [r2, #4]
1a001170:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001172:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001174:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001176:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001178:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00117a:	6803      	ldr	r3, [r0, #0]
1a00117c:	3301      	adds	r3, #1
1a00117e:	6003      	str	r3, [r0, #0]
}
1a001180:	bc30      	pop	{r4, r5}
1a001182:	4770      	bx	lr

1a001184 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001184:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001186:	6841      	ldr	r1, [r0, #4]
1a001188:	6882      	ldr	r2, [r0, #8]
1a00118a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00118c:	6841      	ldr	r1, [r0, #4]
1a00118e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001190:	685a      	ldr	r2, [r3, #4]
1a001192:	4282      	cmp	r2, r0
1a001194:	d006      	beq.n	1a0011a4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001196:	2200      	movs	r2, #0
1a001198:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00119a:	681a      	ldr	r2, [r3, #0]
1a00119c:	3a01      	subs	r2, #1
1a00119e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0011a0:	6818      	ldr	r0, [r3, #0]
}
1a0011a2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0011a4:	6882      	ldr	r2, [r0, #8]
1a0011a6:	605a      	str	r2, [r3, #4]
1a0011a8:	e7f5      	b.n	1a001196 <uxListRemove+0x12>
1a0011aa:	Address 0x000000001a0011aa is out of bounds.


1a0011ac <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0011ac:	4b03      	ldr	r3, [pc, #12]	; (1a0011bc <vApplicationGetIdleTaskMemory+0x10>)
1a0011ae:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0011b0:	4b03      	ldr	r3, [pc, #12]	; (1a0011c0 <vApplicationGetIdleTaskMemory+0x14>)
1a0011b2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0011b4:	235a      	movs	r3, #90	; 0x5a
1a0011b6:	6013      	str	r3, [r2, #0]
}
1a0011b8:	4770      	bx	lr
1a0011ba:	bf00      	nop
1a0011bc:	10003950 	.word	0x10003950
1a0011c0:	10003248 	.word	0x10003248

1a0011c4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0011c4:	4b03      	ldr	r3, [pc, #12]	; (1a0011d4 <vApplicationGetTimerTaskMemory+0x10>)
1a0011c6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0011c8:	4b03      	ldr	r3, [pc, #12]	; (1a0011d8 <vApplicationGetTimerTaskMemory+0x14>)
1a0011ca:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0011cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0011d0:	6013      	str	r3, [r2, #0]
1a0011d2:	4770      	bx	lr
1a0011d4:	100039b0 	.word	0x100039b0
1a0011d8:	100033b0 	.word	0x100033b0

1a0011dc <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0011dc:	b510      	push	{r4, lr}
1a0011de:	b082      	sub	sp, #8
1a0011e0:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0011e2:	9001      	str	r0, [sp, #4]
1a0011e4:	2300      	movs	r3, #0
1a0011e6:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0011e8:	f000 ff8c 	bl	1a002104 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0011ec:	9901      	ldr	r1, [sp, #4]
1a0011ee:	4622      	mov	r2, r4
1a0011f0:	4804      	ldr	r0, [pc, #16]	; (1a001204 <vAssertCalled+0x28>)
1a0011f2:	f003 ffc7 	bl	1a005184 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a0011f6:	9b00      	ldr	r3, [sp, #0]
1a0011f8:	2b00      	cmp	r3, #0
1a0011fa:	d0fc      	beq.n	1a0011f6 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a0011fc:	f000 ffa4 	bl	1a002148 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001200:	b002      	add	sp, #8
1a001202:	bd10      	pop	{r4, pc}
1a001204:	1a00af6c 	.word	0x1a00af6c

1a001208 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001208:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a00120a:	4804      	ldr	r0, [pc, #16]	; (1a00121c <vApplicationMallocFailedHook+0x14>)
1a00120c:	f004 f81c 	bl	1a005248 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001210:	4903      	ldr	r1, [pc, #12]	; (1a001220 <vApplicationMallocFailedHook+0x18>)
1a001212:	202c      	movs	r0, #44	; 0x2c
1a001214:	f7ff ffe2 	bl	1a0011dc <vAssertCalled>
}
1a001218:	bd08      	pop	{r3, pc}
1a00121a:	bf00      	nop
1a00121c:	1a00aef8 	.word	0x1a00aef8
1a001220:	1a00af1c 	.word	0x1a00af1c

1a001224 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001224:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001226:	4804      	ldr	r0, [pc, #16]	; (1a001238 <vApplicationStackOverflowHook+0x14>)
1a001228:	f003 ffac 	bl	1a005184 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a00122c:	4903      	ldr	r1, [pc, #12]	; (1a00123c <vApplicationStackOverflowHook+0x18>)
1a00122e:	2050      	movs	r0, #80	; 0x50
1a001230:	f7ff ffd4 	bl	1a0011dc <vAssertCalled>
}
1a001234:	bd08      	pop	{r3, pc}
1a001236:	bf00      	nop
1a001238:	1a00af3c 	.word	0x1a00af3c
1a00123c:	1a00af1c 	.word	0x1a00af1c

1a001240 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001240:	4b08      	ldr	r3, [pc, #32]	; (1a001264 <prvResetNextTaskUnblockTime+0x24>)
1a001242:	681b      	ldr	r3, [r3, #0]
1a001244:	681b      	ldr	r3, [r3, #0]
1a001246:	b923      	cbnz	r3, 1a001252 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001248:	4b07      	ldr	r3, [pc, #28]	; (1a001268 <prvResetNextTaskUnblockTime+0x28>)
1a00124a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00124e:	601a      	str	r2, [r3, #0]
1a001250:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001252:	4b04      	ldr	r3, [pc, #16]	; (1a001264 <prvResetNextTaskUnblockTime+0x24>)
1a001254:	681b      	ldr	r3, [r3, #0]
1a001256:	68db      	ldr	r3, [r3, #12]
1a001258:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a00125a:	685a      	ldr	r2, [r3, #4]
1a00125c:	4b02      	ldr	r3, [pc, #8]	; (1a001268 <prvResetNextTaskUnblockTime+0x28>)
1a00125e:	601a      	str	r2, [r3, #0]
	}
}
1a001260:	4770      	bx	lr
1a001262:	bf00      	nop
1a001264:	10003a14 	.word	0x10003a14
1a001268:	10003ae8 	.word	0x10003ae8

1a00126c <prvInitialiseNewTask>:
{
1a00126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001270:	4681      	mov	r9, r0
1a001272:	460d      	mov	r5, r1
1a001274:	4617      	mov	r7, r2
1a001276:	469a      	mov	sl, r3
1a001278:	9e08      	ldr	r6, [sp, #32]
1a00127a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00127e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001280:	0092      	lsls	r2, r2, #2
1a001282:	21a5      	movs	r1, #165	; 0xa5
1a001284:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001286:	f003 ff21 	bl	1a0050cc <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00128a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00128c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001290:	3a01      	subs	r2, #1
1a001292:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001296:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00129a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00129c:	2300      	movs	r3, #0
1a00129e:	2b0f      	cmp	r3, #15
1a0012a0:	d806      	bhi.n	1a0012b0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0012a2:	5cea      	ldrb	r2, [r5, r3]
1a0012a4:	18e1      	adds	r1, r4, r3
1a0012a6:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0012aa:	b10a      	cbz	r2, 1a0012b0 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0012ac:	3301      	adds	r3, #1
1a0012ae:	e7f6      	b.n	1a00129e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0012b0:	2300      	movs	r3, #0
1a0012b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0012b6:	2e06      	cmp	r6, #6
1a0012b8:	d900      	bls.n	1a0012bc <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0012ba:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0012bc:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0012be:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0012c0:	2500      	movs	r5, #0
1a0012c2:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0012c4:	1d20      	adds	r0, r4, #4
1a0012c6:	f7ff ff35 	bl	1a001134 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0012ca:	f104 0018 	add.w	r0, r4, #24
1a0012ce:	f7ff ff31 	bl	1a001134 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0012d2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0012d4:	f1c6 0607 	rsb	r6, r6, #7
1a0012d8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0012da:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0012dc:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0012de:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0012e2:	4652      	mov	r2, sl
1a0012e4:	4649      	mov	r1, r9
1a0012e6:	4638      	mov	r0, r7
1a0012e8:	f000 fede 	bl	1a0020a8 <pxPortInitialiseStack>
1a0012ec:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0012ee:	f1b8 0f00 	cmp.w	r8, #0
1a0012f2:	d001      	beq.n	1a0012f8 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0012f4:	f8c8 4000 	str.w	r4, [r8]
}
1a0012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a0012fc <prvInitialiseTaskLists>:
{
1a0012fc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0012fe:	2400      	movs	r4, #0
1a001300:	2c06      	cmp	r4, #6
1a001302:	d808      	bhi.n	1a001316 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001304:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001308:	0093      	lsls	r3, r2, #2
1a00130a:	480c      	ldr	r0, [pc, #48]	; (1a00133c <prvInitialiseTaskLists+0x40>)
1a00130c:	4418      	add	r0, r3
1a00130e:	f7ff ff06 	bl	1a00111e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001312:	3401      	adds	r4, #1
1a001314:	e7f4      	b.n	1a001300 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001316:	4d0a      	ldr	r5, [pc, #40]	; (1a001340 <prvInitialiseTaskLists+0x44>)
1a001318:	4628      	mov	r0, r5
1a00131a:	f7ff ff00 	bl	1a00111e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00131e:	4c09      	ldr	r4, [pc, #36]	; (1a001344 <prvInitialiseTaskLists+0x48>)
1a001320:	4620      	mov	r0, r4
1a001322:	f7ff fefc 	bl	1a00111e <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001326:	4808      	ldr	r0, [pc, #32]	; (1a001348 <prvInitialiseTaskLists+0x4c>)
1a001328:	f7ff fef9 	bl	1a00111e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a00132c:	4807      	ldr	r0, [pc, #28]	; (1a00134c <prvInitialiseTaskLists+0x50>)
1a00132e:	f7ff fef6 	bl	1a00111e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001332:	4b07      	ldr	r3, [pc, #28]	; (1a001350 <prvInitialiseTaskLists+0x54>)
1a001334:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001336:	4b07      	ldr	r3, [pc, #28]	; (1a001354 <prvInitialiseTaskLists+0x58>)
1a001338:	601c      	str	r4, [r3, #0]
}
1a00133a:	bd38      	pop	{r3, r4, r5, pc}
1a00133c:	10003a1c 	.word	0x10003a1c
1a001340:	10003ac0 	.word	0x10003ac0
1a001344:	10003ad4 	.word	0x10003ad4
1a001348:	10003af0 	.word	0x10003af0
1a00134c:	10003b08 	.word	0x10003b08
1a001350:	10003a14 	.word	0x10003a14
1a001354:	10003a18 	.word	0x10003a18

1a001358 <prvAddNewTaskToReadyList>:
{
1a001358:	b510      	push	{r4, lr}
1a00135a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00135c:	f000 fed2 	bl	1a002104 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001360:	4a21      	ldr	r2, [pc, #132]	; (1a0013e8 <prvAddNewTaskToReadyList+0x90>)
1a001362:	6813      	ldr	r3, [r2, #0]
1a001364:	3301      	adds	r3, #1
1a001366:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001368:	4b20      	ldr	r3, [pc, #128]	; (1a0013ec <prvAddNewTaskToReadyList+0x94>)
1a00136a:	681b      	ldr	r3, [r3, #0]
1a00136c:	b15b      	cbz	r3, 1a001386 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00136e:	4b20      	ldr	r3, [pc, #128]	; (1a0013f0 <prvAddNewTaskToReadyList+0x98>)
1a001370:	681b      	ldr	r3, [r3, #0]
1a001372:	b96b      	cbnz	r3, 1a001390 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001374:	4b1d      	ldr	r3, [pc, #116]	; (1a0013ec <prvAddNewTaskToReadyList+0x94>)
1a001376:	681b      	ldr	r3, [r3, #0]
1a001378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00137a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00137c:	429a      	cmp	r2, r3
1a00137e:	d807      	bhi.n	1a001390 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001380:	4b1a      	ldr	r3, [pc, #104]	; (1a0013ec <prvAddNewTaskToReadyList+0x94>)
1a001382:	601c      	str	r4, [r3, #0]
1a001384:	e004      	b.n	1a001390 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001386:	4b19      	ldr	r3, [pc, #100]	; (1a0013ec <prvAddNewTaskToReadyList+0x94>)
1a001388:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00138a:	6813      	ldr	r3, [r2, #0]
1a00138c:	2b01      	cmp	r3, #1
1a00138e:	d027      	beq.n	1a0013e0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001390:	4a18      	ldr	r2, [pc, #96]	; (1a0013f4 <prvAddNewTaskToReadyList+0x9c>)
1a001392:	6813      	ldr	r3, [r2, #0]
1a001394:	3301      	adds	r3, #1
1a001396:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001398:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00139a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00139c:	2201      	movs	r2, #1
1a00139e:	409a      	lsls	r2, r3
1a0013a0:	4915      	ldr	r1, [pc, #84]	; (1a0013f8 <prvAddNewTaskToReadyList+0xa0>)
1a0013a2:	6808      	ldr	r0, [r1, #0]
1a0013a4:	4302      	orrs	r2, r0
1a0013a6:	600a      	str	r2, [r1, #0]
1a0013a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0013ac:	009a      	lsls	r2, r3, #2
1a0013ae:	1d21      	adds	r1, r4, #4
1a0013b0:	4812      	ldr	r0, [pc, #72]	; (1a0013fc <prvAddNewTaskToReadyList+0xa4>)
1a0013b2:	4410      	add	r0, r2
1a0013b4:	f7ff fec1 	bl	1a00113a <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0013b8:	f000 fec6 	bl	1a002148 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0013bc:	4b0c      	ldr	r3, [pc, #48]	; (1a0013f0 <prvAddNewTaskToReadyList+0x98>)
1a0013be:	681b      	ldr	r3, [r3, #0]
1a0013c0:	b16b      	cbz	r3, 1a0013de <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0013c2:	4b0a      	ldr	r3, [pc, #40]	; (1a0013ec <prvAddNewTaskToReadyList+0x94>)
1a0013c4:	681b      	ldr	r3, [r3, #0]
1a0013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0013c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0013ca:	429a      	cmp	r2, r3
1a0013cc:	d207      	bcs.n	1a0013de <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0013ce:	4b0c      	ldr	r3, [pc, #48]	; (1a001400 <prvAddNewTaskToReadyList+0xa8>)
1a0013d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013d4:	601a      	str	r2, [r3, #0]
1a0013d6:	f3bf 8f4f 	dsb	sy
1a0013da:	f3bf 8f6f 	isb	sy
}
1a0013de:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0013e0:	f7ff ff8c 	bl	1a0012fc <prvInitialiseTaskLists>
1a0013e4:	e7d4      	b.n	1a001390 <prvAddNewTaskToReadyList+0x38>
1a0013e6:	bf00      	nop
1a0013e8:	10003aa8 	.word	0x10003aa8
1a0013ec:	10003a10 	.word	0x10003a10
1a0013f0:	10003b04 	.word	0x10003b04
1a0013f4:	10003ab8 	.word	0x10003ab8
1a0013f8:	10003abc 	.word	0x10003abc
1a0013fc:	10003a1c 	.word	0x10003a1c
1a001400:	e000ed04 	.word	0xe000ed04

1a001404 <prvDeleteTCB>:
	{
1a001404:	b510      	push	{r4, lr}
1a001406:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001408:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00140c:	b163      	cbz	r3, 1a001428 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00140e:	2b01      	cmp	r3, #1
1a001410:	d011      	beq.n	1a001436 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001412:	2b02      	cmp	r3, #2
1a001414:	d00e      	beq.n	1a001434 <prvDeleteTCB+0x30>
1a001416:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00141a:	f383 8811 	msr	BASEPRI, r3
1a00141e:	f3bf 8f6f 	isb	sy
1a001422:	f3bf 8f4f 	dsb	sy
1a001426:	e7fe      	b.n	1a001426 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001428:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00142a:	f7ff fac9 	bl	1a0009c0 <vPortFree>
				vPortFree( pxTCB );
1a00142e:	4620      	mov	r0, r4
1a001430:	f7ff fac6 	bl	1a0009c0 <vPortFree>
	}
1a001434:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a001436:	f7ff fac3 	bl	1a0009c0 <vPortFree>
1a00143a:	e7fb      	b.n	1a001434 <prvDeleteTCB+0x30>

1a00143c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00143c:	4b0f      	ldr	r3, [pc, #60]	; (1a00147c <prvCheckTasksWaitingTermination+0x40>)
1a00143e:	681b      	ldr	r3, [r3, #0]
1a001440:	b1d3      	cbz	r3, 1a001478 <prvCheckTasksWaitingTermination+0x3c>
{
1a001442:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001444:	f000 fe5e 	bl	1a002104 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001448:	4b0d      	ldr	r3, [pc, #52]	; (1a001480 <prvCheckTasksWaitingTermination+0x44>)
1a00144a:	68db      	ldr	r3, [r3, #12]
1a00144c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00144e:	1d20      	adds	r0, r4, #4
1a001450:	f7ff fe98 	bl	1a001184 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001454:	4a0b      	ldr	r2, [pc, #44]	; (1a001484 <prvCheckTasksWaitingTermination+0x48>)
1a001456:	6813      	ldr	r3, [r2, #0]
1a001458:	3b01      	subs	r3, #1
1a00145a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00145c:	4a07      	ldr	r2, [pc, #28]	; (1a00147c <prvCheckTasksWaitingTermination+0x40>)
1a00145e:	6813      	ldr	r3, [r2, #0]
1a001460:	3b01      	subs	r3, #1
1a001462:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001464:	f000 fe70 	bl	1a002148 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001468:	4620      	mov	r0, r4
1a00146a:	f7ff ffcb 	bl	1a001404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00146e:	4b03      	ldr	r3, [pc, #12]	; (1a00147c <prvCheckTasksWaitingTermination+0x40>)
1a001470:	681b      	ldr	r3, [r3, #0]
1a001472:	2b00      	cmp	r3, #0
1a001474:	d1e6      	bne.n	1a001444 <prvCheckTasksWaitingTermination+0x8>
}
1a001476:	bd10      	pop	{r4, pc}
1a001478:	4770      	bx	lr
1a00147a:	bf00      	nop
1a00147c:	10003aac 	.word	0x10003aac
1a001480:	10003b08 	.word	0x10003b08
1a001484:	10003aa8 	.word	0x10003aa8

1a001488 <prvIdleTask>:
{
1a001488:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00148a:	f7ff ffd7 	bl	1a00143c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00148e:	4b06      	ldr	r3, [pc, #24]	; (1a0014a8 <prvIdleTask+0x20>)
1a001490:	681b      	ldr	r3, [r3, #0]
1a001492:	2b01      	cmp	r3, #1
1a001494:	d9f9      	bls.n	1a00148a <prvIdleTask+0x2>
				taskYIELD();
1a001496:	4b05      	ldr	r3, [pc, #20]	; (1a0014ac <prvIdleTask+0x24>)
1a001498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00149c:	601a      	str	r2, [r3, #0]
1a00149e:	f3bf 8f4f 	dsb	sy
1a0014a2:	f3bf 8f6f 	isb	sy
1a0014a6:	e7f0      	b.n	1a00148a <prvIdleTask+0x2>
1a0014a8:	10003a1c 	.word	0x10003a1c
1a0014ac:	e000ed04 	.word	0xe000ed04

1a0014b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0014b0:	b538      	push	{r3, r4, r5, lr}
1a0014b2:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0014b4:	4b17      	ldr	r3, [pc, #92]	; (1a001514 <prvAddCurrentTaskToDelayedList+0x64>)
1a0014b6:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0014b8:	4b17      	ldr	r3, [pc, #92]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x68>)
1a0014ba:	6818      	ldr	r0, [r3, #0]
1a0014bc:	3004      	adds	r0, #4
1a0014be:	f7ff fe61 	bl	1a001184 <uxListRemove>
1a0014c2:	b950      	cbnz	r0, 1a0014da <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0014c4:	4b14      	ldr	r3, [pc, #80]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x68>)
1a0014c6:	681b      	ldr	r3, [r3, #0]
1a0014c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0014ca:	2301      	movs	r3, #1
1a0014cc:	fa03 f202 	lsl.w	r2, r3, r2
1a0014d0:	4912      	ldr	r1, [pc, #72]	; (1a00151c <prvAddCurrentTaskToDelayedList+0x6c>)
1a0014d2:	680b      	ldr	r3, [r1, #0]
1a0014d4:	ea23 0302 	bic.w	r3, r3, r2
1a0014d8:	600b      	str	r3, [r1, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
1a0014da:	442c      	add	r4, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0014dc:	4b0e      	ldr	r3, [pc, #56]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x68>)
1a0014de:	681b      	ldr	r3, [r3, #0]
1a0014e0:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
1a0014e2:	42a5      	cmp	r5, r4
1a0014e4:	d907      	bls.n	1a0014f6 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014e6:	4b0e      	ldr	r3, [pc, #56]	; (1a001520 <prvAddCurrentTaskToDelayedList+0x70>)
1a0014e8:	6818      	ldr	r0, [r3, #0]
1a0014ea:	4b0b      	ldr	r3, [pc, #44]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x68>)
1a0014ec:	6819      	ldr	r1, [r3, #0]
1a0014ee:	3104      	adds	r1, #4
1a0014f0:	f7ff fe2e 	bl	1a001150 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0014f4:	bd38      	pop	{r3, r4, r5, pc}
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014f6:	4b0b      	ldr	r3, [pc, #44]	; (1a001524 <prvAddCurrentTaskToDelayedList+0x74>)
1a0014f8:	6818      	ldr	r0, [r3, #0]
1a0014fa:	4b07      	ldr	r3, [pc, #28]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x68>)
1a0014fc:	6819      	ldr	r1, [r3, #0]
1a0014fe:	3104      	adds	r1, #4
1a001500:	f7ff fe26 	bl	1a001150 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
1a001504:	4b08      	ldr	r3, [pc, #32]	; (1a001528 <prvAddCurrentTaskToDelayedList+0x78>)
1a001506:	681b      	ldr	r3, [r3, #0]
1a001508:	42a3      	cmp	r3, r4
1a00150a:	d9f3      	bls.n	1a0014f4 <prvAddCurrentTaskToDelayedList+0x44>
				xNextTaskUnblockTime = xTimeToWake;
1a00150c:	4b06      	ldr	r3, [pc, #24]	; (1a001528 <prvAddCurrentTaskToDelayedList+0x78>)
1a00150e:	601c      	str	r4, [r3, #0]
}
1a001510:	e7f0      	b.n	1a0014f4 <prvAddCurrentTaskToDelayedList+0x44>
1a001512:	bf00      	nop
1a001514:	10003b1c 	.word	0x10003b1c
1a001518:	10003a10 	.word	0x10003a10
1a00151c:	10003abc 	.word	0x10003abc
1a001520:	10003a18 	.word	0x10003a18
1a001524:	10003a14 	.word	0x10003a14
1a001528:	10003ae8 	.word	0x10003ae8

1a00152c <xTaskCreateStatic>:
	{
1a00152c:	b570      	push	{r4, r5, r6, lr}
1a00152e:	b086      	sub	sp, #24
1a001530:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001532:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001534:	b175      	cbz	r5, 1a001554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001536:	b1b4      	cbz	r4, 1a001566 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001538:	2660      	movs	r6, #96	; 0x60
1a00153a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00153c:	9e04      	ldr	r6, [sp, #16]
1a00153e:	2e60      	cmp	r6, #96	; 0x60
1a001540:	d01a      	beq.n	1a001578 <xTaskCreateStatic+0x4c>
1a001542:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001546:	f383 8811 	msr	BASEPRI, r3
1a00154a:	f3bf 8f6f 	isb	sy
1a00154e:	f3bf 8f4f 	dsb	sy
1a001552:	e7fe      	b.n	1a001552 <xTaskCreateStatic+0x26>
1a001554:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001558:	f383 8811 	msr	BASEPRI, r3
1a00155c:	f3bf 8f6f 	isb	sy
1a001560:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a001564:	e7fe      	b.n	1a001564 <xTaskCreateStatic+0x38>
1a001566:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00156a:	f383 8811 	msr	BASEPRI, r3
1a00156e:	f3bf 8f6f 	isb	sy
1a001572:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a001576:	e7fe      	b.n	1a001576 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001578:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00157a:	2502      	movs	r5, #2
1a00157c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001580:	2500      	movs	r5, #0
1a001582:	9503      	str	r5, [sp, #12]
1a001584:	9402      	str	r4, [sp, #8]
1a001586:	ad05      	add	r5, sp, #20
1a001588:	9501      	str	r5, [sp, #4]
1a00158a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00158c:	9500      	str	r5, [sp, #0]
1a00158e:	f7ff fe6d 	bl	1a00126c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001592:	4620      	mov	r0, r4
1a001594:	f7ff fee0 	bl	1a001358 <prvAddNewTaskToReadyList>
	}
1a001598:	9805      	ldr	r0, [sp, #20]
1a00159a:	b006      	add	sp, #24
1a00159c:	bd70      	pop	{r4, r5, r6, pc}

1a00159e <xTaskCreate>:
	{
1a00159e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0015a2:	b085      	sub	sp, #20
1a0015a4:	4607      	mov	r7, r0
1a0015a6:	4688      	mov	r8, r1
1a0015a8:	4615      	mov	r5, r2
1a0015aa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015ac:	0090      	lsls	r0, r2, #2
1a0015ae:	f7ff f979 	bl	1a0008a4 <pvPortMalloc>
			if( pxStack != NULL )
1a0015b2:	b1f8      	cbz	r0, 1a0015f4 <xTaskCreate+0x56>
1a0015b4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0015b6:	2060      	movs	r0, #96	; 0x60
1a0015b8:	f7ff f974 	bl	1a0008a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0015bc:	4604      	mov	r4, r0
1a0015be:	b1a8      	cbz	r0, 1a0015ec <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a0015c0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0015c2:	b1e4      	cbz	r4, 1a0015fe <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0015c4:	2300      	movs	r3, #0
1a0015c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0015ca:	9303      	str	r3, [sp, #12]
1a0015cc:	9402      	str	r4, [sp, #8]
1a0015ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0015d0:	9301      	str	r3, [sp, #4]
1a0015d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0015d4:	9300      	str	r3, [sp, #0]
1a0015d6:	464b      	mov	r3, r9
1a0015d8:	462a      	mov	r2, r5
1a0015da:	4641      	mov	r1, r8
1a0015dc:	4638      	mov	r0, r7
1a0015de:	f7ff fe45 	bl	1a00126c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0015e2:	4620      	mov	r0, r4
1a0015e4:	f7ff feb8 	bl	1a001358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0015e8:	2001      	movs	r0, #1
1a0015ea:	e005      	b.n	1a0015f8 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a0015ec:	4630      	mov	r0, r6
1a0015ee:	f7ff f9e7 	bl	1a0009c0 <vPortFree>
1a0015f2:	e7e6      	b.n	1a0015c2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a0015f8:	b005      	add	sp, #20
1a0015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0015fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001602:	e7f9      	b.n	1a0015f8 <xTaskCreate+0x5a>

1a001604 <vTaskStartScheduler>:
{
1a001604:	b510      	push	{r4, lr}
1a001606:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001608:	2400      	movs	r4, #0
1a00160a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a00160c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00160e:	aa07      	add	r2, sp, #28
1a001610:	a906      	add	r1, sp, #24
1a001612:	a805      	add	r0, sp, #20
1a001614:	f7ff fdca 	bl	1a0011ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001618:	9b05      	ldr	r3, [sp, #20]
1a00161a:	9302      	str	r3, [sp, #8]
1a00161c:	9b06      	ldr	r3, [sp, #24]
1a00161e:	9301      	str	r3, [sp, #4]
1a001620:	9400      	str	r4, [sp, #0]
1a001622:	4623      	mov	r3, r4
1a001624:	9a07      	ldr	r2, [sp, #28]
1a001626:	4917      	ldr	r1, [pc, #92]	; (1a001684 <vTaskStartScheduler+0x80>)
1a001628:	4817      	ldr	r0, [pc, #92]	; (1a001688 <vTaskStartScheduler+0x84>)
1a00162a:	f7ff ff7f 	bl	1a00152c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00162e:	b140      	cbz	r0, 1a001642 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001630:	f000 fb4e 	bl	1a001cd0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001634:	2801      	cmp	r0, #1
1a001636:	d006      	beq.n	1a001646 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001638:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00163c:	d018      	beq.n	1a001670 <vTaskStartScheduler+0x6c>
}
1a00163e:	b008      	add	sp, #32
1a001640:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001642:	2000      	movs	r0, #0
1a001644:	e7f6      	b.n	1a001634 <vTaskStartScheduler+0x30>
1a001646:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00164a:	f383 8811 	msr	BASEPRI, r3
1a00164e:	f3bf 8f6f 	isb	sy
1a001652:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001656:	4b0d      	ldr	r3, [pc, #52]	; (1a00168c <vTaskStartScheduler+0x88>)
1a001658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00165c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00165e:	4b0c      	ldr	r3, [pc, #48]	; (1a001690 <vTaskStartScheduler+0x8c>)
1a001660:	2201      	movs	r2, #1
1a001662:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001664:	4b0b      	ldr	r3, [pc, #44]	; (1a001694 <vTaskStartScheduler+0x90>)
1a001666:	2200      	movs	r2, #0
1a001668:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00166a:	f000 fded 	bl	1a002248 <xPortStartScheduler>
1a00166e:	e7e6      	b.n	1a00163e <vTaskStartScheduler+0x3a>
1a001670:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001674:	f383 8811 	msr	BASEPRI, r3
1a001678:	f3bf 8f6f 	isb	sy
1a00167c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001680:	e7fe      	b.n	1a001680 <vTaskStartScheduler+0x7c>
1a001682:	bf00      	nop
1a001684:	1a00afac 	.word	0x1a00afac
1a001688:	1a001489 	.word	0x1a001489
1a00168c:	10003ae8 	.word	0x10003ae8
1a001690:	10003b04 	.word	0x10003b04
1a001694:	10003b1c 	.word	0x10003b1c

1a001698 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001698:	4a02      	ldr	r2, [pc, #8]	; (1a0016a4 <vTaskSuspendAll+0xc>)
1a00169a:	6813      	ldr	r3, [r2, #0]
1a00169c:	3301      	adds	r3, #1
1a00169e:	6013      	str	r3, [r2, #0]
}
1a0016a0:	4770      	bx	lr
1a0016a2:	bf00      	nop
1a0016a4:	10003ab4 	.word	0x10003ab4

1a0016a8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0016a8:	4b01      	ldr	r3, [pc, #4]	; (1a0016b0 <xTaskGetTickCount+0x8>)
1a0016aa:	6818      	ldr	r0, [r3, #0]
}
1a0016ac:	4770      	bx	lr
1a0016ae:	bf00      	nop
1a0016b0:	10003b1c 	.word	0x10003b1c

1a0016b4 <xTaskIncrementTick>:
{
1a0016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0016b6:	4b3a      	ldr	r3, [pc, #232]	; (1a0017a0 <xTaskIncrementTick+0xec>)
1a0016b8:	681b      	ldr	r3, [r3, #0]
1a0016ba:	2b00      	cmp	r3, #0
1a0016bc:	d164      	bne.n	1a001788 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0016be:	4b39      	ldr	r3, [pc, #228]	; (1a0017a4 <xTaskIncrementTick+0xf0>)
1a0016c0:	681d      	ldr	r5, [r3, #0]
1a0016c2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0016c4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0016c6:	b9c5      	cbnz	r5, 1a0016fa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0016c8:	4b37      	ldr	r3, [pc, #220]	; (1a0017a8 <xTaskIncrementTick+0xf4>)
1a0016ca:	681b      	ldr	r3, [r3, #0]
1a0016cc:	681b      	ldr	r3, [r3, #0]
1a0016ce:	b143      	cbz	r3, 1a0016e2 <xTaskIncrementTick+0x2e>
1a0016d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016d4:	f383 8811 	msr	BASEPRI, r3
1a0016d8:	f3bf 8f6f 	isb	sy
1a0016dc:	f3bf 8f4f 	dsb	sy
1a0016e0:	e7fe      	b.n	1a0016e0 <xTaskIncrementTick+0x2c>
1a0016e2:	4a31      	ldr	r2, [pc, #196]	; (1a0017a8 <xTaskIncrementTick+0xf4>)
1a0016e4:	6811      	ldr	r1, [r2, #0]
1a0016e6:	4b31      	ldr	r3, [pc, #196]	; (1a0017ac <xTaskIncrementTick+0xf8>)
1a0016e8:	6818      	ldr	r0, [r3, #0]
1a0016ea:	6010      	str	r0, [r2, #0]
1a0016ec:	6019      	str	r1, [r3, #0]
1a0016ee:	4a30      	ldr	r2, [pc, #192]	; (1a0017b0 <xTaskIncrementTick+0xfc>)
1a0016f0:	6813      	ldr	r3, [r2, #0]
1a0016f2:	3301      	adds	r3, #1
1a0016f4:	6013      	str	r3, [r2, #0]
1a0016f6:	f7ff fda3 	bl	1a001240 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0016fa:	4b2e      	ldr	r3, [pc, #184]	; (1a0017b4 <xTaskIncrementTick+0x100>)
1a0016fc:	681b      	ldr	r3, [r3, #0]
1a0016fe:	42ab      	cmp	r3, r5
1a001700:	d938      	bls.n	1a001774 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001702:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001704:	4b2c      	ldr	r3, [pc, #176]	; (1a0017b8 <xTaskIncrementTick+0x104>)
1a001706:	681b      	ldr	r3, [r3, #0]
1a001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00170a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00170e:	009a      	lsls	r2, r3, #2
1a001710:	4b2a      	ldr	r3, [pc, #168]	; (1a0017bc <xTaskIncrementTick+0x108>)
1a001712:	589b      	ldr	r3, [r3, r2]
1a001714:	2b01      	cmp	r3, #1
1a001716:	d93c      	bls.n	1a001792 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001718:	2401      	movs	r4, #1
1a00171a:	e03a      	b.n	1a001792 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a00171c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00171e:	4b22      	ldr	r3, [pc, #136]	; (1a0017a8 <xTaskIncrementTick+0xf4>)
1a001720:	681b      	ldr	r3, [r3, #0]
1a001722:	681b      	ldr	r3, [r3, #0]
1a001724:	b343      	cbz	r3, 1a001778 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001726:	4b20      	ldr	r3, [pc, #128]	; (1a0017a8 <xTaskIncrementTick+0xf4>)
1a001728:	681b      	ldr	r3, [r3, #0]
1a00172a:	68db      	ldr	r3, [r3, #12]
1a00172c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00172e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001730:	429d      	cmp	r5, r3
1a001732:	d326      	bcc.n	1a001782 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001734:	1d37      	adds	r7, r6, #4
1a001736:	4638      	mov	r0, r7
1a001738:	f7ff fd24 	bl	1a001184 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a00173c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00173e:	b11b      	cbz	r3, 1a001748 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001740:	f106 0018 	add.w	r0, r6, #24
1a001744:	f7ff fd1e 	bl	1a001184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001748:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00174a:	2201      	movs	r2, #1
1a00174c:	409a      	lsls	r2, r3
1a00174e:	491c      	ldr	r1, [pc, #112]	; (1a0017c0 <xTaskIncrementTick+0x10c>)
1a001750:	6808      	ldr	r0, [r1, #0]
1a001752:	4302      	orrs	r2, r0
1a001754:	600a      	str	r2, [r1, #0]
1a001756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00175a:	009a      	lsls	r2, r3, #2
1a00175c:	4639      	mov	r1, r7
1a00175e:	4817      	ldr	r0, [pc, #92]	; (1a0017bc <xTaskIncrementTick+0x108>)
1a001760:	4410      	add	r0, r2
1a001762:	f7ff fcea 	bl	1a00113a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001766:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001768:	4b13      	ldr	r3, [pc, #76]	; (1a0017b8 <xTaskIncrementTick+0x104>)
1a00176a:	681b      	ldr	r3, [r3, #0]
1a00176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00176e:	429a      	cmp	r2, r3
1a001770:	d2d4      	bcs.n	1a00171c <xTaskIncrementTick+0x68>
1a001772:	e7d4      	b.n	1a00171e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001774:	2400      	movs	r4, #0
1a001776:	e7d2      	b.n	1a00171e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001778:	4b0e      	ldr	r3, [pc, #56]	; (1a0017b4 <xTaskIncrementTick+0x100>)
1a00177a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00177e:	601a      	str	r2, [r3, #0]
					break;
1a001780:	e7c0      	b.n	1a001704 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001782:	4a0c      	ldr	r2, [pc, #48]	; (1a0017b4 <xTaskIncrementTick+0x100>)
1a001784:	6013      	str	r3, [r2, #0]
						break;
1a001786:	e7bd      	b.n	1a001704 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001788:	4a0e      	ldr	r2, [pc, #56]	; (1a0017c4 <xTaskIncrementTick+0x110>)
1a00178a:	6813      	ldr	r3, [r2, #0]
1a00178c:	3301      	adds	r3, #1
1a00178e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001790:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001792:	4b0d      	ldr	r3, [pc, #52]	; (1a0017c8 <xTaskIncrementTick+0x114>)
1a001794:	681b      	ldr	r3, [r3, #0]
1a001796:	b103      	cbz	r3, 1a00179a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001798:	2401      	movs	r4, #1
}
1a00179a:	4620      	mov	r0, r4
1a00179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00179e:	bf00      	nop
1a0017a0:	10003ab4 	.word	0x10003ab4
1a0017a4:	10003b1c 	.word	0x10003b1c
1a0017a8:	10003a14 	.word	0x10003a14
1a0017ac:	10003a18 	.word	0x10003a18
1a0017b0:	10003aec 	.word	0x10003aec
1a0017b4:	10003ae8 	.word	0x10003ae8
1a0017b8:	10003a10 	.word	0x10003a10
1a0017bc:	10003a1c 	.word	0x10003a1c
1a0017c0:	10003abc 	.word	0x10003abc
1a0017c4:	10003ab0 	.word	0x10003ab0
1a0017c8:	10003b20 	.word	0x10003b20

1a0017cc <xTaskResumeAll>:
{
1a0017cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0017ce:	4b35      	ldr	r3, [pc, #212]	; (1a0018a4 <xTaskResumeAll+0xd8>)
1a0017d0:	681b      	ldr	r3, [r3, #0]
1a0017d2:	b943      	cbnz	r3, 1a0017e6 <xTaskResumeAll+0x1a>
1a0017d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017d8:	f383 8811 	msr	BASEPRI, r3
1a0017dc:	f3bf 8f6f 	isb	sy
1a0017e0:	f3bf 8f4f 	dsb	sy
1a0017e4:	e7fe      	b.n	1a0017e4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0017e6:	f000 fc8d 	bl	1a002104 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0017ea:	4b2e      	ldr	r3, [pc, #184]	; (1a0018a4 <xTaskResumeAll+0xd8>)
1a0017ec:	681a      	ldr	r2, [r3, #0]
1a0017ee:	3a01      	subs	r2, #1
1a0017f0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0017f2:	681b      	ldr	r3, [r3, #0]
1a0017f4:	2b00      	cmp	r3, #0
1a0017f6:	d14d      	bne.n	1a001894 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0017f8:	4b2b      	ldr	r3, [pc, #172]	; (1a0018a8 <xTaskResumeAll+0xdc>)
1a0017fa:	681b      	ldr	r3, [r3, #0]
1a0017fc:	b90b      	cbnz	r3, 1a001802 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a0017fe:	2400      	movs	r4, #0
1a001800:	e049      	b.n	1a001896 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a001802:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001804:	4b29      	ldr	r3, [pc, #164]	; (1a0018ac <xTaskResumeAll+0xe0>)
1a001806:	681b      	ldr	r3, [r3, #0]
1a001808:	b31b      	cbz	r3, 1a001852 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00180a:	4b28      	ldr	r3, [pc, #160]	; (1a0018ac <xTaskResumeAll+0xe0>)
1a00180c:	68db      	ldr	r3, [r3, #12]
1a00180e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001810:	f104 0018 	add.w	r0, r4, #24
1a001814:	f7ff fcb6 	bl	1a001184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001818:	1d25      	adds	r5, r4, #4
1a00181a:	4628      	mov	r0, r5
1a00181c:	f7ff fcb2 	bl	1a001184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001822:	2201      	movs	r2, #1
1a001824:	409a      	lsls	r2, r3
1a001826:	4922      	ldr	r1, [pc, #136]	; (1a0018b0 <xTaskResumeAll+0xe4>)
1a001828:	6808      	ldr	r0, [r1, #0]
1a00182a:	4302      	orrs	r2, r0
1a00182c:	600a      	str	r2, [r1, #0]
1a00182e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001832:	009a      	lsls	r2, r3, #2
1a001834:	4629      	mov	r1, r5
1a001836:	481f      	ldr	r0, [pc, #124]	; (1a0018b4 <xTaskResumeAll+0xe8>)
1a001838:	4410      	add	r0, r2
1a00183a:	f7ff fc7e 	bl	1a00113a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00183e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001840:	4b1d      	ldr	r3, [pc, #116]	; (1a0018b8 <xTaskResumeAll+0xec>)
1a001842:	681b      	ldr	r3, [r3, #0]
1a001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001846:	429a      	cmp	r2, r3
1a001848:	d3dc      	bcc.n	1a001804 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a00184a:	4b1c      	ldr	r3, [pc, #112]	; (1a0018bc <xTaskResumeAll+0xf0>)
1a00184c:	2201      	movs	r2, #1
1a00184e:	601a      	str	r2, [r3, #0]
1a001850:	e7d8      	b.n	1a001804 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a001852:	b10c      	cbz	r4, 1a001858 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a001854:	f7ff fcf4 	bl	1a001240 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001858:	4b19      	ldr	r3, [pc, #100]	; (1a0018c0 <xTaskResumeAll+0xf4>)
1a00185a:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00185c:	b974      	cbnz	r4, 1a00187c <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a00185e:	4b17      	ldr	r3, [pc, #92]	; (1a0018bc <xTaskResumeAll+0xf0>)
1a001860:	681b      	ldr	r3, [r3, #0]
1a001862:	b1e3      	cbz	r3, 1a00189e <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001864:	4b17      	ldr	r3, [pc, #92]	; (1a0018c4 <xTaskResumeAll+0xf8>)
1a001866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00186a:	601a      	str	r2, [r3, #0]
1a00186c:	f3bf 8f4f 	dsb	sy
1a001870:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001874:	2401      	movs	r4, #1
1a001876:	e00e      	b.n	1a001896 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001878:	3c01      	subs	r4, #1
1a00187a:	d007      	beq.n	1a00188c <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a00187c:	f7ff ff1a 	bl	1a0016b4 <xTaskIncrementTick>
1a001880:	2800      	cmp	r0, #0
1a001882:	d0f9      	beq.n	1a001878 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a001884:	4b0d      	ldr	r3, [pc, #52]	; (1a0018bc <xTaskResumeAll+0xf0>)
1a001886:	2201      	movs	r2, #1
1a001888:	601a      	str	r2, [r3, #0]
1a00188a:	e7f5      	b.n	1a001878 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a00188c:	4b0c      	ldr	r3, [pc, #48]	; (1a0018c0 <xTaskResumeAll+0xf4>)
1a00188e:	2200      	movs	r2, #0
1a001890:	601a      	str	r2, [r3, #0]
1a001892:	e7e4      	b.n	1a00185e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a001894:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001896:	f000 fc57 	bl	1a002148 <vPortExitCritical>
}
1a00189a:	4620      	mov	r0, r4
1a00189c:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a00189e:	2400      	movs	r4, #0
1a0018a0:	e7f9      	b.n	1a001896 <xTaskResumeAll+0xca>
1a0018a2:	bf00      	nop
1a0018a4:	10003ab4 	.word	0x10003ab4
1a0018a8:	10003aa8 	.word	0x10003aa8
1a0018ac:	10003af0 	.word	0x10003af0
1a0018b0:	10003abc 	.word	0x10003abc
1a0018b4:	10003a1c 	.word	0x10003a1c
1a0018b8:	10003a10 	.word	0x10003a10
1a0018bc:	10003b20 	.word	0x10003b20
1a0018c0:	10003ab0 	.word	0x10003ab0
1a0018c4:	e000ed04 	.word	0xe000ed04

1a0018c8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0018c8:	4b2d      	ldr	r3, [pc, #180]	; (1a001980 <vTaskSwitchContext+0xb8>)
1a0018ca:	681b      	ldr	r3, [r3, #0]
1a0018cc:	b11b      	cbz	r3, 1a0018d6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0018ce:	4b2d      	ldr	r3, [pc, #180]	; (1a001984 <vTaskSwitchContext+0xbc>)
1a0018d0:	2201      	movs	r2, #1
1a0018d2:	601a      	str	r2, [r3, #0]
1a0018d4:	4770      	bx	lr
{
1a0018d6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0018d8:	4b2a      	ldr	r3, [pc, #168]	; (1a001984 <vTaskSwitchContext+0xbc>)
1a0018da:	2200      	movs	r2, #0
1a0018dc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0018de:	4b2a      	ldr	r3, [pc, #168]	; (1a001988 <vTaskSwitchContext+0xc0>)
1a0018e0:	681b      	ldr	r3, [r3, #0]
1a0018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0018e4:	681a      	ldr	r2, [r3, #0]
1a0018e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0018ea:	d103      	bne.n	1a0018f4 <vTaskSwitchContext+0x2c>
1a0018ec:	685a      	ldr	r2, [r3, #4]
1a0018ee:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0018f2:	d01b      	beq.n	1a00192c <vTaskSwitchContext+0x64>
1a0018f4:	4b24      	ldr	r3, [pc, #144]	; (1a001988 <vTaskSwitchContext+0xc0>)
1a0018f6:	6818      	ldr	r0, [r3, #0]
1a0018f8:	6819      	ldr	r1, [r3, #0]
1a0018fa:	3134      	adds	r1, #52	; 0x34
1a0018fc:	f7ff fc92 	bl	1a001224 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001900:	4b22      	ldr	r3, [pc, #136]	; (1a00198c <vTaskSwitchContext+0xc4>)
1a001902:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001904:	fab3 f383 	clz	r3, r3
1a001908:	b2db      	uxtb	r3, r3
1a00190a:	f1c3 031f 	rsb	r3, r3, #31
1a00190e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001912:	008a      	lsls	r2, r1, #2
1a001914:	491e      	ldr	r1, [pc, #120]	; (1a001990 <vTaskSwitchContext+0xc8>)
1a001916:	588a      	ldr	r2, [r1, r2]
1a001918:	b98a      	cbnz	r2, 1a00193e <vTaskSwitchContext+0x76>
	__asm volatile
1a00191a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00191e:	f383 8811 	msr	BASEPRI, r3
1a001922:	f3bf 8f6f 	isb	sy
1a001926:	f3bf 8f4f 	dsb	sy
1a00192a:	e7fe      	b.n	1a00192a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00192c:	689a      	ldr	r2, [r3, #8]
1a00192e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001932:	d1df      	bne.n	1a0018f4 <vTaskSwitchContext+0x2c>
1a001934:	68db      	ldr	r3, [r3, #12]
1a001936:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00193a:	d1db      	bne.n	1a0018f4 <vTaskSwitchContext+0x2c>
1a00193c:	e7e0      	b.n	1a001900 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00193e:	4814      	ldr	r0, [pc, #80]	; (1a001990 <vTaskSwitchContext+0xc8>)
1a001940:	009a      	lsls	r2, r3, #2
1a001942:	18d4      	adds	r4, r2, r3
1a001944:	00a1      	lsls	r1, r4, #2
1a001946:	4401      	add	r1, r0
1a001948:	684c      	ldr	r4, [r1, #4]
1a00194a:	6864      	ldr	r4, [r4, #4]
1a00194c:	604c      	str	r4, [r1, #4]
1a00194e:	441a      	add	r2, r3
1a001950:	0091      	lsls	r1, r2, #2
1a001952:	3108      	adds	r1, #8
1a001954:	4408      	add	r0, r1
1a001956:	4284      	cmp	r4, r0
1a001958:	d009      	beq.n	1a00196e <vTaskSwitchContext+0xa6>
1a00195a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00195e:	009a      	lsls	r2, r3, #2
1a001960:	4b0b      	ldr	r3, [pc, #44]	; (1a001990 <vTaskSwitchContext+0xc8>)
1a001962:	4413      	add	r3, r2
1a001964:	685b      	ldr	r3, [r3, #4]
1a001966:	68da      	ldr	r2, [r3, #12]
1a001968:	4b07      	ldr	r3, [pc, #28]	; (1a001988 <vTaskSwitchContext+0xc0>)
1a00196a:	601a      	str	r2, [r3, #0]
}
1a00196c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00196e:	6860      	ldr	r0, [r4, #4]
1a001970:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001974:	0091      	lsls	r1, r2, #2
1a001976:	4a06      	ldr	r2, [pc, #24]	; (1a001990 <vTaskSwitchContext+0xc8>)
1a001978:	440a      	add	r2, r1
1a00197a:	6050      	str	r0, [r2, #4]
1a00197c:	e7ed      	b.n	1a00195a <vTaskSwitchContext+0x92>
1a00197e:	bf00      	nop
1a001980:	10003ab4 	.word	0x10003ab4
1a001984:	10003b20 	.word	0x10003b20
1a001988:	10003a10 	.word	0x10003a10
1a00198c:	10003abc 	.word	0x10003abc
1a001990:	10003a1c 	.word	0x10003a1c

1a001994 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001994:	b158      	cbz	r0, 1a0019ae <vTaskPlaceOnEventList+0x1a>
{
1a001996:	b510      	push	{r4, lr}
1a001998:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00199a:	4b09      	ldr	r3, [pc, #36]	; (1a0019c0 <vTaskPlaceOnEventList+0x2c>)
1a00199c:	6819      	ldr	r1, [r3, #0]
1a00199e:	3118      	adds	r1, #24
1a0019a0:	f7ff fbd6 	bl	1a001150 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0019a4:	2101      	movs	r1, #1
1a0019a6:	4620      	mov	r0, r4
1a0019a8:	f7ff fd82 	bl	1a0014b0 <prvAddCurrentTaskToDelayedList>
}
1a0019ac:	bd10      	pop	{r4, pc}
1a0019ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019b2:	f383 8811 	msr	BASEPRI, r3
1a0019b6:	f3bf 8f6f 	isb	sy
1a0019ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a0019be:	e7fe      	b.n	1a0019be <vTaskPlaceOnEventList+0x2a>
1a0019c0:	10003a10 	.word	0x10003a10

1a0019c4 <vTaskPlaceOnEventListRestricted>:
	{
1a0019c4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0019c6:	b170      	cbz	r0, 1a0019e6 <vTaskPlaceOnEventListRestricted+0x22>
1a0019c8:	460c      	mov	r4, r1
1a0019ca:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0019cc:	4a0a      	ldr	r2, [pc, #40]	; (1a0019f8 <vTaskPlaceOnEventListRestricted+0x34>)
1a0019ce:	6811      	ldr	r1, [r2, #0]
1a0019d0:	3118      	adds	r1, #24
1a0019d2:	f7ff fbb2 	bl	1a00113a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0019d6:	b10d      	cbz	r5, 1a0019dc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a0019d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0019dc:	4629      	mov	r1, r5
1a0019de:	4620      	mov	r0, r4
1a0019e0:	f7ff fd66 	bl	1a0014b0 <prvAddCurrentTaskToDelayedList>
	}
1a0019e4:	bd38      	pop	{r3, r4, r5, pc}
1a0019e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ea:	f383 8811 	msr	BASEPRI, r3
1a0019ee:	f3bf 8f6f 	isb	sy
1a0019f2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a0019f6:	e7fe      	b.n	1a0019f6 <vTaskPlaceOnEventListRestricted+0x32>
1a0019f8:	10003a10 	.word	0x10003a10

1a0019fc <xTaskRemoveFromEventList>:
{
1a0019fc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0019fe:	68c3      	ldr	r3, [r0, #12]
1a001a00:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001a02:	b324      	cbz	r4, 1a001a4e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001a04:	f104 0518 	add.w	r5, r4, #24
1a001a08:	4628      	mov	r0, r5
1a001a0a:	f7ff fbbb 	bl	1a001184 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001a0e:	4b18      	ldr	r3, [pc, #96]	; (1a001a70 <xTaskRemoveFromEventList+0x74>)
1a001a10:	681b      	ldr	r3, [r3, #0]
1a001a12:	bb2b      	cbnz	r3, 1a001a60 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001a14:	1d25      	adds	r5, r4, #4
1a001a16:	4628      	mov	r0, r5
1a001a18:	f7ff fbb4 	bl	1a001184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001a1e:	2201      	movs	r2, #1
1a001a20:	409a      	lsls	r2, r3
1a001a22:	4914      	ldr	r1, [pc, #80]	; (1a001a74 <xTaskRemoveFromEventList+0x78>)
1a001a24:	6808      	ldr	r0, [r1, #0]
1a001a26:	4302      	orrs	r2, r0
1a001a28:	600a      	str	r2, [r1, #0]
1a001a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a2e:	009a      	lsls	r2, r3, #2
1a001a30:	4629      	mov	r1, r5
1a001a32:	4811      	ldr	r0, [pc, #68]	; (1a001a78 <xTaskRemoveFromEventList+0x7c>)
1a001a34:	4410      	add	r0, r2
1a001a36:	f7ff fb80 	bl	1a00113a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001a3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001a3c:	4b0f      	ldr	r3, [pc, #60]	; (1a001a7c <xTaskRemoveFromEventList+0x80>)
1a001a3e:	681b      	ldr	r3, [r3, #0]
1a001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a42:	429a      	cmp	r2, r3
1a001a44:	d911      	bls.n	1a001a6a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001a46:	2001      	movs	r0, #1
1a001a48:	4b0d      	ldr	r3, [pc, #52]	; (1a001a80 <xTaskRemoveFromEventList+0x84>)
1a001a4a:	6018      	str	r0, [r3, #0]
1a001a4c:	e00e      	b.n	1a001a6c <xTaskRemoveFromEventList+0x70>
1a001a4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a52:	f383 8811 	msr	BASEPRI, r3
1a001a56:	f3bf 8f6f 	isb	sy
1a001a5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a001a5e:	e7fe      	b.n	1a001a5e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001a60:	4629      	mov	r1, r5
1a001a62:	4808      	ldr	r0, [pc, #32]	; (1a001a84 <xTaskRemoveFromEventList+0x88>)
1a001a64:	f7ff fb69 	bl	1a00113a <vListInsertEnd>
1a001a68:	e7e7      	b.n	1a001a3a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001a6a:	2000      	movs	r0, #0
}
1a001a6c:	bd38      	pop	{r3, r4, r5, pc}
1a001a6e:	bf00      	nop
1a001a70:	10003ab4 	.word	0x10003ab4
1a001a74:	10003abc 	.word	0x10003abc
1a001a78:	10003a1c 	.word	0x10003a1c
1a001a7c:	10003a10 	.word	0x10003a10
1a001a80:	10003b20 	.word	0x10003b20
1a001a84:	10003af0 	.word	0x10003af0

1a001a88 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001a88:	4b03      	ldr	r3, [pc, #12]	; (1a001a98 <vTaskInternalSetTimeOutState+0x10>)
1a001a8a:	681b      	ldr	r3, [r3, #0]
1a001a8c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001a8e:	4b03      	ldr	r3, [pc, #12]	; (1a001a9c <vTaskInternalSetTimeOutState+0x14>)
1a001a90:	681b      	ldr	r3, [r3, #0]
1a001a92:	6043      	str	r3, [r0, #4]
}
1a001a94:	4770      	bx	lr
1a001a96:	bf00      	nop
1a001a98:	10003aec 	.word	0x10003aec
1a001a9c:	10003b1c 	.word	0x10003b1c

1a001aa0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
1a001aa0:	b1d0      	cbz	r0, 1a001ad8 <xTaskCheckForTimeOut+0x38>
{
1a001aa2:	b570      	push	{r4, r5, r6, lr}
1a001aa4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001aa6:	b301      	cbz	r1, 1a001aea <xTaskCheckForTimeOut+0x4a>
1a001aa8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001aaa:	f000 fb2b 	bl	1a002104 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001aae:	4b18      	ldr	r3, [pc, #96]	; (1a001b10 <xTaskCheckForTimeOut+0x70>)
1a001ab0:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001ab2:	686b      	ldr	r3, [r5, #4]
1a001ab4:	1ad0      	subs	r0, r2, r3
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001ab6:	682e      	ldr	r6, [r5, #0]
1a001ab8:	4916      	ldr	r1, [pc, #88]	; (1a001b14 <xTaskCheckForTimeOut+0x74>)
1a001aba:	6809      	ldr	r1, [r1, #0]
1a001abc:	428e      	cmp	r6, r1
1a001abe:	d001      	beq.n	1a001ac4 <xTaskCheckForTimeOut+0x24>
1a001ac0:	4293      	cmp	r3, r2
1a001ac2:	d923      	bls.n	1a001b0c <xTaskCheckForTimeOut+0x6c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001ac4:	6821      	ldr	r1, [r4, #0]
1a001ac6:	4281      	cmp	r1, r0
1a001ac8:	d818      	bhi.n	1a001afc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001aca:	2300      	movs	r3, #0
1a001acc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001ace:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a001ad0:	f000 fb3a 	bl	1a002148 <vPortExitCritical>
}
1a001ad4:	4620      	mov	r0, r4
1a001ad6:	bd70      	pop	{r4, r5, r6, pc}
1a001ad8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001adc:	f383 8811 	msr	BASEPRI, r3
1a001ae0:	f3bf 8f6f 	isb	sy
1a001ae4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a001ae8:	e7fe      	b.n	1a001ae8 <xTaskCheckForTimeOut+0x48>
1a001aea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aee:	f383 8811 	msr	BASEPRI, r3
1a001af2:	f3bf 8f6f 	isb	sy
1a001af6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a001afa:	e7fe      	b.n	1a001afa <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001afc:	1a9b      	subs	r3, r3, r2
1a001afe:	440b      	add	r3, r1
1a001b00:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001b02:	4628      	mov	r0, r5
1a001b04:	f7ff ffc0 	bl	1a001a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001b08:	2400      	movs	r4, #0
1a001b0a:	e7e1      	b.n	1a001ad0 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
1a001b0c:	2401      	movs	r4, #1
1a001b0e:	e7df      	b.n	1a001ad0 <xTaskCheckForTimeOut+0x30>
1a001b10:	10003b1c 	.word	0x10003b1c
1a001b14:	10003aec 	.word	0x10003aec

1a001b18 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001b18:	4b01      	ldr	r3, [pc, #4]	; (1a001b20 <vTaskMissedYield+0x8>)
1a001b1a:	2201      	movs	r2, #1
1a001b1c:	601a      	str	r2, [r3, #0]
}
1a001b1e:	4770      	bx	lr
1a001b20:	10003b20 	.word	0x10003b20

1a001b24 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001b24:	4b05      	ldr	r3, [pc, #20]	; (1a001b3c <xTaskGetSchedulerState+0x18>)
1a001b26:	681b      	ldr	r3, [r3, #0]
1a001b28:	b133      	cbz	r3, 1a001b38 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b2a:	4b05      	ldr	r3, [pc, #20]	; (1a001b40 <xTaskGetSchedulerState+0x1c>)
1a001b2c:	681b      	ldr	r3, [r3, #0]
1a001b2e:	b10b      	cbz	r3, 1a001b34 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001b30:	2000      	movs	r0, #0
	}
1a001b32:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001b34:	2002      	movs	r0, #2
1a001b36:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001b38:	2001      	movs	r0, #1
1a001b3a:	4770      	bx	lr
1a001b3c:	10003b04 	.word	0x10003b04
1a001b40:	10003ab4 	.word	0x10003ab4

1a001b44 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001b44:	2800      	cmp	r0, #0
1a001b46:	d04c      	beq.n	1a001be2 <xTaskPriorityDisinherit+0x9e>
	{
1a001b48:	b538      	push	{r3, r4, r5, lr}
1a001b4a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001b4c:	4a27      	ldr	r2, [pc, #156]	; (1a001bec <xTaskPriorityDisinherit+0xa8>)
1a001b4e:	6812      	ldr	r2, [r2, #0]
1a001b50:	4282      	cmp	r2, r0
1a001b52:	d008      	beq.n	1a001b66 <xTaskPriorityDisinherit+0x22>
1a001b54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b58:	f383 8811 	msr	BASEPRI, r3
1a001b5c:	f3bf 8f6f 	isb	sy
1a001b60:	f3bf 8f4f 	dsb	sy
1a001b64:	e7fe      	b.n	1a001b64 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001b66:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001b68:	b942      	cbnz	r2, 1a001b7c <xTaskPriorityDisinherit+0x38>
1a001b6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b6e:	f383 8811 	msr	BASEPRI, r3
1a001b72:	f3bf 8f6f 	isb	sy
1a001b76:	f3bf 8f4f 	dsb	sy
1a001b7a:	e7fe      	b.n	1a001b7a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001b7c:	3a01      	subs	r2, #1
1a001b7e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001b80:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001b82:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001b84:	4288      	cmp	r0, r1
1a001b86:	d02e      	beq.n	1a001be6 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001b88:	b10a      	cbz	r2, 1a001b8e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001b8a:	2000      	movs	r0, #0
	}
1a001b8c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001b8e:	1d25      	adds	r5, r4, #4
1a001b90:	4628      	mov	r0, r5
1a001b92:	f7ff faf7 	bl	1a001184 <uxListRemove>
1a001b96:	b970      	cbnz	r0, 1a001bb6 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001b98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b9a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001b9e:	008b      	lsls	r3, r1, #2
1a001ba0:	4913      	ldr	r1, [pc, #76]	; (1a001bf0 <xTaskPriorityDisinherit+0xac>)
1a001ba2:	58cb      	ldr	r3, [r1, r3]
1a001ba4:	b93b      	cbnz	r3, 1a001bb6 <xTaskPriorityDisinherit+0x72>
1a001ba6:	2301      	movs	r3, #1
1a001ba8:	fa03 f202 	lsl.w	r2, r3, r2
1a001bac:	4911      	ldr	r1, [pc, #68]	; (1a001bf4 <xTaskPriorityDisinherit+0xb0>)
1a001bae:	680b      	ldr	r3, [r1, #0]
1a001bb0:	ea23 0302 	bic.w	r3, r3, r2
1a001bb4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001bb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001bba:	f1c3 0207 	rsb	r2, r3, #7
1a001bbe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001bc0:	2401      	movs	r4, #1
1a001bc2:	fa04 f203 	lsl.w	r2, r4, r3
1a001bc6:	490b      	ldr	r1, [pc, #44]	; (1a001bf4 <xTaskPriorityDisinherit+0xb0>)
1a001bc8:	6808      	ldr	r0, [r1, #0]
1a001bca:	4302      	orrs	r2, r0
1a001bcc:	600a      	str	r2, [r1, #0]
1a001bce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001bd2:	009a      	lsls	r2, r3, #2
1a001bd4:	4629      	mov	r1, r5
1a001bd6:	4806      	ldr	r0, [pc, #24]	; (1a001bf0 <xTaskPriorityDisinherit+0xac>)
1a001bd8:	4410      	add	r0, r2
1a001bda:	f7ff faae 	bl	1a00113a <vListInsertEnd>
					xReturn = pdTRUE;
1a001bde:	4620      	mov	r0, r4
1a001be0:	e7d4      	b.n	1a001b8c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a001be2:	2000      	movs	r0, #0
	}
1a001be4:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001be6:	2000      	movs	r0, #0
1a001be8:	e7d0      	b.n	1a001b8c <xTaskPriorityDisinherit+0x48>
1a001bea:	bf00      	nop
1a001bec:	10003a10 	.word	0x10003a10
1a001bf0:	10003a1c 	.word	0x10003a1c
1a001bf4:	10003abc 	.word	0x10003abc

1a001bf8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001bf8:	4b06      	ldr	r3, [pc, #24]	; (1a001c14 <prvGetNextExpireTime+0x1c>)
1a001bfa:	681a      	ldr	r2, [r3, #0]
1a001bfc:	6813      	ldr	r3, [r2, #0]
1a001bfe:	fab3 f383 	clz	r3, r3
1a001c02:	095b      	lsrs	r3, r3, #5
1a001c04:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001c06:	b913      	cbnz	r3, 1a001c0e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c08:	68d3      	ldr	r3, [r2, #12]
1a001c0a:	6818      	ldr	r0, [r3, #0]
1a001c0c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001c0e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001c10:	4770      	bx	lr
1a001c12:	bf00      	nop
1a001c14:	10003b24 	.word	0x10003b24

1a001c18 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001c18:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001c1a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001c1c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001c1e:	4291      	cmp	r1, r2
1a001c20:	d80c      	bhi.n	1a001c3c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c22:	1ad2      	subs	r2, r2, r3
1a001c24:	6983      	ldr	r3, [r0, #24]
1a001c26:	429a      	cmp	r2, r3
1a001c28:	d301      	bcc.n	1a001c2e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001c2a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001c2c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001c2e:	1d01      	adds	r1, r0, #4
1a001c30:	4b09      	ldr	r3, [pc, #36]	; (1a001c58 <prvInsertTimerInActiveList+0x40>)
1a001c32:	6818      	ldr	r0, [r3, #0]
1a001c34:	f7ff fa8c 	bl	1a001150 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001c38:	2000      	movs	r0, #0
1a001c3a:	e7f7      	b.n	1a001c2c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001c3c:	429a      	cmp	r2, r3
1a001c3e:	d201      	bcs.n	1a001c44 <prvInsertTimerInActiveList+0x2c>
1a001c40:	4299      	cmp	r1, r3
1a001c42:	d206      	bcs.n	1a001c52 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001c44:	1d01      	adds	r1, r0, #4
1a001c46:	4b05      	ldr	r3, [pc, #20]	; (1a001c5c <prvInsertTimerInActiveList+0x44>)
1a001c48:	6818      	ldr	r0, [r3, #0]
1a001c4a:	f7ff fa81 	bl	1a001150 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001c4e:	2000      	movs	r0, #0
1a001c50:	e7ec      	b.n	1a001c2c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a001c52:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001c54:	e7ea      	b.n	1a001c2c <prvInsertTimerInActiveList+0x14>
1a001c56:	bf00      	nop
1a001c58:	10003b28 	.word	0x10003b28
1a001c5c:	10003b24 	.word	0x10003b24

1a001c60 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001c60:	b530      	push	{r4, r5, lr}
1a001c62:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001c64:	f000 fa4e 	bl	1a002104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001c68:	4b11      	ldr	r3, [pc, #68]	; (1a001cb0 <prvCheckForValidListAndQueue+0x50>)
1a001c6a:	681b      	ldr	r3, [r3, #0]
1a001c6c:	b11b      	cbz	r3, 1a001c76 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001c6e:	f000 fa6b 	bl	1a002148 <vPortExitCritical>
}
1a001c72:	b003      	add	sp, #12
1a001c74:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001c76:	4d0f      	ldr	r5, [pc, #60]	; (1a001cb4 <prvCheckForValidListAndQueue+0x54>)
1a001c78:	4628      	mov	r0, r5
1a001c7a:	f7ff fa50 	bl	1a00111e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001c7e:	4c0e      	ldr	r4, [pc, #56]	; (1a001cb8 <prvCheckForValidListAndQueue+0x58>)
1a001c80:	4620      	mov	r0, r4
1a001c82:	f7ff fa4c 	bl	1a00111e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001c86:	4b0d      	ldr	r3, [pc, #52]	; (1a001cbc <prvCheckForValidListAndQueue+0x5c>)
1a001c88:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001c8a:	4b0d      	ldr	r3, [pc, #52]	; (1a001cc0 <prvCheckForValidListAndQueue+0x60>)
1a001c8c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001c8e:	2300      	movs	r3, #0
1a001c90:	9300      	str	r3, [sp, #0]
1a001c92:	4b0c      	ldr	r3, [pc, #48]	; (1a001cc4 <prvCheckForValidListAndQueue+0x64>)
1a001c94:	4a0c      	ldr	r2, [pc, #48]	; (1a001cc8 <prvCheckForValidListAndQueue+0x68>)
1a001c96:	2110      	movs	r1, #16
1a001c98:	200a      	movs	r0, #10
1a001c9a:	f7fe ffbc 	bl	1a000c16 <xQueueGenericCreateStatic>
1a001c9e:	4b04      	ldr	r3, [pc, #16]	; (1a001cb0 <prvCheckForValidListAndQueue+0x50>)
1a001ca0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001ca2:	2800      	cmp	r0, #0
1a001ca4:	d0e3      	beq.n	1a001c6e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001ca6:	4909      	ldr	r1, [pc, #36]	; (1a001ccc <prvCheckForValidListAndQueue+0x6c>)
1a001ca8:	f7ff f9fc 	bl	1a0010a4 <vQueueAddToRegistry>
1a001cac:	e7df      	b.n	1a001c6e <prvCheckForValidListAndQueue+0xe>
1a001cae:	bf00      	nop
1a001cb0:	10003c48 	.word	0x10003c48
1a001cb4:	10003bcc 	.word	0x10003bcc
1a001cb8:	10003be0 	.word	0x10003be0
1a001cbc:	10003b24 	.word	0x10003b24
1a001cc0:	10003b28 	.word	0x10003b28
1a001cc4:	10003bf8 	.word	0x10003bf8
1a001cc8:	10003b2c 	.word	0x10003b2c
1a001ccc:	1a00afb4 	.word	0x1a00afb4

1a001cd0 <xTimerCreateTimerTask>:
{
1a001cd0:	b510      	push	{r4, lr}
1a001cd2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001cd4:	f7ff ffc4 	bl	1a001c60 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001cd8:	4b12      	ldr	r3, [pc, #72]	; (1a001d24 <xTimerCreateTimerTask+0x54>)
1a001cda:	681b      	ldr	r3, [r3, #0]
1a001cdc:	b1cb      	cbz	r3, 1a001d12 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001cde:	2400      	movs	r4, #0
1a001ce0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001ce2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001ce4:	aa07      	add	r2, sp, #28
1a001ce6:	a906      	add	r1, sp, #24
1a001ce8:	a805      	add	r0, sp, #20
1a001cea:	f7ff fa6b 	bl	1a0011c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001cee:	9b05      	ldr	r3, [sp, #20]
1a001cf0:	9302      	str	r3, [sp, #8]
1a001cf2:	9b06      	ldr	r3, [sp, #24]
1a001cf4:	9301      	str	r3, [sp, #4]
1a001cf6:	2304      	movs	r3, #4
1a001cf8:	9300      	str	r3, [sp, #0]
1a001cfa:	4623      	mov	r3, r4
1a001cfc:	9a07      	ldr	r2, [sp, #28]
1a001cfe:	490a      	ldr	r1, [pc, #40]	; (1a001d28 <xTimerCreateTimerTask+0x58>)
1a001d00:	480a      	ldr	r0, [pc, #40]	; (1a001d2c <xTimerCreateTimerTask+0x5c>)
1a001d02:	f7ff fc13 	bl	1a00152c <xTaskCreateStatic>
1a001d06:	4b0a      	ldr	r3, [pc, #40]	; (1a001d30 <xTimerCreateTimerTask+0x60>)
1a001d08:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001d0a:	b110      	cbz	r0, 1a001d12 <xTimerCreateTimerTask+0x42>
}
1a001d0c:	2001      	movs	r0, #1
1a001d0e:	b008      	add	sp, #32
1a001d10:	bd10      	pop	{r4, pc}
1a001d12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d16:	f383 8811 	msr	BASEPRI, r3
1a001d1a:	f3bf 8f6f 	isb	sy
1a001d1e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a001d22:	e7fe      	b.n	1a001d22 <xTimerCreateTimerTask+0x52>
1a001d24:	10003c48 	.word	0x10003c48
1a001d28:	1a00afbc 	.word	0x1a00afbc
1a001d2c:	1a002015 	.word	0x1a002015
1a001d30:	10003c4c 	.word	0x10003c4c

1a001d34 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001d34:	b1c0      	cbz	r0, 1a001d68 <xTimerGenericCommand+0x34>
{
1a001d36:	b530      	push	{r4, r5, lr}
1a001d38:	b085      	sub	sp, #20
1a001d3a:	4615      	mov	r5, r2
1a001d3c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001d3e:	4a17      	ldr	r2, [pc, #92]	; (1a001d9c <xTimerGenericCommand+0x68>)
1a001d40:	6810      	ldr	r0, [r2, #0]
1a001d42:	b340      	cbz	r0, 1a001d96 <xTimerGenericCommand+0x62>
1a001d44:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001d46:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001d48:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001d4a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001d4c:	2905      	cmp	r1, #5
1a001d4e:	dc1c      	bgt.n	1a001d8a <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001d50:	f7ff fee8 	bl	1a001b24 <xTaskGetSchedulerState>
1a001d54:	2802      	cmp	r0, #2
1a001d56:	d010      	beq.n	1a001d7a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001d58:	2300      	movs	r3, #0
1a001d5a:	461a      	mov	r2, r3
1a001d5c:	4669      	mov	r1, sp
1a001d5e:	480f      	ldr	r0, [pc, #60]	; (1a001d9c <xTimerGenericCommand+0x68>)
1a001d60:	6800      	ldr	r0, [r0, #0]
1a001d62:	f7fe ffc9 	bl	1a000cf8 <xQueueGenericSend>
1a001d66:	e014      	b.n	1a001d92 <xTimerGenericCommand+0x5e>
1a001d68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d6c:	f383 8811 	msr	BASEPRI, r3
1a001d70:	f3bf 8f6f 	isb	sy
1a001d74:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a001d78:	e7fe      	b.n	1a001d78 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001d7a:	2300      	movs	r3, #0
1a001d7c:	9a08      	ldr	r2, [sp, #32]
1a001d7e:	4669      	mov	r1, sp
1a001d80:	4806      	ldr	r0, [pc, #24]	; (1a001d9c <xTimerGenericCommand+0x68>)
1a001d82:	6800      	ldr	r0, [r0, #0]
1a001d84:	f7fe ffb8 	bl	1a000cf8 <xQueueGenericSend>
1a001d88:	e003      	b.n	1a001d92 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001d8a:	2300      	movs	r3, #0
1a001d8c:	4669      	mov	r1, sp
1a001d8e:	f7ff f873 	bl	1a000e78 <xQueueGenericSendFromISR>
}
1a001d92:	b005      	add	sp, #20
1a001d94:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a001d96:	2000      	movs	r0, #0
	return xReturn;
1a001d98:	e7fb      	b.n	1a001d92 <xTimerGenericCommand+0x5e>
1a001d9a:	bf00      	nop
1a001d9c:	10003c48 	.word	0x10003c48

1a001da0 <prvSwitchTimerLists>:
{
1a001da0:	b570      	push	{r4, r5, r6, lr}
1a001da2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001da4:	4b1a      	ldr	r3, [pc, #104]	; (1a001e10 <prvSwitchTimerLists+0x70>)
1a001da6:	681b      	ldr	r3, [r3, #0]
1a001da8:	681a      	ldr	r2, [r3, #0]
1a001daa:	b352      	cbz	r2, 1a001e02 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001dac:	68db      	ldr	r3, [r3, #12]
1a001dae:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001db0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001db2:	1d25      	adds	r5, r4, #4
1a001db4:	4628      	mov	r0, r5
1a001db6:	f7ff f9e5 	bl	1a001184 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001dbc:	4620      	mov	r0, r4
1a001dbe:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001dc0:	69e3      	ldr	r3, [r4, #28]
1a001dc2:	2b01      	cmp	r3, #1
1a001dc4:	d1ee      	bne.n	1a001da4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001dc6:	69a3      	ldr	r3, [r4, #24]
1a001dc8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001dca:	429e      	cmp	r6, r3
1a001dcc:	d207      	bcs.n	1a001dde <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001dce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001dd0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001dd2:	4629      	mov	r1, r5
1a001dd4:	4b0e      	ldr	r3, [pc, #56]	; (1a001e10 <prvSwitchTimerLists+0x70>)
1a001dd6:	6818      	ldr	r0, [r3, #0]
1a001dd8:	f7ff f9ba 	bl	1a001150 <vListInsert>
1a001ddc:	e7e2      	b.n	1a001da4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001dde:	2100      	movs	r1, #0
1a001de0:	9100      	str	r1, [sp, #0]
1a001de2:	460b      	mov	r3, r1
1a001de4:	4632      	mov	r2, r6
1a001de6:	4620      	mov	r0, r4
1a001de8:	f7ff ffa4 	bl	1a001d34 <xTimerGenericCommand>
				configASSERT( xResult );
1a001dec:	2800      	cmp	r0, #0
1a001dee:	d1d9      	bne.n	1a001da4 <prvSwitchTimerLists+0x4>
1a001df0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001df4:	f383 8811 	msr	BASEPRI, r3
1a001df8:	f3bf 8f6f 	isb	sy
1a001dfc:	f3bf 8f4f 	dsb	sy
1a001e00:	e7fe      	b.n	1a001e00 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001e02:	4a04      	ldr	r2, [pc, #16]	; (1a001e14 <prvSwitchTimerLists+0x74>)
1a001e04:	6810      	ldr	r0, [r2, #0]
1a001e06:	4902      	ldr	r1, [pc, #8]	; (1a001e10 <prvSwitchTimerLists+0x70>)
1a001e08:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001e0a:	6013      	str	r3, [r2, #0]
}
1a001e0c:	b002      	add	sp, #8
1a001e0e:	bd70      	pop	{r4, r5, r6, pc}
1a001e10:	10003b24 	.word	0x10003b24
1a001e14:	10003b28 	.word	0x10003b28

1a001e18 <prvSampleTimeNow>:
{
1a001e18:	b538      	push	{r3, r4, r5, lr}
1a001e1a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001e1c:	f7ff fc44 	bl	1a0016a8 <xTaskGetTickCount>
1a001e20:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001e22:	4b07      	ldr	r3, [pc, #28]	; (1a001e40 <prvSampleTimeNow+0x28>)
1a001e24:	681b      	ldr	r3, [r3, #0]
1a001e26:	4283      	cmp	r3, r0
1a001e28:	d805      	bhi.n	1a001e36 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001e2a:	2300      	movs	r3, #0
1a001e2c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001e2e:	4b04      	ldr	r3, [pc, #16]	; (1a001e40 <prvSampleTimeNow+0x28>)
1a001e30:	601c      	str	r4, [r3, #0]
}
1a001e32:	4620      	mov	r0, r4
1a001e34:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001e36:	f7ff ffb3 	bl	1a001da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001e3a:	2301      	movs	r3, #1
1a001e3c:	602b      	str	r3, [r5, #0]
1a001e3e:	e7f6      	b.n	1a001e2e <prvSampleTimeNow+0x16>
1a001e40:	10003bf4 	.word	0x10003bf4

1a001e44 <prvProcessExpiredTimer>:
{
1a001e44:	b570      	push	{r4, r5, r6, lr}
1a001e46:	b082      	sub	sp, #8
1a001e48:	4605      	mov	r5, r0
1a001e4a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001e4c:	4b14      	ldr	r3, [pc, #80]	; (1a001ea0 <prvProcessExpiredTimer+0x5c>)
1a001e4e:	681b      	ldr	r3, [r3, #0]
1a001e50:	68db      	ldr	r3, [r3, #12]
1a001e52:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001e54:	1d20      	adds	r0, r4, #4
1a001e56:	f7ff f995 	bl	1a001184 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001e5a:	69e3      	ldr	r3, [r4, #28]
1a001e5c:	2b01      	cmp	r3, #1
1a001e5e:	d004      	beq.n	1a001e6a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001e62:	4620      	mov	r0, r4
1a001e64:	4798      	blx	r3
}
1a001e66:	b002      	add	sp, #8
1a001e68:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001e6a:	69a1      	ldr	r1, [r4, #24]
1a001e6c:	462b      	mov	r3, r5
1a001e6e:	4632      	mov	r2, r6
1a001e70:	4429      	add	r1, r5
1a001e72:	4620      	mov	r0, r4
1a001e74:	f7ff fed0 	bl	1a001c18 <prvInsertTimerInActiveList>
1a001e78:	2800      	cmp	r0, #0
1a001e7a:	d0f1      	beq.n	1a001e60 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001e7c:	2100      	movs	r1, #0
1a001e7e:	9100      	str	r1, [sp, #0]
1a001e80:	460b      	mov	r3, r1
1a001e82:	462a      	mov	r2, r5
1a001e84:	4620      	mov	r0, r4
1a001e86:	f7ff ff55 	bl	1a001d34 <xTimerGenericCommand>
			configASSERT( xResult );
1a001e8a:	2800      	cmp	r0, #0
1a001e8c:	d1e8      	bne.n	1a001e60 <prvProcessExpiredTimer+0x1c>
1a001e8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e92:	f383 8811 	msr	BASEPRI, r3
1a001e96:	f3bf 8f6f 	isb	sy
1a001e9a:	f3bf 8f4f 	dsb	sy
1a001e9e:	e7fe      	b.n	1a001e9e <prvProcessExpiredTimer+0x5a>
1a001ea0:	10003b24 	.word	0x10003b24

1a001ea4 <prvProcessTimerOrBlockTask>:
{
1a001ea4:	b570      	push	{r4, r5, r6, lr}
1a001ea6:	b082      	sub	sp, #8
1a001ea8:	4606      	mov	r6, r0
1a001eaa:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001eac:	f7ff fbf4 	bl	1a001698 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001eb0:	a801      	add	r0, sp, #4
1a001eb2:	f7ff ffb1 	bl	1a001e18 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001eb6:	9b01      	ldr	r3, [sp, #4]
1a001eb8:	bb1b      	cbnz	r3, 1a001f02 <prvProcessTimerOrBlockTask+0x5e>
1a001eba:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001ebc:	b90c      	cbnz	r4, 1a001ec2 <prvProcessTimerOrBlockTask+0x1e>
1a001ebe:	42b0      	cmp	r0, r6
1a001ec0:	d218      	bcs.n	1a001ef4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001ec2:	b12c      	cbz	r4, 1a001ed0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001ec4:	4b11      	ldr	r3, [pc, #68]	; (1a001f0c <prvProcessTimerOrBlockTask+0x68>)
1a001ec6:	681b      	ldr	r3, [r3, #0]
1a001ec8:	681c      	ldr	r4, [r3, #0]
1a001eca:	fab4 f484 	clz	r4, r4
1a001ece:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001ed0:	4622      	mov	r2, r4
1a001ed2:	1b71      	subs	r1, r6, r5
1a001ed4:	4b0e      	ldr	r3, [pc, #56]	; (1a001f10 <prvProcessTimerOrBlockTask+0x6c>)
1a001ed6:	6818      	ldr	r0, [r3, #0]
1a001ed8:	f7ff f8f8 	bl	1a0010cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001edc:	f7ff fc76 	bl	1a0017cc <xTaskResumeAll>
1a001ee0:	b988      	cbnz	r0, 1a001f06 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001ee2:	4b0c      	ldr	r3, [pc, #48]	; (1a001f14 <prvProcessTimerOrBlockTask+0x70>)
1a001ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ee8:	601a      	str	r2, [r3, #0]
1a001eea:	f3bf 8f4f 	dsb	sy
1a001eee:	f3bf 8f6f 	isb	sy
1a001ef2:	e008      	b.n	1a001f06 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001ef4:	f7ff fc6a 	bl	1a0017cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001ef8:	4629      	mov	r1, r5
1a001efa:	4630      	mov	r0, r6
1a001efc:	f7ff ffa2 	bl	1a001e44 <prvProcessExpiredTimer>
1a001f00:	e001      	b.n	1a001f06 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001f02:	f7ff fc63 	bl	1a0017cc <xTaskResumeAll>
}
1a001f06:	b002      	add	sp, #8
1a001f08:	bd70      	pop	{r4, r5, r6, pc}
1a001f0a:	bf00      	nop
1a001f0c:	10003b28 	.word	0x10003b28
1a001f10:	10003c48 	.word	0x10003c48
1a001f14:	e000ed04 	.word	0xe000ed04

1a001f18 <prvProcessReceivedCommands>:
{
1a001f18:	b530      	push	{r4, r5, lr}
1a001f1a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001f1c:	e006      	b.n	1a001f2c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001f1e:	9907      	ldr	r1, [sp, #28]
1a001f20:	9806      	ldr	r0, [sp, #24]
1a001f22:	9b05      	ldr	r3, [sp, #20]
1a001f24:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001f26:	9b04      	ldr	r3, [sp, #16]
1a001f28:	2b00      	cmp	r3, #0
1a001f2a:	da0b      	bge.n	1a001f44 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001f2c:	2200      	movs	r2, #0
1a001f2e:	a904      	add	r1, sp, #16
1a001f30:	4b37      	ldr	r3, [pc, #220]	; (1a002010 <prvProcessReceivedCommands+0xf8>)
1a001f32:	6818      	ldr	r0, [r3, #0]
1a001f34:	f7ff f808 	bl	1a000f48 <xQueueReceive>
1a001f38:	2800      	cmp	r0, #0
1a001f3a:	d066      	beq.n	1a00200a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001f3c:	9b04      	ldr	r3, [sp, #16]
1a001f3e:	2b00      	cmp	r3, #0
1a001f40:	daf1      	bge.n	1a001f26 <prvProcessReceivedCommands+0xe>
1a001f42:	e7ec      	b.n	1a001f1e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001f44:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001f46:	6963      	ldr	r3, [r4, #20]
1a001f48:	b113      	cbz	r3, 1a001f50 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001f4a:	1d20      	adds	r0, r4, #4
1a001f4c:	f7ff f91a 	bl	1a001184 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001f50:	a803      	add	r0, sp, #12
1a001f52:	f7ff ff61 	bl	1a001e18 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001f56:	9b04      	ldr	r3, [sp, #16]
1a001f58:	2b09      	cmp	r3, #9
1a001f5a:	d8e7      	bhi.n	1a001f2c <prvProcessReceivedCommands+0x14>
1a001f5c:	a201      	add	r2, pc, #4	; (adr r2, 1a001f64 <prvProcessReceivedCommands+0x4c>)
1a001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001f62:	bf00      	nop
1a001f64:	1a001f8d 	.word	0x1a001f8d
1a001f68:	1a001f8d 	.word	0x1a001f8d
1a001f6c:	1a001f8d 	.word	0x1a001f8d
1a001f70:	1a001f2d 	.word	0x1a001f2d
1a001f74:	1a001fd5 	.word	0x1a001fd5
1a001f78:	1a001ffb 	.word	0x1a001ffb
1a001f7c:	1a001f8d 	.word	0x1a001f8d
1a001f80:	1a001f8d 	.word	0x1a001f8d
1a001f84:	1a001f2d 	.word	0x1a001f2d
1a001f88:	1a001fd5 	.word	0x1a001fd5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001f8c:	9905      	ldr	r1, [sp, #20]
1a001f8e:	69a5      	ldr	r5, [r4, #24]
1a001f90:	460b      	mov	r3, r1
1a001f92:	4602      	mov	r2, r0
1a001f94:	4429      	add	r1, r5
1a001f96:	4620      	mov	r0, r4
1a001f98:	f7ff fe3e 	bl	1a001c18 <prvInsertTimerInActiveList>
1a001f9c:	2800      	cmp	r0, #0
1a001f9e:	d0c5      	beq.n	1a001f2c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001fa2:	4620      	mov	r0, r4
1a001fa4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001fa6:	69e3      	ldr	r3, [r4, #28]
1a001fa8:	2b01      	cmp	r3, #1
1a001faa:	d1bf      	bne.n	1a001f2c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001fac:	69a2      	ldr	r2, [r4, #24]
1a001fae:	2100      	movs	r1, #0
1a001fb0:	9100      	str	r1, [sp, #0]
1a001fb2:	460b      	mov	r3, r1
1a001fb4:	9805      	ldr	r0, [sp, #20]
1a001fb6:	4402      	add	r2, r0
1a001fb8:	4620      	mov	r0, r4
1a001fba:	f7ff febb 	bl	1a001d34 <xTimerGenericCommand>
							configASSERT( xResult );
1a001fbe:	2800      	cmp	r0, #0
1a001fc0:	d1b4      	bne.n	1a001f2c <prvProcessReceivedCommands+0x14>
1a001fc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fc6:	f383 8811 	msr	BASEPRI, r3
1a001fca:	f3bf 8f6f 	isb	sy
1a001fce:	f3bf 8f4f 	dsb	sy
1a001fd2:	e7fe      	b.n	1a001fd2 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001fd4:	9905      	ldr	r1, [sp, #20]
1a001fd6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001fd8:	b131      	cbz	r1, 1a001fe8 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001fda:	4603      	mov	r3, r0
1a001fdc:	4602      	mov	r2, r0
1a001fde:	4401      	add	r1, r0
1a001fe0:	4620      	mov	r0, r4
1a001fe2:	f7ff fe19 	bl	1a001c18 <prvInsertTimerInActiveList>
					break;
1a001fe6:	e7a1      	b.n	1a001f2c <prvProcessReceivedCommands+0x14>
1a001fe8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fec:	f383 8811 	msr	BASEPRI, r3
1a001ff0:	f3bf 8f6f 	isb	sy
1a001ff4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001ff8:	e7fe      	b.n	1a001ff8 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001ffa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001ffe:	2b00      	cmp	r3, #0
1a002000:	d194      	bne.n	1a001f2c <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002002:	4620      	mov	r0, r4
1a002004:	f7fe fcdc 	bl	1a0009c0 <vPortFree>
1a002008:	e790      	b.n	1a001f2c <prvProcessReceivedCommands+0x14>
}
1a00200a:	b009      	add	sp, #36	; 0x24
1a00200c:	bd30      	pop	{r4, r5, pc}
1a00200e:	bf00      	nop
1a002010:	10003c48 	.word	0x10003c48

1a002014 <prvTimerTask>:
{
1a002014:	b500      	push	{lr}
1a002016:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002018:	a801      	add	r0, sp, #4
1a00201a:	f7ff fded 	bl	1a001bf8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00201e:	9901      	ldr	r1, [sp, #4]
1a002020:	f7ff ff40 	bl	1a001ea4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002024:	f7ff ff78 	bl	1a001f18 <prvProcessReceivedCommands>
1a002028:	e7f6      	b.n	1a002018 <prvTimerTask+0x4>
1a00202a:	Address 0x000000001a00202a is out of bounds.


1a00202c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00202c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00202e:	2300      	movs	r3, #0
1a002030:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002032:	4b0d      	ldr	r3, [pc, #52]	; (1a002068 <prvTaskExitError+0x3c>)
1a002034:	681b      	ldr	r3, [r3, #0]
1a002036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00203a:	d008      	beq.n	1a00204e <prvTaskExitError+0x22>
1a00203c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002040:	f383 8811 	msr	BASEPRI, r3
1a002044:	f3bf 8f6f 	isb	sy
1a002048:	f3bf 8f4f 	dsb	sy
1a00204c:	e7fe      	b.n	1a00204c <prvTaskExitError+0x20>
1a00204e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002052:	f383 8811 	msr	BASEPRI, r3
1a002056:	f3bf 8f6f 	isb	sy
1a00205a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00205e:	9b01      	ldr	r3, [sp, #4]
1a002060:	2b00      	cmp	r3, #0
1a002062:	d0fc      	beq.n	1a00205e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002064:	b002      	add	sp, #8
1a002066:	4770      	bx	lr
1a002068:	10000000 	.word	0x10000000

1a00206c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a00206c:	4808      	ldr	r0, [pc, #32]	; (1a002090 <prvPortStartFirstTask+0x24>)
1a00206e:	6800      	ldr	r0, [r0, #0]
1a002070:	6800      	ldr	r0, [r0, #0]
1a002072:	f380 8808 	msr	MSP, r0
1a002076:	f04f 0000 	mov.w	r0, #0
1a00207a:	f380 8814 	msr	CONTROL, r0
1a00207e:	b662      	cpsie	i
1a002080:	b661      	cpsie	f
1a002082:	f3bf 8f4f 	dsb	sy
1a002086:	f3bf 8f6f 	isb	sy
1a00208a:	df00      	svc	0
1a00208c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a00208e:	0000      	.short	0x0000
1a002090:	e000ed08 	.word	0xe000ed08

1a002094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0020a4 <vPortEnableVFP+0x10>
1a002098:	6801      	ldr	r1, [r0, #0]
1a00209a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00209e:	6001      	str	r1, [r0, #0]
1a0020a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a0020a2:	0000      	.short	0x0000
1a0020a4:	e000ed88 	.word	0xe000ed88

1a0020a8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0020a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0020ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0020b0:	f021 0101 	bic.w	r1, r1, #1
1a0020b4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0020b8:	4b05      	ldr	r3, [pc, #20]	; (1a0020d0 <pxPortInitialiseStack+0x28>)
1a0020ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0020be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0020c2:	f06f 0302 	mvn.w	r3, #2
1a0020c6:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0020ca:	3844      	subs	r0, #68	; 0x44
1a0020cc:	4770      	bx	lr
1a0020ce:	bf00      	nop
1a0020d0:	1a00202d 	.word	0x1a00202d
1a0020d4:	ffffffff 	.word	0xffffffff
1a0020d8:	ffffffff 	.word	0xffffffff
1a0020dc:	ffffffff 	.word	0xffffffff

1a0020e0 <SVC_Handler>:
	__asm volatile (
1a0020e0:	4b07      	ldr	r3, [pc, #28]	; (1a002100 <pxCurrentTCBConst2>)
1a0020e2:	6819      	ldr	r1, [r3, #0]
1a0020e4:	6808      	ldr	r0, [r1, #0]
1a0020e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0020ea:	f380 8809 	msr	PSP, r0
1a0020ee:	f3bf 8f6f 	isb	sy
1a0020f2:	f04f 0000 	mov.w	r0, #0
1a0020f6:	f380 8811 	msr	BASEPRI, r0
1a0020fa:	4770      	bx	lr
1a0020fc:	f3af 8000 	nop.w

1a002100 <pxCurrentTCBConst2>:
1a002100:	10003a10 	.word	0x10003a10

1a002104 <vPortEnterCritical>:
1a002104:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002108:	f383 8811 	msr	BASEPRI, r3
1a00210c:	f3bf 8f6f 	isb	sy
1a002110:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002114:	4a0a      	ldr	r2, [pc, #40]	; (1a002140 <vPortEnterCritical+0x3c>)
1a002116:	6813      	ldr	r3, [r2, #0]
1a002118:	3301      	adds	r3, #1
1a00211a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00211c:	2b01      	cmp	r3, #1
1a00211e:	d000      	beq.n	1a002122 <vPortEnterCritical+0x1e>
}
1a002120:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002122:	4b08      	ldr	r3, [pc, #32]	; (1a002144 <vPortEnterCritical+0x40>)
1a002124:	681b      	ldr	r3, [r3, #0]
1a002126:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00212a:	d0f9      	beq.n	1a002120 <vPortEnterCritical+0x1c>
1a00212c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002130:	f383 8811 	msr	BASEPRI, r3
1a002134:	f3bf 8f6f 	isb	sy
1a002138:	f3bf 8f4f 	dsb	sy
1a00213c:	e7fe      	b.n	1a00213c <vPortEnterCritical+0x38>
1a00213e:	bf00      	nop
1a002140:	10000000 	.word	0x10000000
1a002144:	e000ed04 	.word	0xe000ed04

1a002148 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002148:	4b09      	ldr	r3, [pc, #36]	; (1a002170 <vPortExitCritical+0x28>)
1a00214a:	681b      	ldr	r3, [r3, #0]
1a00214c:	b943      	cbnz	r3, 1a002160 <vPortExitCritical+0x18>
1a00214e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002152:	f383 8811 	msr	BASEPRI, r3
1a002156:	f3bf 8f6f 	isb	sy
1a00215a:	f3bf 8f4f 	dsb	sy
1a00215e:	e7fe      	b.n	1a00215e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002160:	3b01      	subs	r3, #1
1a002162:	4a03      	ldr	r2, [pc, #12]	; (1a002170 <vPortExitCritical+0x28>)
1a002164:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002166:	b90b      	cbnz	r3, 1a00216c <vPortExitCritical+0x24>
	__asm volatile
1a002168:	f383 8811 	msr	BASEPRI, r3
}
1a00216c:	4770      	bx	lr
1a00216e:	bf00      	nop
1a002170:	10000000 	.word	0x10000000
1a002174:	ffffffff 	.word	0xffffffff
1a002178:	ffffffff 	.word	0xffffffff
1a00217c:	ffffffff 	.word	0xffffffff

1a002180 <PendSV_Handler>:
	__asm volatile
1a002180:	f3ef 8009 	mrs	r0, PSP
1a002184:	f3bf 8f6f 	isb	sy
1a002188:	4b15      	ldr	r3, [pc, #84]	; (1a0021e0 <pxCurrentTCBConst>)
1a00218a:	681a      	ldr	r2, [r3, #0]
1a00218c:	f01e 0f10 	tst.w	lr, #16
1a002190:	bf08      	it	eq
1a002192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00219a:	6010      	str	r0, [r2, #0]
1a00219c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0021a0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0021a4:	f380 8811 	msr	BASEPRI, r0
1a0021a8:	f3bf 8f4f 	dsb	sy
1a0021ac:	f3bf 8f6f 	isb	sy
1a0021b0:	f7ff fb8a 	bl	1a0018c8 <vTaskSwitchContext>
1a0021b4:	f04f 0000 	mov.w	r0, #0
1a0021b8:	f380 8811 	msr	BASEPRI, r0
1a0021bc:	bc09      	pop	{r0, r3}
1a0021be:	6819      	ldr	r1, [r3, #0]
1a0021c0:	6808      	ldr	r0, [r1, #0]
1a0021c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0021c6:	f01e 0f10 	tst.w	lr, #16
1a0021ca:	bf08      	it	eq
1a0021cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0021d0:	f380 8809 	msr	PSP, r0
1a0021d4:	f3bf 8f6f 	isb	sy
1a0021d8:	4770      	bx	lr
1a0021da:	bf00      	nop
1a0021dc:	f3af 8000 	nop.w

1a0021e0 <pxCurrentTCBConst>:
1a0021e0:	10003a10 	.word	0x10003a10

1a0021e4 <SysTick_Handler>:
{
1a0021e4:	b508      	push	{r3, lr}
	__asm volatile
1a0021e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ea:	f383 8811 	msr	BASEPRI, r3
1a0021ee:	f3bf 8f6f 	isb	sy
1a0021f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0021f6:	f7ff fa5d 	bl	1a0016b4 <xTaskIncrementTick>
1a0021fa:	b118      	cbz	r0, 1a002204 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0021fc:	4b03      	ldr	r3, [pc, #12]	; (1a00220c <SysTick_Handler+0x28>)
1a0021fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002202:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002204:	2300      	movs	r3, #0
1a002206:	f383 8811 	msr	BASEPRI, r3
}
1a00220a:	bd08      	pop	{r3, pc}
1a00220c:	e000ed04 	.word	0xe000ed04

1a002210 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002210:	4a08      	ldr	r2, [pc, #32]	; (1a002234 <vPortSetupTimerInterrupt+0x24>)
1a002212:	2300      	movs	r3, #0
1a002214:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002216:	4908      	ldr	r1, [pc, #32]	; (1a002238 <vPortSetupTimerInterrupt+0x28>)
1a002218:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00221a:	4b08      	ldr	r3, [pc, #32]	; (1a00223c <vPortSetupTimerInterrupt+0x2c>)
1a00221c:	681b      	ldr	r3, [r3, #0]
1a00221e:	4908      	ldr	r1, [pc, #32]	; (1a002240 <vPortSetupTimerInterrupt+0x30>)
1a002220:	fba1 1303 	umull	r1, r3, r1, r3
1a002224:	099b      	lsrs	r3, r3, #6
1a002226:	3b01      	subs	r3, #1
1a002228:	4906      	ldr	r1, [pc, #24]	; (1a002244 <vPortSetupTimerInterrupt+0x34>)
1a00222a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00222c:	2307      	movs	r3, #7
1a00222e:	6013      	str	r3, [r2, #0]
}
1a002230:	4770      	bx	lr
1a002232:	bf00      	nop
1a002234:	e000e010 	.word	0xe000e010
1a002238:	e000e018 	.word	0xe000e018
1a00223c:	10003d0c 	.word	0x10003d0c
1a002240:	10624dd3 	.word	0x10624dd3
1a002244:	e000e014 	.word	0xe000e014

1a002248 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002248:	4b3a      	ldr	r3, [pc, #232]	; (1a002334 <xPortStartScheduler+0xec>)
1a00224a:	681a      	ldr	r2, [r3, #0]
1a00224c:	4b3a      	ldr	r3, [pc, #232]	; (1a002338 <xPortStartScheduler+0xf0>)
1a00224e:	429a      	cmp	r2, r3
1a002250:	d029      	beq.n	1a0022a6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002252:	4b38      	ldr	r3, [pc, #224]	; (1a002334 <xPortStartScheduler+0xec>)
1a002254:	681a      	ldr	r2, [r3, #0]
1a002256:	4b39      	ldr	r3, [pc, #228]	; (1a00233c <xPortStartScheduler+0xf4>)
1a002258:	429a      	cmp	r2, r3
1a00225a:	d02d      	beq.n	1a0022b8 <xPortStartScheduler+0x70>
{
1a00225c:	b510      	push	{r4, lr}
1a00225e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002260:	4b37      	ldr	r3, [pc, #220]	; (1a002340 <xPortStartScheduler+0xf8>)
1a002262:	781a      	ldrb	r2, [r3, #0]
1a002264:	b2d2      	uxtb	r2, r2
1a002266:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002268:	22ff      	movs	r2, #255	; 0xff
1a00226a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00226c:	781b      	ldrb	r3, [r3, #0]
1a00226e:	b2db      	uxtb	r3, r3
1a002270:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002274:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002278:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00227c:	4a31      	ldr	r2, [pc, #196]	; (1a002344 <xPortStartScheduler+0xfc>)
1a00227e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002280:	4b31      	ldr	r3, [pc, #196]	; (1a002348 <xPortStartScheduler+0x100>)
1a002282:	2207      	movs	r2, #7
1a002284:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002286:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00228a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00228e:	d01c      	beq.n	1a0022ca <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002290:	4a2d      	ldr	r2, [pc, #180]	; (1a002348 <xPortStartScheduler+0x100>)
1a002292:	6813      	ldr	r3, [r2, #0]
1a002294:	3b01      	subs	r3, #1
1a002296:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002298:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00229c:	005b      	lsls	r3, r3, #1
1a00229e:	b2db      	uxtb	r3, r3
1a0022a0:	f88d 3003 	strb.w	r3, [sp, #3]
1a0022a4:	e7ef      	b.n	1a002286 <xPortStartScheduler+0x3e>
	__asm volatile
1a0022a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022aa:	f383 8811 	msr	BASEPRI, r3
1a0022ae:	f3bf 8f6f 	isb	sy
1a0022b2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0022b6:	e7fe      	b.n	1a0022b6 <xPortStartScheduler+0x6e>
1a0022b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022bc:	f383 8811 	msr	BASEPRI, r3
1a0022c0:	f3bf 8f6f 	isb	sy
1a0022c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0022c8:	e7fe      	b.n	1a0022c8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0022ca:	4b1f      	ldr	r3, [pc, #124]	; (1a002348 <xPortStartScheduler+0x100>)
1a0022cc:	681b      	ldr	r3, [r3, #0]
1a0022ce:	2b04      	cmp	r3, #4
1a0022d0:	d008      	beq.n	1a0022e4 <xPortStartScheduler+0x9c>
1a0022d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022d6:	f383 8811 	msr	BASEPRI, r3
1a0022da:	f3bf 8f6f 	isb	sy
1a0022de:	f3bf 8f4f 	dsb	sy
1a0022e2:	e7fe      	b.n	1a0022e2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0022e4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0022e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0022ea:	4a17      	ldr	r2, [pc, #92]	; (1a002348 <xPortStartScheduler+0x100>)
1a0022ec:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0022ee:	9b01      	ldr	r3, [sp, #4]
1a0022f0:	b2db      	uxtb	r3, r3
1a0022f2:	4a13      	ldr	r2, [pc, #76]	; (1a002340 <xPortStartScheduler+0xf8>)
1a0022f4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0022f6:	4b15      	ldr	r3, [pc, #84]	; (1a00234c <xPortStartScheduler+0x104>)
1a0022f8:	681a      	ldr	r2, [r3, #0]
1a0022fa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0022fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002300:	681a      	ldr	r2, [r3, #0]
1a002302:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002306:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002308:	f7ff ff82 	bl	1a002210 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00230c:	2400      	movs	r4, #0
1a00230e:	4b10      	ldr	r3, [pc, #64]	; (1a002350 <xPortStartScheduler+0x108>)
1a002310:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002312:	f7ff febf 	bl	1a002094 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002316:	4a0f      	ldr	r2, [pc, #60]	; (1a002354 <xPortStartScheduler+0x10c>)
1a002318:	6813      	ldr	r3, [r2, #0]
1a00231a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00231e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002320:	f7ff fea4 	bl	1a00206c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002324:	f7ff fad0 	bl	1a0018c8 <vTaskSwitchContext>
	prvTaskExitError();
1a002328:	f7ff fe80 	bl	1a00202c <prvTaskExitError>
}
1a00232c:	4620      	mov	r0, r4
1a00232e:	b002      	add	sp, #8
1a002330:	bd10      	pop	{r4, pc}
1a002332:	bf00      	nop
1a002334:	e000ed00 	.word	0xe000ed00
1a002338:	410fc271 	.word	0x410fc271
1a00233c:	410fc270 	.word	0x410fc270
1a002340:	e000e400 	.word	0xe000e400
1a002344:	10003c50 	.word	0x10003c50
1a002348:	10003c54 	.word	0x10003c54
1a00234c:	e000ed20 	.word	0xe000ed20
1a002350:	10000000 	.word	0x10000000
1a002354:	e000ef34 	.word	0xe000ef34

1a002358 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002358:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00235c:	2b0f      	cmp	r3, #15
1a00235e:	d90f      	bls.n	1a002380 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002360:	4a10      	ldr	r2, [pc, #64]	; (1a0023a4 <vPortValidateInterruptPriority+0x4c>)
1a002362:	5c9b      	ldrb	r3, [r3, r2]
1a002364:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002366:	4a10      	ldr	r2, [pc, #64]	; (1a0023a8 <vPortValidateInterruptPriority+0x50>)
1a002368:	7812      	ldrb	r2, [r2, #0]
1a00236a:	429a      	cmp	r2, r3
1a00236c:	d908      	bls.n	1a002380 <vPortValidateInterruptPriority+0x28>
1a00236e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002372:	f383 8811 	msr	BASEPRI, r3
1a002376:	f3bf 8f6f 	isb	sy
1a00237a:	f3bf 8f4f 	dsb	sy
1a00237e:	e7fe      	b.n	1a00237e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002380:	4b0a      	ldr	r3, [pc, #40]	; (1a0023ac <vPortValidateInterruptPriority+0x54>)
1a002382:	681b      	ldr	r3, [r3, #0]
1a002384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002388:	4a09      	ldr	r2, [pc, #36]	; (1a0023b0 <vPortValidateInterruptPriority+0x58>)
1a00238a:	6812      	ldr	r2, [r2, #0]
1a00238c:	4293      	cmp	r3, r2
1a00238e:	d908      	bls.n	1a0023a2 <vPortValidateInterruptPriority+0x4a>
1a002390:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002394:	f383 8811 	msr	BASEPRI, r3
1a002398:	f3bf 8f6f 	isb	sy
1a00239c:	f3bf 8f4f 	dsb	sy
1a0023a0:	e7fe      	b.n	1a0023a0 <vPortValidateInterruptPriority+0x48>
	}
1a0023a2:	4770      	bx	lr
1a0023a4:	e000e3f0 	.word	0xe000e3f0
1a0023a8:	10003c50 	.word	0x10003c50
1a0023ac:	e000ed0c 	.word	0xe000ed0c
1a0023b0:	10003c54 	.word	0x10003c54

1a0023b4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0023b4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0023b6:	4b05      	ldr	r3, [pc, #20]	; (1a0023cc <DAC_IRQHandler+0x18>)
1a0023b8:	2201      	movs	r2, #1
1a0023ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0023be:	4b04      	ldr	r3, [pc, #16]	; (1a0023d0 <DAC_IRQHandler+0x1c>)
1a0023c0:	681b      	ldr	r3, [r3, #0]
1a0023c2:	b113      	cbz	r3, 1a0023ca <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0023c4:	4b02      	ldr	r3, [pc, #8]	; (1a0023d0 <DAC_IRQHandler+0x1c>)
1a0023c6:	681b      	ldr	r3, [r3, #0]
1a0023c8:	4798      	blx	r3
   }
}
1a0023ca:	bd08      	pop	{r3, pc}
1a0023cc:	e000e100 	.word	0xe000e100
1a0023d0:	10003c58 	.word	0x10003c58

1a0023d4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0023d4:	2200      	movs	r2, #0
1a0023d6:	2a05      	cmp	r2, #5
1a0023d8:	d819      	bhi.n	1a00240e <Board_LED_Init+0x3a>
{
1a0023da:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0023dc:	490c      	ldr	r1, [pc, #48]	; (1a002410 <Board_LED_Init+0x3c>)
1a0023de:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0023e2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0023e6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0023e8:	4b0a      	ldr	r3, [pc, #40]	; (1a002414 <Board_LED_Init+0x40>)
1a0023ea:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0023ee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0023f2:	2001      	movs	r0, #1
1a0023f4:	40a0      	lsls	r0, r4
1a0023f6:	4301      	orrs	r1, r0
1a0023f8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0023fc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002400:	2100      	movs	r1, #0
1a002402:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002404:	3201      	adds	r2, #1
1a002406:	2a05      	cmp	r2, #5
1a002408:	d9e8      	bls.n	1a0023dc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00240a:	bc70      	pop	{r4, r5, r6}
1a00240c:	4770      	bx	lr
1a00240e:	4770      	bx	lr
1a002410:	1a00afd0 	.word	0x1a00afd0
1a002414:	400f4000 	.word	0x400f4000

1a002418 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002418:	2300      	movs	r3, #0
1a00241a:	2b03      	cmp	r3, #3
1a00241c:	d816      	bhi.n	1a00244c <Board_TEC_Init+0x34>
{
1a00241e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002420:	490b      	ldr	r1, [pc, #44]	; (1a002450 <Board_TEC_Init+0x38>)
1a002422:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002426:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00242a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00242c:	4c09      	ldr	r4, [pc, #36]	; (1a002454 <Board_TEC_Init+0x3c>)
1a00242e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002432:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002436:	2001      	movs	r0, #1
1a002438:	40a8      	lsls	r0, r5
1a00243a:	ea21 0100 	bic.w	r1, r1, r0
1a00243e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002442:	3301      	adds	r3, #1
1a002444:	2b03      	cmp	r3, #3
1a002446:	d9eb      	bls.n	1a002420 <Board_TEC_Init+0x8>
   }
}
1a002448:	bc30      	pop	{r4, r5}
1a00244a:	4770      	bx	lr
1a00244c:	4770      	bx	lr
1a00244e:	bf00      	nop
1a002450:	1a00afc8 	.word	0x1a00afc8
1a002454:	400f4000 	.word	0x400f4000

1a002458 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002458:	2300      	movs	r3, #0
1a00245a:	2b08      	cmp	r3, #8
1a00245c:	d816      	bhi.n	1a00248c <Board_GPIO_Init+0x34>
{
1a00245e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002460:	490b      	ldr	r1, [pc, #44]	; (1a002490 <Board_GPIO_Init+0x38>)
1a002462:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002466:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00246a:	784d      	ldrb	r5, [r1, #1]
1a00246c:	4c09      	ldr	r4, [pc, #36]	; (1a002494 <Board_GPIO_Init+0x3c>)
1a00246e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002472:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002476:	2001      	movs	r0, #1
1a002478:	40a8      	lsls	r0, r5
1a00247a:	ea21 0100 	bic.w	r1, r1, r0
1a00247e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002482:	3301      	adds	r3, #1
1a002484:	2b08      	cmp	r3, #8
1a002486:	d9eb      	bls.n	1a002460 <Board_GPIO_Init+0x8>
   }
}
1a002488:	bc30      	pop	{r4, r5}
1a00248a:	4770      	bx	lr
1a00248c:	4770      	bx	lr
1a00248e:	bf00      	nop
1a002490:	1a00afdc 	.word	0x1a00afdc
1a002494:	400f4000 	.word	0x400f4000

1a002498 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002498:	b510      	push	{r4, lr}
1a00249a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00249c:	4c08      	ldr	r4, [pc, #32]	; (1a0024c0 <Board_ADC_Init+0x28>)
1a00249e:	4669      	mov	r1, sp
1a0024a0:	4620      	mov	r0, r4
1a0024a2:	f000 fa17 	bl	1a0028d4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0024a6:	4a07      	ldr	r2, [pc, #28]	; (1a0024c4 <Board_ADC_Init+0x2c>)
1a0024a8:	4669      	mov	r1, sp
1a0024aa:	4620      	mov	r0, r4
1a0024ac:	f000 fa32 	bl	1a002914 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0024b0:	2200      	movs	r2, #0
1a0024b2:	4669      	mov	r1, sp
1a0024b4:	4620      	mov	r0, r4
1a0024b6:	f000 fa46 	bl	1a002946 <Chip_ADC_SetResolution>
}
1a0024ba:	b002      	add	sp, #8
1a0024bc:	bd10      	pop	{r4, pc}
1a0024be:	bf00      	nop
1a0024c0:	400e3000 	.word	0x400e3000
1a0024c4:	00061a80 	.word	0x00061a80

1a0024c8 <Board_SPI_Init>:
{
1a0024c8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0024ca:	4c0b      	ldr	r4, [pc, #44]	; (1a0024f8 <Board_SPI_Init+0x30>)
1a0024cc:	4620      	mov	r0, r4
1a0024ce:	f000 fdfd 	bl	1a0030cc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0024d2:	6863      	ldr	r3, [r4, #4]
1a0024d4:	f023 0304 	bic.w	r3, r3, #4
1a0024d8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0024da:	6823      	ldr	r3, [r4, #0]
1a0024dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0024e0:	f043 0307 	orr.w	r3, r3, #7
1a0024e4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0024e6:	4905      	ldr	r1, [pc, #20]	; (1a0024fc <Board_SPI_Init+0x34>)
1a0024e8:	4620      	mov	r0, r4
1a0024ea:	f000 fdd0 	bl	1a00308e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0024ee:	6863      	ldr	r3, [r4, #4]
1a0024f0:	f043 0302 	orr.w	r3, r3, #2
1a0024f4:	6063      	str	r3, [r4, #4]
}
1a0024f6:	bd10      	pop	{r4, pc}
1a0024f8:	400c5000 	.word	0x400c5000
1a0024fc:	000186a0 	.word	0x000186a0

1a002500 <Board_I2C_Init>:
{
1a002500:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002502:	2000      	movs	r0, #0
1a002504:	f000 f8c6 	bl	1a002694 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002508:	4b04      	ldr	r3, [pc, #16]	; (1a00251c <Board_I2C_Init+0x1c>)
1a00250a:	f640 0208 	movw	r2, #2056	; 0x808
1a00250e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002512:	4903      	ldr	r1, [pc, #12]	; (1a002520 <Board_I2C_Init+0x20>)
1a002514:	2000      	movs	r0, #0
1a002516:	f000 f8cf 	bl	1a0026b8 <Chip_I2C_SetClockRate>
}
1a00251a:	bd08      	pop	{r3, pc}
1a00251c:	40086000 	.word	0x40086000
1a002520:	000f4240 	.word	0x000f4240

1a002524 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002524:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002526:	4c07      	ldr	r4, [pc, #28]	; (1a002544 <Board_Debug_Init+0x20>)
1a002528:	4620      	mov	r0, r4
1a00252a:	f000 f8f7 	bl	1a00271c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00252e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002532:	4620      	mov	r0, r4
1a002534:	f000 f93c 	bl	1a0027b0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002538:	2303      	movs	r3, #3
1a00253a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00253c:	2301      	movs	r3, #1
1a00253e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002540:	bd10      	pop	{r4, pc}
1a002542:	bf00      	nop
1a002544:	400c1000 	.word	0x400c1000

1a002548 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002548:	4b03      	ldr	r3, [pc, #12]	; (1a002558 <Board_UARTPutChar+0x10>)
1a00254a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00254c:	f013 0f20 	tst.w	r3, #32
1a002550:	d0fa      	beq.n	1a002548 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002552:	4b01      	ldr	r3, [pc, #4]	; (1a002558 <Board_UARTPutChar+0x10>)
1a002554:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002556:	4770      	bx	lr
1a002558:	400c1000 	.word	0x400c1000

1a00255c <Board_UARTGetChar>:
	return pUART->LSR;
1a00255c:	4b05      	ldr	r3, [pc, #20]	; (1a002574 <Board_UARTGetChar+0x18>)
1a00255e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002560:	f013 0f01 	tst.w	r3, #1
1a002564:	d003      	beq.n	1a00256e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002566:	4b03      	ldr	r3, [pc, #12]	; (1a002574 <Board_UARTGetChar+0x18>)
1a002568:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00256a:	b2c0      	uxtb	r0, r0
1a00256c:	4770      	bx	lr
   }
   return EOF;
1a00256e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002572:	4770      	bx	lr
1a002574:	400c1000 	.word	0x400c1000

1a002578 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002578:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00257a:	f7ff ffd3 	bl	1a002524 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00257e:	4809      	ldr	r0, [pc, #36]	; (1a0025a4 <Board_Init+0x2c>)
1a002580:	f000 fd64 	bl	1a00304c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002584:	f7ff ff68 	bl	1a002458 <Board_GPIO_Init>
   Board_ADC_Init();
1a002588:	f7ff ff86 	bl	1a002498 <Board_ADC_Init>
   Board_SPI_Init();
1a00258c:	f7ff ff9c 	bl	1a0024c8 <Board_SPI_Init>
   Board_I2C_Init();
1a002590:	f7ff ffb6 	bl	1a002500 <Board_I2C_Init>

   Board_LED_Init();
1a002594:	f7ff ff1e 	bl	1a0023d4 <Board_LED_Init>
   Board_TEC_Init();
1a002598:	f7ff ff3e 	bl	1a002418 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00259c:	f000 f9da 	bl	1a002954 <SystemCoreClockUpdate>
}
1a0025a0:	bd08      	pop	{r3, pc}
1a0025a2:	bf00      	nop
1a0025a4:	400f4000 	.word	0x400f4000

1a0025a8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0025a8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0025aa:	b2c0      	uxtb	r0, r0
1a0025ac:	f7ff ffcc 	bl	1a002548 <Board_UARTPutChar>
}
1a0025b0:	bd08      	pop	{r3, pc}

1a0025b2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0025b2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0025b4:	f7ff ffd2 	bl	1a00255c <Board_UARTGetChar>
}
1a0025b8:	bd08      	pop	{r3, pc}

1a0025ba <__stdio_init>:

void __stdio_init()
{
1a0025ba:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0025bc:	f7ff ffb2 	bl	1a002524 <Board_Debug_Init>
1a0025c0:	bd08      	pop	{r3, pc}
1a0025c2:	Address 0x000000001a0025c2 is out of bounds.


1a0025c4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0025c4:	2300      	movs	r3, #0
1a0025c6:	2b1c      	cmp	r3, #28
1a0025c8:	d812      	bhi.n	1a0025f0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0025ca:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0025cc:	4a09      	ldr	r2, [pc, #36]	; (1a0025f4 <Board_SetupMuxing+0x30>)
1a0025ce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0025d2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0025d6:	784a      	ldrb	r2, [r1, #1]
1a0025d8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0025da:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0025de:	4906      	ldr	r1, [pc, #24]	; (1a0025f8 <Board_SetupMuxing+0x34>)
1a0025e0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0025e4:	3301      	adds	r3, #1
1a0025e6:	2b1c      	cmp	r3, #28
1a0025e8:	d9f0      	bls.n	1a0025cc <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0025ea:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025ee:	4770      	bx	lr
1a0025f0:	4770      	bx	lr
1a0025f2:	bf00      	nop
1a0025f4:	1a00aff8 	.word	0x1a00aff8
1a0025f8:	40086000 	.word	0x40086000

1a0025fc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0025fc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0025fe:	4a17      	ldr	r2, [pc, #92]	; (1a00265c <Board_SetupClocking+0x60>)
1a002600:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002608:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00260c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002610:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002618:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00261c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002620:	2201      	movs	r2, #1
1a002622:	490f      	ldr	r1, [pc, #60]	; (1a002660 <Board_SetupClocking+0x64>)
1a002624:	2006      	movs	r0, #6
1a002626:	f000 fc65 	bl	1a002ef4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00262a:	2400      	movs	r4, #0
1a00262c:	b14c      	cbz	r4, 1a002642 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00262e:	4b0b      	ldr	r3, [pc, #44]	; (1a00265c <Board_SetupClocking+0x60>)
1a002630:	685a      	ldr	r2, [r3, #4]
1a002632:	f022 020c 	bic.w	r2, r2, #12
1a002636:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002638:	685a      	ldr	r2, [r3, #4]
1a00263a:	f042 0203 	orr.w	r2, r2, #3
1a00263e:	605a      	str	r2, [r3, #4]
}
1a002640:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002642:	4808      	ldr	r0, [pc, #32]	; (1a002664 <Board_SetupClocking+0x68>)
1a002644:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002648:	2301      	movs	r3, #1
1a00264a:	788a      	ldrb	r2, [r1, #2]
1a00264c:	7849      	ldrb	r1, [r1, #1]
1a00264e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002652:	f000 fbab 	bl	1a002dac <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002656:	3401      	adds	r4, #1
1a002658:	e7e8      	b.n	1a00262c <Board_SetupClocking+0x30>
1a00265a:	bf00      	nop
1a00265c:	40043000 	.word	0x40043000
1a002660:	0c28cb00 	.word	0x0c28cb00
1a002664:	1a00aff4 	.word	0x1a00aff4

1a002668 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002668:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00266a:	f7ff ffab 	bl	1a0025c4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00266e:	f7ff ffc5 	bl	1a0025fc <Board_SetupClocking>
}
1a002672:	bd08      	pop	{r3, pc}

1a002674 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002674:	2901      	cmp	r1, #1
1a002676:	d109      	bne.n	1a00268c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002678:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00267c:	0082      	lsls	r2, r0, #2
1a00267e:	4b04      	ldr	r3, [pc, #16]	; (1a002690 <Chip_I2C_EventHandler+0x1c>)
1a002680:	4413      	add	r3, r2
1a002682:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002684:	7d13      	ldrb	r3, [r2, #20]
1a002686:	b2db      	uxtb	r3, r3
1a002688:	2b04      	cmp	r3, #4
1a00268a:	d0fb      	beq.n	1a002684 <Chip_I2C_EventHandler+0x10>
}
1a00268c:	4770      	bx	lr
1a00268e:	bf00      	nop
1a002690:	10000004 	.word	0x10000004

1a002694 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002694:	b570      	push	{r4, r5, r6, lr}
1a002696:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002698:	4e06      	ldr	r6, [pc, #24]	; (1a0026b4 <Chip_I2C_Init+0x20>)
1a00269a:	00c4      	lsls	r4, r0, #3
1a00269c:	1a22      	subs	r2, r4, r0
1a00269e:	0093      	lsls	r3, r2, #2
1a0026a0:	4433      	add	r3, r6
1a0026a2:	8898      	ldrh	r0, [r3, #4]
1a0026a4:	f000 fbe6 	bl	1a002e74 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0026a8:	1b64      	subs	r4, r4, r5
1a0026aa:	00a3      	lsls	r3, r4, #2
1a0026ac:	58f3      	ldr	r3, [r6, r3]
1a0026ae:	226c      	movs	r2, #108	; 0x6c
1a0026b0:	619a      	str	r2, [r3, #24]
}
1a0026b2:	bd70      	pop	{r4, r5, r6, pc}
1a0026b4:	10000004 	.word	0x10000004

1a0026b8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0026b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0026bc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0026be:	4e0b      	ldr	r6, [pc, #44]	; (1a0026ec <Chip_I2C_SetClockRate+0x34>)
1a0026c0:	00c5      	lsls	r5, r0, #3
1a0026c2:	1a2b      	subs	r3, r5, r0
1a0026c4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0026c8:	eb06 0308 	add.w	r3, r6, r8
1a0026cc:	8898      	ldrh	r0, [r3, #4]
1a0026ce:	f000 fbeb 	bl	1a002ea8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0026d2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0026d6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0026da:	0842      	lsrs	r2, r0, #1
1a0026dc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0026de:	f856 3008 	ldr.w	r3, [r6, r8]
1a0026e2:	691a      	ldr	r2, [r3, #16]
1a0026e4:	1a80      	subs	r0, r0, r2
1a0026e6:	6158      	str	r0, [r3, #20]
}
1a0026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0026ec:	10000004 	.word	0x10000004

1a0026f0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0026f0:	4b09      	ldr	r3, [pc, #36]	; (1a002718 <Chip_UART_GetIndex+0x28>)
1a0026f2:	4298      	cmp	r0, r3
1a0026f4:	d009      	beq.n	1a00270a <Chip_UART_GetIndex+0x1a>
1a0026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0026fa:	4298      	cmp	r0, r3
1a0026fc:	d007      	beq.n	1a00270e <Chip_UART_GetIndex+0x1e>
1a0026fe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002702:	4298      	cmp	r0, r3
1a002704:	d005      	beq.n	1a002712 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002706:	2000      	movs	r0, #0
1a002708:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00270a:	2002      	movs	r0, #2
1a00270c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00270e:	2003      	movs	r0, #3
1a002710:	4770      	bx	lr
			return 1;
1a002712:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002714:	4770      	bx	lr
1a002716:	bf00      	nop
1a002718:	400c1000 	.word	0x400c1000

1a00271c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00271c:	b530      	push	{r4, r5, lr}
1a00271e:	b083      	sub	sp, #12
1a002720:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002722:	f7ff ffe5 	bl	1a0026f0 <Chip_UART_GetIndex>
1a002726:	2301      	movs	r3, #1
1a002728:	461a      	mov	r2, r3
1a00272a:	4619      	mov	r1, r3
1a00272c:	4d0e      	ldr	r5, [pc, #56]	; (1a002768 <Chip_UART_Init+0x4c>)
1a00272e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002732:	f000 fb81 	bl	1a002e38 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002736:	2307      	movs	r3, #7
1a002738:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00273a:	2300      	movs	r3, #0
1a00273c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00273e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002740:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002742:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002744:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002746:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002748:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00274a:	4b08      	ldr	r3, [pc, #32]	; (1a00276c <Chip_UART_Init+0x50>)
1a00274c:	429c      	cmp	r4, r3
1a00274e:	d006      	beq.n	1a00275e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002750:	2303      	movs	r3, #3
1a002752:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002754:	2310      	movs	r3, #16
1a002756:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002758:	9b01      	ldr	r3, [sp, #4]
}
1a00275a:	b003      	add	sp, #12
1a00275c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00275e:	2300      	movs	r3, #0
1a002760:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002762:	69a3      	ldr	r3, [r4, #24]
1a002764:	9301      	str	r3, [sp, #4]
1a002766:	e7f3      	b.n	1a002750 <Chip_UART_Init+0x34>
1a002768:	1a00b074 	.word	0x1a00b074
1a00276c:	40082000 	.word	0x40082000

1a002770 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002770:	b538      	push	{r3, r4, r5, lr}
1a002772:	4605      	mov	r5, r0
1a002774:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002776:	f7ff ffbb 	bl	1a0026f0 <Chip_UART_GetIndex>
1a00277a:	4b0c      	ldr	r3, [pc, #48]	; (1a0027ac <Chip_UART_SetBaud+0x3c>)
1a00277c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002780:	f000 fb92 	bl	1a002ea8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002784:	0123      	lsls	r3, r4, #4
1a002786:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00278a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00278c:	68ea      	ldr	r2, [r5, #12]
1a00278e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002792:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002794:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002796:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00279a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00279c:	68ea      	ldr	r2, [r5, #12]
1a00279e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0027a2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0027a4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0027a8:	0900      	lsrs	r0, r0, #4
1a0027aa:	bd38      	pop	{r3, r4, r5, pc}
1a0027ac:	1a00b06c 	.word	0x1a00b06c

1a0027b0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0027b4:	b083      	sub	sp, #12
1a0027b6:	9001      	str	r0, [sp, #4]
1a0027b8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0027ba:	f7ff ff99 	bl	1a0026f0 <Chip_UART_GetIndex>
1a0027be:	4b32      	ldr	r3, [pc, #200]	; (1a002888 <Chip_UART_SetBaudFDR+0xd8>)
1a0027c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0027c4:	f000 fb70 	bl	1a002ea8 <Chip_Clock_GetRate>
1a0027c8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0027ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0027ce:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0027d0:	f04f 0b00 	mov.w	fp, #0
1a0027d4:	46a2      	mov	sl, r4
1a0027d6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0027d8:	e02a      	b.n	1a002830 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0027da:	4242      	negs	r2, r0
				div ++;
1a0027dc:	1c4b      	adds	r3, r1, #1
1a0027de:	e017      	b.n	1a002810 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0027e0:	b30a      	cbz	r2, 1a002826 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0027e2:	4617      	mov	r7, r2
			sd = d;
1a0027e4:	46ab      	mov	fp, r5
			sm = m;
1a0027e6:	46a2      	mov	sl, r4
			sdiv = div;
1a0027e8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0027ea:	3501      	adds	r5, #1
1a0027ec:	42ac      	cmp	r4, r5
1a0027ee:	d91e      	bls.n	1a00282e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0027f0:	0933      	lsrs	r3, r6, #4
1a0027f2:	0730      	lsls	r0, r6, #28
1a0027f4:	fba4 0100 	umull	r0, r1, r4, r0
1a0027f8:	fb04 1103 	mla	r1, r4, r3, r1
1a0027fc:	1962      	adds	r2, r4, r5
1a0027fe:	fb08 f202 	mul.w	r2, r8, r2
1a002802:	2300      	movs	r3, #0
1a002804:	f001 fc52 	bl	1a0040ac <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002808:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00280a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00280c:	2800      	cmp	r0, #0
1a00280e:	dbe4      	blt.n	1a0027da <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002810:	4297      	cmp	r7, r2
1a002812:	d3ea      	bcc.n	1a0027ea <Chip_UART_SetBaudFDR+0x3a>
1a002814:	2b00      	cmp	r3, #0
1a002816:	d0e8      	beq.n	1a0027ea <Chip_UART_SetBaudFDR+0x3a>
1a002818:	0c19      	lsrs	r1, r3, #16
1a00281a:	d1e6      	bne.n	1a0027ea <Chip_UART_SetBaudFDR+0x3a>
1a00281c:	2b02      	cmp	r3, #2
1a00281e:	d8df      	bhi.n	1a0027e0 <Chip_UART_SetBaudFDR+0x30>
1a002820:	2d00      	cmp	r5, #0
1a002822:	d0dd      	beq.n	1a0027e0 <Chip_UART_SetBaudFDR+0x30>
1a002824:	e7e1      	b.n	1a0027ea <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002826:	4617      	mov	r7, r2
			sd = d;
1a002828:	46ab      	mov	fp, r5
			sm = m;
1a00282a:	46a2      	mov	sl, r4
			sdiv = div;
1a00282c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00282e:	3401      	adds	r4, #1
1a002830:	b11f      	cbz	r7, 1a00283a <Chip_UART_SetBaudFDR+0x8a>
1a002832:	2c0f      	cmp	r4, #15
1a002834:	d801      	bhi.n	1a00283a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002836:	2500      	movs	r5, #0
1a002838:	e7d8      	b.n	1a0027ec <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00283a:	f1b9 0f00 	cmp.w	r9, #0
1a00283e:	d01e      	beq.n	1a00287e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002840:	9a01      	ldr	r2, [sp, #4]
1a002842:	4611      	mov	r1, r2
1a002844:	68d3      	ldr	r3, [r2, #12]
1a002846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00284a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00284c:	fa5f f389 	uxtb.w	r3, r9
1a002850:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002852:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002856:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002858:	68d3      	ldr	r3, [r2, #12]
1a00285a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00285e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002860:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002864:	b2db      	uxtb	r3, r3
1a002866:	f00b 020f 	and.w	r2, fp, #15
1a00286a:	4313      	orrs	r3, r2
1a00286c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00286e:	0933      	lsrs	r3, r6, #4
1a002870:	fb0a f303 	mul.w	r3, sl, r3
1a002874:	44da      	add	sl, fp
1a002876:	fb09 f90a 	mul.w	r9, r9, sl
1a00287a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00287e:	4648      	mov	r0, r9
1a002880:	b003      	add	sp, #12
1a002882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002886:	bf00      	nop
1a002888:	1a00b06c 	.word	0x1a00b06c

1a00288c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00288c:	4b03      	ldr	r3, [pc, #12]	; (1a00289c <Chip_ADC_GetClockIndex+0x10>)
1a00288e:	4298      	cmp	r0, r3
1a002890:	d001      	beq.n	1a002896 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002892:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002894:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002896:	2004      	movs	r0, #4
1a002898:	4770      	bx	lr
1a00289a:	bf00      	nop
1a00289c:	400e4000 	.word	0x400e4000

1a0028a0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0028a0:	b570      	push	{r4, r5, r6, lr}
1a0028a2:	460d      	mov	r5, r1
1a0028a4:	4614      	mov	r4, r2
1a0028a6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0028a8:	f7ff fff0 	bl	1a00288c <Chip_ADC_GetClockIndex>
1a0028ac:	f000 fafc 	bl	1a002ea8 <Chip_Clock_GetRate>
	if (burstMode) {
1a0028b0:	b155      	cbz	r5, 1a0028c8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0028b2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0028b6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0028ba:	0064      	lsls	r4, r4, #1
1a0028bc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0028c0:	b2c0      	uxtb	r0, r0
1a0028c2:	3801      	subs	r0, #1
	return div;
}
1a0028c4:	b2c0      	uxtb	r0, r0
1a0028c6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0028c8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0028cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0028d0:	e7f1      	b.n	1a0028b6 <getClkDiv+0x16>
1a0028d2:	Address 0x000000001a0028d2 is out of bounds.


1a0028d4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0028d4:	b538      	push	{r3, r4, r5, lr}
1a0028d6:	4605      	mov	r5, r0
1a0028d8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0028da:	f7ff ffd7 	bl	1a00288c <Chip_ADC_GetClockIndex>
1a0028de:	2301      	movs	r3, #1
1a0028e0:	461a      	mov	r2, r3
1a0028e2:	4619      	mov	r1, r3
1a0028e4:	f000 faa8 	bl	1a002e38 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0028e8:	2100      	movs	r1, #0
1a0028ea:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0028ec:	4a08      	ldr	r2, [pc, #32]	; (1a002910 <Chip_ADC_Init+0x3c>)
1a0028ee:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0028f0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0028f2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0028f4:	230b      	movs	r3, #11
1a0028f6:	4628      	mov	r0, r5
1a0028f8:	f7ff ffd2 	bl	1a0028a0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0028fc:	0200      	lsls	r0, r0, #8
1a0028fe:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002902:	7920      	ldrb	r0, [r4, #4]
1a002904:	0440      	lsls	r0, r0, #17
1a002906:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00290a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00290c:	6028      	str	r0, [r5, #0]
}
1a00290e:	bd38      	pop	{r3, r4, r5, pc}
1a002910:	00061a80 	.word	0x00061a80

1a002914 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002914:	b570      	push	{r4, r5, r6, lr}
1a002916:	4605      	mov	r5, r0
1a002918:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00291a:	6804      	ldr	r4, [r0, #0]
1a00291c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002920:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002924:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002926:	790b      	ldrb	r3, [r1, #4]
1a002928:	f1c3 030b 	rsb	r3, r3, #11
1a00292c:	b2db      	uxtb	r3, r3
1a00292e:	7949      	ldrb	r1, [r1, #5]
1a002930:	f7ff ffb6 	bl	1a0028a0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002934:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002938:	7933      	ldrb	r3, [r6, #4]
1a00293a:	045b      	lsls	r3, r3, #17
1a00293c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002940:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002942:	602b      	str	r3, [r5, #0]
}
1a002944:	bd70      	pop	{r4, r5, r6, pc}

1a002946 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002946:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002948:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00294a:	680a      	ldr	r2, [r1, #0]
1a00294c:	f7ff ffe2 	bl	1a002914 <Chip_ADC_SetSampleRate>
}
1a002950:	bd08      	pop	{r3, pc}
1a002952:	Address 0x000000001a002952 is out of bounds.


1a002954 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002954:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002956:	2069      	movs	r0, #105	; 0x69
1a002958:	f000 faa6 	bl	1a002ea8 <Chip_Clock_GetRate>
1a00295c:	4b01      	ldr	r3, [pc, #4]	; (1a002964 <SystemCoreClockUpdate+0x10>)
1a00295e:	6018      	str	r0, [r3, #0]
}
1a002960:	bd08      	pop	{r3, pc}
1a002962:	bf00      	nop
1a002964:	10003d0c 	.word	0x10003d0c

1a002968 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002968:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00296a:	680b      	ldr	r3, [r1, #0]
1a00296c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002970:	d002      	beq.n	1a002978 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002976:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002978:	4607      	mov	r7, r0
1a00297a:	2501      	movs	r5, #1
1a00297c:	e03a      	b.n	1a0029f4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00297e:	694b      	ldr	r3, [r1, #20]
1a002980:	fb03 f302 	mul.w	r3, r3, r2
1a002984:	fbb3 f3f5 	udiv	r3, r3, r5
1a002988:	e01c      	b.n	1a0029c4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00298a:	461c      	mov	r4, r3
	if (val < 0)
1a00298c:	ebb0 0c04 	subs.w	ip, r0, r4
1a002990:	d427      	bmi.n	1a0029e2 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002992:	4567      	cmp	r7, ip
1a002994:	d906      	bls.n	1a0029a4 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002996:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002998:	1c77      	adds	r7, r6, #1
1a00299a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00299c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00299e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0029a0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0029a2:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0029a4:	3201      	adds	r2, #1
1a0029a6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0029aa:	dc1d      	bgt.n	1a0029e8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0029ac:	680c      	ldr	r4, [r1, #0]
1a0029ae:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0029b2:	d0e4      	beq.n	1a00297e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0029b4:	1c73      	adds	r3, r6, #1
1a0029b6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0029ba:	694b      	ldr	r3, [r1, #20]
1a0029bc:	fb03 f30c 	mul.w	r3, r3, ip
1a0029c0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0029c4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002a00 <pll_calc_divs+0x98>
1a0029c8:	4563      	cmp	r3, ip
1a0029ca:	d9eb      	bls.n	1a0029a4 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0029cc:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002a04 <pll_calc_divs+0x9c>
1a0029d0:	4563      	cmp	r3, ip
1a0029d2:	d809      	bhi.n	1a0029e8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0029d4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0029d8:	d1d7      	bne.n	1a00298a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0029da:	1c74      	adds	r4, r6, #1
1a0029dc:	fa23 f404 	lsr.w	r4, r3, r4
1a0029e0:	e7d4      	b.n	1a00298c <pll_calc_divs+0x24>
		return -val;
1a0029e2:	f1cc 0c00 	rsb	ip, ip, #0
1a0029e6:	e7d4      	b.n	1a002992 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0029e8:	3601      	adds	r6, #1
1a0029ea:	2e03      	cmp	r6, #3
1a0029ec:	dc01      	bgt.n	1a0029f2 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0029ee:	2201      	movs	r2, #1
1a0029f0:	e7d9      	b.n	1a0029a6 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0029f2:	3501      	adds	r5, #1
1a0029f4:	2d04      	cmp	r5, #4
1a0029f6:	dc01      	bgt.n	1a0029fc <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0029f8:	2600      	movs	r6, #0
1a0029fa:	e7f6      	b.n	1a0029ea <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0029fc:	bcf0      	pop	{r4, r5, r6, r7}
1a0029fe:	4770      	bx	lr
1a002a00:	094c5eff 	.word	0x094c5eff
1a002a04:	1312d000 	.word	0x1312d000

1a002a08 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002a0a:	b099      	sub	sp, #100	; 0x64
1a002a0c:	4605      	mov	r5, r0
1a002a0e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002a10:	225c      	movs	r2, #92	; 0x5c
1a002a12:	2100      	movs	r1, #0
1a002a14:	a801      	add	r0, sp, #4
1a002a16:	f002 fb59 	bl	1a0050cc <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002a1a:	2380      	movs	r3, #128	; 0x80
1a002a1c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002a1e:	6963      	ldr	r3, [r4, #20]
1a002a20:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002a22:	7923      	ldrb	r3, [r4, #4]
1a002a24:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002a28:	4669      	mov	r1, sp
1a002a2a:	4628      	mov	r0, r5
1a002a2c:	f7ff ff9c 	bl	1a002968 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002a30:	9b06      	ldr	r3, [sp, #24]
1a002a32:	42ab      	cmp	r3, r5
1a002a34:	d027      	beq.n	1a002a86 <pll_get_frac+0x7e>
	if (val < 0)
1a002a36:	1aeb      	subs	r3, r5, r3
1a002a38:	d42e      	bmi.n	1a002a98 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002a3a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002a42:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002a44:	6963      	ldr	r3, [r4, #20]
1a002a46:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002a48:	7923      	ldrb	r3, [r4, #4]
1a002a4a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002a4e:	a910      	add	r1, sp, #64	; 0x40
1a002a50:	4628      	mov	r0, r5
1a002a52:	f7ff ff89 	bl	1a002968 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002a56:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002a58:	42ab      	cmp	r3, r5
1a002a5a:	d01f      	beq.n	1a002a9c <pll_get_frac+0x94>
	if (val < 0)
1a002a5c:	1aeb      	subs	r3, r5, r3
1a002a5e:	d425      	bmi.n	1a002aac <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002a60:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002a62:	4b2b      	ldr	r3, [pc, #172]	; (1a002b10 <pll_get_frac+0x108>)
1a002a64:	429d      	cmp	r5, r3
1a002a66:	d923      	bls.n	1a002ab0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002a6a:	1aed      	subs	r5, r5, r3
1a002a6c:	d433      	bmi.n	1a002ad6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002a6e:	42ae      	cmp	r6, r5
1a002a70:	dc3b      	bgt.n	1a002aea <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002a72:	42be      	cmp	r6, r7
1a002a74:	dc31      	bgt.n	1a002ada <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002a76:	466d      	mov	r5, sp
1a002a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a84:	e006      	b.n	1a002a94 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002a86:	466d      	mov	r5, sp
1a002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002a94:	b019      	add	sp, #100	; 0x64
1a002a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002a98:	425b      	negs	r3, r3
1a002a9a:	e7ce      	b.n	1a002a3a <pll_get_frac+0x32>
		*ppll = pll[2];
1a002a9c:	ad10      	add	r5, sp, #64	; 0x40
1a002a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002aa2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002aaa:	e7f3      	b.n	1a002a94 <pll_get_frac+0x8c>
		return -val;
1a002aac:	425b      	negs	r3, r3
1a002aae:	e7d7      	b.n	1a002a60 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002ab0:	2340      	movs	r3, #64	; 0x40
1a002ab2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002ab4:	6963      	ldr	r3, [r4, #20]
1a002ab6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002ab8:	a908      	add	r1, sp, #32
1a002aba:	4628      	mov	r0, r5
1a002abc:	f7ff ff54 	bl	1a002968 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002ac2:	42ab      	cmp	r3, r5
1a002ac4:	d1d0      	bne.n	1a002a68 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002ac6:	ad08      	add	r5, sp, #32
1a002ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002acc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002ad4:	e7de      	b.n	1a002a94 <pll_get_frac+0x8c>
		return -val;
1a002ad6:	426d      	negs	r5, r5
1a002ad8:	e7c9      	b.n	1a002a6e <pll_get_frac+0x66>
			*ppll = pll[2];
1a002ada:	ad10      	add	r5, sp, #64	; 0x40
1a002adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ae0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002ae8:	e7d4      	b.n	1a002a94 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002aea:	42af      	cmp	r7, r5
1a002aec:	db07      	blt.n	1a002afe <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002aee:	ad08      	add	r5, sp, #32
1a002af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002af4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002afc:	e7ca      	b.n	1a002a94 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002afe:	ad10      	add	r5, sp, #64	; 0x40
1a002b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002b04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002b0c:	e7c2      	b.n	1a002a94 <pll_get_frac+0x8c>
1a002b0e:	bf00      	nop
1a002b10:	068e7780 	.word	0x068e7780

1a002b14 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002b14:	b430      	push	{r4, r5}
1a002b16:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002b18:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002b1a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002b1c:	e000      	b.n	1a002b20 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002b1e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002b20:	281c      	cmp	r0, #28
1a002b22:	d118      	bne.n	1a002b56 <Chip_Clock_FindBaseClock+0x42>
1a002b24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002b28:	0051      	lsls	r1, r2, #1
1a002b2a:	4a0c      	ldr	r2, [pc, #48]	; (1a002b5c <Chip_Clock_FindBaseClock+0x48>)
1a002b2c:	440a      	add	r2, r1
1a002b2e:	7914      	ldrb	r4, [r2, #4]
1a002b30:	4284      	cmp	r4, r0
1a002b32:	d010      	beq.n	1a002b56 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002b34:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002b38:	004a      	lsls	r2, r1, #1
1a002b3a:	4908      	ldr	r1, [pc, #32]	; (1a002b5c <Chip_Clock_FindBaseClock+0x48>)
1a002b3c:	5a8a      	ldrh	r2, [r1, r2]
1a002b3e:	42aa      	cmp	r2, r5
1a002b40:	d8ed      	bhi.n	1a002b1e <Chip_Clock_FindBaseClock+0xa>
1a002b42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002b46:	0051      	lsls	r1, r2, #1
1a002b48:	4a04      	ldr	r2, [pc, #16]	; (1a002b5c <Chip_Clock_FindBaseClock+0x48>)
1a002b4a:	440a      	add	r2, r1
1a002b4c:	8852      	ldrh	r2, [r2, #2]
1a002b4e:	42aa      	cmp	r2, r5
1a002b50:	d3e5      	bcc.n	1a002b1e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002b52:	4620      	mov	r0, r4
1a002b54:	e7e4      	b.n	1a002b20 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002b56:	bc30      	pop	{r4, r5}
1a002b58:	4770      	bx	lr
1a002b5a:	bf00      	nop
1a002b5c:	1a00b088 	.word	0x1a00b088

1a002b60 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002b60:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002b66:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002b68:	4a0d      	ldr	r2, [pc, #52]	; (1a002ba0 <Chip_Clock_EnableCrystal+0x40>)
1a002b6a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002b6c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002b70:	6992      	ldr	r2, [r2, #24]
1a002b72:	428a      	cmp	r2, r1
1a002b74:	d001      	beq.n	1a002b7a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002b76:	4a0a      	ldr	r2, [pc, #40]	; (1a002ba0 <Chip_Clock_EnableCrystal+0x40>)
1a002b78:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002b7a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002b7e:	4a09      	ldr	r2, [pc, #36]	; (1a002ba4 <Chip_Clock_EnableCrystal+0x44>)
1a002b80:	6811      	ldr	r1, [r2, #0]
1a002b82:	4a09      	ldr	r2, [pc, #36]	; (1a002ba8 <Chip_Clock_EnableCrystal+0x48>)
1a002b84:	4291      	cmp	r1, r2
1a002b86:	d901      	bls.n	1a002b8c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002b88:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002b8c:	4a04      	ldr	r2, [pc, #16]	; (1a002ba0 <Chip_Clock_EnableCrystal+0x40>)
1a002b8e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002b90:	9b01      	ldr	r3, [sp, #4]
1a002b92:	1e5a      	subs	r2, r3, #1
1a002b94:	9201      	str	r2, [sp, #4]
1a002b96:	2b00      	cmp	r3, #0
1a002b98:	d1fa      	bne.n	1a002b90 <Chip_Clock_EnableCrystal+0x30>
}
1a002b9a:	b002      	add	sp, #8
1a002b9c:	4770      	bx	lr
1a002b9e:	bf00      	nop
1a002ba0:	40050000 	.word	0x40050000
1a002ba4:	1a00aff0 	.word	0x1a00aff0
1a002ba8:	01312cff 	.word	0x01312cff

1a002bac <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002bac:	3012      	adds	r0, #18
1a002bae:	4b05      	ldr	r3, [pc, #20]	; (1a002bc4 <Chip_Clock_GetDividerSource+0x18>)
1a002bb0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002bb4:	f010 0f01 	tst.w	r0, #1
1a002bb8:	d102      	bne.n	1a002bc0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002bba:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002bbe:	4770      	bx	lr
		return CLKINPUT_PD;
1a002bc0:	2011      	movs	r0, #17
}
1a002bc2:	4770      	bx	lr
1a002bc4:	40050000 	.word	0x40050000

1a002bc8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002bc8:	f100 0212 	add.w	r2, r0, #18
1a002bcc:	4b03      	ldr	r3, [pc, #12]	; (1a002bdc <Chip_Clock_GetDividerDivisor+0x14>)
1a002bce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002bd2:	4b03      	ldr	r3, [pc, #12]	; (1a002be0 <Chip_Clock_GetDividerDivisor+0x18>)
1a002bd4:	5c18      	ldrb	r0, [r3, r0]
}
1a002bd6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002bda:	4770      	bx	lr
1a002bdc:	40050000 	.word	0x40050000
1a002be0:	1a00b080 	.word	0x1a00b080

1a002be4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002be4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002be6:	2810      	cmp	r0, #16
1a002be8:	d80a      	bhi.n	1a002c00 <Chip_Clock_GetClockInputHz+0x1c>
1a002bea:	e8df f000 	tbb	[pc, r0]
1a002bee:	0b44      	.short	0x0b44
1a002bf0:	0921180d 	.word	0x0921180d
1a002bf4:	2d2a2724 	.word	0x2d2a2724
1a002bf8:	34300909 	.word	0x34300909
1a002bfc:	3c38      	.short	0x3c38
1a002bfe:	40          	.byte	0x40
1a002bff:	00          	.byte	0x00
	uint32_t rate = 0;
1a002c00:	2000      	movs	r0, #0
1a002c02:	e03a      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002c04:	481e      	ldr	r0, [pc, #120]	; (1a002c80 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002c06:	e038      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002c08:	4b1e      	ldr	r3, [pc, #120]	; (1a002c84 <Chip_Clock_GetClockInputHz+0xa0>)
1a002c0a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002c0e:	f003 0307 	and.w	r3, r3, #7
1a002c12:	2b04      	cmp	r3, #4
1a002c14:	d001      	beq.n	1a002c1a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002c16:	481c      	ldr	r0, [pc, #112]	; (1a002c88 <Chip_Clock_GetClockInputHz+0xa4>)
1a002c18:	e02f      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002c1a:	2000      	movs	r0, #0
1a002c1c:	e02d      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002c1e:	4b19      	ldr	r3, [pc, #100]	; (1a002c84 <Chip_Clock_GetClockInputHz+0xa0>)
1a002c20:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002c24:	f003 0307 	and.w	r3, r3, #7
1a002c28:	2b04      	cmp	r3, #4
1a002c2a:	d027      	beq.n	1a002c7c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002c2c:	4816      	ldr	r0, [pc, #88]	; (1a002c88 <Chip_Clock_GetClockInputHz+0xa4>)
1a002c2e:	e024      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002c30:	4b16      	ldr	r3, [pc, #88]	; (1a002c8c <Chip_Clock_GetClockInputHz+0xa8>)
1a002c32:	6818      	ldr	r0, [r3, #0]
		break;
1a002c34:	e021      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002c36:	4b16      	ldr	r3, [pc, #88]	; (1a002c90 <Chip_Clock_GetClockInputHz+0xac>)
1a002c38:	6818      	ldr	r0, [r3, #0]
		break;
1a002c3a:	e01e      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002c3c:	4b15      	ldr	r3, [pc, #84]	; (1a002c94 <Chip_Clock_GetClockInputHz+0xb0>)
1a002c3e:	6818      	ldr	r0, [r3, #0]
		break;
1a002c40:	e01b      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002c42:	4b14      	ldr	r3, [pc, #80]	; (1a002c94 <Chip_Clock_GetClockInputHz+0xb0>)
1a002c44:	6858      	ldr	r0, [r3, #4]
		break;
1a002c46:	e018      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002c48:	f000 f868 	bl	1a002d1c <Chip_Clock_GetMainPLLHz>
		break;
1a002c4c:	e015      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002c4e:	2100      	movs	r1, #0
1a002c50:	f000 f89a 	bl	1a002d88 <Chip_Clock_GetDivRate>
		break;
1a002c54:	e011      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002c56:	2101      	movs	r1, #1
1a002c58:	f000 f896 	bl	1a002d88 <Chip_Clock_GetDivRate>
		break;
1a002c5c:	e00d      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002c5e:	2102      	movs	r1, #2
1a002c60:	f000 f892 	bl	1a002d88 <Chip_Clock_GetDivRate>
		break;
1a002c64:	e009      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002c66:	2103      	movs	r1, #3
1a002c68:	f000 f88e 	bl	1a002d88 <Chip_Clock_GetDivRate>
		break;
1a002c6c:	e005      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002c6e:	2104      	movs	r1, #4
1a002c70:	f000 f88a 	bl	1a002d88 <Chip_Clock_GetDivRate>
		break;
1a002c74:	e001      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002c76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002c7a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002c7c:	4806      	ldr	r0, [pc, #24]	; (1a002c98 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002c7e:	e7fc      	b.n	1a002c7a <Chip_Clock_GetClockInputHz+0x96>
1a002c80:	00b71b00 	.word	0x00b71b00
1a002c84:	40043000 	.word	0x40043000
1a002c88:	017d7840 	.word	0x017d7840
1a002c8c:	1a00afc4 	.word	0x1a00afc4
1a002c90:	1a00aff0 	.word	0x1a00aff0
1a002c94:	10003c5c 	.word	0x10003c5c
1a002c98:	02faf080 	.word	0x02faf080

1a002c9c <Chip_Clock_CalcMainPLLValue>:
{
1a002c9c:	b538      	push	{r3, r4, r5, lr}
1a002c9e:	4605      	mov	r5, r0
1a002ca0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002ca2:	7908      	ldrb	r0, [r1, #4]
1a002ca4:	f7ff ff9e 	bl	1a002be4 <Chip_Clock_GetClockInputHz>
1a002ca8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002caa:	4b19      	ldr	r3, [pc, #100]	; (1a002d10 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002cac:	442b      	add	r3, r5
1a002cae:	4a19      	ldr	r2, [pc, #100]	; (1a002d14 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002cb0:	4293      	cmp	r3, r2
1a002cb2:	d821      	bhi.n	1a002cf8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002cb4:	b318      	cbz	r0, 1a002cfe <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002cb6:	2380      	movs	r3, #128	; 0x80
1a002cb8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002cba:	2300      	movs	r3, #0
1a002cbc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002cbe:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002cc0:	fbb5 f3f0 	udiv	r3, r5, r0
1a002cc4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002cc6:	4a14      	ldr	r2, [pc, #80]	; (1a002d18 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002cc8:	4295      	cmp	r5, r2
1a002cca:	d903      	bls.n	1a002cd4 <Chip_Clock_CalcMainPLLValue+0x38>
1a002ccc:	fb03 f000 	mul.w	r0, r3, r0
1a002cd0:	42a8      	cmp	r0, r5
1a002cd2:	d007      	beq.n	1a002ce4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002cd4:	4621      	mov	r1, r4
1a002cd6:	4628      	mov	r0, r5
1a002cd8:	f7ff fe96 	bl	1a002a08 <pll_get_frac>
		if (!ppll->nsel) {
1a002cdc:	68a3      	ldr	r3, [r4, #8]
1a002cde:	b18b      	cbz	r3, 1a002d04 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002ce0:	3b01      	subs	r3, #1
1a002ce2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002ce4:	6923      	ldr	r3, [r4, #16]
1a002ce6:	b183      	cbz	r3, 1a002d0a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002ce8:	68e2      	ldr	r2, [r4, #12]
1a002cea:	b10a      	cbz	r2, 1a002cf0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002cec:	3a01      	subs	r2, #1
1a002cee:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002cf0:	3b01      	subs	r3, #1
1a002cf2:	6123      	str	r3, [r4, #16]
	return 0;
1a002cf4:	2000      	movs	r0, #0
}
1a002cf6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002cfc:	e7fb      	b.n	1a002cf6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d02:	e7f8      	b.n	1a002cf6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d08:	e7f5      	b.n	1a002cf6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002d0e:	e7f2      	b.n	1a002cf6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002d10:	ff6b3a10 	.word	0xff6b3a10
1a002d14:	0b940510 	.word	0x0b940510
1a002d18:	094c5eff 	.word	0x094c5eff

1a002d1c <Chip_Clock_GetMainPLLHz>:
{
1a002d1c:	b530      	push	{r4, r5, lr}
1a002d1e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002d20:	4d17      	ldr	r5, [pc, #92]	; (1a002d80 <Chip_Clock_GetMainPLLHz+0x64>)
1a002d22:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002d24:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002d28:	f7ff ff5c 	bl	1a002be4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002d2c:	4b15      	ldr	r3, [pc, #84]	; (1a002d84 <Chip_Clock_GetMainPLLHz+0x68>)
1a002d2e:	681b      	ldr	r3, [r3, #0]
1a002d30:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002d32:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002d34:	f013 0f01 	tst.w	r3, #1
1a002d38:	d020      	beq.n	1a002d7c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a002d3a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002d3e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002d42:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002d46:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002d4a:	3301      	adds	r3, #1
	n = nsel + 1;
1a002d4c:	3201      	adds	r2, #1
	p = ptab[psel];
1a002d4e:	f10d 0c08 	add.w	ip, sp, #8
1a002d52:	4461      	add	r1, ip
1a002d54:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002d58:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002d5c:	d108      	bne.n	1a002d70 <Chip_Clock_GetMainPLLHz+0x54>
1a002d5e:	b93d      	cbnz	r5, 1a002d70 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002d60:	0049      	lsls	r1, r1, #1
1a002d62:	fbb3 f3f1 	udiv	r3, r3, r1
1a002d66:	fbb0 f0f2 	udiv	r0, r0, r2
1a002d6a:	fb00 f003 	mul.w	r0, r0, r3
1a002d6e:	e003      	b.n	1a002d78 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002d70:	fbb0 f0f2 	udiv	r0, r0, r2
1a002d74:	fb03 f000 	mul.w	r0, r3, r0
}
1a002d78:	b003      	add	sp, #12
1a002d7a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002d7c:	2000      	movs	r0, #0
1a002d7e:	e7fb      	b.n	1a002d78 <Chip_Clock_GetMainPLLHz+0x5c>
1a002d80:	40050000 	.word	0x40050000
1a002d84:	1a00b07c 	.word	0x1a00b07c

1a002d88 <Chip_Clock_GetDivRate>:
{
1a002d88:	b538      	push	{r3, r4, r5, lr}
1a002d8a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002d8c:	4608      	mov	r0, r1
1a002d8e:	f7ff ff0d 	bl	1a002bac <Chip_Clock_GetDividerSource>
1a002d92:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002d94:	4620      	mov	r0, r4
1a002d96:	f7ff ff17 	bl	1a002bc8 <Chip_Clock_GetDividerDivisor>
1a002d9a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002d9c:	4628      	mov	r0, r5
1a002d9e:	f7ff ff21 	bl	1a002be4 <Chip_Clock_GetClockInputHz>
1a002da2:	3401      	adds	r4, #1
}
1a002da4:	fbb0 f0f4 	udiv	r0, r0, r4
1a002da8:	bd38      	pop	{r3, r4, r5, pc}
1a002daa:	Address 0x000000001a002daa is out of bounds.


1a002dac <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002dac:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002dae:	f100 0416 	add.w	r4, r0, #22
1a002db2:	00a4      	lsls	r4, r4, #2
1a002db4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002db8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002dbc:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002dbe:	281b      	cmp	r0, #27
1a002dc0:	d813      	bhi.n	1a002dea <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002dc2:	2911      	cmp	r1, #17
1a002dc4:	d01a      	beq.n	1a002dfc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002dc6:	4d0e      	ldr	r5, [pc, #56]	; (1a002e00 <Chip_Clock_SetBaseClock+0x54>)
1a002dc8:	4025      	ands	r5, r4

			if (autoblocken) {
1a002dca:	b10a      	cbz	r2, 1a002dd0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002dcc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002dd0:	b10b      	cbz	r3, 1a002dd6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002dd2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002dd6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002dda:	3016      	adds	r0, #22
1a002ddc:	0080      	lsls	r0, r0, #2
1a002dde:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002de2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002de6:	6045      	str	r5, [r0, #4]
1a002de8:	e008      	b.n	1a002dfc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002dea:	f044 0401 	orr.w	r4, r4, #1
1a002dee:	3016      	adds	r0, #22
1a002df0:	0080      	lsls	r0, r0, #2
1a002df2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002df6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002dfa:	6044      	str	r4, [r0, #4]
	}
}
1a002dfc:	bc30      	pop	{r4, r5}
1a002dfe:	4770      	bx	lr
1a002e00:	e0fff7fe 	.word	0xe0fff7fe

1a002e04 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002e04:	281b      	cmp	r0, #27
1a002e06:	d80c      	bhi.n	1a002e22 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002e08:	3016      	adds	r0, #22
1a002e0a:	0080      	lsls	r0, r0, #2
1a002e0c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002e10:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002e14:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002e16:	f010 0f01 	tst.w	r0, #1
1a002e1a:	d104      	bne.n	1a002e26 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002e1c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002e20:	4770      	bx	lr
		return CLKINPUT_PD;
1a002e22:	2011      	movs	r0, #17
1a002e24:	4770      	bx	lr
		return CLKINPUT_PD;
1a002e26:	2011      	movs	r0, #17
}
1a002e28:	4770      	bx	lr

1a002e2a <Chip_Clock_GetBaseClocktHz>:
{
1a002e2a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002e2c:	f7ff ffea 	bl	1a002e04 <Chip_Clock_GetBaseClock>
1a002e30:	f7ff fed8 	bl	1a002be4 <Chip_Clock_GetClockInputHz>
}
1a002e34:	bd08      	pop	{r3, pc}
1a002e36:	Address 0x000000001a002e36 is out of bounds.


1a002e38 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002e38:	b971      	cbnz	r1, 1a002e58 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002e3a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002e3c:	b10a      	cbz	r2, 1a002e42 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002e3e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002e42:	2b02      	cmp	r3, #2
1a002e44:	d00a      	beq.n	1a002e5c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002e46:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002e4a:	d30a      	bcc.n	1a002e62 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002e4c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002e50:	4b06      	ldr	r3, [pc, #24]	; (1a002e6c <Chip_Clock_EnableOpts+0x34>)
1a002e52:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002e56:	4770      	bx	lr
		reg |= (1 << 1);
1a002e58:	2103      	movs	r1, #3
1a002e5a:	e7ef      	b.n	1a002e3c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002e5c:	f041 0120 	orr.w	r1, r1, #32
1a002e60:	e7f1      	b.n	1a002e46 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002e62:	3020      	adds	r0, #32
1a002e64:	4b02      	ldr	r3, [pc, #8]	; (1a002e70 <Chip_Clock_EnableOpts+0x38>)
1a002e66:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002e6a:	4770      	bx	lr
1a002e6c:	40052000 	.word	0x40052000
1a002e70:	40051000 	.word	0x40051000

1a002e74 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002e74:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002e78:	d309      	bcc.n	1a002e8e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002e7a:	4a09      	ldr	r2, [pc, #36]	; (1a002ea0 <Chip_Clock_Enable+0x2c>)
1a002e7c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002e80:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002e84:	f043 0301 	orr.w	r3, r3, #1
1a002e88:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002e8c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002e8e:	4a05      	ldr	r2, [pc, #20]	; (1a002ea4 <Chip_Clock_Enable+0x30>)
1a002e90:	3020      	adds	r0, #32
1a002e92:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002e96:	f043 0301 	orr.w	r3, r3, #1
1a002e9a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002e9e:	4770      	bx	lr
1a002ea0:	40052000 	.word	0x40052000
1a002ea4:	40051000 	.word	0x40051000

1a002ea8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002ea8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002eaa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002eae:	d309      	bcc.n	1a002ec4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002eb0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002eb4:	4a0d      	ldr	r2, [pc, #52]	; (1a002eec <Chip_Clock_GetRate+0x44>)
1a002eb6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002eba:	f014 0f01 	tst.w	r4, #1
1a002ebe:	d107      	bne.n	1a002ed0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002ec0:	2000      	movs	r0, #0
	}

	return rate;
}
1a002ec2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002ec4:	f100 0320 	add.w	r3, r0, #32
1a002ec8:	4a09      	ldr	r2, [pc, #36]	; (1a002ef0 <Chip_Clock_GetRate+0x48>)
1a002eca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002ece:	e7f4      	b.n	1a002eba <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002ed0:	f7ff fe20 	bl	1a002b14 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002ed4:	f7ff ffa9 	bl	1a002e2a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002ed8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002edc:	d103      	bne.n	1a002ee6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002ede:	2301      	movs	r3, #1
		rate = rate / div;
1a002ee0:	fbb0 f0f3 	udiv	r0, r0, r3
1a002ee4:	e7ed      	b.n	1a002ec2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002ee6:	2302      	movs	r3, #2
1a002ee8:	e7fa      	b.n	1a002ee0 <Chip_Clock_GetRate+0x38>
1a002eea:	bf00      	nop
1a002eec:	40052000 	.word	0x40052000
1a002ef0:	40051000 	.word	0x40051000

1a002ef4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002ef4:	b570      	push	{r4, r5, r6, lr}
1a002ef6:	b08a      	sub	sp, #40	; 0x28
1a002ef8:	4605      	mov	r5, r0
1a002efa:	460e      	mov	r6, r1
1a002efc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002efe:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002f02:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002f04:	2806      	cmp	r0, #6
1a002f06:	d018      	beq.n	1a002f3a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002f08:	2300      	movs	r3, #0
1a002f0a:	2201      	movs	r2, #1
1a002f0c:	4629      	mov	r1, r5
1a002f0e:	2004      	movs	r0, #4
1a002f10:	f7ff ff4c 	bl	1a002dac <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002f14:	4a4a      	ldr	r2, [pc, #296]	; (1a003040 <Chip_SetupCoreClock+0x14c>)
1a002f16:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002f18:	f043 0301 	orr.w	r3, r3, #1
1a002f1c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002f1e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002f22:	a901      	add	r1, sp, #4
1a002f24:	4630      	mov	r0, r6
1a002f26:	f7ff feb9 	bl	1a002c9c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002f2a:	4b46      	ldr	r3, [pc, #280]	; (1a003044 <Chip_SetupCoreClock+0x150>)
1a002f2c:	429e      	cmp	r6, r3
1a002f2e:	d916      	bls.n	1a002f5e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002f30:	9b01      	ldr	r3, [sp, #4]
1a002f32:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002f36:	d003      	beq.n	1a002f40 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002f38:	e7fe      	b.n	1a002f38 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002f3a:	f7ff fe11 	bl	1a002b60 <Chip_Clock_EnableCrystal>
1a002f3e:	e7e3      	b.n	1a002f08 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002f40:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002f44:	d005      	beq.n	1a002f52 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002f4a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002f4c:	2500      	movs	r5, #0
			direct = 1;
1a002f4e:	2601      	movs	r6, #1
1a002f50:	e007      	b.n	1a002f62 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002f52:	9b04      	ldr	r3, [sp, #16]
1a002f54:	3301      	adds	r3, #1
1a002f56:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002f58:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002f5a:	2600      	movs	r6, #0
1a002f5c:	e001      	b.n	1a002f62 <Chip_SetupCoreClock+0x6e>
1a002f5e:	2500      	movs	r5, #0
1a002f60:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002f62:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002f66:	9b01      	ldr	r3, [sp, #4]
1a002f68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002f6c:	9a05      	ldr	r2, [sp, #20]
1a002f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002f72:	9a03      	ldr	r2, [sp, #12]
1a002f74:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002f78:	9a04      	ldr	r2, [sp, #16]
1a002f7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002f82:	4a2f      	ldr	r2, [pc, #188]	; (1a003040 <Chip_SetupCoreClock+0x14c>)
1a002f84:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002f86:	4b2e      	ldr	r3, [pc, #184]	; (1a003040 <Chip_SetupCoreClock+0x14c>)
1a002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002f8a:	f013 0f01 	tst.w	r3, #1
1a002f8e:	d0fa      	beq.n	1a002f86 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002f90:	2300      	movs	r3, #0
1a002f92:	2201      	movs	r2, #1
1a002f94:	2109      	movs	r1, #9
1a002f96:	2004      	movs	r0, #4
1a002f98:	f7ff ff08 	bl	1a002dac <Chip_Clock_SetBaseClock>

	if (direct) {
1a002f9c:	b306      	cbz	r6, 1a002fe0 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002f9e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002fa2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002fa6:	1e5a      	subs	r2, r3, #1
1a002fa8:	9209      	str	r2, [sp, #36]	; 0x24
1a002faa:	2b00      	cmp	r3, #0
1a002fac:	d1fa      	bne.n	1a002fa4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002fae:	9b01      	ldr	r3, [sp, #4]
1a002fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002fb4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002fb6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002fba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002fbe:	9a05      	ldr	r2, [sp, #20]
1a002fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002fc4:	9a03      	ldr	r2, [sp, #12]
1a002fc6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002fca:	9a04      	ldr	r2, [sp, #16]
1a002fcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002fd4:	4a1a      	ldr	r2, [pc, #104]	; (1a003040 <Chip_SetupCoreClock+0x14c>)
1a002fd6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002fd8:	2c00      	cmp	r4, #0
1a002fda:	d12e      	bne.n	1a00303a <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002fdc:	b00a      	add	sp, #40	; 0x28
1a002fde:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002fe0:	2d00      	cmp	r5, #0
1a002fe2:	d0f9      	beq.n	1a002fd8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002fe4:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002fe8:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002fec:	1e5a      	subs	r2, r3, #1
1a002fee:	9209      	str	r2, [sp, #36]	; 0x24
1a002ff0:	2b00      	cmp	r3, #0
1a002ff2:	d1fa      	bne.n	1a002fea <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002ff4:	9b04      	ldr	r3, [sp, #16]
1a002ff6:	1e5a      	subs	r2, r3, #1
1a002ff8:	9204      	str	r2, [sp, #16]
1a002ffa:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002ffe:	9b01      	ldr	r3, [sp, #4]
1a003000:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003004:	9905      	ldr	r1, [sp, #20]
1a003006:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00300a:	9903      	ldr	r1, [sp, #12]
1a00300c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003018:	4a09      	ldr	r2, [pc, #36]	; (1a003040 <Chip_SetupCoreClock+0x14c>)
1a00301a:	6453      	str	r3, [r2, #68]	; 0x44
1a00301c:	e7dc      	b.n	1a002fd8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00301e:	480a      	ldr	r0, [pc, #40]	; (1a003048 <Chip_SetupCoreClock+0x154>)
1a003020:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003024:	78cb      	ldrb	r3, [r1, #3]
1a003026:	788a      	ldrb	r2, [r1, #2]
1a003028:	7849      	ldrb	r1, [r1, #1]
1a00302a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00302e:	f7ff febd 	bl	1a002dac <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003032:	3401      	adds	r4, #1
1a003034:	2c11      	cmp	r4, #17
1a003036:	d9f2      	bls.n	1a00301e <Chip_SetupCoreClock+0x12a>
1a003038:	e7d0      	b.n	1a002fdc <Chip_SetupCoreClock+0xe8>
1a00303a:	2400      	movs	r4, #0
1a00303c:	e7fa      	b.n	1a003034 <Chip_SetupCoreClock+0x140>
1a00303e:	bf00      	nop
1a003040:	40050000 	.word	0x40050000
1a003044:	068e7780 	.word	0x068e7780
1a003048:	1a00b0f4 	.word	0x1a00b0f4

1a00304c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00304c:	4770      	bx	lr
1a00304e:	Address 0x000000001a00304e is out of bounds.


1a003050 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003050:	4b03      	ldr	r3, [pc, #12]	; (1a003060 <Chip_SSP_GetClockIndex+0x10>)
1a003052:	4298      	cmp	r0, r3
1a003054:	d001      	beq.n	1a00305a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003056:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003058:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00305a:	20a5      	movs	r0, #165	; 0xa5
1a00305c:	4770      	bx	lr
1a00305e:	bf00      	nop
1a003060:	400c5000 	.word	0x400c5000

1a003064 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003064:	4b04      	ldr	r3, [pc, #16]	; (1a003078 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003066:	4298      	cmp	r0, r3
1a003068:	d002      	beq.n	1a003070 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00306a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00306e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003070:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003074:	4770      	bx	lr
1a003076:	bf00      	nop
1a003078:	400c5000 	.word	0x400c5000

1a00307c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00307c:	6803      	ldr	r3, [r0, #0]
1a00307e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003082:	0209      	lsls	r1, r1, #8
1a003084:	b289      	uxth	r1, r1
1a003086:	4319      	orrs	r1, r3
1a003088:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00308a:	6102      	str	r2, [r0, #16]
}
1a00308c:	4770      	bx	lr

1a00308e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00308e:	b570      	push	{r4, r5, r6, lr}
1a003090:	4606      	mov	r6, r0
1a003092:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003094:	f7ff ffe6 	bl	1a003064 <Chip_SSP_GetPeriphClockIndex>
1a003098:	f7ff ff06 	bl	1a002ea8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00309c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00309e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0030a2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0030a4:	e000      	b.n	1a0030a8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0030a6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0030a8:	42ab      	cmp	r3, r5
1a0030aa:	d90b      	bls.n	1a0030c4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0030ac:	1c4c      	adds	r4, r1, #1
1a0030ae:	fb02 f304 	mul.w	r3, r2, r4
1a0030b2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0030b6:	429d      	cmp	r5, r3
1a0030b8:	d2f6      	bcs.n	1a0030a8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0030ba:	2cff      	cmp	r4, #255	; 0xff
1a0030bc:	d9f3      	bls.n	1a0030a6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0030be:	3202      	adds	r2, #2
				cr0_div = 0;
1a0030c0:	2100      	movs	r1, #0
1a0030c2:	e7f1      	b.n	1a0030a8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0030c4:	4630      	mov	r0, r6
1a0030c6:	f7ff ffd9 	bl	1a00307c <Chip_SSP_SetClockRate>
}
1a0030ca:	bd70      	pop	{r4, r5, r6, pc}

1a0030cc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0030cc:	b510      	push	{r4, lr}
1a0030ce:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0030d0:	f7ff ffbe 	bl	1a003050 <Chip_SSP_GetClockIndex>
1a0030d4:	f7ff fece 	bl	1a002e74 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0030d8:	4620      	mov	r0, r4
1a0030da:	f7ff ffc3 	bl	1a003064 <Chip_SSP_GetPeriphClockIndex>
1a0030de:	f7ff fec9 	bl	1a002e74 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0030e2:	6863      	ldr	r3, [r4, #4]
1a0030e4:	f023 0304 	bic.w	r3, r3, #4
1a0030e8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0030ea:	6823      	ldr	r3, [r4, #0]
1a0030ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0030f0:	f043 0307 	orr.w	r3, r3, #7
1a0030f4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0030f6:	4902      	ldr	r1, [pc, #8]	; (1a003100 <Chip_SSP_Init+0x34>)
1a0030f8:	4620      	mov	r0, r4
1a0030fa:	f7ff ffc8 	bl	1a00308e <Chip_SSP_SetBitRate>
}
1a0030fe:	bd10      	pop	{r4, pc}
1a003100:	000186a0 	.word	0x000186a0

1a003104 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003104:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003106:	4a0b      	ldr	r2, [pc, #44]	; (1a003134 <SystemInit+0x30>)
1a003108:	4b0b      	ldr	r3, [pc, #44]	; (1a003138 <SystemInit+0x34>)
1a00310a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00310c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003110:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003112:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003116:	2b20      	cmp	r3, #32
1a003118:	d004      	beq.n	1a003124 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a00311a:	f7ff faa5 	bl	1a002668 <Board_SystemInit>
   Board_Init();
1a00311e:	f7ff fa2b 	bl	1a002578 <Board_Init>
#endif
}
1a003122:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003124:	4a04      	ldr	r2, [pc, #16]	; (1a003138 <SystemInit+0x34>)
1a003126:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00312a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00312e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003132:	e7f2      	b.n	1a00311a <SystemInit+0x16>
1a003134:	1a000000 	.word	0x1a000000
1a003138:	e000ed00 	.word	0xe000ed00

1a00313c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00313c:	4b04      	ldr	r3, [pc, #16]	; (1a003150 <cyclesCounterInit+0x14>)
1a00313e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003140:	4a04      	ldr	r2, [pc, #16]	; (1a003154 <cyclesCounterInit+0x18>)
1a003142:	6813      	ldr	r3, [r2, #0]
1a003144:	f043 0301 	orr.w	r3, r3, #1
1a003148:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00314a:	2001      	movs	r0, #1
1a00314c:	4770      	bx	lr
1a00314e:	bf00      	nop
1a003150:	1000003c 	.word	0x1000003c
1a003154:	e0001000 	.word	0xe0001000

1a003158 <uartProcessIRQ>:
{
1a003158:	b570      	push	{r4, r5, r6, lr}
1a00315a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a00315c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003160:	0093      	lsls	r3, r2, #2
1a003162:	4a22      	ldr	r2, [pc, #136]	; (1a0031ec <uartProcessIRQ+0x94>)
1a003164:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003166:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003168:	b2ed      	uxtb	r5, r5
1a00316a:	f015 0f01 	tst.w	r5, #1
1a00316e:	d00a      	beq.n	1a003186 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003170:	b928      	cbnz	r0, 1a00317e <uartProcessIRQ+0x26>
1a003172:	4b1f      	ldr	r3, [pc, #124]	; (1a0031f0 <uartProcessIRQ+0x98>)
1a003174:	681b      	ldr	r3, [r3, #0]
1a003176:	b113      	cbz	r3, 1a00317e <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a003178:	4a1e      	ldr	r2, [pc, #120]	; (1a0031f4 <uartProcessIRQ+0x9c>)
1a00317a:	6810      	ldr	r0, [r2, #0]
1a00317c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00317e:	2c03      	cmp	r4, #3
1a003180:	d014      	beq.n	1a0031ac <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003182:	2c05      	cmp	r4, #5
1a003184:	d01a      	beq.n	1a0031bc <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003186:	f015 0f20 	tst.w	r5, #32
1a00318a:	d00e      	beq.n	1a0031aa <uartProcessIRQ+0x52>
	return pUART->IER;
1a00318c:	6873      	ldr	r3, [r6, #4]
1a00318e:	f013 0f02 	tst.w	r3, #2
1a003192:	d00a      	beq.n	1a0031aa <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003194:	b92c      	cbnz	r4, 1a0031a2 <uartProcessIRQ+0x4a>
1a003196:	4b18      	ldr	r3, [pc, #96]	; (1a0031f8 <uartProcessIRQ+0xa0>)
1a003198:	681b      	ldr	r3, [r3, #0]
1a00319a:	b113      	cbz	r3, 1a0031a2 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a00319c:	4a17      	ldr	r2, [pc, #92]	; (1a0031fc <uartProcessIRQ+0xa4>)
1a00319e:	6810      	ldr	r0, [r2, #0]
1a0031a0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0031a2:	2c03      	cmp	r4, #3
1a0031a4:	d012      	beq.n	1a0031cc <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0031a6:	2c05      	cmp	r4, #5
1a0031a8:	d018      	beq.n	1a0031dc <uartProcessIRQ+0x84>
}
1a0031aa:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0031ac:	4b14      	ldr	r3, [pc, #80]	; (1a003200 <uartProcessIRQ+0xa8>)
1a0031ae:	681b      	ldr	r3, [r3, #0]
1a0031b0:	2b00      	cmp	r3, #0
1a0031b2:	d0e6      	beq.n	1a003182 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a0031b4:	4a13      	ldr	r2, [pc, #76]	; (1a003204 <uartProcessIRQ+0xac>)
1a0031b6:	6810      	ldr	r0, [r2, #0]
1a0031b8:	4798      	blx	r3
1a0031ba:	e7e2      	b.n	1a003182 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0031bc:	4b12      	ldr	r3, [pc, #72]	; (1a003208 <uartProcessIRQ+0xb0>)
1a0031be:	681b      	ldr	r3, [r3, #0]
1a0031c0:	2b00      	cmp	r3, #0
1a0031c2:	d0e0      	beq.n	1a003186 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a0031c4:	4a11      	ldr	r2, [pc, #68]	; (1a00320c <uartProcessIRQ+0xb4>)
1a0031c6:	6810      	ldr	r0, [r2, #0]
1a0031c8:	4798      	blx	r3
1a0031ca:	e7dc      	b.n	1a003186 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0031cc:	4b10      	ldr	r3, [pc, #64]	; (1a003210 <uartProcessIRQ+0xb8>)
1a0031ce:	681b      	ldr	r3, [r3, #0]
1a0031d0:	2b00      	cmp	r3, #0
1a0031d2:	d0e8      	beq.n	1a0031a6 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a0031d4:	4a0f      	ldr	r2, [pc, #60]	; (1a003214 <uartProcessIRQ+0xbc>)
1a0031d6:	6810      	ldr	r0, [r2, #0]
1a0031d8:	4798      	blx	r3
1a0031da:	e7e4      	b.n	1a0031a6 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0031dc:	4b0e      	ldr	r3, [pc, #56]	; (1a003218 <uartProcessIRQ+0xc0>)
1a0031de:	681b      	ldr	r3, [r3, #0]
1a0031e0:	2b00      	cmp	r3, #0
1a0031e2:	d0e2      	beq.n	1a0031aa <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a0031e4:	4a0d      	ldr	r2, [pc, #52]	; (1a00321c <uartProcessIRQ+0xc4>)
1a0031e6:	6810      	ldr	r0, [r2, #0]
1a0031e8:	4798      	blx	r3
}
1a0031ea:	e7de      	b.n	1a0031aa <uartProcessIRQ+0x52>
1a0031ec:	1a00b13c 	.word	0x1a00b13c
1a0031f0:	10003c64 	.word	0x10003c64
1a0031f4:	10003c68 	.word	0x10003c68
1a0031f8:	10003c7c 	.word	0x10003c7c
1a0031fc:	10003c80 	.word	0x10003c80
1a003200:	10003c6c 	.word	0x10003c6c
1a003204:	10003c70 	.word	0x10003c70
1a003208:	10003c74 	.word	0x10003c74
1a00320c:	10003c78 	.word	0x10003c78
1a003210:	10003c84 	.word	0x10003c84
1a003214:	10003c88 	.word	0x10003c88
1a003218:	10003c8c 	.word	0x10003c8c
1a00321c:	10003c90 	.word	0x10003c90

1a003220 <uartInterrupt>:
   if( enable ) {
1a003220:	b341      	cbz	r1, 1a003274 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a003222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003226:	009a      	lsls	r2, r3, #2
1a003228:	4b1e      	ldr	r3, [pc, #120]	; (1a0032a4 <uartInterrupt+0x84>)
1a00322a:	4413      	add	r3, r2
1a00322c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003230:	2b00      	cmp	r3, #0
1a003232:	db18      	blt.n	1a003266 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003234:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003238:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a00323c:	22a0      	movs	r2, #160	; 0xa0
1a00323e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003242:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003246:	0082      	lsls	r2, r0, #2
1a003248:	4b16      	ldr	r3, [pc, #88]	; (1a0032a4 <uartInterrupt+0x84>)
1a00324a:	4413      	add	r3, r2
1a00324c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003250:	2b00      	cmp	r3, #0
1a003252:	db25      	blt.n	1a0032a0 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003254:	f003 011f 	and.w	r1, r3, #31
1a003258:	095b      	lsrs	r3, r3, #5
1a00325a:	2201      	movs	r2, #1
1a00325c:	408a      	lsls	r2, r1
1a00325e:	4912      	ldr	r1, [pc, #72]	; (1a0032a8 <uartInterrupt+0x88>)
1a003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003264:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003266:	f003 030f 	and.w	r3, r3, #15
1a00326a:	4a10      	ldr	r2, [pc, #64]	; (1a0032ac <uartInterrupt+0x8c>)
1a00326c:	441a      	add	r2, r3
1a00326e:	23a0      	movs	r3, #160	; 0xa0
1a003270:	7613      	strb	r3, [r2, #24]
1a003272:	e7e6      	b.n	1a003242 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a003274:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003278:	0082      	lsls	r2, r0, #2
1a00327a:	4b0a      	ldr	r3, [pc, #40]	; (1a0032a4 <uartInterrupt+0x84>)
1a00327c:	4413      	add	r3, r2
1a00327e:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003282:	2b00      	cmp	r3, #0
1a003284:	db0c      	blt.n	1a0032a0 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003286:	f003 011f 	and.w	r1, r3, #31
1a00328a:	095b      	lsrs	r3, r3, #5
1a00328c:	2201      	movs	r2, #1
1a00328e:	408a      	lsls	r2, r1
1a003290:	3320      	adds	r3, #32
1a003292:	4905      	ldr	r1, [pc, #20]	; (1a0032a8 <uartInterrupt+0x88>)
1a003294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a003298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a00329c:	f3bf 8f6f 	isb	sy
}
1a0032a0:	4770      	bx	lr
1a0032a2:	bf00      	nop
1a0032a4:	1a00b13c 	.word	0x1a00b13c
1a0032a8:	e000e100 	.word	0xe000e100
1a0032ac:	e000ecfc 	.word	0xe000ecfc

1a0032b0 <uartCallbackSet>:
{   
1a0032b0:	b410      	push	{r4}
   switch(event){
1a0032b2:	b161      	cbz	r1, 1a0032ce <uartCallbackSet+0x1e>
1a0032b4:	2901      	cmp	r1, #1
1a0032b6:	d11c      	bne.n	1a0032f2 <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a0032b8:	b1da      	cbz	r2, 1a0032f2 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0032ba:	2801      	cmp	r0, #1
1a0032bc:	d92c      	bls.n	1a003318 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0032be:	1ec1      	subs	r1, r0, #3
1a0032c0:	b2c9      	uxtb	r1, r1
1a0032c2:	2901      	cmp	r1, #1
1a0032c4:	d92d      	bls.n	1a003322 <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a0032c6:	2805      	cmp	r0, #5
1a0032c8:	d030      	beq.n	1a00332c <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a0032ca:	2302      	movs	r3, #2
1a0032cc:	e009      	b.n	1a0032e2 <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a0032ce:	b182      	cbz	r2, 1a0032f2 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0032d0:	2801      	cmp	r0, #1
1a0032d2:	d911      	bls.n	1a0032f8 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0032d4:	1ec1      	subs	r1, r0, #3
1a0032d6:	b2c9      	uxtb	r1, r1
1a0032d8:	2901      	cmp	r1, #1
1a0032da:	d912      	bls.n	1a003302 <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a0032dc:	2805      	cmp	r0, #5
1a0032de:	d015      	beq.n	1a00330c <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0032e0:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0032e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0032e6:	0082      	lsls	r2, r0, #2
1a0032e8:	4913      	ldr	r1, [pc, #76]	; (1a003338 <uartCallbackSet+0x88>)
1a0032ea:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a0032ec:	6851      	ldr	r1, [r2, #4]
1a0032ee:	430b      	orrs	r3, r1
1a0032f0:	6053      	str	r3, [r2, #4]
}
1a0032f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0032f6:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a0032f8:	4910      	ldr	r1, [pc, #64]	; (1a00333c <uartCallbackSet+0x8c>)
1a0032fa:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a0032fc:	4910      	ldr	r1, [pc, #64]	; (1a003340 <uartCallbackSet+0x90>)
1a0032fe:	600b      	str	r3, [r1, #0]
1a003300:	e7e8      	b.n	1a0032d4 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a003302:	4910      	ldr	r1, [pc, #64]	; (1a003344 <uartCallbackSet+0x94>)
1a003304:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a003306:	4910      	ldr	r1, [pc, #64]	; (1a003348 <uartCallbackSet+0x98>)
1a003308:	600b      	str	r3, [r1, #0]
1a00330a:	e7e7      	b.n	1a0032dc <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a00330c:	490f      	ldr	r1, [pc, #60]	; (1a00334c <uartCallbackSet+0x9c>)
1a00330e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a003310:	4a0f      	ldr	r2, [pc, #60]	; (1a003350 <uartCallbackSet+0xa0>)
1a003312:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003314:	2305      	movs	r3, #5
1a003316:	e7e4      	b.n	1a0032e2 <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a003318:	490e      	ldr	r1, [pc, #56]	; (1a003354 <uartCallbackSet+0xa4>)
1a00331a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a00331c:	490e      	ldr	r1, [pc, #56]	; (1a003358 <uartCallbackSet+0xa8>)
1a00331e:	600b      	str	r3, [r1, #0]
1a003320:	e7cd      	b.n	1a0032be <uartCallbackSet+0xe>
               txIsrCallbackUART2 = callbackFunc;
1a003322:	490e      	ldr	r1, [pc, #56]	; (1a00335c <uartCallbackSet+0xac>)
1a003324:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a003326:	490e      	ldr	r1, [pc, #56]	; (1a003360 <uartCallbackSet+0xb0>)
1a003328:	600b      	str	r3, [r1, #0]
1a00332a:	e7cc      	b.n	1a0032c6 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a00332c:	490d      	ldr	r1, [pc, #52]	; (1a003364 <uartCallbackSet+0xb4>)
1a00332e:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a003330:	4a0d      	ldr	r2, [pc, #52]	; (1a003368 <uartCallbackSet+0xb8>)
1a003332:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a003334:	2302      	movs	r3, #2
1a003336:	e7d4      	b.n	1a0032e2 <uartCallbackSet+0x32>
1a003338:	1a00b13c 	.word	0x1a00b13c
1a00333c:	10003c64 	.word	0x10003c64
1a003340:	10003c68 	.word	0x10003c68
1a003344:	10003c6c 	.word	0x10003c6c
1a003348:	10003c70 	.word	0x10003c70
1a00334c:	10003c74 	.word	0x10003c74
1a003350:	10003c78 	.word	0x10003c78
1a003354:	10003c7c 	.word	0x10003c7c
1a003358:	10003c80 	.word	0x10003c80
1a00335c:	10003c84 	.word	0x10003c84
1a003360:	10003c88 	.word	0x10003c88
1a003364:	10003c8c 	.word	0x10003c8c
1a003368:	10003c90 	.word	0x10003c90

1a00336c <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00336c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003370:	0083      	lsls	r3, r0, #2
1a003372:	4a02      	ldr	r2, [pc, #8]	; (1a00337c <uartRxRead+0x10>)
1a003374:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003376:	6818      	ldr	r0, [r3, #0]
}
1a003378:	b2c0      	uxtb	r0, r0
1a00337a:	4770      	bx	lr
1a00337c:	1a00b13c 	.word	0x1a00b13c

1a003380 <uartInit>:
{
1a003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003384:	4680      	mov	r8, r0
1a003386:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003388:	4c19      	ldr	r4, [pc, #100]	; (1a0033f0 <uartInit+0x70>)
1a00338a:	0045      	lsls	r5, r0, #1
1a00338c:	182a      	adds	r2, r5, r0
1a00338e:	0093      	lsls	r3, r2, #2
1a003390:	18e6      	adds	r6, r4, r3
1a003392:	58e7      	ldr	r7, [r4, r3]
1a003394:	4638      	mov	r0, r7
1a003396:	f7ff f9c1 	bl	1a00271c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00339a:	4649      	mov	r1, r9
1a00339c:	4638      	mov	r0, r7
1a00339e:	f7ff f9e7 	bl	1a002770 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0033a2:	2307      	movs	r3, #7
1a0033a4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0033a6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0033a8:	2301      	movs	r3, #1
1a0033aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0033ac:	7930      	ldrb	r0, [r6, #4]
1a0033ae:	7973      	ldrb	r3, [r6, #5]
1a0033b0:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0033b2:	f042 0218 	orr.w	r2, r2, #24
1a0033b6:	490f      	ldr	r1, [pc, #60]	; (1a0033f4 <uartInit+0x74>)
1a0033b8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0033bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0033c0:	79f0      	ldrb	r0, [r6, #7]
1a0033c2:	7a33      	ldrb	r3, [r6, #8]
1a0033c4:	7a72      	ldrb	r2, [r6, #9]
1a0033c6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0033ca:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a0033d2:	f1b8 0f01 	cmp.w	r8, #1
1a0033d6:	d001      	beq.n	1a0033dc <uartInit+0x5c>
}
1a0033d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0033dc:	4a06      	ldr	r2, [pc, #24]	; (1a0033f8 <uartInit+0x78>)
1a0033de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0033e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0033e4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0033e6:	221a      	movs	r2, #26
1a0033e8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0033ec:	e7f4      	b.n	1a0033d8 <uartInit+0x58>
1a0033ee:	bf00      	nop
1a0033f0:	1a00b13c 	.word	0x1a00b13c
1a0033f4:	40086000 	.word	0x40086000
1a0033f8:	40081000 	.word	0x40081000

1a0033fc <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0033fc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0033fe:	2003      	movs	r0, #3
1a003400:	f7ff feaa 	bl	1a003158 <uartProcessIRQ>
}
1a003404:	bd08      	pop	{r3, pc}

1a003406 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003406:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003408:	2005      	movs	r0, #5
1a00340a:	f7ff fea5 	bl	1a003158 <uartProcessIRQ>
}
1a00340e:	bd08      	pop	{r3, pc}

1a003410 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a003410:	e7fe      	b.n	1a003410 <errorOcurred>

1a003412 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a003412:	4770      	bx	lr

1a003414 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003414:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003416:	2400      	movs	r4, #0
1a003418:	e001      	b.n	1a00341e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00341a:	3401      	adds	r4, #1
1a00341c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00341e:	2c03      	cmp	r4, #3
1a003420:	d812      	bhi.n	1a003448 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a003422:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003424:	4b09      	ldr	r3, [pc, #36]	; (1a00344c <TIMER0_IRQHandler+0x38>)
1a003426:	681a      	ldr	r2, [r3, #0]
1a003428:	f004 010f 	and.w	r1, r4, #15
1a00342c:	2301      	movs	r3, #1
1a00342e:	408b      	lsls	r3, r1
1a003430:	421a      	tst	r2, r3
1a003432:	d0f2      	beq.n	1a00341a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003434:	4b06      	ldr	r3, [pc, #24]	; (1a003450 <TIMER0_IRQHandler+0x3c>)
1a003436:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00343a:	2000      	movs	r0, #0
1a00343c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00343e:	2301      	movs	r3, #1
1a003440:	40ab      	lsls	r3, r5
1a003442:	4a02      	ldr	r2, [pc, #8]	; (1a00344c <TIMER0_IRQHandler+0x38>)
1a003444:	6013      	str	r3, [r2, #0]
1a003446:	e7e8      	b.n	1a00341a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a003448:	bd38      	pop	{r3, r4, r5, pc}
1a00344a:	bf00      	nop
1a00344c:	40084000 	.word	0x40084000
1a003450:	10000040 	.word	0x10000040

1a003454 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a003454:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003456:	2400      	movs	r4, #0
1a003458:	e001      	b.n	1a00345e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00345a:	3401      	adds	r4, #1
1a00345c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00345e:	2c03      	cmp	r4, #3
1a003460:	d813      	bhi.n	1a00348a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a003462:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003464:	4b09      	ldr	r3, [pc, #36]	; (1a00348c <TIMER1_IRQHandler+0x38>)
1a003466:	681a      	ldr	r2, [r3, #0]
1a003468:	f004 010f 	and.w	r1, r4, #15
1a00346c:	2301      	movs	r3, #1
1a00346e:	408b      	lsls	r3, r1
1a003470:	421a      	tst	r2, r3
1a003472:	d0f2      	beq.n	1a00345a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003474:	1d23      	adds	r3, r4, #4
1a003476:	4a06      	ldr	r2, [pc, #24]	; (1a003490 <TIMER1_IRQHandler+0x3c>)
1a003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00347c:	2000      	movs	r0, #0
1a00347e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003480:	2301      	movs	r3, #1
1a003482:	40ab      	lsls	r3, r5
1a003484:	4a01      	ldr	r2, [pc, #4]	; (1a00348c <TIMER1_IRQHandler+0x38>)
1a003486:	6013      	str	r3, [r2, #0]
1a003488:	e7e7      	b.n	1a00345a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00348a:	bd38      	pop	{r3, r4, r5, pc}
1a00348c:	40085000 	.word	0x40085000
1a003490:	10000040 	.word	0x10000040

1a003494 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003494:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003496:	2400      	movs	r4, #0
1a003498:	e001      	b.n	1a00349e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00349a:	3401      	adds	r4, #1
1a00349c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00349e:	2c03      	cmp	r4, #3
1a0034a0:	d814      	bhi.n	1a0034cc <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0034a2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0034a4:	4b0a      	ldr	r3, [pc, #40]	; (1a0034d0 <TIMER2_IRQHandler+0x3c>)
1a0034a6:	681a      	ldr	r2, [r3, #0]
1a0034a8:	f004 010f 	and.w	r1, r4, #15
1a0034ac:	2301      	movs	r3, #1
1a0034ae:	408b      	lsls	r3, r1
1a0034b0:	421a      	tst	r2, r3
1a0034b2:	d0f2      	beq.n	1a00349a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0034b4:	f104 0308 	add.w	r3, r4, #8
1a0034b8:	4a06      	ldr	r2, [pc, #24]	; (1a0034d4 <TIMER2_IRQHandler+0x40>)
1a0034ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0034be:	2000      	movs	r0, #0
1a0034c0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0034c2:	2301      	movs	r3, #1
1a0034c4:	40ab      	lsls	r3, r5
1a0034c6:	4a02      	ldr	r2, [pc, #8]	; (1a0034d0 <TIMER2_IRQHandler+0x3c>)
1a0034c8:	6013      	str	r3, [r2, #0]
1a0034ca:	e7e6      	b.n	1a00349a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0034cc:	bd38      	pop	{r3, r4, r5, pc}
1a0034ce:	bf00      	nop
1a0034d0:	400c3000 	.word	0x400c3000
1a0034d4:	10000040 	.word	0x10000040

1a0034d8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0034d8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034da:	2400      	movs	r4, #0
1a0034dc:	e001      	b.n	1a0034e2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0034de:	3401      	adds	r4, #1
1a0034e0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034e2:	2c03      	cmp	r4, #3
1a0034e4:	d814      	bhi.n	1a003510 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0034e6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0034e8:	4b0a      	ldr	r3, [pc, #40]	; (1a003514 <TIMER3_IRQHandler+0x3c>)
1a0034ea:	681a      	ldr	r2, [r3, #0]
1a0034ec:	f004 010f 	and.w	r1, r4, #15
1a0034f0:	2301      	movs	r3, #1
1a0034f2:	408b      	lsls	r3, r1
1a0034f4:	421a      	tst	r2, r3
1a0034f6:	d0f2      	beq.n	1a0034de <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0034f8:	f104 030c 	add.w	r3, r4, #12
1a0034fc:	4a06      	ldr	r2, [pc, #24]	; (1a003518 <TIMER3_IRQHandler+0x40>)
1a0034fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003502:	2000      	movs	r0, #0
1a003504:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003506:	2301      	movs	r3, #1
1a003508:	40ab      	lsls	r3, r5
1a00350a:	4a02      	ldr	r2, [pc, #8]	; (1a003514 <TIMER3_IRQHandler+0x3c>)
1a00350c:	6013      	str	r3, [r2, #0]
1a00350e:	e7e6      	b.n	1a0034de <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003510:	bd38      	pop	{r3, r4, r5, pc}
1a003512:	bf00      	nop
1a003514:	400c4000 	.word	0x400c4000
1a003518:	10000040 	.word	0x10000040

1a00351c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00351c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00351e:	4d0b      	ldr	r5, [pc, #44]	; (1a00354c <gpioObtainPinInit+0x30>)
1a003520:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003524:	182c      	adds	r4, r5, r0
1a003526:	5628      	ldrsb	r0, [r5, r0]
1a003528:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00352a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00352e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003530:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003534:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003536:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00353a:	9b02      	ldr	r3, [sp, #8]
1a00353c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00353e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003542:	9b03      	ldr	r3, [sp, #12]
1a003544:	701a      	strb	r2, [r3, #0]
}
1a003546:	bc30      	pop	{r4, r5}
1a003548:	4770      	bx	lr
1a00354a:	bf00      	nop
1a00354c:	1a00b184 	.word	0x1a00b184

1a003550 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003550:	f110 0f02 	cmn.w	r0, #2
1a003554:	f000 80c7 	beq.w	1a0036e6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003558:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00355c:	f000 80c5 	beq.w	1a0036ea <gpioInit+0x19a>
{
1a003560:	b570      	push	{r4, r5, r6, lr}
1a003562:	b084      	sub	sp, #16
1a003564:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003566:	2300      	movs	r3, #0
1a003568:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00356c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003570:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003574:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003578:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00357c:	f10d 030b 	add.w	r3, sp, #11
1a003580:	9301      	str	r3, [sp, #4]
1a003582:	ab03      	add	r3, sp, #12
1a003584:	9300      	str	r3, [sp, #0]
1a003586:	f10d 030d 	add.w	r3, sp, #13
1a00358a:	f10d 020e 	add.w	r2, sp, #14
1a00358e:	f10d 010f 	add.w	r1, sp, #15
1a003592:	f7ff ffc3 	bl	1a00351c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003596:	2c05      	cmp	r4, #5
1a003598:	f200 80a9 	bhi.w	1a0036ee <gpioInit+0x19e>
1a00359c:	e8df f004 	tbb	[pc, r4]
1a0035a0:	45278109 	.word	0x45278109
1a0035a4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0035a6:	4853      	ldr	r0, [pc, #332]	; (1a0036f4 <gpioInit+0x1a4>)
1a0035a8:	f7ff fd50 	bl	1a00304c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0035ac:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0035ae:	b004      	add	sp, #16
1a0035b0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0035b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0035b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0035ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0035be:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0035c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0035c6:	494c      	ldr	r1, [pc, #304]	; (1a0036f8 <gpioInit+0x1a8>)
1a0035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0035cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0035d4:	2001      	movs	r0, #1
1a0035d6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0035da:	4c46      	ldr	r4, [pc, #280]	; (1a0036f4 <gpioInit+0x1a4>)
1a0035dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0035e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0035e4:	ea22 0201 	bic.w	r2, r2, r1
1a0035e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0035ec:	e7df      	b.n	1a0035ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0035ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0035f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0035f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0035fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0035fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003602:	493d      	ldr	r1, [pc, #244]	; (1a0036f8 <gpioInit+0x1a8>)
1a003604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003608:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00360c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003610:	2001      	movs	r0, #1
1a003612:	fa00 f102 	lsl.w	r1, r0, r2
1a003616:	4c37      	ldr	r4, [pc, #220]	; (1a0036f4 <gpioInit+0x1a4>)
1a003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00361c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003620:	ea22 0201 	bic.w	r2, r2, r1
1a003624:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003628:	e7c1      	b.n	1a0035ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00362a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00362e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003632:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003636:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00363a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00363e:	492e      	ldr	r1, [pc, #184]	; (1a0036f8 <gpioInit+0x1a8>)
1a003640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003644:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003648:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00364c:	2001      	movs	r0, #1
1a00364e:	fa00 f102 	lsl.w	r1, r0, r2
1a003652:	4c28      	ldr	r4, [pc, #160]	; (1a0036f4 <gpioInit+0x1a4>)
1a003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003658:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00365c:	ea22 0201 	bic.w	r2, r2, r1
1a003660:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003664:	e7a3      	b.n	1a0035ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003666:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00366a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00366e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003672:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003676:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00367a:	491f      	ldr	r1, [pc, #124]	; (1a0036f8 <gpioInit+0x1a8>)
1a00367c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003680:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003684:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003688:	2001      	movs	r0, #1
1a00368a:	fa00 f102 	lsl.w	r1, r0, r2
1a00368e:	4c19      	ldr	r4, [pc, #100]	; (1a0036f4 <gpioInit+0x1a4>)
1a003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003694:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003698:	ea22 0201 	bic.w	r2, r2, r1
1a00369c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0036a0:	e785      	b.n	1a0035ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0036a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0036a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0036aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0036ae:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0036b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0036b6:	4910      	ldr	r1, [pc, #64]	; (1a0036f8 <gpioInit+0x1a8>)
1a0036b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0036bc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0036c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0036c4:	2001      	movs	r0, #1
1a0036c6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0036ca:	4b0a      	ldr	r3, [pc, #40]	; (1a0036f4 <gpioInit+0x1a4>)
1a0036cc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0036d0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0036d4:	4331      	orrs	r1, r6
1a0036d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0036da:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0036dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0036e0:	2100      	movs	r1, #0
1a0036e2:	5499      	strb	r1, [r3, r2]
1a0036e4:	e763      	b.n	1a0035ae <gpioInit+0x5e>
	  return FALSE;
1a0036e6:	2000      	movs	r0, #0
1a0036e8:	4770      	bx	lr
	  return FALSE;
1a0036ea:	2000      	movs	r0, #0
}
1a0036ec:	4770      	bx	lr
      ret_val = 0;
1a0036ee:	2000      	movs	r0, #0
1a0036f0:	e75d      	b.n	1a0035ae <gpioInit+0x5e>
1a0036f2:	bf00      	nop
1a0036f4:	400f4000 	.word	0x400f4000
1a0036f8:	40086000 	.word	0x40086000

1a0036fc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0036fc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0036fe:	4b04      	ldr	r3, [pc, #16]	; (1a003710 <USB0_IRQHandler+0x14>)
1a003700:	681b      	ldr	r3, [r3, #0]
1a003702:	681b      	ldr	r3, [r3, #0]
1a003704:	68db      	ldr	r3, [r3, #12]
1a003706:	4a03      	ldr	r2, [pc, #12]	; (1a003714 <USB0_IRQHandler+0x18>)
1a003708:	6810      	ldr	r0, [r2, #0]
1a00370a:	4798      	blx	r3
}
1a00370c:	bd08      	pop	{r3, pc}
1a00370e:	bf00      	nop
1a003710:	10003d10 	.word	0x10003d10
1a003714:	10003c94 	.word	0x10003c94

1a003718 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003718:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00371a:	f7ff f91b 	bl	1a002954 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00371e:	4b18      	ldr	r3, [pc, #96]	; (1a003780 <boardInit+0x68>)
1a003720:	6818      	ldr	r0, [r3, #0]
1a003722:	f7ff fd0b 	bl	1a00313c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003726:	2105      	movs	r1, #5
1a003728:	2000      	movs	r0, #0
1a00372a:	f7ff ff11 	bl	1a003550 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00372e:	2100      	movs	r1, #0
1a003730:	2024      	movs	r0, #36	; 0x24
1a003732:	f7ff ff0d 	bl	1a003550 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003736:	2100      	movs	r1, #0
1a003738:	2025      	movs	r0, #37	; 0x25
1a00373a:	f7ff ff09 	bl	1a003550 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00373e:	2100      	movs	r1, #0
1a003740:	2026      	movs	r0, #38	; 0x26
1a003742:	f7ff ff05 	bl	1a003550 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003746:	2100      	movs	r1, #0
1a003748:	2027      	movs	r0, #39	; 0x27
1a00374a:	f7ff ff01 	bl	1a003550 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00374e:	2101      	movs	r1, #1
1a003750:	2028      	movs	r0, #40	; 0x28
1a003752:	f7ff fefd 	bl	1a003550 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003756:	2101      	movs	r1, #1
1a003758:	2029      	movs	r0, #41	; 0x29
1a00375a:	f7ff fef9 	bl	1a003550 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00375e:	2101      	movs	r1, #1
1a003760:	202a      	movs	r0, #42	; 0x2a
1a003762:	f7ff fef5 	bl	1a003550 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003766:	2101      	movs	r1, #1
1a003768:	202b      	movs	r0, #43	; 0x2b
1a00376a:	f7ff fef1 	bl	1a003550 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00376e:	2101      	movs	r1, #1
1a003770:	202c      	movs	r0, #44	; 0x2c
1a003772:	f7ff feed 	bl	1a003550 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003776:	2101      	movs	r1, #1
1a003778:	202d      	movs	r0, #45	; 0x2d
1a00377a:	f7ff fee9 	bl	1a003550 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00377e:	bd08      	pop	{r3, pc}
1a003780:	10003d0c 	.word	0x10003d0c

1a003784 <__aeabi_drsub>:
1a003784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003788:	e002      	b.n	1a003790 <__adddf3>
1a00378a:	bf00      	nop

1a00378c <__aeabi_dsub>:
1a00378c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003790 <__adddf3>:
1a003790:	b530      	push	{r4, r5, lr}
1a003792:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a003796:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00379a:	ea94 0f05 	teq	r4, r5
1a00379e:	bf08      	it	eq
1a0037a0:	ea90 0f02 	teqeq	r0, r2
1a0037a4:	bf1f      	itttt	ne
1a0037a6:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0037aa:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0037ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0037b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0037b6:	f000 80e2 	beq.w	1a00397e <__adddf3+0x1ee>
1a0037ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0037be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0037c2:	bfb8      	it	lt
1a0037c4:	426d      	neglt	r5, r5
1a0037c6:	dd0c      	ble.n	1a0037e2 <__adddf3+0x52>
1a0037c8:	442c      	add	r4, r5
1a0037ca:	ea80 0202 	eor.w	r2, r0, r2
1a0037ce:	ea81 0303 	eor.w	r3, r1, r3
1a0037d2:	ea82 0000 	eor.w	r0, r2, r0
1a0037d6:	ea83 0101 	eor.w	r1, r3, r1
1a0037da:	ea80 0202 	eor.w	r2, r0, r2
1a0037de:	ea81 0303 	eor.w	r3, r1, r3
1a0037e2:	2d36      	cmp	r5, #54	; 0x36
1a0037e4:	bf88      	it	hi
1a0037e6:	bd30      	pophi	{r4, r5, pc}
1a0037e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0037ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0037f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0037f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0037f8:	d002      	beq.n	1a003800 <__adddf3+0x70>
1a0037fa:	4240      	negs	r0, r0
1a0037fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003800:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a003804:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003808:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a00380c:	d002      	beq.n	1a003814 <__adddf3+0x84>
1a00380e:	4252      	negs	r2, r2
1a003810:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003814:	ea94 0f05 	teq	r4, r5
1a003818:	f000 80a7 	beq.w	1a00396a <__adddf3+0x1da>
1a00381c:	f1a4 0401 	sub.w	r4, r4, #1
1a003820:	f1d5 0e20 	rsbs	lr, r5, #32
1a003824:	db0d      	blt.n	1a003842 <__adddf3+0xb2>
1a003826:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00382a:	fa22 f205 	lsr.w	r2, r2, r5
1a00382e:	1880      	adds	r0, r0, r2
1a003830:	f141 0100 	adc.w	r1, r1, #0
1a003834:	fa03 f20e 	lsl.w	r2, r3, lr
1a003838:	1880      	adds	r0, r0, r2
1a00383a:	fa43 f305 	asr.w	r3, r3, r5
1a00383e:	4159      	adcs	r1, r3
1a003840:	e00e      	b.n	1a003860 <__adddf3+0xd0>
1a003842:	f1a5 0520 	sub.w	r5, r5, #32
1a003846:	f10e 0e20 	add.w	lr, lr, #32
1a00384a:	2a01      	cmp	r2, #1
1a00384c:	fa03 fc0e 	lsl.w	ip, r3, lr
1a003850:	bf28      	it	cs
1a003852:	f04c 0c02 	orrcs.w	ip, ip, #2
1a003856:	fa43 f305 	asr.w	r3, r3, r5
1a00385a:	18c0      	adds	r0, r0, r3
1a00385c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a003860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003864:	d507      	bpl.n	1a003876 <__adddf3+0xe6>
1a003866:	f04f 0e00 	mov.w	lr, #0
1a00386a:	f1dc 0c00 	rsbs	ip, ip, #0
1a00386e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a003872:	eb6e 0101 	sbc.w	r1, lr, r1
1a003876:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00387a:	d31b      	bcc.n	1a0038b4 <__adddf3+0x124>
1a00387c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a003880:	d30c      	bcc.n	1a00389c <__adddf3+0x10c>
1a003882:	0849      	lsrs	r1, r1, #1
1a003884:	ea5f 0030 	movs.w	r0, r0, rrx
1a003888:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a00388c:	f104 0401 	add.w	r4, r4, #1
1a003890:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a003894:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003898:	f080 809a 	bcs.w	1a0039d0 <__adddf3+0x240>
1a00389c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0038a0:	bf08      	it	eq
1a0038a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0038a6:	f150 0000 	adcs.w	r0, r0, #0
1a0038aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0038ae:	ea41 0105 	orr.w	r1, r1, r5
1a0038b2:	bd30      	pop	{r4, r5, pc}
1a0038b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0038b8:	4140      	adcs	r0, r0
1a0038ba:	eb41 0101 	adc.w	r1, r1, r1
1a0038be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0038c2:	f1a4 0401 	sub.w	r4, r4, #1
1a0038c6:	d1e9      	bne.n	1a00389c <__adddf3+0x10c>
1a0038c8:	f091 0f00 	teq	r1, #0
1a0038cc:	bf04      	itt	eq
1a0038ce:	4601      	moveq	r1, r0
1a0038d0:	2000      	moveq	r0, #0
1a0038d2:	fab1 f381 	clz	r3, r1
1a0038d6:	bf08      	it	eq
1a0038d8:	3320      	addeq	r3, #32
1a0038da:	f1a3 030b 	sub.w	r3, r3, #11
1a0038de:	f1b3 0220 	subs.w	r2, r3, #32
1a0038e2:	da0c      	bge.n	1a0038fe <__adddf3+0x16e>
1a0038e4:	320c      	adds	r2, #12
1a0038e6:	dd08      	ble.n	1a0038fa <__adddf3+0x16a>
1a0038e8:	f102 0c14 	add.w	ip, r2, #20
1a0038ec:	f1c2 020c 	rsb	r2, r2, #12
1a0038f0:	fa01 f00c 	lsl.w	r0, r1, ip
1a0038f4:	fa21 f102 	lsr.w	r1, r1, r2
1a0038f8:	e00c      	b.n	1a003914 <__adddf3+0x184>
1a0038fa:	f102 0214 	add.w	r2, r2, #20
1a0038fe:	bfd8      	it	le
1a003900:	f1c2 0c20 	rsble	ip, r2, #32
1a003904:	fa01 f102 	lsl.w	r1, r1, r2
1a003908:	fa20 fc0c 	lsr.w	ip, r0, ip
1a00390c:	bfdc      	itt	le
1a00390e:	ea41 010c 	orrle.w	r1, r1, ip
1a003912:	4090      	lslle	r0, r2
1a003914:	1ae4      	subs	r4, r4, r3
1a003916:	bfa2      	ittt	ge
1a003918:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a00391c:	4329      	orrge	r1, r5
1a00391e:	bd30      	popge	{r4, r5, pc}
1a003920:	ea6f 0404 	mvn.w	r4, r4
1a003924:	3c1f      	subs	r4, #31
1a003926:	da1c      	bge.n	1a003962 <__adddf3+0x1d2>
1a003928:	340c      	adds	r4, #12
1a00392a:	dc0e      	bgt.n	1a00394a <__adddf3+0x1ba>
1a00392c:	f104 0414 	add.w	r4, r4, #20
1a003930:	f1c4 0220 	rsb	r2, r4, #32
1a003934:	fa20 f004 	lsr.w	r0, r0, r4
1a003938:	fa01 f302 	lsl.w	r3, r1, r2
1a00393c:	ea40 0003 	orr.w	r0, r0, r3
1a003940:	fa21 f304 	lsr.w	r3, r1, r4
1a003944:	ea45 0103 	orr.w	r1, r5, r3
1a003948:	bd30      	pop	{r4, r5, pc}
1a00394a:	f1c4 040c 	rsb	r4, r4, #12
1a00394e:	f1c4 0220 	rsb	r2, r4, #32
1a003952:	fa20 f002 	lsr.w	r0, r0, r2
1a003956:	fa01 f304 	lsl.w	r3, r1, r4
1a00395a:	ea40 0003 	orr.w	r0, r0, r3
1a00395e:	4629      	mov	r1, r5
1a003960:	bd30      	pop	{r4, r5, pc}
1a003962:	fa21 f004 	lsr.w	r0, r1, r4
1a003966:	4629      	mov	r1, r5
1a003968:	bd30      	pop	{r4, r5, pc}
1a00396a:	f094 0f00 	teq	r4, #0
1a00396e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a003972:	bf06      	itte	eq
1a003974:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a003978:	3401      	addeq	r4, #1
1a00397a:	3d01      	subne	r5, #1
1a00397c:	e74e      	b.n	1a00381c <__adddf3+0x8c>
1a00397e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003982:	bf18      	it	ne
1a003984:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003988:	d029      	beq.n	1a0039de <__adddf3+0x24e>
1a00398a:	ea94 0f05 	teq	r4, r5
1a00398e:	bf08      	it	eq
1a003990:	ea90 0f02 	teqeq	r0, r2
1a003994:	d005      	beq.n	1a0039a2 <__adddf3+0x212>
1a003996:	ea54 0c00 	orrs.w	ip, r4, r0
1a00399a:	bf04      	itt	eq
1a00399c:	4619      	moveq	r1, r3
1a00399e:	4610      	moveq	r0, r2
1a0039a0:	bd30      	pop	{r4, r5, pc}
1a0039a2:	ea91 0f03 	teq	r1, r3
1a0039a6:	bf1e      	ittt	ne
1a0039a8:	2100      	movne	r1, #0
1a0039aa:	2000      	movne	r0, #0
1a0039ac:	bd30      	popne	{r4, r5, pc}
1a0039ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0039b2:	d105      	bne.n	1a0039c0 <__adddf3+0x230>
1a0039b4:	0040      	lsls	r0, r0, #1
1a0039b6:	4149      	adcs	r1, r1
1a0039b8:	bf28      	it	cs
1a0039ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0039be:	bd30      	pop	{r4, r5, pc}
1a0039c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0039c4:	bf3c      	itt	cc
1a0039c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0039ca:	bd30      	popcc	{r4, r5, pc}
1a0039cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0039d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0039d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0039d8:	f04f 0000 	mov.w	r0, #0
1a0039dc:	bd30      	pop	{r4, r5, pc}
1a0039de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0039e2:	bf1a      	itte	ne
1a0039e4:	4619      	movne	r1, r3
1a0039e6:	4610      	movne	r0, r2
1a0039e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0039ec:	bf1c      	itt	ne
1a0039ee:	460b      	movne	r3, r1
1a0039f0:	4602      	movne	r2, r0
1a0039f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0039f6:	bf06      	itte	eq
1a0039f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0039fc:	ea91 0f03 	teqeq	r1, r3
1a003a00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a003a04:	bd30      	pop	{r4, r5, pc}
1a003a06:	bf00      	nop

1a003a08 <__aeabi_ui2d>:
1a003a08:	f090 0f00 	teq	r0, #0
1a003a0c:	bf04      	itt	eq
1a003a0e:	2100      	moveq	r1, #0
1a003a10:	4770      	bxeq	lr
1a003a12:	b530      	push	{r4, r5, lr}
1a003a14:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003a18:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003a1c:	f04f 0500 	mov.w	r5, #0
1a003a20:	f04f 0100 	mov.w	r1, #0
1a003a24:	e750      	b.n	1a0038c8 <__adddf3+0x138>
1a003a26:	bf00      	nop

1a003a28 <__aeabi_i2d>:
1a003a28:	f090 0f00 	teq	r0, #0
1a003a2c:	bf04      	itt	eq
1a003a2e:	2100      	moveq	r1, #0
1a003a30:	4770      	bxeq	lr
1a003a32:	b530      	push	{r4, r5, lr}
1a003a34:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003a38:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003a3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a003a40:	bf48      	it	mi
1a003a42:	4240      	negmi	r0, r0
1a003a44:	f04f 0100 	mov.w	r1, #0
1a003a48:	e73e      	b.n	1a0038c8 <__adddf3+0x138>
1a003a4a:	bf00      	nop

1a003a4c <__aeabi_f2d>:
1a003a4c:	0042      	lsls	r2, r0, #1
1a003a4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a003a52:	ea4f 0131 	mov.w	r1, r1, rrx
1a003a56:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a003a5a:	bf1f      	itttt	ne
1a003a5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a003a60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a003a64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a003a68:	4770      	bxne	lr
1a003a6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a003a6e:	bf08      	it	eq
1a003a70:	4770      	bxeq	lr
1a003a72:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a003a76:	bf04      	itt	eq
1a003a78:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a003a7c:	4770      	bxeq	lr
1a003a7e:	b530      	push	{r4, r5, lr}
1a003a80:	f44f 7460 	mov.w	r4, #896	; 0x380
1a003a84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003a8c:	e71c      	b.n	1a0038c8 <__adddf3+0x138>
1a003a8e:	bf00      	nop

1a003a90 <__aeabi_ul2d>:
1a003a90:	ea50 0201 	orrs.w	r2, r0, r1
1a003a94:	bf08      	it	eq
1a003a96:	4770      	bxeq	lr
1a003a98:	b530      	push	{r4, r5, lr}
1a003a9a:	f04f 0500 	mov.w	r5, #0
1a003a9e:	e00a      	b.n	1a003ab6 <__aeabi_l2d+0x16>

1a003aa0 <__aeabi_l2d>:
1a003aa0:	ea50 0201 	orrs.w	r2, r0, r1
1a003aa4:	bf08      	it	eq
1a003aa6:	4770      	bxeq	lr
1a003aa8:	b530      	push	{r4, r5, lr}
1a003aaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a003aae:	d502      	bpl.n	1a003ab6 <__aeabi_l2d+0x16>
1a003ab0:	4240      	negs	r0, r0
1a003ab2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003ab6:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003aba:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003abe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a003ac2:	f43f aed8 	beq.w	1a003876 <__adddf3+0xe6>
1a003ac6:	f04f 0203 	mov.w	r2, #3
1a003aca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003ace:	bf18      	it	ne
1a003ad0:	3203      	addne	r2, #3
1a003ad2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003ad6:	bf18      	it	ne
1a003ad8:	3203      	addne	r2, #3
1a003ada:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a003ade:	f1c2 0320 	rsb	r3, r2, #32
1a003ae2:	fa00 fc03 	lsl.w	ip, r0, r3
1a003ae6:	fa20 f002 	lsr.w	r0, r0, r2
1a003aea:	fa01 fe03 	lsl.w	lr, r1, r3
1a003aee:	ea40 000e 	orr.w	r0, r0, lr
1a003af2:	fa21 f102 	lsr.w	r1, r1, r2
1a003af6:	4414      	add	r4, r2
1a003af8:	e6bd      	b.n	1a003876 <__adddf3+0xe6>
1a003afa:	bf00      	nop

1a003afc <__aeabi_dmul>:
1a003afc:	b570      	push	{r4, r5, r6, lr}
1a003afe:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003b02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003b06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003b0a:	bf1d      	ittte	ne
1a003b0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003b10:	ea94 0f0c 	teqne	r4, ip
1a003b14:	ea95 0f0c 	teqne	r5, ip
1a003b18:	f000 f8de 	bleq	1a003cd8 <__aeabi_dmul+0x1dc>
1a003b1c:	442c      	add	r4, r5
1a003b1e:	ea81 0603 	eor.w	r6, r1, r3
1a003b22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a003b26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a003b2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a003b2e:	bf18      	it	ne
1a003b30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a003b34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a003b3c:	d038      	beq.n	1a003bb0 <__aeabi_dmul+0xb4>
1a003b3e:	fba0 ce02 	umull	ip, lr, r0, r2
1a003b42:	f04f 0500 	mov.w	r5, #0
1a003b46:	fbe1 e502 	umlal	lr, r5, r1, r2
1a003b4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a003b4e:	fbe0 e503 	umlal	lr, r5, r0, r3
1a003b52:	f04f 0600 	mov.w	r6, #0
1a003b56:	fbe1 5603 	umlal	r5, r6, r1, r3
1a003b5a:	f09c 0f00 	teq	ip, #0
1a003b5e:	bf18      	it	ne
1a003b60:	f04e 0e01 	orrne.w	lr, lr, #1
1a003b64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a003b68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a003b6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a003b70:	d204      	bcs.n	1a003b7c <__aeabi_dmul+0x80>
1a003b72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a003b76:	416d      	adcs	r5, r5
1a003b78:	eb46 0606 	adc.w	r6, r6, r6
1a003b7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a003b80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a003b84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a003b88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a003b8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a003b90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003b94:	bf88      	it	hi
1a003b96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003b9a:	d81e      	bhi.n	1a003bda <__aeabi_dmul+0xde>
1a003b9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a003ba0:	bf08      	it	eq
1a003ba2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a003ba6:	f150 0000 	adcs.w	r0, r0, #0
1a003baa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003bae:	bd70      	pop	{r4, r5, r6, pc}
1a003bb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a003bb4:	ea46 0101 	orr.w	r1, r6, r1
1a003bb8:	ea40 0002 	orr.w	r0, r0, r2
1a003bbc:	ea81 0103 	eor.w	r1, r1, r3
1a003bc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a003bc4:	bfc2      	ittt	gt
1a003bc6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003bca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003bce:	bd70      	popgt	{r4, r5, r6, pc}
1a003bd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003bd4:	f04f 0e00 	mov.w	lr, #0
1a003bd8:	3c01      	subs	r4, #1
1a003bda:	f300 80ab 	bgt.w	1a003d34 <__aeabi_dmul+0x238>
1a003bde:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a003be2:	bfde      	ittt	le
1a003be4:	2000      	movle	r0, #0
1a003be6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a003bea:	bd70      	pople	{r4, r5, r6, pc}
1a003bec:	f1c4 0400 	rsb	r4, r4, #0
1a003bf0:	3c20      	subs	r4, #32
1a003bf2:	da35      	bge.n	1a003c60 <__aeabi_dmul+0x164>
1a003bf4:	340c      	adds	r4, #12
1a003bf6:	dc1b      	bgt.n	1a003c30 <__aeabi_dmul+0x134>
1a003bf8:	f104 0414 	add.w	r4, r4, #20
1a003bfc:	f1c4 0520 	rsb	r5, r4, #32
1a003c00:	fa00 f305 	lsl.w	r3, r0, r5
1a003c04:	fa20 f004 	lsr.w	r0, r0, r4
1a003c08:	fa01 f205 	lsl.w	r2, r1, r5
1a003c0c:	ea40 0002 	orr.w	r0, r0, r2
1a003c10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a003c14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003c18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003c1c:	fa21 f604 	lsr.w	r6, r1, r4
1a003c20:	eb42 0106 	adc.w	r1, r2, r6
1a003c24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003c28:	bf08      	it	eq
1a003c2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003c2e:	bd70      	pop	{r4, r5, r6, pc}
1a003c30:	f1c4 040c 	rsb	r4, r4, #12
1a003c34:	f1c4 0520 	rsb	r5, r4, #32
1a003c38:	fa00 f304 	lsl.w	r3, r0, r4
1a003c3c:	fa20 f005 	lsr.w	r0, r0, r5
1a003c40:	fa01 f204 	lsl.w	r2, r1, r4
1a003c44:	ea40 0002 	orr.w	r0, r0, r2
1a003c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003c4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003c50:	f141 0100 	adc.w	r1, r1, #0
1a003c54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003c58:	bf08      	it	eq
1a003c5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003c5e:	bd70      	pop	{r4, r5, r6, pc}
1a003c60:	f1c4 0520 	rsb	r5, r4, #32
1a003c64:	fa00 f205 	lsl.w	r2, r0, r5
1a003c68:	ea4e 0e02 	orr.w	lr, lr, r2
1a003c6c:	fa20 f304 	lsr.w	r3, r0, r4
1a003c70:	fa01 f205 	lsl.w	r2, r1, r5
1a003c74:	ea43 0302 	orr.w	r3, r3, r2
1a003c78:	fa21 f004 	lsr.w	r0, r1, r4
1a003c7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003c80:	fa21 f204 	lsr.w	r2, r1, r4
1a003c84:	ea20 0002 	bic.w	r0, r0, r2
1a003c88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003c8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003c90:	bf08      	it	eq
1a003c92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003c96:	bd70      	pop	{r4, r5, r6, pc}
1a003c98:	f094 0f00 	teq	r4, #0
1a003c9c:	d10f      	bne.n	1a003cbe <__aeabi_dmul+0x1c2>
1a003c9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a003ca2:	0040      	lsls	r0, r0, #1
1a003ca4:	eb41 0101 	adc.w	r1, r1, r1
1a003ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003cac:	bf08      	it	eq
1a003cae:	3c01      	subeq	r4, #1
1a003cb0:	d0f7      	beq.n	1a003ca2 <__aeabi_dmul+0x1a6>
1a003cb2:	ea41 0106 	orr.w	r1, r1, r6
1a003cb6:	f095 0f00 	teq	r5, #0
1a003cba:	bf18      	it	ne
1a003cbc:	4770      	bxne	lr
1a003cbe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a003cc2:	0052      	lsls	r2, r2, #1
1a003cc4:	eb43 0303 	adc.w	r3, r3, r3
1a003cc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003ccc:	bf08      	it	eq
1a003cce:	3d01      	subeq	r5, #1
1a003cd0:	d0f7      	beq.n	1a003cc2 <__aeabi_dmul+0x1c6>
1a003cd2:	ea43 0306 	orr.w	r3, r3, r6
1a003cd6:	4770      	bx	lr
1a003cd8:	ea94 0f0c 	teq	r4, ip
1a003cdc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003ce0:	bf18      	it	ne
1a003ce2:	ea95 0f0c 	teqne	r5, ip
1a003ce6:	d00c      	beq.n	1a003d02 <__aeabi_dmul+0x206>
1a003ce8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003cec:	bf18      	it	ne
1a003cee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003cf2:	d1d1      	bne.n	1a003c98 <__aeabi_dmul+0x19c>
1a003cf4:	ea81 0103 	eor.w	r1, r1, r3
1a003cf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003cfc:	f04f 0000 	mov.w	r0, #0
1a003d00:	bd70      	pop	{r4, r5, r6, pc}
1a003d02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003d06:	bf06      	itte	eq
1a003d08:	4610      	moveq	r0, r2
1a003d0a:	4619      	moveq	r1, r3
1a003d0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003d10:	d019      	beq.n	1a003d46 <__aeabi_dmul+0x24a>
1a003d12:	ea94 0f0c 	teq	r4, ip
1a003d16:	d102      	bne.n	1a003d1e <__aeabi_dmul+0x222>
1a003d18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a003d1c:	d113      	bne.n	1a003d46 <__aeabi_dmul+0x24a>
1a003d1e:	ea95 0f0c 	teq	r5, ip
1a003d22:	d105      	bne.n	1a003d30 <__aeabi_dmul+0x234>
1a003d24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a003d28:	bf1c      	itt	ne
1a003d2a:	4610      	movne	r0, r2
1a003d2c:	4619      	movne	r1, r3
1a003d2e:	d10a      	bne.n	1a003d46 <__aeabi_dmul+0x24a>
1a003d30:	ea81 0103 	eor.w	r1, r1, r3
1a003d34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003d38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003d3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003d40:	f04f 0000 	mov.w	r0, #0
1a003d44:	bd70      	pop	{r4, r5, r6, pc}
1a003d46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003d4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a003d4e:	bd70      	pop	{r4, r5, r6, pc}

1a003d50 <__aeabi_ddiv>:
1a003d50:	b570      	push	{r4, r5, r6, lr}
1a003d52:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003d56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003d5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003d5e:	bf1d      	ittte	ne
1a003d60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003d64:	ea94 0f0c 	teqne	r4, ip
1a003d68:	ea95 0f0c 	teqne	r5, ip
1a003d6c:	f000 f8a7 	bleq	1a003ebe <__aeabi_ddiv+0x16e>
1a003d70:	eba4 0405 	sub.w	r4, r4, r5
1a003d74:	ea81 0e03 	eor.w	lr, r1, r3
1a003d78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003d7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003d80:	f000 8088 	beq.w	1a003e94 <__aeabi_ddiv+0x144>
1a003d84:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003d88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003d8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a003d90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a003d94:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003d98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003d9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a003da0:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a003da4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003da8:	429d      	cmp	r5, r3
1a003daa:	bf08      	it	eq
1a003dac:	4296      	cmpeq	r6, r2
1a003dae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a003db2:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a003db6:	d202      	bcs.n	1a003dbe <__aeabi_ddiv+0x6e>
1a003db8:	085b      	lsrs	r3, r3, #1
1a003dba:	ea4f 0232 	mov.w	r2, r2, rrx
1a003dbe:	1ab6      	subs	r6, r6, r2
1a003dc0:	eb65 0503 	sbc.w	r5, r5, r3
1a003dc4:	085b      	lsrs	r3, r3, #1
1a003dc6:	ea4f 0232 	mov.w	r2, r2, rrx
1a003dca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a003dce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a003dd2:	ebb6 0e02 	subs.w	lr, r6, r2
1a003dd6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003dda:	bf22      	ittt	cs
1a003ddc:	1ab6      	subcs	r6, r6, r2
1a003dde:	4675      	movcs	r5, lr
1a003de0:	ea40 000c 	orrcs.w	r0, r0, ip
1a003de4:	085b      	lsrs	r3, r3, #1
1a003de6:	ea4f 0232 	mov.w	r2, r2, rrx
1a003dea:	ebb6 0e02 	subs.w	lr, r6, r2
1a003dee:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003df2:	bf22      	ittt	cs
1a003df4:	1ab6      	subcs	r6, r6, r2
1a003df6:	4675      	movcs	r5, lr
1a003df8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003dfc:	085b      	lsrs	r3, r3, #1
1a003dfe:	ea4f 0232 	mov.w	r2, r2, rrx
1a003e02:	ebb6 0e02 	subs.w	lr, r6, r2
1a003e06:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003e0a:	bf22      	ittt	cs
1a003e0c:	1ab6      	subcs	r6, r6, r2
1a003e0e:	4675      	movcs	r5, lr
1a003e10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003e14:	085b      	lsrs	r3, r3, #1
1a003e16:	ea4f 0232 	mov.w	r2, r2, rrx
1a003e1a:	ebb6 0e02 	subs.w	lr, r6, r2
1a003e1e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003e22:	bf22      	ittt	cs
1a003e24:	1ab6      	subcs	r6, r6, r2
1a003e26:	4675      	movcs	r5, lr
1a003e28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a003e2c:	ea55 0e06 	orrs.w	lr, r5, r6
1a003e30:	d018      	beq.n	1a003e64 <__aeabi_ddiv+0x114>
1a003e32:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a003e36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a003e3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a003e3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a003e42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a003e46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a003e4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a003e4e:	d1c0      	bne.n	1a003dd2 <__aeabi_ddiv+0x82>
1a003e50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003e54:	d10b      	bne.n	1a003e6e <__aeabi_ddiv+0x11e>
1a003e56:	ea41 0100 	orr.w	r1, r1, r0
1a003e5a:	f04f 0000 	mov.w	r0, #0
1a003e5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a003e62:	e7b6      	b.n	1a003dd2 <__aeabi_ddiv+0x82>
1a003e64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003e68:	bf04      	itt	eq
1a003e6a:	4301      	orreq	r1, r0
1a003e6c:	2000      	moveq	r0, #0
1a003e6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003e72:	bf88      	it	hi
1a003e74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003e78:	f63f aeaf 	bhi.w	1a003bda <__aeabi_dmul+0xde>
1a003e7c:	ebb5 0c03 	subs.w	ip, r5, r3
1a003e80:	bf04      	itt	eq
1a003e82:	ebb6 0c02 	subseq.w	ip, r6, r2
1a003e86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003e8a:	f150 0000 	adcs.w	r0, r0, #0
1a003e8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003e92:	bd70      	pop	{r4, r5, r6, pc}
1a003e94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003e98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003e9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003ea0:	bfc2      	ittt	gt
1a003ea2:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003ea6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003eaa:	bd70      	popgt	{r4, r5, r6, pc}
1a003eac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003eb0:	f04f 0e00 	mov.w	lr, #0
1a003eb4:	3c01      	subs	r4, #1
1a003eb6:	e690      	b.n	1a003bda <__aeabi_dmul+0xde>
1a003eb8:	ea45 0e06 	orr.w	lr, r5, r6
1a003ebc:	e68d      	b.n	1a003bda <__aeabi_dmul+0xde>
1a003ebe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003ec2:	ea94 0f0c 	teq	r4, ip
1a003ec6:	bf08      	it	eq
1a003ec8:	ea95 0f0c 	teqeq	r5, ip
1a003ecc:	f43f af3b 	beq.w	1a003d46 <__aeabi_dmul+0x24a>
1a003ed0:	ea94 0f0c 	teq	r4, ip
1a003ed4:	d10a      	bne.n	1a003eec <__aeabi_ddiv+0x19c>
1a003ed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003eda:	f47f af34 	bne.w	1a003d46 <__aeabi_dmul+0x24a>
1a003ede:	ea95 0f0c 	teq	r5, ip
1a003ee2:	f47f af25 	bne.w	1a003d30 <__aeabi_dmul+0x234>
1a003ee6:	4610      	mov	r0, r2
1a003ee8:	4619      	mov	r1, r3
1a003eea:	e72c      	b.n	1a003d46 <__aeabi_dmul+0x24a>
1a003eec:	ea95 0f0c 	teq	r5, ip
1a003ef0:	d106      	bne.n	1a003f00 <__aeabi_ddiv+0x1b0>
1a003ef2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003ef6:	f43f aefd 	beq.w	1a003cf4 <__aeabi_dmul+0x1f8>
1a003efa:	4610      	mov	r0, r2
1a003efc:	4619      	mov	r1, r3
1a003efe:	e722      	b.n	1a003d46 <__aeabi_dmul+0x24a>
1a003f00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003f04:	bf18      	it	ne
1a003f06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003f0a:	f47f aec5 	bne.w	1a003c98 <__aeabi_dmul+0x19c>
1a003f0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a003f12:	f47f af0d 	bne.w	1a003d30 <__aeabi_dmul+0x234>
1a003f16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003f1a:	f47f aeeb 	bne.w	1a003cf4 <__aeabi_dmul+0x1f8>
1a003f1e:	e712      	b.n	1a003d46 <__aeabi_dmul+0x24a>

1a003f20 <__gedf2>:
1a003f20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a003f24:	e006      	b.n	1a003f34 <__cmpdf2+0x4>
1a003f26:	bf00      	nop

1a003f28 <__ledf2>:
1a003f28:	f04f 0c01 	mov.w	ip, #1
1a003f2c:	e002      	b.n	1a003f34 <__cmpdf2+0x4>
1a003f2e:	bf00      	nop

1a003f30 <__cmpdf2>:
1a003f30:	f04f 0c01 	mov.w	ip, #1
1a003f34:	f84d cd04 	str.w	ip, [sp, #-4]!
1a003f38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003f3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003f44:	bf18      	it	ne
1a003f46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a003f4a:	d01b      	beq.n	1a003f84 <__cmpdf2+0x54>
1a003f4c:	b001      	add	sp, #4
1a003f4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a003f52:	bf0c      	ite	eq
1a003f54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a003f58:	ea91 0f03 	teqne	r1, r3
1a003f5c:	bf02      	ittt	eq
1a003f5e:	ea90 0f02 	teqeq	r0, r2
1a003f62:	2000      	moveq	r0, #0
1a003f64:	4770      	bxeq	lr
1a003f66:	f110 0f00 	cmn.w	r0, #0
1a003f6a:	ea91 0f03 	teq	r1, r3
1a003f6e:	bf58      	it	pl
1a003f70:	4299      	cmppl	r1, r3
1a003f72:	bf08      	it	eq
1a003f74:	4290      	cmpeq	r0, r2
1a003f76:	bf2c      	ite	cs
1a003f78:	17d8      	asrcs	r0, r3, #31
1a003f7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a003f7e:	f040 0001 	orr.w	r0, r0, #1
1a003f82:	4770      	bx	lr
1a003f84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003f88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003f8c:	d102      	bne.n	1a003f94 <__cmpdf2+0x64>
1a003f8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a003f92:	d107      	bne.n	1a003fa4 <__cmpdf2+0x74>
1a003f94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003f98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003f9c:	d1d6      	bne.n	1a003f4c <__cmpdf2+0x1c>
1a003f9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a003fa2:	d0d3      	beq.n	1a003f4c <__cmpdf2+0x1c>
1a003fa4:	f85d 0b04 	ldr.w	r0, [sp], #4
1a003fa8:	4770      	bx	lr
1a003faa:	bf00      	nop

1a003fac <__aeabi_cdrcmple>:
1a003fac:	4684      	mov	ip, r0
1a003fae:	4610      	mov	r0, r2
1a003fb0:	4662      	mov	r2, ip
1a003fb2:	468c      	mov	ip, r1
1a003fb4:	4619      	mov	r1, r3
1a003fb6:	4663      	mov	r3, ip
1a003fb8:	e000      	b.n	1a003fbc <__aeabi_cdcmpeq>
1a003fba:	bf00      	nop

1a003fbc <__aeabi_cdcmpeq>:
1a003fbc:	b501      	push	{r0, lr}
1a003fbe:	f7ff ffb7 	bl	1a003f30 <__cmpdf2>
1a003fc2:	2800      	cmp	r0, #0
1a003fc4:	bf48      	it	mi
1a003fc6:	f110 0f00 	cmnmi.w	r0, #0
1a003fca:	bd01      	pop	{r0, pc}

1a003fcc <__aeabi_dcmpeq>:
1a003fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003fd0:	f7ff fff4 	bl	1a003fbc <__aeabi_cdcmpeq>
1a003fd4:	bf0c      	ite	eq
1a003fd6:	2001      	moveq	r0, #1
1a003fd8:	2000      	movne	r0, #0
1a003fda:	f85d fb08 	ldr.w	pc, [sp], #8
1a003fde:	bf00      	nop

1a003fe0 <__aeabi_dcmplt>:
1a003fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003fe4:	f7ff ffea 	bl	1a003fbc <__aeabi_cdcmpeq>
1a003fe8:	bf34      	ite	cc
1a003fea:	2001      	movcc	r0, #1
1a003fec:	2000      	movcs	r0, #0
1a003fee:	f85d fb08 	ldr.w	pc, [sp], #8
1a003ff2:	bf00      	nop

1a003ff4 <__aeabi_dcmple>:
1a003ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003ff8:	f7ff ffe0 	bl	1a003fbc <__aeabi_cdcmpeq>
1a003ffc:	bf94      	ite	ls
1a003ffe:	2001      	movls	r0, #1
1a004000:	2000      	movhi	r0, #0
1a004002:	f85d fb08 	ldr.w	pc, [sp], #8
1a004006:	bf00      	nop

1a004008 <__aeabi_dcmpge>:
1a004008:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00400c:	f7ff ffce 	bl	1a003fac <__aeabi_cdrcmple>
1a004010:	bf94      	ite	ls
1a004012:	2001      	movls	r0, #1
1a004014:	2000      	movhi	r0, #0
1a004016:	f85d fb08 	ldr.w	pc, [sp], #8
1a00401a:	bf00      	nop

1a00401c <__aeabi_dcmpgt>:
1a00401c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a004020:	f7ff ffc4 	bl	1a003fac <__aeabi_cdrcmple>
1a004024:	bf34      	ite	cc
1a004026:	2001      	movcc	r0, #1
1a004028:	2000      	movcs	r0, #0
1a00402a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00402e:	bf00      	nop

1a004030 <__aeabi_dcmpun>:
1a004030:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004038:	d102      	bne.n	1a004040 <__aeabi_dcmpun+0x10>
1a00403a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00403e:	d10a      	bne.n	1a004056 <__aeabi_dcmpun+0x26>
1a004040:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a004044:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004048:	d102      	bne.n	1a004050 <__aeabi_dcmpun+0x20>
1a00404a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00404e:	d102      	bne.n	1a004056 <__aeabi_dcmpun+0x26>
1a004050:	f04f 0000 	mov.w	r0, #0
1a004054:	4770      	bx	lr
1a004056:	f04f 0001 	mov.w	r0, #1
1a00405a:	4770      	bx	lr

1a00405c <__aeabi_d2iz>:
1a00405c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a004060:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a004064:	d215      	bcs.n	1a004092 <__aeabi_d2iz+0x36>
1a004066:	d511      	bpl.n	1a00408c <__aeabi_d2iz+0x30>
1a004068:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00406c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a004070:	d912      	bls.n	1a004098 <__aeabi_d2iz+0x3c>
1a004072:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00407a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00407e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004082:	fa23 f002 	lsr.w	r0, r3, r2
1a004086:	bf18      	it	ne
1a004088:	4240      	negne	r0, r0
1a00408a:	4770      	bx	lr
1a00408c:	f04f 0000 	mov.w	r0, #0
1a004090:	4770      	bx	lr
1a004092:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a004096:	d105      	bne.n	1a0040a4 <__aeabi_d2iz+0x48>
1a004098:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00409c:	bf08      	it	eq
1a00409e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a0040a2:	4770      	bx	lr
1a0040a4:	f04f 0000 	mov.w	r0, #0
1a0040a8:	4770      	bx	lr
1a0040aa:	bf00      	nop

1a0040ac <__aeabi_uldivmod>:
1a0040ac:	b953      	cbnz	r3, 1a0040c4 <__aeabi_uldivmod+0x18>
1a0040ae:	b94a      	cbnz	r2, 1a0040c4 <__aeabi_uldivmod+0x18>
1a0040b0:	2900      	cmp	r1, #0
1a0040b2:	bf08      	it	eq
1a0040b4:	2800      	cmpeq	r0, #0
1a0040b6:	bf1c      	itt	ne
1a0040b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0040bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0040c0:	f000 b974 	b.w	1a0043ac <__aeabi_idiv0>
1a0040c4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0040c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0040cc:	f000 f806 	bl	1a0040dc <__udivmoddi4>
1a0040d0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0040d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0040d8:	b004      	add	sp, #16
1a0040da:	4770      	bx	lr

1a0040dc <__udivmoddi4>:
1a0040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0040e0:	9e08      	ldr	r6, [sp, #32]
1a0040e2:	4604      	mov	r4, r0
1a0040e4:	4688      	mov	r8, r1
1a0040e6:	2b00      	cmp	r3, #0
1a0040e8:	f040 8085 	bne.w	1a0041f6 <__udivmoddi4+0x11a>
1a0040ec:	428a      	cmp	r2, r1
1a0040ee:	4615      	mov	r5, r2
1a0040f0:	d948      	bls.n	1a004184 <__udivmoddi4+0xa8>
1a0040f2:	fab2 f282 	clz	r2, r2
1a0040f6:	b14a      	cbz	r2, 1a00410c <__udivmoddi4+0x30>
1a0040f8:	f1c2 0720 	rsb	r7, r2, #32
1a0040fc:	fa01 f302 	lsl.w	r3, r1, r2
1a004100:	fa20 f707 	lsr.w	r7, r0, r7
1a004104:	4095      	lsls	r5, r2
1a004106:	ea47 0803 	orr.w	r8, r7, r3
1a00410a:	4094      	lsls	r4, r2
1a00410c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004110:	0c23      	lsrs	r3, r4, #16
1a004112:	fbb8 f7fe 	udiv	r7, r8, lr
1a004116:	fa1f fc85 	uxth.w	ip, r5
1a00411a:	fb0e 8817 	mls	r8, lr, r7, r8
1a00411e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004122:	fb07 f10c 	mul.w	r1, r7, ip
1a004126:	4299      	cmp	r1, r3
1a004128:	d909      	bls.n	1a00413e <__udivmoddi4+0x62>
1a00412a:	18eb      	adds	r3, r5, r3
1a00412c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004130:	f080 80e3 	bcs.w	1a0042fa <__udivmoddi4+0x21e>
1a004134:	4299      	cmp	r1, r3
1a004136:	f240 80e0 	bls.w	1a0042fa <__udivmoddi4+0x21e>
1a00413a:	3f02      	subs	r7, #2
1a00413c:	442b      	add	r3, r5
1a00413e:	1a5b      	subs	r3, r3, r1
1a004140:	b2a4      	uxth	r4, r4
1a004142:	fbb3 f0fe 	udiv	r0, r3, lr
1a004146:	fb0e 3310 	mls	r3, lr, r0, r3
1a00414a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00414e:	fb00 fc0c 	mul.w	ip, r0, ip
1a004152:	45a4      	cmp	ip, r4
1a004154:	d909      	bls.n	1a00416a <__udivmoddi4+0x8e>
1a004156:	192c      	adds	r4, r5, r4
1a004158:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00415c:	f080 80cb 	bcs.w	1a0042f6 <__udivmoddi4+0x21a>
1a004160:	45a4      	cmp	ip, r4
1a004162:	f240 80c8 	bls.w	1a0042f6 <__udivmoddi4+0x21a>
1a004166:	3802      	subs	r0, #2
1a004168:	442c      	add	r4, r5
1a00416a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00416e:	eba4 040c 	sub.w	r4, r4, ip
1a004172:	2700      	movs	r7, #0
1a004174:	b11e      	cbz	r6, 1a00417e <__udivmoddi4+0xa2>
1a004176:	40d4      	lsrs	r4, r2
1a004178:	2300      	movs	r3, #0
1a00417a:	e9c6 4300 	strd	r4, r3, [r6]
1a00417e:	4639      	mov	r1, r7
1a004180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004184:	2a00      	cmp	r2, #0
1a004186:	d053      	beq.n	1a004230 <__udivmoddi4+0x154>
1a004188:	fab2 f282 	clz	r2, r2
1a00418c:	2a00      	cmp	r2, #0
1a00418e:	f040 80b6 	bne.w	1a0042fe <__udivmoddi4+0x222>
1a004192:	1b49      	subs	r1, r1, r5
1a004194:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004198:	fa1f f885 	uxth.w	r8, r5
1a00419c:	2701      	movs	r7, #1
1a00419e:	fbb1 fcfe 	udiv	ip, r1, lr
1a0041a2:	0c23      	lsrs	r3, r4, #16
1a0041a4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0041a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0041ac:	fb08 f10c 	mul.w	r1, r8, ip
1a0041b0:	4299      	cmp	r1, r3
1a0041b2:	d907      	bls.n	1a0041c4 <__udivmoddi4+0xe8>
1a0041b4:	18eb      	adds	r3, r5, r3
1a0041b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0041ba:	d202      	bcs.n	1a0041c2 <__udivmoddi4+0xe6>
1a0041bc:	4299      	cmp	r1, r3
1a0041be:	f200 80ec 	bhi.w	1a00439a <__udivmoddi4+0x2be>
1a0041c2:	4684      	mov	ip, r0
1a0041c4:	1a59      	subs	r1, r3, r1
1a0041c6:	b2a3      	uxth	r3, r4
1a0041c8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0041cc:	fb0e 1410 	mls	r4, lr, r0, r1
1a0041d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0041d4:	fb08 f800 	mul.w	r8, r8, r0
1a0041d8:	45a0      	cmp	r8, r4
1a0041da:	d907      	bls.n	1a0041ec <__udivmoddi4+0x110>
1a0041dc:	192c      	adds	r4, r5, r4
1a0041de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0041e2:	d202      	bcs.n	1a0041ea <__udivmoddi4+0x10e>
1a0041e4:	45a0      	cmp	r8, r4
1a0041e6:	f200 80dc 	bhi.w	1a0043a2 <__udivmoddi4+0x2c6>
1a0041ea:	4618      	mov	r0, r3
1a0041ec:	eba4 0408 	sub.w	r4, r4, r8
1a0041f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0041f4:	e7be      	b.n	1a004174 <__udivmoddi4+0x98>
1a0041f6:	428b      	cmp	r3, r1
1a0041f8:	d908      	bls.n	1a00420c <__udivmoddi4+0x130>
1a0041fa:	2e00      	cmp	r6, #0
1a0041fc:	d078      	beq.n	1a0042f0 <__udivmoddi4+0x214>
1a0041fe:	2700      	movs	r7, #0
1a004200:	e9c6 0100 	strd	r0, r1, [r6]
1a004204:	4638      	mov	r0, r7
1a004206:	4639      	mov	r1, r7
1a004208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00420c:	fab3 f783 	clz	r7, r3
1a004210:	b97f      	cbnz	r7, 1a004232 <__udivmoddi4+0x156>
1a004212:	428b      	cmp	r3, r1
1a004214:	d302      	bcc.n	1a00421c <__udivmoddi4+0x140>
1a004216:	4282      	cmp	r2, r0
1a004218:	f200 80bd 	bhi.w	1a004396 <__udivmoddi4+0x2ba>
1a00421c:	1a84      	subs	r4, r0, r2
1a00421e:	eb61 0303 	sbc.w	r3, r1, r3
1a004222:	2001      	movs	r0, #1
1a004224:	4698      	mov	r8, r3
1a004226:	2e00      	cmp	r6, #0
1a004228:	d0a9      	beq.n	1a00417e <__udivmoddi4+0xa2>
1a00422a:	e9c6 4800 	strd	r4, r8, [r6]
1a00422e:	e7a6      	b.n	1a00417e <__udivmoddi4+0xa2>
1a004230:	deff      	udf	#255	; 0xff
1a004232:	f1c7 0520 	rsb	r5, r7, #32
1a004236:	40bb      	lsls	r3, r7
1a004238:	fa22 fc05 	lsr.w	ip, r2, r5
1a00423c:	ea4c 0c03 	orr.w	ip, ip, r3
1a004240:	fa01 f407 	lsl.w	r4, r1, r7
1a004244:	fa20 f805 	lsr.w	r8, r0, r5
1a004248:	fa21 f305 	lsr.w	r3, r1, r5
1a00424c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004250:	ea48 0404 	orr.w	r4, r8, r4
1a004254:	fbb3 f9fe 	udiv	r9, r3, lr
1a004258:	0c21      	lsrs	r1, r4, #16
1a00425a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00425e:	fa1f f88c 	uxth.w	r8, ip
1a004262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004266:	fb09 fa08 	mul.w	sl, r9, r8
1a00426a:	459a      	cmp	sl, r3
1a00426c:	fa02 f207 	lsl.w	r2, r2, r7
1a004270:	fa00 f107 	lsl.w	r1, r0, r7
1a004274:	d90b      	bls.n	1a00428e <__udivmoddi4+0x1b2>
1a004276:	eb1c 0303 	adds.w	r3, ip, r3
1a00427a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00427e:	f080 8088 	bcs.w	1a004392 <__udivmoddi4+0x2b6>
1a004282:	459a      	cmp	sl, r3
1a004284:	f240 8085 	bls.w	1a004392 <__udivmoddi4+0x2b6>
1a004288:	f1a9 0902 	sub.w	r9, r9, #2
1a00428c:	4463      	add	r3, ip
1a00428e:	eba3 030a 	sub.w	r3, r3, sl
1a004292:	b2a4      	uxth	r4, r4
1a004294:	fbb3 f0fe 	udiv	r0, r3, lr
1a004298:	fb0e 3310 	mls	r3, lr, r0, r3
1a00429c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0042a0:	fb00 f808 	mul.w	r8, r0, r8
1a0042a4:	45a0      	cmp	r8, r4
1a0042a6:	d908      	bls.n	1a0042ba <__udivmoddi4+0x1de>
1a0042a8:	eb1c 0404 	adds.w	r4, ip, r4
1a0042ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0042b0:	d26b      	bcs.n	1a00438a <__udivmoddi4+0x2ae>
1a0042b2:	45a0      	cmp	r8, r4
1a0042b4:	d969      	bls.n	1a00438a <__udivmoddi4+0x2ae>
1a0042b6:	3802      	subs	r0, #2
1a0042b8:	4464      	add	r4, ip
1a0042ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0042be:	eba4 0408 	sub.w	r4, r4, r8
1a0042c2:	fba0 8902 	umull	r8, r9, r0, r2
1a0042c6:	454c      	cmp	r4, r9
1a0042c8:	46c6      	mov	lr, r8
1a0042ca:	464b      	mov	r3, r9
1a0042cc:	d354      	bcc.n	1a004378 <__udivmoddi4+0x29c>
1a0042ce:	d051      	beq.n	1a004374 <__udivmoddi4+0x298>
1a0042d0:	2e00      	cmp	r6, #0
1a0042d2:	d069      	beq.n	1a0043a8 <__udivmoddi4+0x2cc>
1a0042d4:	ebb1 020e 	subs.w	r2, r1, lr
1a0042d8:	eb64 0403 	sbc.w	r4, r4, r3
1a0042dc:	fa04 f505 	lsl.w	r5, r4, r5
1a0042e0:	fa22 f307 	lsr.w	r3, r2, r7
1a0042e4:	40fc      	lsrs	r4, r7
1a0042e6:	431d      	orrs	r5, r3
1a0042e8:	e9c6 5400 	strd	r5, r4, [r6]
1a0042ec:	2700      	movs	r7, #0
1a0042ee:	e746      	b.n	1a00417e <__udivmoddi4+0xa2>
1a0042f0:	4637      	mov	r7, r6
1a0042f2:	4630      	mov	r0, r6
1a0042f4:	e743      	b.n	1a00417e <__udivmoddi4+0xa2>
1a0042f6:	4618      	mov	r0, r3
1a0042f8:	e737      	b.n	1a00416a <__udivmoddi4+0x8e>
1a0042fa:	4607      	mov	r7, r0
1a0042fc:	e71f      	b.n	1a00413e <__udivmoddi4+0x62>
1a0042fe:	f1c2 0320 	rsb	r3, r2, #32
1a004302:	fa20 f703 	lsr.w	r7, r0, r3
1a004306:	4095      	lsls	r5, r2
1a004308:	fa01 f002 	lsl.w	r0, r1, r2
1a00430c:	fa21 f303 	lsr.w	r3, r1, r3
1a004310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004314:	4338      	orrs	r0, r7
1a004316:	0c01      	lsrs	r1, r0, #16
1a004318:	fbb3 f7fe 	udiv	r7, r3, lr
1a00431c:	fa1f f885 	uxth.w	r8, r5
1a004320:	fb0e 3317 	mls	r3, lr, r7, r3
1a004324:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004328:	fb07 f308 	mul.w	r3, r7, r8
1a00432c:	428b      	cmp	r3, r1
1a00432e:	fa04 f402 	lsl.w	r4, r4, r2
1a004332:	d907      	bls.n	1a004344 <__udivmoddi4+0x268>
1a004334:	1869      	adds	r1, r5, r1
1a004336:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00433a:	d228      	bcs.n	1a00438e <__udivmoddi4+0x2b2>
1a00433c:	428b      	cmp	r3, r1
1a00433e:	d926      	bls.n	1a00438e <__udivmoddi4+0x2b2>
1a004340:	3f02      	subs	r7, #2
1a004342:	4429      	add	r1, r5
1a004344:	1acb      	subs	r3, r1, r3
1a004346:	b281      	uxth	r1, r0
1a004348:	fbb3 f0fe 	udiv	r0, r3, lr
1a00434c:	fb0e 3310 	mls	r3, lr, r0, r3
1a004350:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004354:	fb00 f308 	mul.w	r3, r0, r8
1a004358:	428b      	cmp	r3, r1
1a00435a:	d907      	bls.n	1a00436c <__udivmoddi4+0x290>
1a00435c:	1869      	adds	r1, r5, r1
1a00435e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004362:	d210      	bcs.n	1a004386 <__udivmoddi4+0x2aa>
1a004364:	428b      	cmp	r3, r1
1a004366:	d90e      	bls.n	1a004386 <__udivmoddi4+0x2aa>
1a004368:	3802      	subs	r0, #2
1a00436a:	4429      	add	r1, r5
1a00436c:	1ac9      	subs	r1, r1, r3
1a00436e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004372:	e714      	b.n	1a00419e <__udivmoddi4+0xc2>
1a004374:	4541      	cmp	r1, r8
1a004376:	d2ab      	bcs.n	1a0042d0 <__udivmoddi4+0x1f4>
1a004378:	ebb8 0e02 	subs.w	lr, r8, r2
1a00437c:	eb69 020c 	sbc.w	r2, r9, ip
1a004380:	3801      	subs	r0, #1
1a004382:	4613      	mov	r3, r2
1a004384:	e7a4      	b.n	1a0042d0 <__udivmoddi4+0x1f4>
1a004386:	4660      	mov	r0, ip
1a004388:	e7f0      	b.n	1a00436c <__udivmoddi4+0x290>
1a00438a:	4618      	mov	r0, r3
1a00438c:	e795      	b.n	1a0042ba <__udivmoddi4+0x1de>
1a00438e:	4667      	mov	r7, ip
1a004390:	e7d8      	b.n	1a004344 <__udivmoddi4+0x268>
1a004392:	4681      	mov	r9, r0
1a004394:	e77b      	b.n	1a00428e <__udivmoddi4+0x1b2>
1a004396:	4638      	mov	r0, r7
1a004398:	e745      	b.n	1a004226 <__udivmoddi4+0x14a>
1a00439a:	f1ac 0c02 	sub.w	ip, ip, #2
1a00439e:	442b      	add	r3, r5
1a0043a0:	e710      	b.n	1a0041c4 <__udivmoddi4+0xe8>
1a0043a2:	3802      	subs	r0, #2
1a0043a4:	442c      	add	r4, r5
1a0043a6:	e721      	b.n	1a0041ec <__udivmoddi4+0x110>
1a0043a8:	4637      	mov	r7, r6
1a0043aa:	e6e8      	b.n	1a00417e <__udivmoddi4+0xa2>

1a0043ac <__aeabi_idiv0>:
1a0043ac:	4770      	bx	lr
1a0043ae:	bf00      	nop

1a0043b0 <_fclose_r>:
1a0043b0:	b570      	push	{r4, r5, r6, lr}
1a0043b2:	2900      	cmp	r1, #0
1a0043b4:	d04a      	beq.n	1a00444c <_fclose_r+0x9c>
1a0043b6:	4605      	mov	r5, r0
1a0043b8:	460c      	mov	r4, r1
1a0043ba:	b110      	cbz	r0, 1a0043c2 <_fclose_r+0x12>
1a0043bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0043be:	2b00      	cmp	r3, #0
1a0043c0:	d047      	beq.n	1a004452 <_fclose_r+0xa2>
1a0043c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0043c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0043c8:	07d8      	lsls	r0, r3, #31
1a0043ca:	d532      	bpl.n	1a004432 <_fclose_r+0x82>
1a0043cc:	2a00      	cmp	r2, #0
1a0043ce:	d03d      	beq.n	1a00444c <_fclose_r+0x9c>
1a0043d0:	4621      	mov	r1, r4
1a0043d2:	4628      	mov	r0, r5
1a0043d4:	f000 f854 	bl	1a004480 <__sflush_r>
1a0043d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0043da:	4606      	mov	r6, r0
1a0043dc:	b133      	cbz	r3, 1a0043ec <_fclose_r+0x3c>
1a0043de:	69e1      	ldr	r1, [r4, #28]
1a0043e0:	4628      	mov	r0, r5
1a0043e2:	4798      	blx	r3
1a0043e4:	2800      	cmp	r0, #0
1a0043e6:	bfb8      	it	lt
1a0043e8:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a0043ec:	89a3      	ldrh	r3, [r4, #12]
1a0043ee:	061a      	lsls	r2, r3, #24
1a0043f0:	d43c      	bmi.n	1a00446c <_fclose_r+0xbc>
1a0043f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a0043f4:	b141      	cbz	r1, 1a004408 <_fclose_r+0x58>
1a0043f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a0043fa:	4299      	cmp	r1, r3
1a0043fc:	d002      	beq.n	1a004404 <_fclose_r+0x54>
1a0043fe:	4628      	mov	r0, r5
1a004400:	f000 f9c6 	bl	1a004790 <_free_r>
1a004404:	2300      	movs	r3, #0
1a004406:	6323      	str	r3, [r4, #48]	; 0x30
1a004408:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a00440a:	b121      	cbz	r1, 1a004416 <_fclose_r+0x66>
1a00440c:	4628      	mov	r0, r5
1a00440e:	f000 f9bf 	bl	1a004790 <_free_r>
1a004412:	2300      	movs	r3, #0
1a004414:	6463      	str	r3, [r4, #68]	; 0x44
1a004416:	f000 f95f 	bl	1a0046d8 <__sfp_lock_acquire>
1a00441a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00441c:	2200      	movs	r2, #0
1a00441e:	07db      	lsls	r3, r3, #31
1a004420:	81a2      	strh	r2, [r4, #12]
1a004422:	d528      	bpl.n	1a004476 <_fclose_r+0xc6>
1a004424:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004426:	f000 faf9 	bl	1a004a1c <__retarget_lock_close_recursive>
1a00442a:	f000 f95b 	bl	1a0046e4 <__sfp_lock_release>
1a00442e:	4630      	mov	r0, r6
1a004430:	bd70      	pop	{r4, r5, r6, pc}
1a004432:	0591      	lsls	r1, r2, #22
1a004434:	d4cc      	bmi.n	1a0043d0 <_fclose_r+0x20>
1a004436:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004438:	f000 faf2 	bl	1a004a20 <__retarget_lock_acquire_recursive>
1a00443c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004440:	2b00      	cmp	r3, #0
1a004442:	d1c5      	bne.n	1a0043d0 <_fclose_r+0x20>
1a004444:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a004446:	f016 0601 	ands.w	r6, r6, #1
1a00444a:	d00a      	beq.n	1a004462 <_fclose_r+0xb2>
1a00444c:	2600      	movs	r6, #0
1a00444e:	4630      	mov	r0, r6
1a004450:	bd70      	pop	{r4, r5, r6, pc}
1a004452:	f000 f917 	bl	1a004684 <__sinit>
1a004456:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00445c:	07d8      	lsls	r0, r3, #31
1a00445e:	d4b5      	bmi.n	1a0043cc <_fclose_r+0x1c>
1a004460:	e7e7      	b.n	1a004432 <_fclose_r+0x82>
1a004462:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004464:	f000 fade 	bl	1a004a24 <__retarget_lock_release_recursive>
1a004468:	4630      	mov	r0, r6
1a00446a:	bd70      	pop	{r4, r5, r6, pc}
1a00446c:	6921      	ldr	r1, [r4, #16]
1a00446e:	4628      	mov	r0, r5
1a004470:	f000 f98e 	bl	1a004790 <_free_r>
1a004474:	e7bd      	b.n	1a0043f2 <_fclose_r+0x42>
1a004476:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004478:	f000 fad4 	bl	1a004a24 <__retarget_lock_release_recursive>
1a00447c:	e7d2      	b.n	1a004424 <_fclose_r+0x74>
1a00447e:	bf00      	nop

1a004480 <__sflush_r>:
1a004480:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a004484:	b29a      	uxth	r2, r3
1a004486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00448a:	460c      	mov	r4, r1
1a00448c:	0711      	lsls	r1, r2, #28
1a00448e:	4680      	mov	r8, r0
1a004490:	d448      	bmi.n	1a004524 <__sflush_r+0xa4>
1a004492:	6862      	ldr	r2, [r4, #4]
1a004494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004498:	2a00      	cmp	r2, #0
1a00449a:	81a3      	strh	r3, [r4, #12]
1a00449c:	dd5d      	ble.n	1a00455a <__sflush_r+0xda>
1a00449e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a0044a0:	2d00      	cmp	r5, #0
1a0044a2:	d057      	beq.n	1a004554 <__sflush_r+0xd4>
1a0044a4:	2200      	movs	r2, #0
1a0044a6:	b29b      	uxth	r3, r3
1a0044a8:	f8d8 6000 	ldr.w	r6, [r8]
1a0044ac:	69e1      	ldr	r1, [r4, #28]
1a0044ae:	f8c8 2000 	str.w	r2, [r8]
1a0044b2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a0044b6:	d154      	bne.n	1a004562 <__sflush_r+0xe2>
1a0044b8:	2301      	movs	r3, #1
1a0044ba:	4640      	mov	r0, r8
1a0044bc:	47a8      	blx	r5
1a0044be:	1c43      	adds	r3, r0, #1
1a0044c0:	4602      	mov	r2, r0
1a0044c2:	d065      	beq.n	1a004590 <__sflush_r+0x110>
1a0044c4:	89a3      	ldrh	r3, [r4, #12]
1a0044c6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a0044c8:	69e1      	ldr	r1, [r4, #28]
1a0044ca:	075f      	lsls	r7, r3, #29
1a0044cc:	d505      	bpl.n	1a0044da <__sflush_r+0x5a>
1a0044ce:	6860      	ldr	r0, [r4, #4]
1a0044d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0044d2:	1a12      	subs	r2, r2, r0
1a0044d4:	b10b      	cbz	r3, 1a0044da <__sflush_r+0x5a>
1a0044d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0044d8:	1ad2      	subs	r2, r2, r3
1a0044da:	2300      	movs	r3, #0
1a0044dc:	4640      	mov	r0, r8
1a0044de:	47a8      	blx	r5
1a0044e0:	1c45      	adds	r5, r0, #1
1a0044e2:	d148      	bne.n	1a004576 <__sflush_r+0xf6>
1a0044e4:	f8d8 2000 	ldr.w	r2, [r8]
1a0044e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0044ec:	2a00      	cmp	r2, #0
1a0044ee:	d05c      	beq.n	1a0045aa <__sflush_r+0x12a>
1a0044f0:	2a1d      	cmp	r2, #29
1a0044f2:	d001      	beq.n	1a0044f8 <__sflush_r+0x78>
1a0044f4:	2a16      	cmp	r2, #22
1a0044f6:	d164      	bne.n	1a0045c2 <__sflush_r+0x142>
1a0044f8:	6922      	ldr	r2, [r4, #16]
1a0044fa:	2100      	movs	r1, #0
1a0044fc:	e9c4 2100 	strd	r2, r1, [r4]
1a004500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a004504:	81a3      	strh	r3, [r4, #12]
1a004506:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a004508:	f8c8 6000 	str.w	r6, [r8]
1a00450c:	b311      	cbz	r1, 1a004554 <__sflush_r+0xd4>
1a00450e:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a004512:	4299      	cmp	r1, r3
1a004514:	d002      	beq.n	1a00451c <__sflush_r+0x9c>
1a004516:	4640      	mov	r0, r8
1a004518:	f000 f93a 	bl	1a004790 <_free_r>
1a00451c:	2000      	movs	r0, #0
1a00451e:	6320      	str	r0, [r4, #48]	; 0x30
1a004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004524:	6926      	ldr	r6, [r4, #16]
1a004526:	b1ae      	cbz	r6, 1a004554 <__sflush_r+0xd4>
1a004528:	6825      	ldr	r5, [r4, #0]
1a00452a:	6026      	str	r6, [r4, #0]
1a00452c:	0791      	lsls	r1, r2, #30
1a00452e:	bf0c      	ite	eq
1a004530:	6963      	ldreq	r3, [r4, #20]
1a004532:	2300      	movne	r3, #0
1a004534:	1bad      	subs	r5, r5, r6
1a004536:	60a3      	str	r3, [r4, #8]
1a004538:	e00a      	b.n	1a004550 <__sflush_r+0xd0>
1a00453a:	462b      	mov	r3, r5
1a00453c:	4632      	mov	r2, r6
1a00453e:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a004540:	69e1      	ldr	r1, [r4, #28]
1a004542:	4640      	mov	r0, r8
1a004544:	47b8      	blx	r7
1a004546:	2800      	cmp	r0, #0
1a004548:	eba5 0500 	sub.w	r5, r5, r0
1a00454c:	4406      	add	r6, r0
1a00454e:	dd0a      	ble.n	1a004566 <__sflush_r+0xe6>
1a004550:	2d00      	cmp	r5, #0
1a004552:	dcf2      	bgt.n	1a00453a <__sflush_r+0xba>
1a004554:	2000      	movs	r0, #0
1a004556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00455a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00455c:	2a00      	cmp	r2, #0
1a00455e:	dc9e      	bgt.n	1a00449e <__sflush_r+0x1e>
1a004560:	e7f8      	b.n	1a004554 <__sflush_r+0xd4>
1a004562:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a004564:	e7b1      	b.n	1a0044ca <__sflush_r+0x4a>
1a004566:	89a3      	ldrh	r3, [r4, #12]
1a004568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00456c:	81a3      	strh	r3, [r4, #12]
1a00456e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00457a:	6922      	ldr	r2, [r4, #16]
1a00457c:	6022      	str	r2, [r4, #0]
1a00457e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a004582:	2200      	movs	r2, #0
1a004584:	6062      	str	r2, [r4, #4]
1a004586:	04da      	lsls	r2, r3, #19
1a004588:	81a3      	strh	r3, [r4, #12]
1a00458a:	d5bc      	bpl.n	1a004506 <__sflush_r+0x86>
1a00458c:	6520      	str	r0, [r4, #80]	; 0x50
1a00458e:	e7ba      	b.n	1a004506 <__sflush_r+0x86>
1a004590:	f8d8 3000 	ldr.w	r3, [r8]
1a004594:	2b00      	cmp	r3, #0
1a004596:	d095      	beq.n	1a0044c4 <__sflush_r+0x44>
1a004598:	2b1d      	cmp	r3, #29
1a00459a:	d00f      	beq.n	1a0045bc <__sflush_r+0x13c>
1a00459c:	2b16      	cmp	r3, #22
1a00459e:	d00d      	beq.n	1a0045bc <__sflush_r+0x13c>
1a0045a0:	89a3      	ldrh	r3, [r4, #12]
1a0045a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0045a6:	81a3      	strh	r3, [r4, #12]
1a0045a8:	e7d5      	b.n	1a004556 <__sflush_r+0xd6>
1a0045aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a0045ae:	6921      	ldr	r1, [r4, #16]
1a0045b0:	81a3      	strh	r3, [r4, #12]
1a0045b2:	04db      	lsls	r3, r3, #19
1a0045b4:	e9c4 1200 	strd	r1, r2, [r4]
1a0045b8:	d5a5      	bpl.n	1a004506 <__sflush_r+0x86>
1a0045ba:	e7e7      	b.n	1a00458c <__sflush_r+0x10c>
1a0045bc:	f8c8 6000 	str.w	r6, [r8]
1a0045c0:	e7c8      	b.n	1a004554 <__sflush_r+0xd4>
1a0045c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0045c6:	81a3      	strh	r3, [r4, #12]
1a0045c8:	e7c5      	b.n	1a004556 <__sflush_r+0xd6>
1a0045ca:	bf00      	nop

1a0045cc <_fflush_r>:
1a0045cc:	b538      	push	{r3, r4, r5, lr}
1a0045ce:	460d      	mov	r5, r1
1a0045d0:	4604      	mov	r4, r0
1a0045d2:	b108      	cbz	r0, 1a0045d8 <_fflush_r+0xc>
1a0045d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0045d6:	b1a3      	cbz	r3, 1a004602 <_fflush_r+0x36>
1a0045d8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a0045dc:	b1b8      	cbz	r0, 1a00460e <_fflush_r+0x42>
1a0045de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0045e0:	07db      	lsls	r3, r3, #31
1a0045e2:	d401      	bmi.n	1a0045e8 <_fflush_r+0x1c>
1a0045e4:	0581      	lsls	r1, r0, #22
1a0045e6:	d515      	bpl.n	1a004614 <_fflush_r+0x48>
1a0045e8:	4620      	mov	r0, r4
1a0045ea:	4629      	mov	r1, r5
1a0045ec:	f7ff ff48 	bl	1a004480 <__sflush_r>
1a0045f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0045f2:	07da      	lsls	r2, r3, #31
1a0045f4:	4604      	mov	r4, r0
1a0045f6:	d402      	bmi.n	1a0045fe <_fflush_r+0x32>
1a0045f8:	89ab      	ldrh	r3, [r5, #12]
1a0045fa:	059b      	lsls	r3, r3, #22
1a0045fc:	d50e      	bpl.n	1a00461c <_fflush_r+0x50>
1a0045fe:	4620      	mov	r0, r4
1a004600:	bd38      	pop	{r3, r4, r5, pc}
1a004602:	f000 f83f 	bl	1a004684 <__sinit>
1a004606:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a00460a:	2800      	cmp	r0, #0
1a00460c:	d1e7      	bne.n	1a0045de <_fflush_r+0x12>
1a00460e:	4604      	mov	r4, r0
1a004610:	4620      	mov	r0, r4
1a004612:	bd38      	pop	{r3, r4, r5, pc}
1a004614:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004616:	f000 fa03 	bl	1a004a20 <__retarget_lock_acquire_recursive>
1a00461a:	e7e5      	b.n	1a0045e8 <_fflush_r+0x1c>
1a00461c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00461e:	f000 fa01 	bl	1a004a24 <__retarget_lock_release_recursive>
1a004622:	4620      	mov	r0, r4
1a004624:	bd38      	pop	{r3, r4, r5, pc}
1a004626:	bf00      	nop

1a004628 <std>:
1a004628:	b510      	push	{r4, lr}
1a00462a:	2300      	movs	r3, #0
1a00462c:	4604      	mov	r4, r0
1a00462e:	8181      	strh	r1, [r0, #12]
1a004630:	81c2      	strh	r2, [r0, #14]
1a004632:	e9c0 3300 	strd	r3, r3, [r0]
1a004636:	6083      	str	r3, [r0, #8]
1a004638:	6643      	str	r3, [r0, #100]	; 0x64
1a00463a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00463e:	6183      	str	r3, [r0, #24]
1a004640:	4619      	mov	r1, r3
1a004642:	2208      	movs	r2, #8
1a004644:	305c      	adds	r0, #92	; 0x5c
1a004646:	f000 fd41 	bl	1a0050cc <memset>
1a00464a:	4807      	ldr	r0, [pc, #28]	; (1a004668 <std+0x40>)
1a00464c:	4907      	ldr	r1, [pc, #28]	; (1a00466c <std+0x44>)
1a00464e:	4a08      	ldr	r2, [pc, #32]	; (1a004670 <std+0x48>)
1a004650:	4b08      	ldr	r3, [pc, #32]	; (1a004674 <std+0x4c>)
1a004652:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004654:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a004658:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a00465c:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a004660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004664:	f000 b9d8 	b.w	1a004a18 <__retarget_lock_init_recursive>
1a004668:	1a0052e5 	.word	0x1a0052e5
1a00466c:	1a005309 	.word	0x1a005309
1a004670:	1a005349 	.word	0x1a005349
1a004674:	1a005369 	.word	0x1a005369

1a004678 <_cleanup_r>:
1a004678:	4901      	ldr	r1, [pc, #4]	; (1a004680 <_cleanup_r+0x8>)
1a00467a:	f000 b97f 	b.w	1a00497c <_fwalk_reent>
1a00467e:	bf00      	nop
1a004680:	1a0043b1 	.word	0x1a0043b1

1a004684 <__sinit>:
1a004684:	b510      	push	{r4, lr}
1a004686:	4604      	mov	r4, r0
1a004688:	4811      	ldr	r0, [pc, #68]	; (1a0046d0 <__sinit+0x4c>)
1a00468a:	f000 f9c9 	bl	1a004a20 <__retarget_lock_acquire_recursive>
1a00468e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a004690:	b9c2      	cbnz	r2, 1a0046c4 <__sinit+0x40>
1a004692:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a004696:	480f      	ldr	r0, [pc, #60]	; (1a0046d4 <__sinit+0x50>)
1a004698:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a00469c:	2103      	movs	r1, #3
1a00469e:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a0046a2:	63e0      	str	r0, [r4, #60]	; 0x3c
1a0046a4:	2104      	movs	r1, #4
1a0046a6:	6860      	ldr	r0, [r4, #4]
1a0046a8:	f7ff ffbe 	bl	1a004628 <std>
1a0046ac:	2201      	movs	r2, #1
1a0046ae:	2109      	movs	r1, #9
1a0046b0:	68a0      	ldr	r0, [r4, #8]
1a0046b2:	f7ff ffb9 	bl	1a004628 <std>
1a0046b6:	2202      	movs	r2, #2
1a0046b8:	2112      	movs	r1, #18
1a0046ba:	68e0      	ldr	r0, [r4, #12]
1a0046bc:	f7ff ffb4 	bl	1a004628 <std>
1a0046c0:	2301      	movs	r3, #1
1a0046c2:	63a3      	str	r3, [r4, #56]	; 0x38
1a0046c4:	4802      	ldr	r0, [pc, #8]	; (1a0046d0 <__sinit+0x4c>)
1a0046c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0046ca:	f000 b9ab 	b.w	1a004a24 <__retarget_lock_release_recursive>
1a0046ce:	bf00      	nop
1a0046d0:	10003d20 	.word	0x10003d20
1a0046d4:	1a004679 	.word	0x1a004679

1a0046d8 <__sfp_lock_acquire>:
1a0046d8:	4801      	ldr	r0, [pc, #4]	; (1a0046e0 <__sfp_lock_acquire+0x8>)
1a0046da:	f000 b9a1 	b.w	1a004a20 <__retarget_lock_acquire_recursive>
1a0046de:	bf00      	nop
1a0046e0:	10003d34 	.word	0x10003d34

1a0046e4 <__sfp_lock_release>:
1a0046e4:	4801      	ldr	r0, [pc, #4]	; (1a0046ec <__sfp_lock_release+0x8>)
1a0046e6:	f000 b99d 	b.w	1a004a24 <__retarget_lock_release_recursive>
1a0046ea:	bf00      	nop
1a0046ec:	10003d34 	.word	0x10003d34

1a0046f0 <_malloc_trim_r>:
1a0046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0046f2:	4f24      	ldr	r7, [pc, #144]	; (1a004784 <_malloc_trim_r+0x94>)
1a0046f4:	460c      	mov	r4, r1
1a0046f6:	4606      	mov	r6, r0
1a0046f8:	f000 fd38 	bl	1a00516c <__malloc_lock>
1a0046fc:	68bb      	ldr	r3, [r7, #8]
1a0046fe:	685d      	ldr	r5, [r3, #4]
1a004700:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a004704:	310f      	adds	r1, #15
1a004706:	f025 0503 	bic.w	r5, r5, #3
1a00470a:	4429      	add	r1, r5
1a00470c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a004710:	f021 010f 	bic.w	r1, r1, #15
1a004714:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a004718:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a00471c:	db07      	blt.n	1a00472e <_malloc_trim_r+0x3e>
1a00471e:	2100      	movs	r1, #0
1a004720:	4630      	mov	r0, r6
1a004722:	f7fc f851 	bl	1a0007c8 <_sbrk_r>
1a004726:	68bb      	ldr	r3, [r7, #8]
1a004728:	442b      	add	r3, r5
1a00472a:	4298      	cmp	r0, r3
1a00472c:	d004      	beq.n	1a004738 <_malloc_trim_r+0x48>
1a00472e:	4630      	mov	r0, r6
1a004730:	f000 fd22 	bl	1a005178 <__malloc_unlock>
1a004734:	2000      	movs	r0, #0
1a004736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004738:	4261      	negs	r1, r4
1a00473a:	4630      	mov	r0, r6
1a00473c:	f7fc f844 	bl	1a0007c8 <_sbrk_r>
1a004740:	3001      	adds	r0, #1
1a004742:	d00d      	beq.n	1a004760 <_malloc_trim_r+0x70>
1a004744:	4b10      	ldr	r3, [pc, #64]	; (1a004788 <_malloc_trim_r+0x98>)
1a004746:	68ba      	ldr	r2, [r7, #8]
1a004748:	6819      	ldr	r1, [r3, #0]
1a00474a:	1b2d      	subs	r5, r5, r4
1a00474c:	f045 0501 	orr.w	r5, r5, #1
1a004750:	4630      	mov	r0, r6
1a004752:	1b09      	subs	r1, r1, r4
1a004754:	6055      	str	r5, [r2, #4]
1a004756:	6019      	str	r1, [r3, #0]
1a004758:	f000 fd0e 	bl	1a005178 <__malloc_unlock>
1a00475c:	2001      	movs	r0, #1
1a00475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004760:	2100      	movs	r1, #0
1a004762:	4630      	mov	r0, r6
1a004764:	f7fc f830 	bl	1a0007c8 <_sbrk_r>
1a004768:	68ba      	ldr	r2, [r7, #8]
1a00476a:	1a83      	subs	r3, r0, r2
1a00476c:	2b0f      	cmp	r3, #15
1a00476e:	ddde      	ble.n	1a00472e <_malloc_trim_r+0x3e>
1a004770:	4c06      	ldr	r4, [pc, #24]	; (1a00478c <_malloc_trim_r+0x9c>)
1a004772:	4905      	ldr	r1, [pc, #20]	; (1a004788 <_malloc_trim_r+0x98>)
1a004774:	6824      	ldr	r4, [r4, #0]
1a004776:	f043 0301 	orr.w	r3, r3, #1
1a00477a:	1b00      	subs	r0, r0, r4
1a00477c:	6053      	str	r3, [r2, #4]
1a00477e:	6008      	str	r0, [r1, #0]
1a004780:	e7d5      	b.n	1a00472e <_malloc_trim_r+0x3e>
1a004782:	bf00      	nop
1a004784:	100004b0 	.word	0x100004b0
1a004788:	10003c98 	.word	0x10003c98
1a00478c:	100008b8 	.word	0x100008b8

1a004790 <_free_r>:
1a004790:	2900      	cmp	r1, #0
1a004792:	d05d      	beq.n	1a004850 <_free_r+0xc0>
1a004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004796:	460f      	mov	r7, r1
1a004798:	4606      	mov	r6, r0
1a00479a:	f000 fce7 	bl	1a00516c <__malloc_lock>
1a00479e:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a0047a2:	4c73      	ldr	r4, [pc, #460]	; (1a004970 <_free_r+0x1e0>)
1a0047a4:	f02c 0301 	bic.w	r3, ip, #1
1a0047a8:	f1a7 0008 	sub.w	r0, r7, #8
1a0047ac:	18c2      	adds	r2, r0, r3
1a0047ae:	68a1      	ldr	r1, [r4, #8]
1a0047b0:	6855      	ldr	r5, [r2, #4]
1a0047b2:	4291      	cmp	r1, r2
1a0047b4:	f025 0503 	bic.w	r5, r5, #3
1a0047b8:	d07f      	beq.n	1a0048ba <_free_r+0x12a>
1a0047ba:	f01c 0f01 	tst.w	ip, #1
1a0047be:	6055      	str	r5, [r2, #4]
1a0047c0:	eb02 0105 	add.w	r1, r2, r5
1a0047c4:	d133      	bne.n	1a00482e <_free_r+0x9e>
1a0047c6:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a0047ca:	6849      	ldr	r1, [r1, #4]
1a0047cc:	eba0 000e 	sub.w	r0, r0, lr
1a0047d0:	f104 0c08 	add.w	ip, r4, #8
1a0047d4:	6887      	ldr	r7, [r0, #8]
1a0047d6:	4567      	cmp	r7, ip
1a0047d8:	4473      	add	r3, lr
1a0047da:	f001 0101 	and.w	r1, r1, #1
1a0047de:	d060      	beq.n	1a0048a2 <_free_r+0x112>
1a0047e0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a0047e4:	f8c7 e00c 	str.w	lr, [r7, #12]
1a0047e8:	f8ce 7008 	str.w	r7, [lr, #8]
1a0047ec:	2900      	cmp	r1, #0
1a0047ee:	f000 8089 	beq.w	1a004904 <_free_r+0x174>
1a0047f2:	f043 0101 	orr.w	r1, r3, #1
1a0047f6:	6041      	str	r1, [r0, #4]
1a0047f8:	6013      	str	r3, [r2, #0]
1a0047fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0047fe:	d230      	bcs.n	1a004862 <_free_r+0xd2>
1a004800:	08db      	lsrs	r3, r3, #3
1a004802:	1c59      	adds	r1, r3, #1
1a004804:	6865      	ldr	r5, [r4, #4]
1a004806:	109a      	asrs	r2, r3, #2
1a004808:	2301      	movs	r3, #1
1a00480a:	4093      	lsls	r3, r2
1a00480c:	432b      	orrs	r3, r5
1a00480e:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a004812:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a004816:	6063      	str	r3, [r4, #4]
1a004818:	3a08      	subs	r2, #8
1a00481a:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a00481e:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a004822:	60e8      	str	r0, [r5, #12]
1a004824:	4630      	mov	r0, r6
1a004826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00482a:	f000 bca5 	b.w	1a005178 <__malloc_unlock>
1a00482e:	6849      	ldr	r1, [r1, #4]
1a004830:	07c9      	lsls	r1, r1, #31
1a004832:	d40e      	bmi.n	1a004852 <_free_r+0xc2>
1a004834:	442b      	add	r3, r5
1a004836:	f104 0c08 	add.w	ip, r4, #8
1a00483a:	6891      	ldr	r1, [r2, #8]
1a00483c:	4561      	cmp	r1, ip
1a00483e:	f043 0501 	orr.w	r5, r3, #1
1a004842:	d067      	beq.n	1a004914 <_free_r+0x184>
1a004844:	68d2      	ldr	r2, [r2, #12]
1a004846:	60ca      	str	r2, [r1, #12]
1a004848:	6091      	str	r1, [r2, #8]
1a00484a:	6045      	str	r5, [r0, #4]
1a00484c:	50c3      	str	r3, [r0, r3]
1a00484e:	e7d4      	b.n	1a0047fa <_free_r+0x6a>
1a004850:	4770      	bx	lr
1a004852:	f043 0101 	orr.w	r1, r3, #1
1a004856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00485a:	f847 1c04 	str.w	r1, [r7, #-4]
1a00485e:	6013      	str	r3, [r2, #0]
1a004860:	d3ce      	bcc.n	1a004800 <_free_r+0x70>
1a004862:	0a5a      	lsrs	r2, r3, #9
1a004864:	2a04      	cmp	r2, #4
1a004866:	d842      	bhi.n	1a0048ee <_free_r+0x15e>
1a004868:	099a      	lsrs	r2, r3, #6
1a00486a:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a00486e:	00ff      	lsls	r7, r7, #3
1a004870:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a004874:	19e5      	adds	r5, r4, r7
1a004876:	59e2      	ldr	r2, [r4, r7]
1a004878:	3d08      	subs	r5, #8
1a00487a:	4295      	cmp	r5, r2
1a00487c:	d051      	beq.n	1a004922 <_free_r+0x192>
1a00487e:	6851      	ldr	r1, [r2, #4]
1a004880:	f021 0103 	bic.w	r1, r1, #3
1a004884:	4299      	cmp	r1, r3
1a004886:	d902      	bls.n	1a00488e <_free_r+0xfe>
1a004888:	6892      	ldr	r2, [r2, #8]
1a00488a:	4295      	cmp	r5, r2
1a00488c:	d1f7      	bne.n	1a00487e <_free_r+0xee>
1a00488e:	68d5      	ldr	r5, [r2, #12]
1a004890:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a004894:	60a8      	str	r0, [r5, #8]
1a004896:	60d0      	str	r0, [r2, #12]
1a004898:	4630      	mov	r0, r6
1a00489a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00489e:	f000 bc6b 	b.w	1a005178 <__malloc_unlock>
1a0048a2:	2900      	cmp	r1, #0
1a0048a4:	d15e      	bne.n	1a004964 <_free_r+0x1d4>
1a0048a6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a0048aa:	442b      	add	r3, r5
1a0048ac:	f043 0401 	orr.w	r4, r3, #1
1a0048b0:	60ca      	str	r2, [r1, #12]
1a0048b2:	6091      	str	r1, [r2, #8]
1a0048b4:	6044      	str	r4, [r0, #4]
1a0048b6:	50c3      	str	r3, [r0, r3]
1a0048b8:	e7b4      	b.n	1a004824 <_free_r+0x94>
1a0048ba:	f01c 0f01 	tst.w	ip, #1
1a0048be:	442b      	add	r3, r5
1a0048c0:	d107      	bne.n	1a0048d2 <_free_r+0x142>
1a0048c2:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a0048c6:	1a80      	subs	r0, r0, r2
1a0048c8:	4413      	add	r3, r2
1a0048ca:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a0048ce:	60ca      	str	r2, [r1, #12]
1a0048d0:	6091      	str	r1, [r2, #8]
1a0048d2:	4a28      	ldr	r2, [pc, #160]	; (1a004974 <_free_r+0x1e4>)
1a0048d4:	6812      	ldr	r2, [r2, #0]
1a0048d6:	f043 0101 	orr.w	r1, r3, #1
1a0048da:	429a      	cmp	r2, r3
1a0048dc:	6041      	str	r1, [r0, #4]
1a0048de:	60a0      	str	r0, [r4, #8]
1a0048e0:	d8a0      	bhi.n	1a004824 <_free_r+0x94>
1a0048e2:	4b25      	ldr	r3, [pc, #148]	; (1a004978 <_free_r+0x1e8>)
1a0048e4:	4630      	mov	r0, r6
1a0048e6:	6819      	ldr	r1, [r3, #0]
1a0048e8:	f7ff ff02 	bl	1a0046f0 <_malloc_trim_r>
1a0048ec:	e79a      	b.n	1a004824 <_free_r+0x94>
1a0048ee:	2a14      	cmp	r2, #20
1a0048f0:	d90a      	bls.n	1a004908 <_free_r+0x178>
1a0048f2:	2a54      	cmp	r2, #84	; 0x54
1a0048f4:	d81d      	bhi.n	1a004932 <_free_r+0x1a2>
1a0048f6:	0b1a      	lsrs	r2, r3, #12
1a0048f8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a0048fc:	00ff      	lsls	r7, r7, #3
1a0048fe:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a004902:	e7b7      	b.n	1a004874 <_free_r+0xe4>
1a004904:	442b      	add	r3, r5
1a004906:	e798      	b.n	1a00483a <_free_r+0xaa>
1a004908:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a00490c:	00ff      	lsls	r7, r7, #3
1a00490e:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a004912:	e7af      	b.n	1a004874 <_free_r+0xe4>
1a004914:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a004918:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a00491c:	6045      	str	r5, [r0, #4]
1a00491e:	50c3      	str	r3, [r0, r3]
1a004920:	e780      	b.n	1a004824 <_free_r+0x94>
1a004922:	6863      	ldr	r3, [r4, #4]
1a004924:	1089      	asrs	r1, r1, #2
1a004926:	2701      	movs	r7, #1
1a004928:	fa07 f101 	lsl.w	r1, r7, r1
1a00492c:	4319      	orrs	r1, r3
1a00492e:	6061      	str	r1, [r4, #4]
1a004930:	e7ae      	b.n	1a004890 <_free_r+0x100>
1a004932:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a004936:	d806      	bhi.n	1a004946 <_free_r+0x1b6>
1a004938:	0bda      	lsrs	r2, r3, #15
1a00493a:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a00493e:	00ff      	lsls	r7, r7, #3
1a004940:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a004944:	e796      	b.n	1a004874 <_free_r+0xe4>
1a004946:	f240 5154 	movw	r1, #1364	; 0x554
1a00494a:	428a      	cmp	r2, r1
1a00494c:	d806      	bhi.n	1a00495c <_free_r+0x1cc>
1a00494e:	0c9a      	lsrs	r2, r3, #18
1a004950:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a004954:	00ff      	lsls	r7, r7, #3
1a004956:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a00495a:	e78b      	b.n	1a004874 <_free_r+0xe4>
1a00495c:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a004960:	217e      	movs	r1, #126	; 0x7e
1a004962:	e787      	b.n	1a004874 <_free_r+0xe4>
1a004964:	f043 0101 	orr.w	r1, r3, #1
1a004968:	6041      	str	r1, [r0, #4]
1a00496a:	6013      	str	r3, [r2, #0]
1a00496c:	e75a      	b.n	1a004824 <_free_r+0x94>
1a00496e:	bf00      	nop
1a004970:	100004b0 	.word	0x100004b0
1a004974:	100008bc 	.word	0x100008bc
1a004978:	10003cc8 	.word	0x10003cc8

1a00497c <_fwalk_reent>:
1a00497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004980:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a004984:	d01f      	beq.n	1a0049c6 <_fwalk_reent+0x4a>
1a004986:	4688      	mov	r8, r1
1a004988:	4606      	mov	r6, r0
1a00498a:	f04f 0900 	mov.w	r9, #0
1a00498e:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a004992:	3d01      	subs	r5, #1
1a004994:	d411      	bmi.n	1a0049ba <_fwalk_reent+0x3e>
1a004996:	89a3      	ldrh	r3, [r4, #12]
1a004998:	2b01      	cmp	r3, #1
1a00499a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a00499e:	d908      	bls.n	1a0049b2 <_fwalk_reent+0x36>
1a0049a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a0049a4:	3301      	adds	r3, #1
1a0049a6:	4621      	mov	r1, r4
1a0049a8:	4630      	mov	r0, r6
1a0049aa:	d002      	beq.n	1a0049b2 <_fwalk_reent+0x36>
1a0049ac:	47c0      	blx	r8
1a0049ae:	ea49 0900 	orr.w	r9, r9, r0
1a0049b2:	1c6b      	adds	r3, r5, #1
1a0049b4:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0049b8:	d1ed      	bne.n	1a004996 <_fwalk_reent+0x1a>
1a0049ba:	683f      	ldr	r7, [r7, #0]
1a0049bc:	2f00      	cmp	r7, #0
1a0049be:	d1e6      	bne.n	1a00498e <_fwalk_reent+0x12>
1a0049c0:	4648      	mov	r0, r9
1a0049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0049c6:	46b9      	mov	r9, r7
1a0049c8:	4648      	mov	r0, r9
1a0049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0049ce:	bf00      	nop

1a0049d0 <__libc_init_array>:
1a0049d0:	b570      	push	{r4, r5, r6, lr}
1a0049d2:	4e0d      	ldr	r6, [pc, #52]	; (1a004a08 <__libc_init_array+0x38>)
1a0049d4:	4d0d      	ldr	r5, [pc, #52]	; (1a004a0c <__libc_init_array+0x3c>)
1a0049d6:	1b76      	subs	r6, r6, r5
1a0049d8:	10b6      	asrs	r6, r6, #2
1a0049da:	d006      	beq.n	1a0049ea <__libc_init_array+0x1a>
1a0049dc:	2400      	movs	r4, #0
1a0049de:	3401      	adds	r4, #1
1a0049e0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0049e4:	4798      	blx	r3
1a0049e6:	42a6      	cmp	r6, r4
1a0049e8:	d1f9      	bne.n	1a0049de <__libc_init_array+0xe>
1a0049ea:	4e09      	ldr	r6, [pc, #36]	; (1a004a10 <__libc_init_array+0x40>)
1a0049ec:	4d09      	ldr	r5, [pc, #36]	; (1a004a14 <__libc_init_array+0x44>)
1a0049ee:	1b76      	subs	r6, r6, r5
1a0049f0:	f7fb fe95 	bl	1a00071e <_init>
1a0049f4:	10b6      	asrs	r6, r6, #2
1a0049f6:	d006      	beq.n	1a004a06 <__libc_init_array+0x36>
1a0049f8:	2400      	movs	r4, #0
1a0049fa:	3401      	adds	r4, #1
1a0049fc:	f855 3b04 	ldr.w	r3, [r5], #4
1a004a00:	4798      	blx	r3
1a004a02:	42a6      	cmp	r6, r4
1a004a04:	d1f9      	bne.n	1a0049fa <__libc_init_array+0x2a>
1a004a06:	bd70      	pop	{r4, r5, r6, pc}
1a004a08:	1a00b514 	.word	0x1a00b514
1a004a0c:	1a00b514 	.word	0x1a00b514
1a004a10:	1a00b518 	.word	0x1a00b518
1a004a14:	1a00b514 	.word	0x1a00b514

1a004a18 <__retarget_lock_init_recursive>:
1a004a18:	4770      	bx	lr
1a004a1a:	bf00      	nop

1a004a1c <__retarget_lock_close_recursive>:
1a004a1c:	4770      	bx	lr
1a004a1e:	bf00      	nop

1a004a20 <__retarget_lock_acquire_recursive>:
1a004a20:	4770      	bx	lr
1a004a22:	bf00      	nop

1a004a24 <__retarget_lock_release_recursive>:
1a004a24:	4770      	bx	lr
1a004a26:	bf00      	nop

1a004a28 <_malloc_r>:
1a004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004a2c:	f101 050b 	add.w	r5, r1, #11
1a004a30:	2d16      	cmp	r5, #22
1a004a32:	b083      	sub	sp, #12
1a004a34:	4606      	mov	r6, r0
1a004a36:	d823      	bhi.n	1a004a80 <_malloc_r+0x58>
1a004a38:	2910      	cmp	r1, #16
1a004a3a:	f200 80b9 	bhi.w	1a004bb0 <_malloc_r+0x188>
1a004a3e:	f000 fb95 	bl	1a00516c <__malloc_lock>
1a004a42:	2510      	movs	r5, #16
1a004a44:	2318      	movs	r3, #24
1a004a46:	2002      	movs	r0, #2
1a004a48:	4fba      	ldr	r7, [pc, #744]	; (1a004d34 <_malloc_r+0x30c>)
1a004a4a:	443b      	add	r3, r7
1a004a4c:	f1a3 0208 	sub.w	r2, r3, #8
1a004a50:	685c      	ldr	r4, [r3, #4]
1a004a52:	4294      	cmp	r4, r2
1a004a54:	f000 80b9 	beq.w	1a004bca <_malloc_r+0x1a2>
1a004a58:	6863      	ldr	r3, [r4, #4]
1a004a5a:	f023 0303 	bic.w	r3, r3, #3
1a004a5e:	4423      	add	r3, r4
1a004a60:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a004a64:	685a      	ldr	r2, [r3, #4]
1a004a66:	60e9      	str	r1, [r5, #12]
1a004a68:	f042 0201 	orr.w	r2, r2, #1
1a004a6c:	4630      	mov	r0, r6
1a004a6e:	608d      	str	r5, [r1, #8]
1a004a70:	605a      	str	r2, [r3, #4]
1a004a72:	f000 fb81 	bl	1a005178 <__malloc_unlock>
1a004a76:	3408      	adds	r4, #8
1a004a78:	4620      	mov	r0, r4
1a004a7a:	b003      	add	sp, #12
1a004a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a80:	f035 0507 	bics.w	r5, r5, #7
1a004a84:	f100 8094 	bmi.w	1a004bb0 <_malloc_r+0x188>
1a004a88:	42a9      	cmp	r1, r5
1a004a8a:	f200 8091 	bhi.w	1a004bb0 <_malloc_r+0x188>
1a004a8e:	f000 fb6d 	bl	1a00516c <__malloc_lock>
1a004a92:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a004a96:	f0c0 81a2 	bcc.w	1a004dde <_malloc_r+0x3b6>
1a004a9a:	0a6b      	lsrs	r3, r5, #9
1a004a9c:	f000 808f 	beq.w	1a004bbe <_malloc_r+0x196>
1a004aa0:	2b04      	cmp	r3, #4
1a004aa2:	f200 8178 	bhi.w	1a004d96 <_malloc_r+0x36e>
1a004aa6:	09ab      	lsrs	r3, r5, #6
1a004aa8:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a004aac:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a004ab0:	00c3      	lsls	r3, r0, #3
1a004ab2:	4fa0      	ldr	r7, [pc, #640]	; (1a004d34 <_malloc_r+0x30c>)
1a004ab4:	443b      	add	r3, r7
1a004ab6:	f1a3 0108 	sub.w	r1, r3, #8
1a004aba:	685c      	ldr	r4, [r3, #4]
1a004abc:	42a1      	cmp	r1, r4
1a004abe:	d106      	bne.n	1a004ace <_malloc_r+0xa6>
1a004ac0:	e00c      	b.n	1a004adc <_malloc_r+0xb4>
1a004ac2:	2a00      	cmp	r2, #0
1a004ac4:	f280 8127 	bge.w	1a004d16 <_malloc_r+0x2ee>
1a004ac8:	68e4      	ldr	r4, [r4, #12]
1a004aca:	42a1      	cmp	r1, r4
1a004acc:	d006      	beq.n	1a004adc <_malloc_r+0xb4>
1a004ace:	6863      	ldr	r3, [r4, #4]
1a004ad0:	f023 0303 	bic.w	r3, r3, #3
1a004ad4:	1b5a      	subs	r2, r3, r5
1a004ad6:	2a0f      	cmp	r2, #15
1a004ad8:	ddf3      	ble.n	1a004ac2 <_malloc_r+0x9a>
1a004ada:	4660      	mov	r0, ip
1a004adc:	693c      	ldr	r4, [r7, #16]
1a004ade:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a004d48 <_malloc_r+0x320>
1a004ae2:	4564      	cmp	r4, ip
1a004ae4:	d07c      	beq.n	1a004be0 <_malloc_r+0x1b8>
1a004ae6:	6863      	ldr	r3, [r4, #4]
1a004ae8:	f023 0303 	bic.w	r3, r3, #3
1a004aec:	1b5a      	subs	r2, r3, r5
1a004aee:	2a0f      	cmp	r2, #15
1a004af0:	f300 8183 	bgt.w	1a004dfa <_malloc_r+0x3d2>
1a004af4:	2a00      	cmp	r2, #0
1a004af6:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a004afa:	f280 8174 	bge.w	1a004de6 <_malloc_r+0x3be>
1a004afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004b02:	f080 8125 	bcs.w	1a004d50 <_malloc_r+0x328>
1a004b06:	08db      	lsrs	r3, r3, #3
1a004b08:	1c59      	adds	r1, r3, #1
1a004b0a:	687a      	ldr	r2, [r7, #4]
1a004b0c:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a004b10:	f8c4 8008 	str.w	r8, [r4, #8]
1a004b14:	f04f 0e01 	mov.w	lr, #1
1a004b18:	109b      	asrs	r3, r3, #2
1a004b1a:	fa0e f303 	lsl.w	r3, lr, r3
1a004b1e:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a004b22:	4313      	orrs	r3, r2
1a004b24:	f1ae 0208 	sub.w	r2, lr, #8
1a004b28:	60e2      	str	r2, [r4, #12]
1a004b2a:	607b      	str	r3, [r7, #4]
1a004b2c:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a004b30:	f8c8 400c 	str.w	r4, [r8, #12]
1a004b34:	1082      	asrs	r2, r0, #2
1a004b36:	2401      	movs	r4, #1
1a004b38:	4094      	lsls	r4, r2
1a004b3a:	429c      	cmp	r4, r3
1a004b3c:	d856      	bhi.n	1a004bec <_malloc_r+0x1c4>
1a004b3e:	421c      	tst	r4, r3
1a004b40:	d106      	bne.n	1a004b50 <_malloc_r+0x128>
1a004b42:	f020 0003 	bic.w	r0, r0, #3
1a004b46:	0064      	lsls	r4, r4, #1
1a004b48:	421c      	tst	r4, r3
1a004b4a:	f100 0004 	add.w	r0, r0, #4
1a004b4e:	d0fa      	beq.n	1a004b46 <_malloc_r+0x11e>
1a004b50:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a004b54:	46ce      	mov	lr, r9
1a004b56:	4680      	mov	r8, r0
1a004b58:	f8de 300c 	ldr.w	r3, [lr, #12]
1a004b5c:	459e      	cmp	lr, r3
1a004b5e:	d107      	bne.n	1a004b70 <_malloc_r+0x148>
1a004b60:	e125      	b.n	1a004dae <_malloc_r+0x386>
1a004b62:	2a00      	cmp	r2, #0
1a004b64:	f280 812c 	bge.w	1a004dc0 <_malloc_r+0x398>
1a004b68:	68db      	ldr	r3, [r3, #12]
1a004b6a:	459e      	cmp	lr, r3
1a004b6c:	f000 811f 	beq.w	1a004dae <_malloc_r+0x386>
1a004b70:	6859      	ldr	r1, [r3, #4]
1a004b72:	f021 0103 	bic.w	r1, r1, #3
1a004b76:	1b4a      	subs	r2, r1, r5
1a004b78:	2a0f      	cmp	r2, #15
1a004b7a:	ddf2      	ble.n	1a004b62 <_malloc_r+0x13a>
1a004b7c:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a004b80:	195c      	adds	r4, r3, r5
1a004b82:	f045 0501 	orr.w	r5, r5, #1
1a004b86:	605d      	str	r5, [r3, #4]
1a004b88:	f042 0501 	orr.w	r5, r2, #1
1a004b8c:	f8c8 e00c 	str.w	lr, [r8, #12]
1a004b90:	4630      	mov	r0, r6
1a004b92:	f8ce 8008 	str.w	r8, [lr, #8]
1a004b96:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a004b9a:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a004b9e:	6065      	str	r5, [r4, #4]
1a004ba0:	505a      	str	r2, [r3, r1]
1a004ba2:	9300      	str	r3, [sp, #0]
1a004ba4:	f000 fae8 	bl	1a005178 <__malloc_unlock>
1a004ba8:	9b00      	ldr	r3, [sp, #0]
1a004baa:	f103 0408 	add.w	r4, r3, #8
1a004bae:	e002      	b.n	1a004bb6 <_malloc_r+0x18e>
1a004bb0:	230c      	movs	r3, #12
1a004bb2:	6033      	str	r3, [r6, #0]
1a004bb4:	2400      	movs	r4, #0
1a004bb6:	4620      	mov	r0, r4
1a004bb8:	b003      	add	sp, #12
1a004bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
1a004bc2:	2040      	movs	r0, #64	; 0x40
1a004bc4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a004bc8:	e773      	b.n	1a004ab2 <_malloc_r+0x8a>
1a004bca:	68dc      	ldr	r4, [r3, #12]
1a004bcc:	42a3      	cmp	r3, r4
1a004bce:	bf08      	it	eq
1a004bd0:	3002      	addeq	r0, #2
1a004bd2:	f47f af41 	bne.w	1a004a58 <_malloc_r+0x30>
1a004bd6:	693c      	ldr	r4, [r7, #16]
1a004bd8:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a004d48 <_malloc_r+0x320>
1a004bdc:	4564      	cmp	r4, ip
1a004bde:	d182      	bne.n	1a004ae6 <_malloc_r+0xbe>
1a004be0:	687b      	ldr	r3, [r7, #4]
1a004be2:	1082      	asrs	r2, r0, #2
1a004be4:	2401      	movs	r4, #1
1a004be6:	4094      	lsls	r4, r2
1a004be8:	429c      	cmp	r4, r3
1a004bea:	d9a8      	bls.n	1a004b3e <_malloc_r+0x116>
1a004bec:	68bc      	ldr	r4, [r7, #8]
1a004bee:	6863      	ldr	r3, [r4, #4]
1a004bf0:	f023 0803 	bic.w	r8, r3, #3
1a004bf4:	45a8      	cmp	r8, r5
1a004bf6:	d303      	bcc.n	1a004c00 <_malloc_r+0x1d8>
1a004bf8:	eba8 0305 	sub.w	r3, r8, r5
1a004bfc:	2b0f      	cmp	r3, #15
1a004bfe:	dc7a      	bgt.n	1a004cf6 <_malloc_r+0x2ce>
1a004c00:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a004d4c <_malloc_r+0x324>
1a004c04:	4b4c      	ldr	r3, [pc, #304]	; (1a004d38 <_malloc_r+0x310>)
1a004c06:	f8d9 2000 	ldr.w	r2, [r9]
1a004c0a:	681b      	ldr	r3, [r3, #0]
1a004c0c:	3201      	adds	r2, #1
1a004c0e:	442b      	add	r3, r5
1a004c10:	eb04 0a08 	add.w	sl, r4, r8
1a004c14:	f000 813c 	beq.w	1a004e90 <_malloc_r+0x468>
1a004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a004c1c:	330f      	adds	r3, #15
1a004c1e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a004c22:	f02b 0b0f 	bic.w	fp, fp, #15
1a004c26:	4659      	mov	r1, fp
1a004c28:	4630      	mov	r0, r6
1a004c2a:	f7fb fdcd 	bl	1a0007c8 <_sbrk_r>
1a004c2e:	1c41      	adds	r1, r0, #1
1a004c30:	4602      	mov	r2, r0
1a004c32:	f000 80fc 	beq.w	1a004e2e <_malloc_r+0x406>
1a004c36:	4582      	cmp	sl, r0
1a004c38:	f200 80f7 	bhi.w	1a004e2a <_malloc_r+0x402>
1a004c3c:	4b3f      	ldr	r3, [pc, #252]	; (1a004d3c <_malloc_r+0x314>)
1a004c3e:	6818      	ldr	r0, [r3, #0]
1a004c40:	4458      	add	r0, fp
1a004c42:	6018      	str	r0, [r3, #0]
1a004c44:	4601      	mov	r1, r0
1a004c46:	f000 8157 	beq.w	1a004ef8 <_malloc_r+0x4d0>
1a004c4a:	f8d9 0000 	ldr.w	r0, [r9]
1a004c4e:	9301      	str	r3, [sp, #4]
1a004c50:	3001      	adds	r0, #1
1a004c52:	bf1b      	ittet	ne
1a004c54:	eba2 0a0a 	subne.w	sl, r2, sl
1a004c58:	4451      	addne	r1, sl
1a004c5a:	f8c9 2000 	streq.w	r2, [r9]
1a004c5e:	6019      	strne	r1, [r3, #0]
1a004c60:	f012 0a07 	ands.w	sl, r2, #7
1a004c64:	f000 8120 	beq.w	1a004ea8 <_malloc_r+0x480>
1a004c68:	f1ca 0108 	rsb	r1, sl, #8
1a004c6c:	440a      	add	r2, r1
1a004c6e:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a004c72:	4493      	add	fp, r2
1a004c74:	3108      	adds	r1, #8
1a004c76:	eba1 010b 	sub.w	r1, r1, fp
1a004c7a:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a004c7e:	4649      	mov	r1, r9
1a004c80:	4630      	mov	r0, r6
1a004c82:	9200      	str	r2, [sp, #0]
1a004c84:	f7fb fda0 	bl	1a0007c8 <_sbrk_r>
1a004c88:	1c42      	adds	r2, r0, #1
1a004c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004c8e:	f000 8158 	beq.w	1a004f42 <_malloc_r+0x51a>
1a004c92:	1a80      	subs	r0, r0, r2
1a004c94:	eb00 0b09 	add.w	fp, r0, r9
1a004c98:	6818      	ldr	r0, [r3, #0]
1a004c9a:	60ba      	str	r2, [r7, #8]
1a004c9c:	f04b 0101 	orr.w	r1, fp, #1
1a004ca0:	4448      	add	r0, r9
1a004ca2:	42bc      	cmp	r4, r7
1a004ca4:	6051      	str	r1, [r2, #4]
1a004ca6:	6018      	str	r0, [r3, #0]
1a004ca8:	f000 8132 	beq.w	1a004f10 <_malloc_r+0x4e8>
1a004cac:	f1b8 0f0f 	cmp.w	r8, #15
1a004cb0:	f240 8130 	bls.w	1a004f14 <_malloc_r+0x4ec>
1a004cb4:	6861      	ldr	r1, [r4, #4]
1a004cb6:	f1a8 0c0c 	sub.w	ip, r8, #12
1a004cba:	f02c 0c07 	bic.w	ip, ip, #7
1a004cbe:	f001 0101 	and.w	r1, r1, #1
1a004cc2:	eb04 0e0c 	add.w	lr, r4, ip
1a004cc6:	ea41 010c 	orr.w	r1, r1, ip
1a004cca:	f04f 0805 	mov.w	r8, #5
1a004cce:	f1bc 0f0f 	cmp.w	ip, #15
1a004cd2:	6061      	str	r1, [r4, #4]
1a004cd4:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a004cd8:	f200 813b 	bhi.w	1a004f52 <_malloc_r+0x52a>
1a004cdc:	6851      	ldr	r1, [r2, #4]
1a004cde:	4614      	mov	r4, r2
1a004ce0:	4b17      	ldr	r3, [pc, #92]	; (1a004d40 <_malloc_r+0x318>)
1a004ce2:	681a      	ldr	r2, [r3, #0]
1a004ce4:	4282      	cmp	r2, r0
1a004ce6:	bf38      	it	cc
1a004ce8:	6018      	strcc	r0, [r3, #0]
1a004cea:	4b16      	ldr	r3, [pc, #88]	; (1a004d44 <_malloc_r+0x31c>)
1a004cec:	681a      	ldr	r2, [r3, #0]
1a004cee:	4282      	cmp	r2, r0
1a004cf0:	bf38      	it	cc
1a004cf2:	6018      	strcc	r0, [r3, #0]
1a004cf4:	e09d      	b.n	1a004e32 <_malloc_r+0x40a>
1a004cf6:	1962      	adds	r2, r4, r5
1a004cf8:	f043 0301 	orr.w	r3, r3, #1
1a004cfc:	f045 0501 	orr.w	r5, r5, #1
1a004d00:	6065      	str	r5, [r4, #4]
1a004d02:	4630      	mov	r0, r6
1a004d04:	60ba      	str	r2, [r7, #8]
1a004d06:	6053      	str	r3, [r2, #4]
1a004d08:	f000 fa36 	bl	1a005178 <__malloc_unlock>
1a004d0c:	3408      	adds	r4, #8
1a004d0e:	4620      	mov	r0, r4
1a004d10:	b003      	add	sp, #12
1a004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004d16:	4423      	add	r3, r4
1a004d18:	68e1      	ldr	r1, [r4, #12]
1a004d1a:	685a      	ldr	r2, [r3, #4]
1a004d1c:	68a5      	ldr	r5, [r4, #8]
1a004d1e:	f042 0201 	orr.w	r2, r2, #1
1a004d22:	60e9      	str	r1, [r5, #12]
1a004d24:	4630      	mov	r0, r6
1a004d26:	608d      	str	r5, [r1, #8]
1a004d28:	605a      	str	r2, [r3, #4]
1a004d2a:	f000 fa25 	bl	1a005178 <__malloc_unlock>
1a004d2e:	3408      	adds	r4, #8
1a004d30:	e741      	b.n	1a004bb6 <_malloc_r+0x18e>
1a004d32:	bf00      	nop
1a004d34:	100004b0 	.word	0x100004b0
1a004d38:	10003cc8 	.word	0x10003cc8
1a004d3c:	10003c98 	.word	0x10003c98
1a004d40:	10003cc0 	.word	0x10003cc0
1a004d44:	10003cc4 	.word	0x10003cc4
1a004d48:	100004b8 	.word	0x100004b8
1a004d4c:	100008b8 	.word	0x100008b8
1a004d50:	0a5a      	lsrs	r2, r3, #9
1a004d52:	2a04      	cmp	r2, #4
1a004d54:	d963      	bls.n	1a004e1e <_malloc_r+0x3f6>
1a004d56:	2a14      	cmp	r2, #20
1a004d58:	f200 80b7 	bhi.w	1a004eca <_malloc_r+0x4a2>
1a004d5c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a004d60:	00c9      	lsls	r1, r1, #3
1a004d62:	325b      	adds	r2, #91	; 0x5b
1a004d64:	eb07 0e01 	add.w	lr, r7, r1
1a004d68:	5879      	ldr	r1, [r7, r1]
1a004d6a:	f1ae 0e08 	sub.w	lr, lr, #8
1a004d6e:	458e      	cmp	lr, r1
1a004d70:	f000 8091 	beq.w	1a004e96 <_malloc_r+0x46e>
1a004d74:	684a      	ldr	r2, [r1, #4]
1a004d76:	f022 0203 	bic.w	r2, r2, #3
1a004d7a:	429a      	cmp	r2, r3
1a004d7c:	d902      	bls.n	1a004d84 <_malloc_r+0x35c>
1a004d7e:	6889      	ldr	r1, [r1, #8]
1a004d80:	458e      	cmp	lr, r1
1a004d82:	d1f7      	bne.n	1a004d74 <_malloc_r+0x34c>
1a004d84:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a004d88:	687b      	ldr	r3, [r7, #4]
1a004d8a:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a004d8e:	f8ce 4008 	str.w	r4, [lr, #8]
1a004d92:	60cc      	str	r4, [r1, #12]
1a004d94:	e6ce      	b.n	1a004b34 <_malloc_r+0x10c>
1a004d96:	2b14      	cmp	r3, #20
1a004d98:	d959      	bls.n	1a004e4e <_malloc_r+0x426>
1a004d9a:	2b54      	cmp	r3, #84	; 0x54
1a004d9c:	f200 809d 	bhi.w	1a004eda <_malloc_r+0x4b2>
1a004da0:	0b2b      	lsrs	r3, r5, #12
1a004da2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a004da6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a004daa:	00c3      	lsls	r3, r0, #3
1a004dac:	e681      	b.n	1a004ab2 <_malloc_r+0x8a>
1a004dae:	f108 0801 	add.w	r8, r8, #1
1a004db2:	f018 0f03 	tst.w	r8, #3
1a004db6:	f10e 0e08 	add.w	lr, lr, #8
1a004dba:	f47f aecd 	bne.w	1a004b58 <_malloc_r+0x130>
1a004dbe:	e051      	b.n	1a004e64 <_malloc_r+0x43c>
1a004dc0:	4419      	add	r1, r3
1a004dc2:	461c      	mov	r4, r3
1a004dc4:	684a      	ldr	r2, [r1, #4]
1a004dc6:	68db      	ldr	r3, [r3, #12]
1a004dc8:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a004dcc:	f042 0201 	orr.w	r2, r2, #1
1a004dd0:	604a      	str	r2, [r1, #4]
1a004dd2:	4630      	mov	r0, r6
1a004dd4:	60eb      	str	r3, [r5, #12]
1a004dd6:	609d      	str	r5, [r3, #8]
1a004dd8:	f000 f9ce 	bl	1a005178 <__malloc_unlock>
1a004ddc:	e6eb      	b.n	1a004bb6 <_malloc_r+0x18e>
1a004dde:	08e8      	lsrs	r0, r5, #3
1a004de0:	f105 0308 	add.w	r3, r5, #8
1a004de4:	e630      	b.n	1a004a48 <_malloc_r+0x20>
1a004de6:	4423      	add	r3, r4
1a004de8:	4630      	mov	r0, r6
1a004dea:	685a      	ldr	r2, [r3, #4]
1a004dec:	f042 0201 	orr.w	r2, r2, #1
1a004df0:	605a      	str	r2, [r3, #4]
1a004df2:	3408      	adds	r4, #8
1a004df4:	f000 f9c0 	bl	1a005178 <__malloc_unlock>
1a004df8:	e6dd      	b.n	1a004bb6 <_malloc_r+0x18e>
1a004dfa:	1961      	adds	r1, r4, r5
1a004dfc:	f045 0e01 	orr.w	lr, r5, #1
1a004e00:	f042 0501 	orr.w	r5, r2, #1
1a004e04:	f8c4 e004 	str.w	lr, [r4, #4]
1a004e08:	4630      	mov	r0, r6
1a004e0a:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a004e0e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a004e12:	604d      	str	r5, [r1, #4]
1a004e14:	50e2      	str	r2, [r4, r3]
1a004e16:	f000 f9af 	bl	1a005178 <__malloc_unlock>
1a004e1a:	3408      	adds	r4, #8
1a004e1c:	e6cb      	b.n	1a004bb6 <_malloc_r+0x18e>
1a004e1e:	099a      	lsrs	r2, r3, #6
1a004e20:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a004e24:	00c9      	lsls	r1, r1, #3
1a004e26:	3238      	adds	r2, #56	; 0x38
1a004e28:	e79c      	b.n	1a004d64 <_malloc_r+0x33c>
1a004e2a:	42bc      	cmp	r4, r7
1a004e2c:	d05f      	beq.n	1a004eee <_malloc_r+0x4c6>
1a004e2e:	68bc      	ldr	r4, [r7, #8]
1a004e30:	6861      	ldr	r1, [r4, #4]
1a004e32:	f021 0b03 	bic.w	fp, r1, #3
1a004e36:	45ab      	cmp	fp, r5
1a004e38:	ebab 0305 	sub.w	r3, fp, r5
1a004e3c:	d302      	bcc.n	1a004e44 <_malloc_r+0x41c>
1a004e3e:	2b0f      	cmp	r3, #15
1a004e40:	f73f af59 	bgt.w	1a004cf6 <_malloc_r+0x2ce>
1a004e44:	4630      	mov	r0, r6
1a004e46:	f000 f997 	bl	1a005178 <__malloc_unlock>
1a004e4a:	2400      	movs	r4, #0
1a004e4c:	e6b3      	b.n	1a004bb6 <_malloc_r+0x18e>
1a004e4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a004e52:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a004e56:	00c3      	lsls	r3, r0, #3
1a004e58:	e62b      	b.n	1a004ab2 <_malloc_r+0x8a>
1a004e5a:	f859 3908 	ldr.w	r3, [r9], #-8
1a004e5e:	454b      	cmp	r3, r9
1a004e60:	f040 8096 	bne.w	1a004f90 <_malloc_r+0x568>
1a004e64:	f010 0f03 	tst.w	r0, #3
1a004e68:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a004e6c:	d1f5      	bne.n	1a004e5a <_malloc_r+0x432>
1a004e6e:	687b      	ldr	r3, [r7, #4]
1a004e70:	ea23 0304 	bic.w	r3, r3, r4
1a004e74:	607b      	str	r3, [r7, #4]
1a004e76:	0064      	lsls	r4, r4, #1
1a004e78:	429c      	cmp	r4, r3
1a004e7a:	f63f aeb7 	bhi.w	1a004bec <_malloc_r+0x1c4>
1a004e7e:	b91c      	cbnz	r4, 1a004e88 <_malloc_r+0x460>
1a004e80:	e6b4      	b.n	1a004bec <_malloc_r+0x1c4>
1a004e82:	0064      	lsls	r4, r4, #1
1a004e84:	f108 0804 	add.w	r8, r8, #4
1a004e88:	421c      	tst	r4, r3
1a004e8a:	d0fa      	beq.n	1a004e82 <_malloc_r+0x45a>
1a004e8c:	4640      	mov	r0, r8
1a004e8e:	e65f      	b.n	1a004b50 <_malloc_r+0x128>
1a004e90:	f103 0b10 	add.w	fp, r3, #16
1a004e94:	e6c7      	b.n	1a004c26 <_malloc_r+0x1fe>
1a004e96:	687b      	ldr	r3, [r7, #4]
1a004e98:	1092      	asrs	r2, r2, #2
1a004e9a:	f04f 0801 	mov.w	r8, #1
1a004e9e:	fa08 f202 	lsl.w	r2, r8, r2
1a004ea2:	4313      	orrs	r3, r2
1a004ea4:	607b      	str	r3, [r7, #4]
1a004ea6:	e770      	b.n	1a004d8a <_malloc_r+0x362>
1a004ea8:	eb02 000b 	add.w	r0, r2, fp
1a004eac:	4240      	negs	r0, r0
1a004eae:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a004eb2:	4649      	mov	r1, r9
1a004eb4:	4630      	mov	r0, r6
1a004eb6:	9200      	str	r2, [sp, #0]
1a004eb8:	f7fb fc86 	bl	1a0007c8 <_sbrk_r>
1a004ebc:	1c43      	adds	r3, r0, #1
1a004ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004ec2:	f47f aee6 	bne.w	1a004c92 <_malloc_r+0x26a>
1a004ec6:	46d1      	mov	r9, sl
1a004ec8:	e6e6      	b.n	1a004c98 <_malloc_r+0x270>
1a004eca:	2a54      	cmp	r2, #84	; 0x54
1a004ecc:	d825      	bhi.n	1a004f1a <_malloc_r+0x4f2>
1a004ece:	0b1a      	lsrs	r2, r3, #12
1a004ed0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a004ed4:	00c9      	lsls	r1, r1, #3
1a004ed6:	326e      	adds	r2, #110	; 0x6e
1a004ed8:	e744      	b.n	1a004d64 <_malloc_r+0x33c>
1a004eda:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a004ede:	d825      	bhi.n	1a004f2c <_malloc_r+0x504>
1a004ee0:	0beb      	lsrs	r3, r5, #15
1a004ee2:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a004ee6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a004eea:	00c3      	lsls	r3, r0, #3
1a004eec:	e5e1      	b.n	1a004ab2 <_malloc_r+0x8a>
1a004eee:	4b29      	ldr	r3, [pc, #164]	; (1a004f94 <_malloc_r+0x56c>)
1a004ef0:	6819      	ldr	r1, [r3, #0]
1a004ef2:	4459      	add	r1, fp
1a004ef4:	6019      	str	r1, [r3, #0]
1a004ef6:	e6a8      	b.n	1a004c4a <_malloc_r+0x222>
1a004ef8:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a004efc:	f1bc 0f00 	cmp.w	ip, #0
1a004f00:	f47f aea3 	bne.w	1a004c4a <_malloc_r+0x222>
1a004f04:	44c3      	add	fp, r8
1a004f06:	68bc      	ldr	r4, [r7, #8]
1a004f08:	f04b 0101 	orr.w	r1, fp, #1
1a004f0c:	6061      	str	r1, [r4, #4]
1a004f0e:	e6e7      	b.n	1a004ce0 <_malloc_r+0x2b8>
1a004f10:	4614      	mov	r4, r2
1a004f12:	e6e5      	b.n	1a004ce0 <_malloc_r+0x2b8>
1a004f14:	2301      	movs	r3, #1
1a004f16:	6053      	str	r3, [r2, #4]
1a004f18:	e794      	b.n	1a004e44 <_malloc_r+0x41c>
1a004f1a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a004f1e:	d823      	bhi.n	1a004f68 <_malloc_r+0x540>
1a004f20:	0bda      	lsrs	r2, r3, #15
1a004f22:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a004f26:	00c9      	lsls	r1, r1, #3
1a004f28:	3277      	adds	r2, #119	; 0x77
1a004f2a:	e71b      	b.n	1a004d64 <_malloc_r+0x33c>
1a004f2c:	f240 5254 	movw	r2, #1364	; 0x554
1a004f30:	4293      	cmp	r3, r2
1a004f32:	d823      	bhi.n	1a004f7c <_malloc_r+0x554>
1a004f34:	0cab      	lsrs	r3, r5, #18
1a004f36:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a004f3a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a004f3e:	00c3      	lsls	r3, r0, #3
1a004f40:	e5b7      	b.n	1a004ab2 <_malloc_r+0x8a>
1a004f42:	f1aa 0a08 	sub.w	sl, sl, #8
1a004f46:	44d3      	add	fp, sl
1a004f48:	ebab 0b02 	sub.w	fp, fp, r2
1a004f4c:	f04f 0900 	mov.w	r9, #0
1a004f50:	e6a2      	b.n	1a004c98 <_malloc_r+0x270>
1a004f52:	f104 0108 	add.w	r1, r4, #8
1a004f56:	4630      	mov	r0, r6
1a004f58:	9300      	str	r3, [sp, #0]
1a004f5a:	f7ff fc19 	bl	1a004790 <_free_r>
1a004f5e:	68bc      	ldr	r4, [r7, #8]
1a004f60:	9b00      	ldr	r3, [sp, #0]
1a004f62:	6861      	ldr	r1, [r4, #4]
1a004f64:	6818      	ldr	r0, [r3, #0]
1a004f66:	e6bb      	b.n	1a004ce0 <_malloc_r+0x2b8>
1a004f68:	f240 5154 	movw	r1, #1364	; 0x554
1a004f6c:	428a      	cmp	r2, r1
1a004f6e:	d80b      	bhi.n	1a004f88 <_malloc_r+0x560>
1a004f70:	0c9a      	lsrs	r2, r3, #18
1a004f72:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a004f76:	00c9      	lsls	r1, r1, #3
1a004f78:	327c      	adds	r2, #124	; 0x7c
1a004f7a:	e6f3      	b.n	1a004d64 <_malloc_r+0x33c>
1a004f7c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a004f80:	207f      	movs	r0, #127	; 0x7f
1a004f82:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a004f86:	e594      	b.n	1a004ab2 <_malloc_r+0x8a>
1a004f88:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a004f8c:	227e      	movs	r2, #126	; 0x7e
1a004f8e:	e6e9      	b.n	1a004d64 <_malloc_r+0x33c>
1a004f90:	687b      	ldr	r3, [r7, #4]
1a004f92:	e770      	b.n	1a004e76 <_malloc_r+0x44e>
1a004f94:	10003c98 	.word	0x10003c98

1a004f98 <memcpy>:
1a004f98:	4684      	mov	ip, r0
1a004f9a:	ea41 0300 	orr.w	r3, r1, r0
1a004f9e:	f013 0303 	ands.w	r3, r3, #3
1a004fa2:	d16d      	bne.n	1a005080 <memcpy+0xe8>
1a004fa4:	3a40      	subs	r2, #64	; 0x40
1a004fa6:	d341      	bcc.n	1a00502c <memcpy+0x94>
1a004fa8:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fac:	f840 3b04 	str.w	r3, [r0], #4
1a004fb0:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fb4:	f840 3b04 	str.w	r3, [r0], #4
1a004fb8:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fbc:	f840 3b04 	str.w	r3, [r0], #4
1a004fc0:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fc4:	f840 3b04 	str.w	r3, [r0], #4
1a004fc8:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fcc:	f840 3b04 	str.w	r3, [r0], #4
1a004fd0:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fd4:	f840 3b04 	str.w	r3, [r0], #4
1a004fd8:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fdc:	f840 3b04 	str.w	r3, [r0], #4
1a004fe0:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fe4:	f840 3b04 	str.w	r3, [r0], #4
1a004fe8:	f851 3b04 	ldr.w	r3, [r1], #4
1a004fec:	f840 3b04 	str.w	r3, [r0], #4
1a004ff0:	f851 3b04 	ldr.w	r3, [r1], #4
1a004ff4:	f840 3b04 	str.w	r3, [r0], #4
1a004ff8:	f851 3b04 	ldr.w	r3, [r1], #4
1a004ffc:	f840 3b04 	str.w	r3, [r0], #4
1a005000:	f851 3b04 	ldr.w	r3, [r1], #4
1a005004:	f840 3b04 	str.w	r3, [r0], #4
1a005008:	f851 3b04 	ldr.w	r3, [r1], #4
1a00500c:	f840 3b04 	str.w	r3, [r0], #4
1a005010:	f851 3b04 	ldr.w	r3, [r1], #4
1a005014:	f840 3b04 	str.w	r3, [r0], #4
1a005018:	f851 3b04 	ldr.w	r3, [r1], #4
1a00501c:	f840 3b04 	str.w	r3, [r0], #4
1a005020:	f851 3b04 	ldr.w	r3, [r1], #4
1a005024:	f840 3b04 	str.w	r3, [r0], #4
1a005028:	3a40      	subs	r2, #64	; 0x40
1a00502a:	d2bd      	bcs.n	1a004fa8 <memcpy+0x10>
1a00502c:	3230      	adds	r2, #48	; 0x30
1a00502e:	d311      	bcc.n	1a005054 <memcpy+0xbc>
1a005030:	f851 3b04 	ldr.w	r3, [r1], #4
1a005034:	f840 3b04 	str.w	r3, [r0], #4
1a005038:	f851 3b04 	ldr.w	r3, [r1], #4
1a00503c:	f840 3b04 	str.w	r3, [r0], #4
1a005040:	f851 3b04 	ldr.w	r3, [r1], #4
1a005044:	f840 3b04 	str.w	r3, [r0], #4
1a005048:	f851 3b04 	ldr.w	r3, [r1], #4
1a00504c:	f840 3b04 	str.w	r3, [r0], #4
1a005050:	3a10      	subs	r2, #16
1a005052:	d2ed      	bcs.n	1a005030 <memcpy+0x98>
1a005054:	320c      	adds	r2, #12
1a005056:	d305      	bcc.n	1a005064 <memcpy+0xcc>
1a005058:	f851 3b04 	ldr.w	r3, [r1], #4
1a00505c:	f840 3b04 	str.w	r3, [r0], #4
1a005060:	3a04      	subs	r2, #4
1a005062:	d2f9      	bcs.n	1a005058 <memcpy+0xc0>
1a005064:	3204      	adds	r2, #4
1a005066:	d008      	beq.n	1a00507a <memcpy+0xe2>
1a005068:	07d2      	lsls	r2, r2, #31
1a00506a:	bf1c      	itt	ne
1a00506c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a005070:	f800 3b01 	strbne.w	r3, [r0], #1
1a005074:	d301      	bcc.n	1a00507a <memcpy+0xe2>
1a005076:	880b      	ldrh	r3, [r1, #0]
1a005078:	8003      	strh	r3, [r0, #0]
1a00507a:	4660      	mov	r0, ip
1a00507c:	4770      	bx	lr
1a00507e:	bf00      	nop
1a005080:	2a08      	cmp	r2, #8
1a005082:	d313      	bcc.n	1a0050ac <memcpy+0x114>
1a005084:	078b      	lsls	r3, r1, #30
1a005086:	d08d      	beq.n	1a004fa4 <memcpy+0xc>
1a005088:	f010 0303 	ands.w	r3, r0, #3
1a00508c:	d08a      	beq.n	1a004fa4 <memcpy+0xc>
1a00508e:	f1c3 0304 	rsb	r3, r3, #4
1a005092:	1ad2      	subs	r2, r2, r3
1a005094:	07db      	lsls	r3, r3, #31
1a005096:	bf1c      	itt	ne
1a005098:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00509c:	f800 3b01 	strbne.w	r3, [r0], #1
1a0050a0:	d380      	bcc.n	1a004fa4 <memcpy+0xc>
1a0050a2:	f831 3b02 	ldrh.w	r3, [r1], #2
1a0050a6:	f820 3b02 	strh.w	r3, [r0], #2
1a0050aa:	e77b      	b.n	1a004fa4 <memcpy+0xc>
1a0050ac:	3a04      	subs	r2, #4
1a0050ae:	d3d9      	bcc.n	1a005064 <memcpy+0xcc>
1a0050b0:	3a01      	subs	r2, #1
1a0050b2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0050b6:	f800 3b01 	strb.w	r3, [r0], #1
1a0050ba:	d2f9      	bcs.n	1a0050b0 <memcpy+0x118>
1a0050bc:	780b      	ldrb	r3, [r1, #0]
1a0050be:	7003      	strb	r3, [r0, #0]
1a0050c0:	784b      	ldrb	r3, [r1, #1]
1a0050c2:	7043      	strb	r3, [r0, #1]
1a0050c4:	788b      	ldrb	r3, [r1, #2]
1a0050c6:	7083      	strb	r3, [r0, #2]
1a0050c8:	4660      	mov	r0, ip
1a0050ca:	4770      	bx	lr

1a0050cc <memset>:
1a0050cc:	b4f0      	push	{r4, r5, r6, r7}
1a0050ce:	0786      	lsls	r6, r0, #30
1a0050d0:	d046      	beq.n	1a005160 <memset+0x94>
1a0050d2:	1e54      	subs	r4, r2, #1
1a0050d4:	2a00      	cmp	r2, #0
1a0050d6:	d03c      	beq.n	1a005152 <memset+0x86>
1a0050d8:	b2ca      	uxtb	r2, r1
1a0050da:	4603      	mov	r3, r0
1a0050dc:	e002      	b.n	1a0050e4 <memset+0x18>
1a0050de:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a0050e2:	d336      	bcc.n	1a005152 <memset+0x86>
1a0050e4:	f803 2b01 	strb.w	r2, [r3], #1
1a0050e8:	079d      	lsls	r5, r3, #30
1a0050ea:	d1f8      	bne.n	1a0050de <memset+0x12>
1a0050ec:	2c03      	cmp	r4, #3
1a0050ee:	d929      	bls.n	1a005144 <memset+0x78>
1a0050f0:	b2cd      	uxtb	r5, r1
1a0050f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0050f6:	2c0f      	cmp	r4, #15
1a0050f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0050fc:	d933      	bls.n	1a005166 <memset+0x9a>
1a0050fe:	f1a4 0610 	sub.w	r6, r4, #16
1a005102:	0936      	lsrs	r6, r6, #4
1a005104:	f103 0720 	add.w	r7, r3, #32
1a005108:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a00510c:	f103 0210 	add.w	r2, r3, #16
1a005110:	e942 5504 	strd	r5, r5, [r2, #-16]
1a005114:	e942 5502 	strd	r5, r5, [r2, #-8]
1a005118:	3210      	adds	r2, #16
1a00511a:	42ba      	cmp	r2, r7
1a00511c:	d1f8      	bne.n	1a005110 <memset+0x44>
1a00511e:	1c72      	adds	r2, r6, #1
1a005120:	f014 0f0c 	tst.w	r4, #12
1a005124:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a005128:	f004 060f 	and.w	r6, r4, #15
1a00512c:	d013      	beq.n	1a005156 <memset+0x8a>
1a00512e:	1f33      	subs	r3, r6, #4
1a005130:	f023 0303 	bic.w	r3, r3, #3
1a005134:	3304      	adds	r3, #4
1a005136:	4413      	add	r3, r2
1a005138:	f842 5b04 	str.w	r5, [r2], #4
1a00513c:	4293      	cmp	r3, r2
1a00513e:	d1fb      	bne.n	1a005138 <memset+0x6c>
1a005140:	f006 0403 	and.w	r4, r6, #3
1a005144:	b12c      	cbz	r4, 1a005152 <memset+0x86>
1a005146:	b2c9      	uxtb	r1, r1
1a005148:	441c      	add	r4, r3
1a00514a:	f803 1b01 	strb.w	r1, [r3], #1
1a00514e:	429c      	cmp	r4, r3
1a005150:	d1fb      	bne.n	1a00514a <memset+0x7e>
1a005152:	bcf0      	pop	{r4, r5, r6, r7}
1a005154:	4770      	bx	lr
1a005156:	4634      	mov	r4, r6
1a005158:	4613      	mov	r3, r2
1a00515a:	2c00      	cmp	r4, #0
1a00515c:	d1f3      	bne.n	1a005146 <memset+0x7a>
1a00515e:	e7f8      	b.n	1a005152 <memset+0x86>
1a005160:	4614      	mov	r4, r2
1a005162:	4603      	mov	r3, r0
1a005164:	e7c2      	b.n	1a0050ec <memset+0x20>
1a005166:	461a      	mov	r2, r3
1a005168:	4626      	mov	r6, r4
1a00516a:	e7e0      	b.n	1a00512e <memset+0x62>

1a00516c <__malloc_lock>:
1a00516c:	4801      	ldr	r0, [pc, #4]	; (1a005174 <__malloc_lock+0x8>)
1a00516e:	f7ff bc57 	b.w	1a004a20 <__retarget_lock_acquire_recursive>
1a005172:	bf00      	nop
1a005174:	10003d24 	.word	0x10003d24

1a005178 <__malloc_unlock>:
1a005178:	4801      	ldr	r0, [pc, #4]	; (1a005180 <__malloc_unlock+0x8>)
1a00517a:	f7ff bc53 	b.w	1a004a24 <__retarget_lock_release_recursive>
1a00517e:	bf00      	nop
1a005180:	10003d24 	.word	0x10003d24

1a005184 <printf>:
1a005184:	b40f      	push	{r0, r1, r2, r3}
1a005186:	b500      	push	{lr}
1a005188:	4907      	ldr	r1, [pc, #28]	; (1a0051a8 <printf+0x24>)
1a00518a:	b083      	sub	sp, #12
1a00518c:	ab04      	add	r3, sp, #16
1a00518e:	6808      	ldr	r0, [r1, #0]
1a005190:	f853 2b04 	ldr.w	r2, [r3], #4
1a005194:	6881      	ldr	r1, [r0, #8]
1a005196:	9301      	str	r3, [sp, #4]
1a005198:	f001 fe82 	bl	1a006ea0 <_vfprintf_r>
1a00519c:	b003      	add	sp, #12
1a00519e:	f85d eb04 	ldr.w	lr, [sp], #4
1a0051a2:	b004      	add	sp, #16
1a0051a4:	4770      	bx	lr
1a0051a6:	bf00      	nop
1a0051a8:	10000080 	.word	0x10000080

1a0051ac <_puts_r>:
1a0051ac:	b570      	push	{r4, r5, r6, lr}
1a0051ae:	4605      	mov	r5, r0
1a0051b0:	b088      	sub	sp, #32
1a0051b2:	4608      	mov	r0, r1
1a0051b4:	460c      	mov	r4, r1
1a0051b6:	f000 f8e3 	bl	1a005380 <strlen>
1a0051ba:	4a22      	ldr	r2, [pc, #136]	; (1a005244 <_puts_r+0x98>)
1a0051bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a0051be:	9404      	str	r4, [sp, #16]
1a0051c0:	2601      	movs	r6, #1
1a0051c2:	1c44      	adds	r4, r0, #1
1a0051c4:	a904      	add	r1, sp, #16
1a0051c6:	9206      	str	r2, [sp, #24]
1a0051c8:	2202      	movs	r2, #2
1a0051ca:	9403      	str	r4, [sp, #12]
1a0051cc:	9005      	str	r0, [sp, #20]
1a0051ce:	68ac      	ldr	r4, [r5, #8]
1a0051d0:	9607      	str	r6, [sp, #28]
1a0051d2:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a0051d6:	b31b      	cbz	r3, 1a005220 <_puts_r+0x74>
1a0051d8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a0051da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0051de:	07ce      	lsls	r6, r1, #31
1a0051e0:	b29a      	uxth	r2, r3
1a0051e2:	d401      	bmi.n	1a0051e8 <_puts_r+0x3c>
1a0051e4:	0590      	lsls	r0, r2, #22
1a0051e6:	d525      	bpl.n	1a005234 <_puts_r+0x88>
1a0051e8:	0491      	lsls	r1, r2, #18
1a0051ea:	d406      	bmi.n	1a0051fa <_puts_r+0x4e>
1a0051ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0051ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a0051f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a0051f6:	81a3      	strh	r3, [r4, #12]
1a0051f8:	6662      	str	r2, [r4, #100]	; 0x64
1a0051fa:	4628      	mov	r0, r5
1a0051fc:	aa01      	add	r2, sp, #4
1a0051fe:	4621      	mov	r1, r4
1a005200:	f004 fc60 	bl	1a009ac4 <__sfvwrite_r>
1a005204:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005206:	2800      	cmp	r0, #0
1a005208:	bf14      	ite	ne
1a00520a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a00520e:	250a      	moveq	r5, #10
1a005210:	07da      	lsls	r2, r3, #31
1a005212:	d402      	bmi.n	1a00521a <_puts_r+0x6e>
1a005214:	89a3      	ldrh	r3, [r4, #12]
1a005216:	059b      	lsls	r3, r3, #22
1a005218:	d506      	bpl.n	1a005228 <_puts_r+0x7c>
1a00521a:	4628      	mov	r0, r5
1a00521c:	b008      	add	sp, #32
1a00521e:	bd70      	pop	{r4, r5, r6, pc}
1a005220:	4628      	mov	r0, r5
1a005222:	f7ff fa2f 	bl	1a004684 <__sinit>
1a005226:	e7d7      	b.n	1a0051d8 <_puts_r+0x2c>
1a005228:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00522a:	f7ff fbfb 	bl	1a004a24 <__retarget_lock_release_recursive>
1a00522e:	4628      	mov	r0, r5
1a005230:	b008      	add	sp, #32
1a005232:	bd70      	pop	{r4, r5, r6, pc}
1a005234:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005236:	f7ff fbf3 	bl	1a004a20 <__retarget_lock_acquire_recursive>
1a00523a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00523e:	b29a      	uxth	r2, r3
1a005240:	e7d2      	b.n	1a0051e8 <_puts_r+0x3c>
1a005242:	bf00      	nop
1a005244:	1a00b370 	.word	0x1a00b370

1a005248 <puts>:
1a005248:	4b02      	ldr	r3, [pc, #8]	; (1a005254 <puts+0xc>)
1a00524a:	4601      	mov	r1, r0
1a00524c:	6818      	ldr	r0, [r3, #0]
1a00524e:	f7ff bfad 	b.w	1a0051ac <_puts_r>
1a005252:	bf00      	nop
1a005254:	10000080 	.word	0x10000080

1a005258 <snprintf>:
1a005258:	b40c      	push	{r2, r3}
1a00525a:	b530      	push	{r4, r5, lr}
1a00525c:	4b20      	ldr	r3, [pc, #128]	; (1a0052e0 <snprintf+0x88>)
1a00525e:	2900      	cmp	r1, #0
1a005260:	b09d      	sub	sp, #116	; 0x74
1a005262:	681c      	ldr	r4, [r3, #0]
1a005264:	db37      	blt.n	1a0052d6 <snprintf+0x7e>
1a005266:	f44f 7302 	mov.w	r3, #520	; 0x208
1a00526a:	9002      	str	r0, [sp, #8]
1a00526c:	9006      	str	r0, [sp, #24]
1a00526e:	f8ad 3014 	strh.w	r3, [sp, #20]
1a005272:	a821      	add	r0, sp, #132	; 0x84
1a005274:	d019      	beq.n	1a0052aa <snprintf+0x52>
1a005276:	3901      	subs	r1, #1
1a005278:	4603      	mov	r3, r0
1a00527a:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a00527c:	9104      	str	r1, [sp, #16]
1a00527e:	9107      	str	r1, [sp, #28]
1a005280:	9001      	str	r0, [sp, #4]
1a005282:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a005286:	a902      	add	r1, sp, #8
1a005288:	4620      	mov	r0, r4
1a00528a:	f8ad 5016 	strh.w	r5, [sp, #22]
1a00528e:	f000 f8e7 	bl	1a005460 <_svfprintf_r>
1a005292:	1c42      	adds	r2, r0, #1
1a005294:	da01      	bge.n	1a00529a <snprintf+0x42>
1a005296:	238b      	movs	r3, #139	; 0x8b
1a005298:	6023      	str	r3, [r4, #0]
1a00529a:	9b02      	ldr	r3, [sp, #8]
1a00529c:	2200      	movs	r2, #0
1a00529e:	701a      	strb	r2, [r3, #0]
1a0052a0:	b01d      	add	sp, #116	; 0x74
1a0052a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a0052a6:	b002      	add	sp, #8
1a0052a8:	4770      	bx	lr
1a0052aa:	4603      	mov	r3, r0
1a0052ac:	9104      	str	r1, [sp, #16]
1a0052ae:	9107      	str	r1, [sp, #28]
1a0052b0:	9001      	str	r0, [sp, #4]
1a0052b2:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a0052b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a0052b8:	f8ad 5016 	strh.w	r5, [sp, #22]
1a0052bc:	a902      	add	r1, sp, #8
1a0052be:	4620      	mov	r0, r4
1a0052c0:	f000 f8ce 	bl	1a005460 <_svfprintf_r>
1a0052c4:	1c43      	adds	r3, r0, #1
1a0052c6:	da01      	bge.n	1a0052cc <snprintf+0x74>
1a0052c8:	238b      	movs	r3, #139	; 0x8b
1a0052ca:	6023      	str	r3, [r4, #0]
1a0052cc:	b01d      	add	sp, #116	; 0x74
1a0052ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a0052d2:	b002      	add	sp, #8
1a0052d4:	4770      	bx	lr
1a0052d6:	238b      	movs	r3, #139	; 0x8b
1a0052d8:	6023      	str	r3, [r4, #0]
1a0052da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0052de:	e7f5      	b.n	1a0052cc <snprintf+0x74>
1a0052e0:	10000080 	.word	0x10000080

1a0052e4 <__sread>:
1a0052e4:	b510      	push	{r4, lr}
1a0052e6:	460c      	mov	r4, r1
1a0052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0052ec:	f7fb fa30 	bl	1a000750 <_read_r>
1a0052f0:	2800      	cmp	r0, #0
1a0052f2:	db03      	blt.n	1a0052fc <__sread+0x18>
1a0052f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0052f6:	4403      	add	r3, r0
1a0052f8:	6523      	str	r3, [r4, #80]	; 0x50
1a0052fa:	bd10      	pop	{r4, pc}
1a0052fc:	89a3      	ldrh	r3, [r4, #12]
1a0052fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a005302:	81a3      	strh	r3, [r4, #12]
1a005304:	bd10      	pop	{r4, pc}
1a005306:	bf00      	nop

1a005308 <__swrite>:
1a005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00530c:	4616      	mov	r6, r2
1a00530e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a005312:	461f      	mov	r7, r3
1a005314:	05d3      	lsls	r3, r2, #23
1a005316:	460c      	mov	r4, r1
1a005318:	4605      	mov	r5, r0
1a00531a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00531e:	d409      	bmi.n	1a005334 <__swrite+0x2c>
1a005320:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a005324:	81a2      	strh	r2, [r4, #12]
1a005326:	463b      	mov	r3, r7
1a005328:	4632      	mov	r2, r6
1a00532a:	4628      	mov	r0, r5
1a00532c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005330:	f7fb ba35 	b.w	1a00079e <_write_r>
1a005334:	2200      	movs	r2, #0
1a005336:	2302      	movs	r3, #2
1a005338:	f7fb fa05 	bl	1a000746 <_lseek_r>
1a00533c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005344:	e7ec      	b.n	1a005320 <__swrite+0x18>
1a005346:	bf00      	nop

1a005348 <__sseek>:
1a005348:	b510      	push	{r4, lr}
1a00534a:	460c      	mov	r4, r1
1a00534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005350:	f7fb f9f9 	bl	1a000746 <_lseek_r>
1a005354:	89a3      	ldrh	r3, [r4, #12]
1a005356:	1c42      	adds	r2, r0, #1
1a005358:	bf0e      	itee	eq
1a00535a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00535e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a005362:	6520      	strne	r0, [r4, #80]	; 0x50
1a005364:	81a3      	strh	r3, [r4, #12]
1a005366:	bd10      	pop	{r4, pc}

1a005368 <__sclose>:
1a005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00536c:	f7fb b9d8 	b.w	1a000720 <_close_r>
1a005370:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a005374:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a005378:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00537c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005380 <strlen>:
1a005380:	f890 f000 	pld	[r0]
1a005384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a005388:	f020 0107 	bic.w	r1, r0, #7
1a00538c:	f06f 0c00 	mvn.w	ip, #0
1a005390:	f010 0407 	ands.w	r4, r0, #7
1a005394:	f891 f020 	pld	[r1, #32]
1a005398:	f040 8049 	bne.w	1a00542e <strlen+0xae>
1a00539c:	f04f 0400 	mov.w	r4, #0
1a0053a0:	f06f 0007 	mvn.w	r0, #7
1a0053a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0053a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0053ac:	f100 0008 	add.w	r0, r0, #8
1a0053b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0053b4:	faa4 f28c 	sel	r2, r4, ip
1a0053b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0053bc:	faa2 f38c 	sel	r3, r2, ip
1a0053c0:	bb4b      	cbnz	r3, 1a005416 <strlen+0x96>
1a0053c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0053c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0053ca:	f100 0008 	add.w	r0, r0, #8
1a0053ce:	faa4 f28c 	sel	r2, r4, ip
1a0053d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0053d6:	faa2 f38c 	sel	r3, r2, ip
1a0053da:	b9e3      	cbnz	r3, 1a005416 <strlen+0x96>
1a0053dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0053e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0053e4:	f100 0008 	add.w	r0, r0, #8
1a0053e8:	faa4 f28c 	sel	r2, r4, ip
1a0053ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0053f0:	faa2 f38c 	sel	r3, r2, ip
1a0053f4:	b97b      	cbnz	r3, 1a005416 <strlen+0x96>
1a0053f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0053fa:	f101 0120 	add.w	r1, r1, #32
1a0053fe:	fa82 f24c 	uadd8	r2, r2, ip
1a005402:	f100 0008 	add.w	r0, r0, #8
1a005406:	faa4 f28c 	sel	r2, r4, ip
1a00540a:	fa83 f34c 	uadd8	r3, r3, ip
1a00540e:	faa2 f38c 	sel	r3, r2, ip
1a005412:	2b00      	cmp	r3, #0
1a005414:	d0c6      	beq.n	1a0053a4 <strlen+0x24>
1a005416:	2a00      	cmp	r2, #0
1a005418:	bf04      	itt	eq
1a00541a:	3004      	addeq	r0, #4
1a00541c:	461a      	moveq	r2, r3
1a00541e:	ba12      	rev	r2, r2
1a005420:	fab2 f282 	clz	r2, r2
1a005424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a005428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00542c:	4770      	bx	lr
1a00542e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a005432:	f004 0503 	and.w	r5, r4, #3
1a005436:	f1c4 0000 	rsb	r0, r4, #0
1a00543a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00543e:	f014 0f04 	tst.w	r4, #4
1a005442:	f891 f040 	pld	[r1, #64]	; 0x40
1a005446:	fa0c f505 	lsl.w	r5, ip, r5
1a00544a:	ea62 0205 	orn	r2, r2, r5
1a00544e:	bf1c      	itt	ne
1a005450:	ea63 0305 	ornne	r3, r3, r5
1a005454:	4662      	movne	r2, ip
1a005456:	f04f 0400 	mov.w	r4, #0
1a00545a:	e7a9      	b.n	1a0053b0 <strlen+0x30>
1a00545c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005460 <_svfprintf_r>:
1a005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005464:	b0d5      	sub	sp, #340	; 0x154
1a005466:	460c      	mov	r4, r1
1a005468:	9107      	str	r1, [sp, #28]
1a00546a:	4693      	mov	fp, r2
1a00546c:	9309      	str	r3, [sp, #36]	; 0x24
1a00546e:	9006      	str	r0, [sp, #24]
1a005470:	f004 fcac 	bl	1a009dcc <_localeconv_r>
1a005474:	6803      	ldr	r3, [r0, #0]
1a005476:	9315      	str	r3, [sp, #84]	; 0x54
1a005478:	4618      	mov	r0, r3
1a00547a:	f7ff ff81 	bl	1a005380 <strlen>
1a00547e:	89a3      	ldrh	r3, [r4, #12]
1a005480:	9013      	str	r0, [sp, #76]	; 0x4c
1a005482:	061d      	lsls	r5, r3, #24
1a005484:	d503      	bpl.n	1a00548e <_svfprintf_r+0x2e>
1a005486:	6923      	ldr	r3, [r4, #16]
1a005488:	2b00      	cmp	r3, #0
1a00548a:	f001 8018 	beq.w	1a0064be <_svfprintf_r+0x105e>
1a00548e:	2300      	movs	r3, #0
1a005490:	465e      	mov	r6, fp
1a005492:	ed9f 7b91 	vldr	d7, [pc, #580]	; 1a0056d8 <_svfprintf_r+0x278>
1a005496:	9312      	str	r3, [sp, #72]	; 0x48
1a005498:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a00549c:	9314      	str	r3, [sp, #80]	; 0x50
1a00549e:	9316      	str	r3, [sp, #88]	; 0x58
1a0054a0:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a0054a4:	9317      	str	r3, [sp, #92]	; 0x5c
1a0054a6:	9304      	str	r3, [sp, #16]
1a0054a8:	ab2b      	add	r3, sp, #172	; 0xac
1a0054aa:	9328      	str	r3, [sp, #160]	; 0xa0
1a0054ac:	4699      	mov	r9, r3
1a0054ae:	7833      	ldrb	r3, [r6, #0]
1a0054b0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0054b4:	2b00      	cmp	r3, #0
1a0054b6:	f000 8177 	beq.w	1a0057a8 <_svfprintf_r+0x348>
1a0054ba:	2b25      	cmp	r3, #37	; 0x25
1a0054bc:	f000 86c4 	beq.w	1a006248 <_svfprintf_r+0xde8>
1a0054c0:	4635      	mov	r5, r6
1a0054c2:	e003      	b.n	1a0054cc <_svfprintf_r+0x6c>
1a0054c4:	2b25      	cmp	r3, #37	; 0x25
1a0054c6:	f000 8096 	beq.w	1a0055f6 <_svfprintf_r+0x196>
1a0054ca:	4625      	mov	r5, r4
1a0054cc:	786b      	ldrb	r3, [r5, #1]
1a0054ce:	1c6c      	adds	r4, r5, #1
1a0054d0:	2b00      	cmp	r3, #0
1a0054d2:	d1f7      	bne.n	1a0054c4 <_svfprintf_r+0x64>
1a0054d4:	1ba7      	subs	r7, r4, r6
1a0054d6:	f000 8167 	beq.w	1a0057a8 <_svfprintf_r+0x348>
1a0054da:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a0054de:	3301      	adds	r3, #1
1a0054e0:	443a      	add	r2, r7
1a0054e2:	2b07      	cmp	r3, #7
1a0054e4:	f8c9 6000 	str.w	r6, [r9]
1a0054e8:	f8c9 7004 	str.w	r7, [r9, #4]
1a0054ec:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a0054f0:	f300 8084 	bgt.w	1a0055fc <_svfprintf_r+0x19c>
1a0054f4:	f109 0908 	add.w	r9, r9, #8
1a0054f8:	9a04      	ldr	r2, [sp, #16]
1a0054fa:	786b      	ldrb	r3, [r5, #1]
1a0054fc:	443a      	add	r2, r7
1a0054fe:	9204      	str	r2, [sp, #16]
1a005500:	2b00      	cmp	r3, #0
1a005502:	f000 8151 	beq.w	1a0057a8 <_svfprintf_r+0x348>
1a005506:	2300      	movs	r3, #0
1a005508:	f894 8001 	ldrb.w	r8, [r4, #1]
1a00550c:	9305      	str	r3, [sp, #20]
1a00550e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a005512:	9302      	str	r3, [sp, #8]
1a005514:	f104 0b01 	add.w	fp, r4, #1
1a005518:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a00551c:	272b      	movs	r7, #43	; 0x2b
1a00551e:	2120      	movs	r1, #32
1a005520:	f10b 0b01 	add.w	fp, fp, #1
1a005524:	f1a8 0320 	sub.w	r3, r8, #32
1a005528:	2b5a      	cmp	r3, #90	; 0x5a
1a00552a:	f200 836c 	bhi.w	1a005c06 <_svfprintf_r+0x7a6>
1a00552e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005532:	034b      	.short	0x034b
1a005534:	036a036a 	.word	0x036a036a
1a005538:	036a0344 	.word	0x036a0344
1a00553c:	036a036a 	.word	0x036a036a
1a005540:	036a0321 	.word	0x036a0321
1a005544:	0215036a 	.word	0x0215036a
1a005548:	036a0210 	.word	0x036a0210
1a00554c:	01f600cb 	.word	0x01f600cb
1a005550:	01ef036a 	.word	0x01ef036a
1a005554:	00a800a8 	.word	0x00a800a8
1a005558:	00a800a8 	.word	0x00a800a8
1a00555c:	00a800a8 	.word	0x00a800a8
1a005560:	00a800a8 	.word	0x00a800a8
1a005564:	036a00a8 	.word	0x036a00a8
1a005568:	036a036a 	.word	0x036a036a
1a00556c:	036a036a 	.word	0x036a036a
1a005570:	036a036a 	.word	0x036a036a
1a005574:	036a02df 	.word	0x036a02df
1a005578:	01960223 	.word	0x01960223
1a00557c:	02df02df 	.word	0x02df02df
1a005580:	036a02df 	.word	0x036a02df
1a005584:	036a036a 	.word	0x036a036a
1a005588:	018f036a 	.word	0x018f036a
1a00558c:	036a036a 	.word	0x036a036a
1a005590:	036a017e 	.word	0x036a017e
1a005594:	036a036a 	.word	0x036a036a
1a005598:	036a0152 	.word	0x036a0152
1a00559c:	036a01ca 	.word	0x036a01ca
1a0055a0:	00b7036a 	.word	0x00b7036a
1a0055a4:	036a036a 	.word	0x036a036a
1a0055a8:	036a036a 	.word	0x036a036a
1a0055ac:	036a036a 	.word	0x036a036a
1a0055b0:	036a036a 	.word	0x036a036a
1a0055b4:	036a02df 	.word	0x036a02df
1a0055b8:	01d90223 	.word	0x01d90223
1a0055bc:	02df02df 	.word	0x02df02df
1a0055c0:	01bf02df 	.word	0x01bf02df
1a0055c4:	005b01d9 	.word	0x005b01d9
1a0055c8:	0147036a 	.word	0x0147036a
1a0055cc:	011e036a 	.word	0x011e036a
1a0055d0:	00db010c 	.word	0x00db010c
1a0055d4:	036a005b 	.word	0x036a005b
1a0055d8:	005f0152 	.word	0x005f0152
1a0055dc:	036a0355 	.word	0x036a0355
1a0055e0:	0089036a 	.word	0x0089036a
1a0055e4:	005f036a 	.word	0x005f036a
1a0055e8:	9b02      	ldr	r3, [sp, #8]
1a0055ea:	f043 0320 	orr.w	r3, r3, #32
1a0055ee:	9302      	str	r3, [sp, #8]
1a0055f0:	f89b 8000 	ldrb.w	r8, [fp]
1a0055f4:	e794      	b.n	1a005520 <_svfprintf_r+0xc0>
1a0055f6:	1ba7      	subs	r7, r4, r6
1a0055f8:	d085      	beq.n	1a005506 <_svfprintf_r+0xa6>
1a0055fa:	e76e      	b.n	1a0054da <_svfprintf_r+0x7a>
1a0055fc:	aa28      	add	r2, sp, #160	; 0xa0
1a0055fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005602:	f005 fa4d 	bl	1a00aaa0 <__ssprint_r>
1a005606:	b980      	cbnz	r0, 1a00562a <_svfprintf_r+0x1ca>
1a005608:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00560c:	e774      	b.n	1a0054f8 <_svfprintf_r+0x98>
1a00560e:	aa28      	add	r2, sp, #160	; 0xa0
1a005610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005614:	f005 fa44 	bl	1a00aaa0 <__ssprint_r>
1a005618:	2800      	cmp	r0, #0
1a00561a:	f000 8221 	beq.w	1a005a60 <_svfprintf_r+0x600>
1a00561e:	9b08      	ldr	r3, [sp, #32]
1a005620:	b11b      	cbz	r3, 1a00562a <_svfprintf_r+0x1ca>
1a005622:	9908      	ldr	r1, [sp, #32]
1a005624:	9806      	ldr	r0, [sp, #24]
1a005626:	f7ff f8b3 	bl	1a004790 <_free_r>
1a00562a:	9b07      	ldr	r3, [sp, #28]
1a00562c:	899b      	ldrh	r3, [r3, #12]
1a00562e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a005632:	9b04      	ldr	r3, [sp, #16]
1a005634:	bf18      	it	ne
1a005636:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
1a00563a:	9304      	str	r3, [sp, #16]
1a00563c:	9804      	ldr	r0, [sp, #16]
1a00563e:	b055      	add	sp, #340	; 0x154
1a005640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005644:	4b26      	ldr	r3, [pc, #152]	; (1a0056e0 <_svfprintf_r+0x280>)
1a005646:	9314      	str	r3, [sp, #80]	; 0x50
1a005648:	9b02      	ldr	r3, [sp, #8]
1a00564a:	0699      	lsls	r1, r3, #26
1a00564c:	d52d      	bpl.n	1a0056aa <_svfprintf_r+0x24a>
1a00564e:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a005650:	3407      	adds	r4, #7
1a005652:	f024 0307 	bic.w	r3, r4, #7
1a005656:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00565a:	9309      	str	r3, [sp, #36]	; 0x24
1a00565c:	9a02      	ldr	r2, [sp, #8]
1a00565e:	07d6      	lsls	r6, r2, #31
1a005660:	d50a      	bpl.n	1a005678 <_svfprintf_r+0x218>
1a005662:	ea54 0305 	orrs.w	r3, r4, r5
1a005666:	d007      	beq.n	1a005678 <_svfprintf_r+0x218>
1a005668:	2330      	movs	r3, #48	; 0x30
1a00566a:	f042 0202 	orr.w	r2, r2, #2
1a00566e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a005672:	9202      	str	r2, [sp, #8]
1a005674:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005678:	9b02      	ldr	r3, [sp, #8]
1a00567a:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
1a00567e:	2302      	movs	r3, #2
1a005680:	e044      	b.n	1a00570c <_svfprintf_r+0x2ac>
1a005682:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a005686:	2200      	movs	r2, #0
1a005688:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a00568c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a005690:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a005694:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a005698:	2b09      	cmp	r3, #9
1a00569a:	d9f5      	bls.n	1a005688 <_svfprintf_r+0x228>
1a00569c:	9205      	str	r2, [sp, #20]
1a00569e:	e741      	b.n	1a005524 <_svfprintf_r+0xc4>
1a0056a0:	4b10      	ldr	r3, [pc, #64]	; (1a0056e4 <_svfprintf_r+0x284>)
1a0056a2:	9314      	str	r3, [sp, #80]	; 0x50
1a0056a4:	9b02      	ldr	r3, [sp, #8]
1a0056a6:	0699      	lsls	r1, r3, #26
1a0056a8:	d4d1      	bmi.n	1a00564e <_svfprintf_r+0x1ee>
1a0056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056ac:	f853 4b04 	ldr.w	r4, [r3], #4
1a0056b0:	9309      	str	r3, [sp, #36]	; 0x24
1a0056b2:	9b02      	ldr	r3, [sp, #8]
1a0056b4:	06da      	lsls	r2, r3, #27
1a0056b6:	f100 85ef 	bmi.w	1a006298 <_svfprintf_r+0xe38>
1a0056ba:	9b02      	ldr	r3, [sp, #8]
1a0056bc:	065b      	lsls	r3, r3, #25
1a0056be:	f140 85e7 	bpl.w	1a006290 <_svfprintf_r+0xe30>
1a0056c2:	b2a4      	uxth	r4, r4
1a0056c4:	2500      	movs	r5, #0
1a0056c6:	e7c9      	b.n	1a00565c <_svfprintf_r+0x1fc>
1a0056c8:	f89b 8000 	ldrb.w	r8, [fp]
1a0056cc:	9b02      	ldr	r3, [sp, #8]
1a0056ce:	f043 0304 	orr.w	r3, r3, #4
1a0056d2:	9302      	str	r3, [sp, #8]
1a0056d4:	e724      	b.n	1a005520 <_svfprintf_r+0xc0>
1a0056d6:	bf00      	nop
	...
1a0056e0:	1a00b384 	.word	0x1a00b384
1a0056e4:	1a00b398 	.word	0x1a00b398
1a0056e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0056ea:	f647 0230 	movw	r2, #30768	; 0x7830
1a0056ee:	f854 3b04 	ldr.w	r3, [r4], #4
1a0056f2:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0056f6:	9a02      	ldr	r2, [sp, #8]
1a0056f8:	9409      	str	r4, [sp, #36]	; 0x24
1a0056fa:	461c      	mov	r4, r3
1a0056fc:	4b9d      	ldr	r3, [pc, #628]	; (1a005974 <_svfprintf_r+0x514>)
1a0056fe:	9314      	str	r3, [sp, #80]	; 0x50
1a005700:	f042 0702 	orr.w	r7, r2, #2
1a005704:	2500      	movs	r5, #0
1a005706:	2302      	movs	r3, #2
1a005708:	f04f 0878 	mov.w	r8, #120	; 0x78
1a00570c:	2200      	movs	r2, #0
1a00570e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005712:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a005716:	f000 829b 	beq.w	1a005c50 <_svfprintf_r+0x7f0>
1a00571a:	f027 0280 	bic.w	r2, r7, #128	; 0x80
1a00571e:	9202      	str	r2, [sp, #8]
1a005720:	ea54 0205 	orrs.w	r2, r4, r5
1a005724:	f040 8293 	bne.w	1a005c4e <_svfprintf_r+0x7ee>
1a005728:	f1ba 0f00 	cmp.w	sl, #0
1a00572c:	f040 8490 	bne.w	1a006050 <_svfprintf_r+0xbf0>
1a005730:	2b00      	cmp	r3, #0
1a005732:	f040 80b8 	bne.w	1a0058a6 <_svfprintf_r+0x446>
1a005736:	f017 0701 	ands.w	r7, r7, #1
1a00573a:	f000 85a7 	beq.w	1a00628c <_svfprintf_r+0xe2c>
1a00573e:	2330      	movs	r3, #48	; 0x30
1a005740:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a005744:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a005748:	e274      	b.n	1a005c34 <_svfprintf_r+0x7d4>
1a00574a:	9f02      	ldr	r7, [sp, #8]
1a00574c:	06be      	lsls	r6, r7, #26
1a00574e:	d474      	bmi.n	1a00583a <_svfprintf_r+0x3da>
1a005750:	9b02      	ldr	r3, [sp, #8]
1a005752:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005754:	06dd      	lsls	r5, r3, #27
1a005756:	f852 4b04 	ldr.w	r4, [r2], #4
1a00575a:	f101 8399 	bmi.w	1a006e90 <_svfprintf_r+0x1a30>
1a00575e:	9f02      	ldr	r7, [sp, #8]
1a005760:	0678      	lsls	r0, r7, #25
1a005762:	f141 8070 	bpl.w	1a006846 <_svfprintf_r+0x13e6>
1a005766:	9209      	str	r2, [sp, #36]	; 0x24
1a005768:	b2a4      	uxth	r4, r4
1a00576a:	2500      	movs	r5, #0
1a00576c:	e06c      	b.n	1a005848 <_svfprintf_r+0x3e8>
1a00576e:	9902      	ldr	r1, [sp, #8]
1a005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005772:	068c      	lsls	r4, r1, #26
1a005774:	f102 0304 	add.w	r3, r2, #4
1a005778:	f100 8591 	bmi.w	1a00629e <_svfprintf_r+0xe3e>
1a00577c:	9a02      	ldr	r2, [sp, #8]
1a00577e:	06d0      	lsls	r0, r2, #27
1a005780:	f100 87ee 	bmi.w	1a006760 <_svfprintf_r+0x1300>
1a005784:	9a02      	ldr	r2, [sp, #8]
1a005786:	0651      	lsls	r1, r2, #25
1a005788:	f101 80a6 	bmi.w	1a0068d8 <_svfprintf_r+0x1478>
1a00578c:	9a02      	ldr	r2, [sp, #8]
1a00578e:	0592      	lsls	r2, r2, #22
1a005790:	f140 87e6 	bpl.w	1a006760 <_svfprintf_r+0x1300>
1a005794:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005796:	9309      	str	r3, [sp, #36]	; 0x24
1a005798:	6812      	ldr	r2, [r2, #0]
1a00579a:	9b04      	ldr	r3, [sp, #16]
1a00579c:	7013      	strb	r3, [r2, #0]
1a00579e:	465e      	mov	r6, fp
1a0057a0:	7833      	ldrb	r3, [r6, #0]
1a0057a2:	2b00      	cmp	r3, #0
1a0057a4:	f47f ae89 	bne.w	1a0054ba <_svfprintf_r+0x5a>
1a0057a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a0057aa:	2b00      	cmp	r3, #0
1a0057ac:	f43f af3d 	beq.w	1a00562a <_svfprintf_r+0x1ca>
1a0057b0:	9c07      	ldr	r4, [sp, #28]
1a0057b2:	9806      	ldr	r0, [sp, #24]
1a0057b4:	aa28      	add	r2, sp, #160	; 0xa0
1a0057b6:	4621      	mov	r1, r4
1a0057b8:	f005 f972 	bl	1a00aaa0 <__ssprint_r>
1a0057bc:	89a3      	ldrh	r3, [r4, #12]
1a0057be:	e736      	b.n	1a00562e <_svfprintf_r+0x1ce>
1a0057c0:	f89b 8000 	ldrb.w	r8, [fp]
1a0057c4:	9b02      	ldr	r3, [sp, #8]
1a0057c6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a0057ca:	f000 8663 	beq.w	1a006494 <_svfprintf_r+0x1034>
1a0057ce:	f043 0310 	orr.w	r3, r3, #16
1a0057d2:	9302      	str	r3, [sp, #8]
1a0057d4:	e6a4      	b.n	1a005520 <_svfprintf_r+0xc0>
1a0057d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0057d8:	f854 6b04 	ldr.w	r6, [r4], #4
1a0057dc:	2500      	movs	r5, #0
1a0057de:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0057e2:	2e00      	cmp	r6, #0
1a0057e4:	f000 867a 	beq.w	1a0064dc <_svfprintf_r+0x107c>
1a0057e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0057ec:	f000 87f9 	beq.w	1a0067e2 <_svfprintf_r+0x1382>
1a0057f0:	4652      	mov	r2, sl
1a0057f2:	4629      	mov	r1, r5
1a0057f4:	4630      	mov	r0, r6
1a0057f6:	f004 fb6b 	bl	1a009ed0 <memchr>
1a0057fa:	9008      	str	r0, [sp, #32]
1a0057fc:	2800      	cmp	r0, #0
1a0057fe:	f001 8150 	beq.w	1a006aa2 <_svfprintf_r+0x1642>
1a005802:	9b08      	ldr	r3, [sp, #32]
1a005804:	46aa      	mov	sl, r5
1a005806:	1b9f      	subs	r7, r3, r6
1a005808:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
1a00580c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a005810:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005814:	9409      	str	r4, [sp, #36]	; 0x24
1a005816:	9303      	str	r3, [sp, #12]
1a005818:	f8cd a020 	str.w	sl, [sp, #32]
1a00581c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
1a005820:	2a00      	cmp	r2, #0
1a005822:	f000 80bb 	beq.w	1a00599c <_svfprintf_r+0x53c>
1a005826:	9b03      	ldr	r3, [sp, #12]
1a005828:	3301      	adds	r3, #1
1a00582a:	9303      	str	r3, [sp, #12]
1a00582c:	e0b6      	b.n	1a00599c <_svfprintf_r+0x53c>
1a00582e:	9b02      	ldr	r3, [sp, #8]
1a005830:	f043 0710 	orr.w	r7, r3, #16
1a005834:	069b      	lsls	r3, r3, #26
1a005836:	f140 8617 	bpl.w	1a006468 <_svfprintf_r+0x1008>
1a00583a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00583c:	3407      	adds	r4, #7
1a00583e:	f024 0307 	bic.w	r3, r4, #7
1a005842:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a005846:	9309      	str	r3, [sp, #36]	; 0x24
1a005848:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
1a00584c:	2300      	movs	r3, #0
1a00584e:	e75d      	b.n	1a00570c <_svfprintf_r+0x2ac>
1a005850:	9b02      	ldr	r3, [sp, #8]
1a005852:	f89b 8000 	ldrb.w	r8, [fp]
1a005856:	f043 0308 	orr.w	r3, r3, #8
1a00585a:	9302      	str	r3, [sp, #8]
1a00585c:	e660      	b.n	1a005520 <_svfprintf_r+0xc0>
1a00585e:	9b02      	ldr	r3, [sp, #8]
1a005860:	069c      	lsls	r4, r3, #26
1a005862:	f043 0710 	orr.w	r7, r3, #16
1a005866:	f140 85f1 	bpl.w	1a00644c <_svfprintf_r+0xfec>
1a00586a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00586c:	3407      	adds	r4, #7
1a00586e:	f024 0307 	bic.w	r3, r4, #7
1a005872:	4619      	mov	r1, r3
1a005874:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a005878:	9109      	str	r1, [sp, #36]	; 0x24
1a00587a:	4614      	mov	r4, r2
1a00587c:	461d      	mov	r5, r3
1a00587e:	2a00      	cmp	r2, #0
1a005880:	f173 0300 	sbcs.w	r3, r3, #0
1a005884:	f2c0 84d7 	blt.w	1a006236 <_svfprintf_r+0xdd6>
1a005888:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a00588c:	f000 81c7 	beq.w	1a005c1e <_svfprintf_r+0x7be>
1a005890:	f027 0380 	bic.w	r3, r7, #128	; 0x80
1a005894:	9302      	str	r3, [sp, #8]
1a005896:	ea54 0305 	orrs.w	r3, r4, r5
1a00589a:	f040 81bf 	bne.w	1a005c1c <_svfprintf_r+0x7bc>
1a00589e:	f1ba 0f00 	cmp.w	sl, #0
1a0058a2:	f041 803f 	bne.w	1a006924 <_svfprintf_r+0x14c4>
1a0058a6:	f04f 0a00 	mov.w	sl, #0
1a0058aa:	4657      	mov	r7, sl
1a0058ac:	ae54      	add	r6, sp, #336	; 0x150
1a0058ae:	e1c1      	b.n	1a005c34 <_svfprintf_r+0x7d4>
1a0058b0:	f89b 8000 	ldrb.w	r8, [fp]
1a0058b4:	9b02      	ldr	r3, [sp, #8]
1a0058b6:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a0058ba:	f000 85e2 	beq.w	1a006482 <_svfprintf_r+0x1022>
1a0058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0058c2:	9302      	str	r3, [sp, #8]
1a0058c4:	e62c      	b.n	1a005520 <_svfprintf_r+0xc0>
1a0058c6:	9b02      	ldr	r3, [sp, #8]
1a0058c8:	069a      	lsls	r2, r3, #26
1a0058ca:	f043 0710 	orr.w	r7, r3, #16
1a0058ce:	f140 84f1 	bpl.w	1a0062b4 <_svfprintf_r+0xe54>
1a0058d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0058d4:	3407      	adds	r4, #7
1a0058d6:	f024 0307 	bic.w	r3, r4, #7
1a0058da:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0058de:	9309      	str	r3, [sp, #36]	; 0x24
1a0058e0:	2301      	movs	r3, #1
1a0058e2:	e713      	b.n	1a00570c <_svfprintf_r+0x2ac>
1a0058e4:	9f02      	ldr	r7, [sp, #8]
1a0058e6:	06b8      	lsls	r0, r7, #26
1a0058e8:	d4bf      	bmi.n	1a00586a <_svfprintf_r+0x40a>
1a0058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0058ec:	1d1a      	adds	r2, r3, #4
1a0058ee:	9b02      	ldr	r3, [sp, #8]
1a0058f0:	06d9      	lsls	r1, r3, #27
1a0058f2:	f101 82d0 	bmi.w	1a006e96 <_svfprintf_r+0x1a36>
1a0058f6:	9f02      	ldr	r7, [sp, #8]
1a0058f8:	463b      	mov	r3, r7
1a0058fa:	065b      	lsls	r3, r3, #25
1a0058fc:	f140 8796 	bpl.w	1a00682c <_svfprintf_r+0x13cc>
1a005900:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005902:	9209      	str	r2, [sp, #36]	; 0x24
1a005904:	f9b3 4000 	ldrsh.w	r4, [r3]
1a005908:	17e5      	asrs	r5, r4, #31
1a00590a:	4622      	mov	r2, r4
1a00590c:	462b      	mov	r3, r5
1a00590e:	e7b6      	b.n	1a00587e <_svfprintf_r+0x41e>
1a005910:	9b02      	ldr	r3, [sp, #8]
1a005912:	f89b 8000 	ldrb.w	r8, [fp]
1a005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00591a:	9302      	str	r3, [sp, #8]
1a00591c:	e600      	b.n	1a005520 <_svfprintf_r+0xc0>
1a00591e:	465a      	mov	r2, fp
1a005920:	f812 8b01 	ldrb.w	r8, [r2], #1
1a005924:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a005928:	f001 828e 	beq.w	1a006e48 <_svfprintf_r+0x19e8>
1a00592c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a005930:	2b09      	cmp	r3, #9
1a005932:	4693      	mov	fp, r2
1a005934:	f04f 0a00 	mov.w	sl, #0
1a005938:	f63f adf4 	bhi.w	1a005524 <_svfprintf_r+0xc4>
1a00593c:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a005940:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a005944:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
1a005948:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00594c:	2b09      	cmp	r3, #9
1a00594e:	d9f5      	bls.n	1a00593c <_svfprintf_r+0x4dc>
1a005950:	e5e8      	b.n	1a005524 <_svfprintf_r+0xc4>
1a005952:	f88d 7083 	strb.w	r7, [sp, #131]	; 0x83
1a005956:	f89b 8000 	ldrb.w	r8, [fp]
1a00595a:	e5e1      	b.n	1a005520 <_svfprintf_r+0xc0>
1a00595c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00595e:	f89b 8000 	ldrb.w	r8, [fp]
1a005962:	f853 2b04 	ldr.w	r2, [r3], #4
1a005966:	9205      	str	r2, [sp, #20]
1a005968:	2a00      	cmp	r2, #0
1a00596a:	f2c0 8585 	blt.w	1a006478 <_svfprintf_r+0x1018>
1a00596e:	9309      	str	r3, [sp, #36]	; 0x24
1a005970:	e5d6      	b.n	1a005520 <_svfprintf_r+0xc0>
1a005972:	bf00      	nop
1a005974:	1a00b384 	.word	0x1a00b384
1a005978:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00597a:	2300      	movs	r3, #0
1a00597c:	f854 2b04 	ldr.w	r2, [r4], #4
1a005980:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a005984:	2701      	movs	r7, #1
1a005986:	461a      	mov	r2, r3
1a005988:	9703      	str	r7, [sp, #12]
1a00598a:	9409      	str	r4, [sp, #36]	; 0x24
1a00598c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a005990:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a005994:	9208      	str	r2, [sp, #32]
1a005996:	4692      	mov	sl, r2
1a005998:	920c      	str	r2, [sp, #48]	; 0x30
1a00599a:	ae3b      	add	r6, sp, #236	; 0xec
1a00599c:	9b02      	ldr	r3, [sp, #8]
1a00599e:	f013 0302 	ands.w	r3, r3, #2
1a0059a2:	930a      	str	r3, [sp, #40]	; 0x28
1a0059a4:	d002      	beq.n	1a0059ac <_svfprintf_r+0x54c>
1a0059a6:	9b03      	ldr	r3, [sp, #12]
1a0059a8:	3302      	adds	r3, #2
1a0059aa:	9303      	str	r3, [sp, #12]
1a0059ac:	9b02      	ldr	r3, [sp, #8]
1a0059ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0059b0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a0059b4:	930b      	str	r3, [sp, #44]	; 0x2c
1a0059b6:	d104      	bne.n	1a0059c2 <_svfprintf_r+0x562>
1a0059b8:	9b05      	ldr	r3, [sp, #20]
1a0059ba:	9903      	ldr	r1, [sp, #12]
1a0059bc:	1a5d      	subs	r5, r3, r1
1a0059be:	2d00      	cmp	r5, #0
1a0059c0:	dc5a      	bgt.n	1a005a78 <_svfprintf_r+0x618>
1a0059c2:	b172      	cbz	r2, 1a0059e2 <_svfprintf_r+0x582>
1a0059c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0059c6:	3201      	adds	r2, #1
1a0059c8:	3401      	adds	r4, #1
1a0059ca:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a0059ce:	2101      	movs	r1, #1
1a0059d0:	2a07      	cmp	r2, #7
1a0059d2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0059d6:	e9c9 0100 	strd	r0, r1, [r9]
1a0059da:	f300 82e9 	bgt.w	1a005fb0 <_svfprintf_r+0xb50>
1a0059de:	f109 0908 	add.w	r9, r9, #8
1a0059e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0059e4:	b16b      	cbz	r3, 1a005a02 <_svfprintf_r+0x5a2>
1a0059e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0059e8:	3301      	adds	r3, #1
1a0059ea:	3402      	adds	r4, #2
1a0059ec:	a921      	add	r1, sp, #132	; 0x84
1a0059ee:	2202      	movs	r2, #2
1a0059f0:	2b07      	cmp	r3, #7
1a0059f2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0059f6:	e9c9 1200 	strd	r1, r2, [r9]
1a0059fa:	f300 82e5 	bgt.w	1a005fc8 <_svfprintf_r+0xb68>
1a0059fe:	f109 0908 	add.w	r9, r9, #8
1a005a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005a04:	2b80      	cmp	r3, #128	; 0x80
1a005a06:	f000 81f8 	beq.w	1a005dfa <_svfprintf_r+0x99a>
1a005a0a:	ebaa 0507 	sub.w	r5, sl, r7
1a005a0e:	2d00      	cmp	r5, #0
1a005a10:	f300 8236 	bgt.w	1a005e80 <_svfprintf_r+0xa20>
1a005a14:	9b02      	ldr	r3, [sp, #8]
1a005a16:	05da      	lsls	r2, r3, #23
1a005a18:	f100 8185 	bmi.w	1a005d26 <_svfprintf_r+0x8c6>
1a005a1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005a1e:	f8c9 6000 	str.w	r6, [r9]
1a005a22:	3301      	adds	r3, #1
1a005a24:	443c      	add	r4, r7
1a005a26:	2b07      	cmp	r3, #7
1a005a28:	942a      	str	r4, [sp, #168]	; 0xa8
1a005a2a:	f8c9 7004 	str.w	r7, [r9, #4]
1a005a2e:	9329      	str	r3, [sp, #164]	; 0xa4
1a005a30:	f300 82b2 	bgt.w	1a005f98 <_svfprintf_r+0xb38>
1a005a34:	f109 0908 	add.w	r9, r9, #8
1a005a38:	9b02      	ldr	r3, [sp, #8]
1a005a3a:	0759      	lsls	r1, r3, #29
1a005a3c:	d505      	bpl.n	1a005a4a <_svfprintf_r+0x5ea>
1a005a3e:	9b05      	ldr	r3, [sp, #20]
1a005a40:	9a03      	ldr	r2, [sp, #12]
1a005a42:	1a9d      	subs	r5, r3, r2
1a005a44:	2d00      	cmp	r5, #0
1a005a46:	f300 82cb 	bgt.w	1a005fe0 <_svfprintf_r+0xb80>
1a005a4a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
1a005a4e:	9903      	ldr	r1, [sp, #12]
1a005a50:	428a      	cmp	r2, r1
1a005a52:	bfac      	ite	ge
1a005a54:	189b      	addge	r3, r3, r2
1a005a56:	185b      	addlt	r3, r3, r1
1a005a58:	9304      	str	r3, [sp, #16]
1a005a5a:	2c00      	cmp	r4, #0
1a005a5c:	f47f add7 	bne.w	1a00560e <_svfprintf_r+0x1ae>
1a005a60:	2300      	movs	r3, #0
1a005a62:	9329      	str	r3, [sp, #164]	; 0xa4
1a005a64:	9b08      	ldr	r3, [sp, #32]
1a005a66:	b11b      	cbz	r3, 1a005a70 <_svfprintf_r+0x610>
1a005a68:	9908      	ldr	r1, [sp, #32]
1a005a6a:	9806      	ldr	r0, [sp, #24]
1a005a6c:	f7fe fe90 	bl	1a004790 <_free_r>
1a005a70:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005a74:	465e      	mov	r6, fp
1a005a76:	e693      	b.n	1a0057a0 <_svfprintf_r+0x340>
1a005a78:	2d10      	cmp	r5, #16
1a005a7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005a7c:	dd29      	ble.n	1a005ad2 <_svfprintf_r+0x672>
1a005a7e:	4620      	mov	r0, r4
1a005a80:	4649      	mov	r1, r9
1a005a82:	2310      	movs	r3, #16
1a005a84:	46b1      	mov	r9, r6
1a005a86:	971e      	str	r7, [sp, #120]	; 0x78
1a005a88:	9c06      	ldr	r4, [sp, #24]
1a005a8a:	9e07      	ldr	r6, [sp, #28]
1a005a8c:	e004      	b.n	1a005a98 <_svfprintf_r+0x638>
1a005a8e:	3d10      	subs	r5, #16
1a005a90:	2d10      	cmp	r5, #16
1a005a92:	f101 0108 	add.w	r1, r1, #8
1a005a96:	dd18      	ble.n	1a005aca <_svfprintf_r+0x66a>
1a005a98:	3201      	adds	r2, #1
1a005a9a:	4fc4      	ldr	r7, [pc, #784]	; (1a005dac <_svfprintf_r+0x94c>)
1a005a9c:	3010      	adds	r0, #16
1a005a9e:	2a07      	cmp	r2, #7
1a005aa0:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a005aa4:	e9c1 7300 	strd	r7, r3, [r1]
1a005aa8:	ddf1      	ble.n	1a005a8e <_svfprintf_r+0x62e>
1a005aaa:	aa28      	add	r2, sp, #160	; 0xa0
1a005aac:	4631      	mov	r1, r6
1a005aae:	4620      	mov	r0, r4
1a005ab0:	f004 fff6 	bl	1a00aaa0 <__ssprint_r>
1a005ab4:	2800      	cmp	r0, #0
1a005ab6:	f47f adb2 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005aba:	3d10      	subs	r5, #16
1a005abc:	2d10      	cmp	r5, #16
1a005abe:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a005ac2:	a92b      	add	r1, sp, #172	; 0xac
1a005ac4:	f04f 0310 	mov.w	r3, #16
1a005ac8:	dce6      	bgt.n	1a005a98 <_svfprintf_r+0x638>
1a005aca:	9f1e      	ldr	r7, [sp, #120]	; 0x78
1a005acc:	464e      	mov	r6, r9
1a005ace:	4604      	mov	r4, r0
1a005ad0:	4689      	mov	r9, r1
1a005ad2:	3201      	adds	r2, #1
1a005ad4:	4bb5      	ldr	r3, [pc, #724]	; (1a005dac <_svfprintf_r+0x94c>)
1a005ad6:	442c      	add	r4, r5
1a005ad8:	2a07      	cmp	r2, #7
1a005ada:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005ade:	e9c9 3500 	strd	r3, r5, [r9]
1a005ae2:	f300 85c9 	bgt.w	1a006678 <_svfprintf_r+0x1218>
1a005ae6:	f109 0908 	add.w	r9, r9, #8
1a005aea:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005aee:	e768      	b.n	1a0059c2 <_svfprintf_r+0x562>
1a005af0:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a005af2:	3407      	adds	r4, #7
1a005af4:	f024 0307 	bic.w	r3, r4, #7
1a005af8:	ecb3 7b02 	vldmia	r3!, {d7}
1a005afc:	ec55 4b17 	vmov	r4, r5, d7
1a005b00:	9309      	str	r3, [sp, #36]	; 0x24
1a005b02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a005b06:	931b      	str	r3, [sp, #108]	; 0x6c
1a005b08:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a005b0c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a005b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005b14:	4ba6      	ldr	r3, [pc, #664]	; (1a005db0 <_svfprintf_r+0x950>)
1a005b16:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005b1a:	f7fe fa89 	bl	1a004030 <__aeabi_dcmpun>
1a005b1e:	2800      	cmp	r0, #0
1a005b20:	f040 83d1 	bne.w	1a0062c6 <_svfprintf_r+0xe66>
1a005b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005b28:	4ba1      	ldr	r3, [pc, #644]	; (1a005db0 <_svfprintf_r+0x950>)
1a005b2a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a005b2e:	f7fe fa61 	bl	1a003ff4 <__aeabi_dcmple>
1a005b32:	2800      	cmp	r0, #0
1a005b34:	f040 83c7 	bne.w	1a0062c6 <_svfprintf_r+0xe66>
1a005b38:	2200      	movs	r2, #0
1a005b3a:	2300      	movs	r3, #0
1a005b3c:	4620      	mov	r0, r4
1a005b3e:	4629      	mov	r1, r5
1a005b40:	f7fe fa4e 	bl	1a003fe0 <__aeabi_dcmplt>
1a005b44:	2800      	cmp	r0, #0
1a005b46:	f040 86a0 	bne.w	1a00688a <_svfprintf_r+0x142a>
1a005b4a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005b4e:	4e99      	ldr	r6, [pc, #612]	; (1a005db4 <_svfprintf_r+0x954>)
1a005b50:	4b99      	ldr	r3, [pc, #612]	; (1a005db8 <_svfprintf_r+0x958>)
1a005b52:	9802      	ldr	r0, [sp, #8]
1a005b54:	2100      	movs	r1, #0
1a005b56:	2703      	movs	r7, #3
1a005b58:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a005b5c:	9703      	str	r7, [sp, #12]
1a005b5e:	9108      	str	r1, [sp, #32]
1a005b60:	9002      	str	r0, [sp, #8]
1a005b62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a005b66:	bfc8      	it	gt
1a005b68:	461e      	movgt	r6, r3
1a005b6a:	468a      	mov	sl, r1
1a005b6c:	910c      	str	r1, [sp, #48]	; 0x30
1a005b6e:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a005b72:	e655      	b.n	1a005820 <_svfprintf_r+0x3c0>
1a005b74:	9d06      	ldr	r5, [sp, #24]
1a005b76:	4628      	mov	r0, r5
1a005b78:	f004 f928 	bl	1a009dcc <_localeconv_r>
1a005b7c:	6843      	ldr	r3, [r0, #4]
1a005b7e:	9317      	str	r3, [sp, #92]	; 0x5c
1a005b80:	4618      	mov	r0, r3
1a005b82:	f7ff fbfd 	bl	1a005380 <strlen>
1a005b86:	9019      	str	r0, [sp, #100]	; 0x64
1a005b88:	4604      	mov	r4, r0
1a005b8a:	4628      	mov	r0, r5
1a005b8c:	f004 f91e 	bl	1a009dcc <_localeconv_r>
1a005b90:	6883      	ldr	r3, [r0, #8]
1a005b92:	9318      	str	r3, [sp, #96]	; 0x60
1a005b94:	2120      	movs	r1, #32
1a005b96:	2c00      	cmp	r4, #0
1a005b98:	f43f ad2a 	beq.w	1a0055f0 <_svfprintf_r+0x190>
1a005b9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a005b9e:	f89b 8000 	ldrb.w	r8, [fp]
1a005ba2:	2b00      	cmp	r3, #0
1a005ba4:	f43f acbc 	beq.w	1a005520 <_svfprintf_r+0xc0>
1a005ba8:	781b      	ldrb	r3, [r3, #0]
1a005baa:	2b00      	cmp	r3, #0
1a005bac:	f43f acb8 	beq.w	1a005520 <_svfprintf_r+0xc0>
1a005bb0:	9b02      	ldr	r3, [sp, #8]
1a005bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a005bb6:	9302      	str	r3, [sp, #8]
1a005bb8:	e4b2      	b.n	1a005520 <_svfprintf_r+0xc0>
1a005bba:	9b02      	ldr	r3, [sp, #8]
1a005bbc:	f89b 8000 	ldrb.w	r8, [fp]
1a005bc0:	f043 0301 	orr.w	r3, r3, #1
1a005bc4:	9302      	str	r3, [sp, #8]
1a005bc6:	e4ab      	b.n	1a005520 <_svfprintf_r+0xc0>
1a005bc8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a005bcc:	f89b 8000 	ldrb.w	r8, [fp]
1a005bd0:	2b00      	cmp	r3, #0
1a005bd2:	f47f aca5 	bne.w	1a005520 <_svfprintf_r+0xc0>
1a005bd6:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a005bda:	e4a1      	b.n	1a005520 <_svfprintf_r+0xc0>
1a005bdc:	9f02      	ldr	r7, [sp, #8]
1a005bde:	463b      	mov	r3, r7
1a005be0:	069b      	lsls	r3, r3, #26
1a005be2:	f53f ae76 	bmi.w	1a0058d2 <_svfprintf_r+0x472>
1a005be6:	9b02      	ldr	r3, [sp, #8]
1a005be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005bea:	06de      	lsls	r6, r3, #27
1a005bec:	f852 4b04 	ldr.w	r4, [r2], #4
1a005bf0:	f101 814b 	bmi.w	1a006e8a <_svfprintf_r+0x1a2a>
1a005bf4:	9f02      	ldr	r7, [sp, #8]
1a005bf6:	067d      	lsls	r5, r7, #25
1a005bf8:	f140 862f 	bpl.w	1a00685a <_svfprintf_r+0x13fa>
1a005bfc:	9209      	str	r2, [sp, #36]	; 0x24
1a005bfe:	b2a4      	uxth	r4, r4
1a005c00:	2500      	movs	r5, #0
1a005c02:	2301      	movs	r3, #1
1a005c04:	e582      	b.n	1a00570c <_svfprintf_r+0x2ac>
1a005c06:	f1b8 0f00 	cmp.w	r8, #0
1a005c0a:	f43f adcd 	beq.w	1a0057a8 <_svfprintf_r+0x348>
1a005c0e:	2300      	movs	r3, #0
1a005c10:	2701      	movs	r7, #1
1a005c12:	461a      	mov	r2, r3
1a005c14:	9703      	str	r7, [sp, #12]
1a005c16:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a005c1a:	e6b7      	b.n	1a00598c <_svfprintf_r+0x52c>
1a005c1c:	9f02      	ldr	r7, [sp, #8]
1a005c1e:	2d00      	cmp	r5, #0
1a005c20:	bf08      	it	eq
1a005c22:	2c0a      	cmpeq	r4, #10
1a005c24:	d239      	bcs.n	1a005c9a <_svfprintf_r+0x83a>
1a005c26:	3430      	adds	r4, #48	; 0x30
1a005c28:	9702      	str	r7, [sp, #8]
1a005c2a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a005c2e:	2701      	movs	r7, #1
1a005c30:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a005c34:	2300      	movs	r3, #0
1a005c36:	4557      	cmp	r7, sl
1a005c38:	9308      	str	r3, [sp, #32]
1a005c3a:	930c      	str	r3, [sp, #48]	; 0x30
1a005c3c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a005c40:	463b      	mov	r3, r7
1a005c42:	bfb8      	it	lt
1a005c44:	4653      	movlt	r3, sl
1a005c46:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005c4a:	9303      	str	r3, [sp, #12]
1a005c4c:	e5e8      	b.n	1a005820 <_svfprintf_r+0x3c0>
1a005c4e:	9f02      	ldr	r7, [sp, #8]
1a005c50:	2b01      	cmp	r3, #1
1a005c52:	d0e4      	beq.n	1a005c1e <_svfprintf_r+0x7be>
1a005c54:	2b02      	cmp	r3, #2
1a005c56:	f000 8202 	beq.w	1a00605e <_svfprintf_r+0xbfe>
1a005c5a:	a954      	add	r1, sp, #336	; 0x150
1a005c5c:	e000      	b.n	1a005c60 <_svfprintf_r+0x800>
1a005c5e:	4631      	mov	r1, r6
1a005c60:	08e2      	lsrs	r2, r4, #3
1a005c62:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a005c66:	08e8      	lsrs	r0, r5, #3
1a005c68:	f004 0307 	and.w	r3, r4, #7
1a005c6c:	4605      	mov	r5, r0
1a005c6e:	4614      	mov	r4, r2
1a005c70:	3330      	adds	r3, #48	; 0x30
1a005c72:	ea54 0205 	orrs.w	r2, r4, r5
1a005c76:	f801 3c01 	strb.w	r3, [r1, #-1]
1a005c7a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a005c7e:	d1ee      	bne.n	1a005c5e <_svfprintf_r+0x7fe>
1a005c80:	07f8      	lsls	r0, r7, #31
1a005c82:	d54c      	bpl.n	1a005d1e <_svfprintf_r+0x8be>
1a005c84:	2b30      	cmp	r3, #48	; 0x30
1a005c86:	d04a      	beq.n	1a005d1e <_svfprintf_r+0x8be>
1a005c88:	2330      	movs	r3, #48	; 0x30
1a005c8a:	3902      	subs	r1, #2
1a005c8c:	f806 3c01 	strb.w	r3, [r6, #-1]
1a005c90:	ab54      	add	r3, sp, #336	; 0x150
1a005c92:	9702      	str	r7, [sp, #8]
1a005c94:	460e      	mov	r6, r1
1a005c96:	1a5f      	subs	r7, r3, r1
1a005c98:	e7cc      	b.n	1a005c34 <_svfprintf_r+0x7d4>
1a005c9a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
1a005c9e:	2200      	movs	r2, #0
1a005ca0:	f8cd b008 	str.w	fp, [sp, #8]
1a005ca4:	f8cd 800c 	str.w	r8, [sp, #12]
1a005ca8:	f8cd 9020 	str.w	r9, [sp, #32]
1a005cac:	ae54      	add	r6, sp, #336	; 0x150
1a005cae:	46b9      	mov	r9, r7
1a005cb0:	4693      	mov	fp, r2
1a005cb2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005cb6:	461f      	mov	r7, r3
1a005cb8:	e007      	b.n	1a005cca <_svfprintf_r+0x86a>
1a005cba:	f7fe f9f7 	bl	1a0040ac <__aeabi_uldivmod>
1a005cbe:	2d00      	cmp	r5, #0
1a005cc0:	bf08      	it	eq
1a005cc2:	2c0a      	cmpeq	r4, #10
1a005cc4:	d320      	bcc.n	1a005d08 <_svfprintf_r+0x8a8>
1a005cc6:	4604      	mov	r4, r0
1a005cc8:	460d      	mov	r5, r1
1a005cca:	220a      	movs	r2, #10
1a005ccc:	2300      	movs	r3, #0
1a005cce:	4620      	mov	r0, r4
1a005cd0:	4629      	mov	r1, r5
1a005cd2:	f7fe f9eb 	bl	1a0040ac <__aeabi_uldivmod>
1a005cd6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a005cda:	f806 cc01 	strb.w	ip, [r6, #-1]
1a005cde:	4620      	mov	r0, r4
1a005ce0:	4629      	mov	r1, r5
1a005ce2:	220a      	movs	r2, #10
1a005ce4:	2300      	movs	r3, #0
1a005ce6:	f10b 0b01 	add.w	fp, fp, #1
1a005cea:	3e01      	subs	r6, #1
1a005cec:	2f00      	cmp	r7, #0
1a005cee:	d0e4      	beq.n	1a005cba <_svfprintf_r+0x85a>
1a005cf0:	f898 c000 	ldrb.w	ip, [r8]
1a005cf4:	45e3      	cmp	fp, ip
1a005cf6:	d1e0      	bne.n	1a005cba <_svfprintf_r+0x85a>
1a005cf8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
1a005cfc:	d0dd      	beq.n	1a005cba <_svfprintf_r+0x85a>
1a005cfe:	429d      	cmp	r5, r3
1a005d00:	bf08      	it	eq
1a005d02:	4294      	cmpeq	r4, r2
1a005d04:	f080 8669 	bcs.w	1a0069da <_svfprintf_r+0x157a>
1a005d08:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
1a005d0c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a005d10:	464f      	mov	r7, r9
1a005d12:	f8dd b008 	ldr.w	fp, [sp, #8]
1a005d16:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a005d1a:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a005d1e:	9702      	str	r7, [sp, #8]
1a005d20:	ab54      	add	r3, sp, #336	; 0x150
1a005d22:	1b9f      	subs	r7, r3, r6
1a005d24:	e786      	b.n	1a005c34 <_svfprintf_r+0x7d4>
1a005d26:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a005d2a:	f340 80e3 	ble.w	1a005ef4 <_svfprintf_r+0xa94>
1a005d2e:	2200      	movs	r2, #0
1a005d30:	2300      	movs	r3, #0
1a005d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005d36:	f7fe f949 	bl	1a003fcc <__aeabi_dcmpeq>
1a005d3a:	2800      	cmp	r0, #0
1a005d3c:	f000 81a8 	beq.w	1a006090 <_svfprintf_r+0xc30>
1a005d40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005d42:	4a1e      	ldr	r2, [pc, #120]	; (1a005dbc <_svfprintf_r+0x95c>)
1a005d44:	f8c9 2000 	str.w	r2, [r9]
1a005d48:	3301      	adds	r3, #1
1a005d4a:	3401      	adds	r4, #1
1a005d4c:	2201      	movs	r2, #1
1a005d4e:	2b07      	cmp	r3, #7
1a005d50:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a005d54:	f8c9 2004 	str.w	r2, [r9, #4]
1a005d58:	f300 84d1 	bgt.w	1a0066fe <_svfprintf_r+0x129e>
1a005d5c:	f109 0908 	add.w	r9, r9, #8
1a005d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005d62:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005d64:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005d66:	4293      	cmp	r3, r2
1a005d68:	f280 828a 	bge.w	1a006280 <_svfprintf_r+0xe20>
1a005d6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005d6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a005d70:	f8c9 2000 	str.w	r2, [r9]
1a005d74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a005d76:	f8c9 2004 	str.w	r2, [r9, #4]
1a005d7a:	3301      	adds	r3, #1
1a005d7c:	4414      	add	r4, r2
1a005d7e:	2b07      	cmp	r3, #7
1a005d80:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a005d84:	f300 838f 	bgt.w	1a0064a6 <_svfprintf_r+0x1046>
1a005d88:	f109 0908 	add.w	r9, r9, #8
1a005d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005d8e:	1e5d      	subs	r5, r3, #1
1a005d90:	2d00      	cmp	r5, #0
1a005d92:	f77f ae51 	ble.w	1a005a38 <_svfprintf_r+0x5d8>
1a005d96:	2d10      	cmp	r5, #16
1a005d98:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005d9a:	4b09      	ldr	r3, [pc, #36]	; (1a005dc0 <_svfprintf_r+0x960>)
1a005d9c:	f340 84bc 	ble.w	1a006718 <_svfprintf_r+0x12b8>
1a005da0:	2610      	movs	r6, #16
1a005da2:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a005da6:	469a      	mov	sl, r3
1a005da8:	e012      	b.n	1a005dd0 <_svfprintf_r+0x970>
1a005daa:	bf00      	nop
1a005dac:	1a00b3b8 	.word	0x1a00b3b8
1a005db0:	7fefffff 	.word	0x7fefffff
1a005db4:	1a00b374 	.word	0x1a00b374
1a005db8:	1a00b378 	.word	0x1a00b378
1a005dbc:	1a00b3b4 	.word	0x1a00b3b4
1a005dc0:	1a00b3c8 	.word	0x1a00b3c8
1a005dc4:	f109 0908 	add.w	r9, r9, #8
1a005dc8:	3d10      	subs	r5, #16
1a005dca:	2d10      	cmp	r5, #16
1a005dcc:	f340 84a3 	ble.w	1a006716 <_svfprintf_r+0x12b6>
1a005dd0:	3201      	adds	r2, #1
1a005dd2:	3410      	adds	r4, #16
1a005dd4:	2a07      	cmp	r2, #7
1a005dd6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005dda:	e9c9 a600 	strd	sl, r6, [r9]
1a005dde:	ddf1      	ble.n	1a005dc4 <_svfprintf_r+0x964>
1a005de0:	aa28      	add	r2, sp, #160	; 0xa0
1a005de2:	4641      	mov	r1, r8
1a005de4:	4638      	mov	r0, r7
1a005de6:	f004 fe5b 	bl	1a00aaa0 <__ssprint_r>
1a005dea:	2800      	cmp	r0, #0
1a005dec:	f47f ac17 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005df0:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a005df4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005df8:	e7e6      	b.n	1a005dc8 <_svfprintf_r+0x968>
1a005dfa:	9b05      	ldr	r3, [sp, #20]
1a005dfc:	9a03      	ldr	r2, [sp, #12]
1a005dfe:	1a9d      	subs	r5, r3, r2
1a005e00:	2d00      	cmp	r5, #0
1a005e02:	f77f ae02 	ble.w	1a005a0a <_svfprintf_r+0x5aa>
1a005e06:	2d10      	cmp	r5, #16
1a005e08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005e0a:	4b9f      	ldr	r3, [pc, #636]	; (1a006088 <_svfprintf_r+0xc28>)
1a005e0c:	dd28      	ble.n	1a005e60 <_svfprintf_r+0xa00>
1a005e0e:	4620      	mov	r0, r4
1a005e10:	970a      	str	r7, [sp, #40]	; 0x28
1a005e12:	4649      	mov	r1, r9
1a005e14:	9c06      	ldr	r4, [sp, #24]
1a005e16:	46b1      	mov	r9, r6
1a005e18:	461f      	mov	r7, r3
1a005e1a:	9e07      	ldr	r6, [sp, #28]
1a005e1c:	e004      	b.n	1a005e28 <_svfprintf_r+0x9c8>
1a005e1e:	3d10      	subs	r5, #16
1a005e20:	2d10      	cmp	r5, #16
1a005e22:	f101 0108 	add.w	r1, r1, #8
1a005e26:	dd16      	ble.n	1a005e56 <_svfprintf_r+0x9f6>
1a005e28:	3201      	adds	r2, #1
1a005e2a:	3010      	adds	r0, #16
1a005e2c:	2310      	movs	r3, #16
1a005e2e:	2a07      	cmp	r2, #7
1a005e30:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a005e34:	600f      	str	r7, [r1, #0]
1a005e36:	604b      	str	r3, [r1, #4]
1a005e38:	ddf1      	ble.n	1a005e1e <_svfprintf_r+0x9be>
1a005e3a:	aa28      	add	r2, sp, #160	; 0xa0
1a005e3c:	4631      	mov	r1, r6
1a005e3e:	4620      	mov	r0, r4
1a005e40:	f004 fe2e 	bl	1a00aaa0 <__ssprint_r>
1a005e44:	2800      	cmp	r0, #0
1a005e46:	f47f abea 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005e4a:	3d10      	subs	r5, #16
1a005e4c:	2d10      	cmp	r5, #16
1a005e4e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a005e52:	a92b      	add	r1, sp, #172	; 0xac
1a005e54:	dce8      	bgt.n	1a005e28 <_svfprintf_r+0x9c8>
1a005e56:	463b      	mov	r3, r7
1a005e58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005e5a:	464e      	mov	r6, r9
1a005e5c:	4604      	mov	r4, r0
1a005e5e:	4689      	mov	r9, r1
1a005e60:	3201      	adds	r2, #1
1a005e62:	442c      	add	r4, r5
1a005e64:	2a07      	cmp	r2, #7
1a005e66:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005e6a:	e9c9 3500 	strd	r3, r5, [r9]
1a005e6e:	f300 846a 	bgt.w	1a006746 <_svfprintf_r+0x12e6>
1a005e72:	ebaa 0507 	sub.w	r5, sl, r7
1a005e76:	2d00      	cmp	r5, #0
1a005e78:	f109 0908 	add.w	r9, r9, #8
1a005e7c:	f77f adca 	ble.w	1a005a14 <_svfprintf_r+0x5b4>
1a005e80:	2d10      	cmp	r5, #16
1a005e82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005e84:	4b80      	ldr	r3, [pc, #512]	; (1a006088 <_svfprintf_r+0xc28>)
1a005e86:	dd29      	ble.n	1a005edc <_svfprintf_r+0xa7c>
1a005e88:	4620      	mov	r0, r4
1a005e8a:	970a      	str	r7, [sp, #40]	; 0x28
1a005e8c:	4649      	mov	r1, r9
1a005e8e:	f04f 0a10 	mov.w	sl, #16
1a005e92:	46b1      	mov	r9, r6
1a005e94:	9c06      	ldr	r4, [sp, #24]
1a005e96:	9e07      	ldr	r6, [sp, #28]
1a005e98:	461f      	mov	r7, r3
1a005e9a:	e004      	b.n	1a005ea6 <_svfprintf_r+0xa46>
1a005e9c:	3d10      	subs	r5, #16
1a005e9e:	2d10      	cmp	r5, #16
1a005ea0:	f101 0108 	add.w	r1, r1, #8
1a005ea4:	dd15      	ble.n	1a005ed2 <_svfprintf_r+0xa72>
1a005ea6:	3201      	adds	r2, #1
1a005ea8:	3010      	adds	r0, #16
1a005eaa:	2a07      	cmp	r2, #7
1a005eac:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a005eb0:	e9c1 7a00 	strd	r7, sl, [r1]
1a005eb4:	ddf2      	ble.n	1a005e9c <_svfprintf_r+0xa3c>
1a005eb6:	aa28      	add	r2, sp, #160	; 0xa0
1a005eb8:	4631      	mov	r1, r6
1a005eba:	4620      	mov	r0, r4
1a005ebc:	f004 fdf0 	bl	1a00aaa0 <__ssprint_r>
1a005ec0:	2800      	cmp	r0, #0
1a005ec2:	f47f abac 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005ec6:	3d10      	subs	r5, #16
1a005ec8:	2d10      	cmp	r5, #16
1a005eca:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a005ece:	a92b      	add	r1, sp, #172	; 0xac
1a005ed0:	dce9      	bgt.n	1a005ea6 <_svfprintf_r+0xa46>
1a005ed2:	463b      	mov	r3, r7
1a005ed4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005ed6:	464e      	mov	r6, r9
1a005ed8:	4604      	mov	r4, r0
1a005eda:	4689      	mov	r9, r1
1a005edc:	3201      	adds	r2, #1
1a005ede:	442c      	add	r4, r5
1a005ee0:	2a07      	cmp	r2, #7
1a005ee2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005ee6:	e9c9 3500 	strd	r3, r5, [r9]
1a005eea:	f300 8197 	bgt.w	1a00621c <_svfprintf_r+0xdbc>
1a005eee:	f109 0908 	add.w	r9, r9, #8
1a005ef2:	e58f      	b.n	1a005a14 <_svfprintf_r+0x5b4>
1a005ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005ef6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005ef8:	2a01      	cmp	r2, #1
1a005efa:	f104 0401 	add.w	r4, r4, #1
1a005efe:	f103 0501 	add.w	r5, r3, #1
1a005f02:	f109 0708 	add.w	r7, r9, #8
1a005f06:	f340 8148 	ble.w	1a00619a <_svfprintf_r+0xd3a>
1a005f0a:	2301      	movs	r3, #1
1a005f0c:	2d07      	cmp	r5, #7
1a005f0e:	f8c9 6000 	str.w	r6, [r9]
1a005f12:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a005f16:	f8c9 3004 	str.w	r3, [r9, #4]
1a005f1a:	f300 8198 	bgt.w	1a00624e <_svfprintf_r+0xdee>
1a005f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005f20:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a005f22:	1c69      	adds	r1, r5, #1
1a005f24:	441c      	add	r4, r3
1a005f26:	2907      	cmp	r1, #7
1a005f28:	910b      	str	r1, [sp, #44]	; 0x2c
1a005f2a:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a005f2e:	e9c7 2300 	strd	r2, r3, [r7]
1a005f32:	f300 8198 	bgt.w	1a006266 <_svfprintf_r+0xe06>
1a005f36:	3708      	adds	r7, #8
1a005f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a005f3a:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a005f3c:	f102 0a01 	add.w	sl, r2, #1
1a005f40:	2300      	movs	r3, #0
1a005f42:	2200      	movs	r2, #0
1a005f44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005f48:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
1a005f4c:	f107 0908 	add.w	r9, r7, #8
1a005f50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a005f54:	f7fe f83a 	bl	1a003fcc <__aeabi_dcmpeq>
1a005f58:	2800      	cmp	r0, #0
1a005f5a:	f040 8131 	bne.w	1a0061c0 <_svfprintf_r+0xd60>
1a005f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005f60:	f8c7 8004 	str.w	r8, [r7, #4]
1a005f64:	3601      	adds	r6, #1
1a005f66:	4444      	add	r4, r8
1a005f68:	2b07      	cmp	r3, #7
1a005f6a:	603e      	str	r6, [r7, #0]
1a005f6c:	942a      	str	r4, [sp, #168]	; 0xa8
1a005f6e:	9329      	str	r3, [sp, #164]	; 0xa4
1a005f70:	f300 8367 	bgt.w	1a006642 <_svfprintf_r+0x11e2>
1a005f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a005f76:	f107 0310 	add.w	r3, r7, #16
1a005f7a:	3202      	adds	r2, #2
1a005f7c:	464f      	mov	r7, r9
1a005f7e:	920a      	str	r2, [sp, #40]	; 0x28
1a005f80:	4699      	mov	r9, r3
1a005f82:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a005f84:	607a      	str	r2, [r7, #4]
1a005f86:	4414      	add	r4, r2
1a005f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005f8a:	942a      	str	r4, [sp, #168]	; 0xa8
1a005f8c:	ab24      	add	r3, sp, #144	; 0x90
1a005f8e:	2a07      	cmp	r2, #7
1a005f90:	9229      	str	r2, [sp, #164]	; 0xa4
1a005f92:	603b      	str	r3, [r7, #0]
1a005f94:	f77f ad50 	ble.w	1a005a38 <_svfprintf_r+0x5d8>
1a005f98:	aa28      	add	r2, sp, #160	; 0xa0
1a005f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005f9e:	f004 fd7f 	bl	1a00aaa0 <__ssprint_r>
1a005fa2:	2800      	cmp	r0, #0
1a005fa4:	f47f ab3b 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005fa8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005faa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005fae:	e543      	b.n	1a005a38 <_svfprintf_r+0x5d8>
1a005fb0:	aa28      	add	r2, sp, #160	; 0xa0
1a005fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005fb6:	f004 fd73 	bl	1a00aaa0 <__ssprint_r>
1a005fba:	2800      	cmp	r0, #0
1a005fbc:	f47f ab2f 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005fc0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005fc2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005fc6:	e50c      	b.n	1a0059e2 <_svfprintf_r+0x582>
1a005fc8:	aa28      	add	r2, sp, #160	; 0xa0
1a005fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005fce:	f004 fd67 	bl	1a00aaa0 <__ssprint_r>
1a005fd2:	2800      	cmp	r0, #0
1a005fd4:	f47f ab23 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a005fd8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005fda:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005fde:	e510      	b.n	1a005a02 <_svfprintf_r+0x5a2>
1a005fe0:	2d10      	cmp	r5, #16
1a005fe2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005fe4:	dd20      	ble.n	1a006028 <_svfprintf_r+0xbc8>
1a005fe6:	2610      	movs	r6, #16
1a005fe8:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a005fec:	e004      	b.n	1a005ff8 <_svfprintf_r+0xb98>
1a005fee:	3d10      	subs	r5, #16
1a005ff0:	2d10      	cmp	r5, #16
1a005ff2:	f109 0908 	add.w	r9, r9, #8
1a005ff6:	dd17      	ble.n	1a006028 <_svfprintf_r+0xbc8>
1a005ff8:	3301      	adds	r3, #1
1a005ffa:	4a24      	ldr	r2, [pc, #144]	; (1a00608c <_svfprintf_r+0xc2c>)
1a005ffc:	3410      	adds	r4, #16
1a005ffe:	2b07      	cmp	r3, #7
1a006000:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a006004:	e9c9 2600 	strd	r2, r6, [r9]
1a006008:	ddf1      	ble.n	1a005fee <_svfprintf_r+0xb8e>
1a00600a:	aa28      	add	r2, sp, #160	; 0xa0
1a00600c:	4641      	mov	r1, r8
1a00600e:	4638      	mov	r0, r7
1a006010:	f004 fd46 	bl	1a00aaa0 <__ssprint_r>
1a006014:	2800      	cmp	r0, #0
1a006016:	f47f ab02 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00601a:	3d10      	subs	r5, #16
1a00601c:	2d10      	cmp	r5, #16
1a00601e:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a006022:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006026:	dce7      	bgt.n	1a005ff8 <_svfprintf_r+0xb98>
1a006028:	3301      	adds	r3, #1
1a00602a:	4a18      	ldr	r2, [pc, #96]	; (1a00608c <_svfprintf_r+0xc2c>)
1a00602c:	442c      	add	r4, r5
1a00602e:	2b07      	cmp	r3, #7
1a006030:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a006034:	e9c9 2500 	strd	r2, r5, [r9]
1a006038:	f77f ad07 	ble.w	1a005a4a <_svfprintf_r+0x5ea>
1a00603c:	aa28      	add	r2, sp, #160	; 0xa0
1a00603e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006042:	f004 fd2d 	bl	1a00aaa0 <__ssprint_r>
1a006046:	2800      	cmp	r0, #0
1a006048:	f47f aae9 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00604c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00604e:	e4fc      	b.n	1a005a4a <_svfprintf_r+0x5ea>
1a006050:	2b01      	cmp	r3, #1
1a006052:	f000 8467 	beq.w	1a006924 <_svfprintf_r+0x14c4>
1a006056:	2b02      	cmp	r3, #2
1a006058:	9f02      	ldr	r7, [sp, #8]
1a00605a:	f47f adfe 	bne.w	1a005c5a <_svfprintf_r+0x7fa>
1a00605e:	9814      	ldr	r0, [sp, #80]	; 0x50
1a006060:	ae54      	add	r6, sp, #336	; 0x150
1a006062:	0923      	lsrs	r3, r4, #4
1a006064:	f004 010f 	and.w	r1, r4, #15
1a006068:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a00606c:	092a      	lsrs	r2, r5, #4
1a00606e:	461c      	mov	r4, r3
1a006070:	4615      	mov	r5, r2
1a006072:	5c43      	ldrb	r3, [r0, r1]
1a006074:	f806 3d01 	strb.w	r3, [r6, #-1]!
1a006078:	ea54 0305 	orrs.w	r3, r4, r5
1a00607c:	d1f1      	bne.n	1a006062 <_svfprintf_r+0xc02>
1a00607e:	ab54      	add	r3, sp, #336	; 0x150
1a006080:	9702      	str	r7, [sp, #8]
1a006082:	1b9f      	subs	r7, r3, r6
1a006084:	e5d6      	b.n	1a005c34 <_svfprintf_r+0x7d4>
1a006086:	bf00      	nop
1a006088:	1a00b3c8 	.word	0x1a00b3c8
1a00608c:	1a00b3b8 	.word	0x1a00b3b8
1a006090:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006092:	2b00      	cmp	r3, #0
1a006094:	f340 82ff 	ble.w	1a006696 <_svfprintf_r+0x1236>
1a006098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00609a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00609c:	4293      	cmp	r3, r2
1a00609e:	bfa8      	it	ge
1a0060a0:	4613      	movge	r3, r2
1a0060a2:	2b00      	cmp	r3, #0
1a0060a4:	461d      	mov	r5, r3
1a0060a6:	dd0d      	ble.n	1a0060c4 <_svfprintf_r+0xc64>
1a0060a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0060aa:	f8c9 6000 	str.w	r6, [r9]
1a0060ae:	3301      	adds	r3, #1
1a0060b0:	442c      	add	r4, r5
1a0060b2:	2b07      	cmp	r3, #7
1a0060b4:	942a      	str	r4, [sp, #168]	; 0xa8
1a0060b6:	f8c9 5004 	str.w	r5, [r9, #4]
1a0060ba:	9329      	str	r3, [sp, #164]	; 0xa4
1a0060bc:	f300 8480 	bgt.w	1a0069c0 <_svfprintf_r+0x1560>
1a0060c0:	f109 0908 	add.w	r9, r9, #8
1a0060c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0060c6:	2d00      	cmp	r5, #0
1a0060c8:	bfa8      	it	ge
1a0060ca:	1b5b      	subge	r3, r3, r5
1a0060cc:	2b00      	cmp	r3, #0
1a0060ce:	461d      	mov	r5, r3
1a0060d0:	f300 8213 	bgt.w	1a0064fa <_svfprintf_r+0x109a>
1a0060d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0060d6:	4433      	add	r3, r6
1a0060d8:	469a      	mov	sl, r3
1a0060da:	9b02      	ldr	r3, [sp, #8]
1a0060dc:	055f      	lsls	r7, r3, #21
1a0060de:	f100 8233 	bmi.w	1a006548 <_svfprintf_r+0x10e8>
1a0060e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0060e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0060e6:	4293      	cmp	r3, r2
1a0060e8:	db03      	blt.n	1a0060f2 <_svfprintf_r+0xc92>
1a0060ea:	9a02      	ldr	r2, [sp, #8]
1a0060ec:	07d5      	lsls	r5, r2, #31
1a0060ee:	f140 83de 	bpl.w	1a0068ae <_svfprintf_r+0x144e>
1a0060f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0060f4:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0060f6:	f8c9 1000 	str.w	r1, [r9]
1a0060fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0060fc:	f8c9 1004 	str.w	r1, [r9, #4]
1a006100:	3201      	adds	r2, #1
1a006102:	440c      	add	r4, r1
1a006104:	2a07      	cmp	r2, #7
1a006106:	942a      	str	r4, [sp, #168]	; 0xa8
1a006108:	9229      	str	r2, [sp, #164]	; 0xa4
1a00610a:	f300 847c 	bgt.w	1a006a06 <_svfprintf_r+0x15a6>
1a00610e:	f109 0908 	add.w	r9, r9, #8
1a006112:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a006114:	18b5      	adds	r5, r6, r2
1a006116:	eba5 050a 	sub.w	r5, r5, sl
1a00611a:	1ad3      	subs	r3, r2, r3
1a00611c:	429d      	cmp	r5, r3
1a00611e:	bfa8      	it	ge
1a006120:	461d      	movge	r5, r3
1a006122:	2d00      	cmp	r5, #0
1a006124:	dd0d      	ble.n	1a006142 <_svfprintf_r+0xce2>
1a006126:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a006128:	f8c9 a000 	str.w	sl, [r9]
1a00612c:	3201      	adds	r2, #1
1a00612e:	442c      	add	r4, r5
1a006130:	2a07      	cmp	r2, #7
1a006132:	942a      	str	r4, [sp, #168]	; 0xa8
1a006134:	f8c9 5004 	str.w	r5, [r9, #4]
1a006138:	9229      	str	r2, [sp, #164]	; 0xa4
1a00613a:	f300 8579 	bgt.w	1a006c30 <_svfprintf_r+0x17d0>
1a00613e:	f109 0908 	add.w	r9, r9, #8
1a006142:	2d00      	cmp	r5, #0
1a006144:	bfac      	ite	ge
1a006146:	1b5d      	subge	r5, r3, r5
1a006148:	461d      	movlt	r5, r3
1a00614a:	2d00      	cmp	r5, #0
1a00614c:	f77f ac74 	ble.w	1a005a38 <_svfprintf_r+0x5d8>
1a006150:	2d10      	cmp	r5, #16
1a006152:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a006154:	4bc2      	ldr	r3, [pc, #776]	; (1a006460 <_svfprintf_r+0x1000>)
1a006156:	f340 82df 	ble.w	1a006718 <_svfprintf_r+0x12b8>
1a00615a:	2610      	movs	r6, #16
1a00615c:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a006160:	469a      	mov	sl, r3
1a006162:	e005      	b.n	1a006170 <_svfprintf_r+0xd10>
1a006164:	f109 0908 	add.w	r9, r9, #8
1a006168:	3d10      	subs	r5, #16
1a00616a:	2d10      	cmp	r5, #16
1a00616c:	f340 82d3 	ble.w	1a006716 <_svfprintf_r+0x12b6>
1a006170:	3201      	adds	r2, #1
1a006172:	3410      	adds	r4, #16
1a006174:	2a07      	cmp	r2, #7
1a006176:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00617a:	e9c9 a600 	strd	sl, r6, [r9]
1a00617e:	ddf1      	ble.n	1a006164 <_svfprintf_r+0xd04>
1a006180:	aa28      	add	r2, sp, #160	; 0xa0
1a006182:	4641      	mov	r1, r8
1a006184:	4638      	mov	r0, r7
1a006186:	f004 fc8b 	bl	1a00aaa0 <__ssprint_r>
1a00618a:	2800      	cmp	r0, #0
1a00618c:	f47f aa47 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006190:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a006194:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006198:	e7e6      	b.n	1a006168 <_svfprintf_r+0xd08>
1a00619a:	9a02      	ldr	r2, [sp, #8]
1a00619c:	07d0      	lsls	r0, r2, #31
1a00619e:	f53f aeb4 	bmi.w	1a005f0a <_svfprintf_r+0xaaa>
1a0061a2:	2201      	movs	r2, #1
1a0061a4:	2d07      	cmp	r5, #7
1a0061a6:	f8c9 6000 	str.w	r6, [r9]
1a0061aa:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a0061ae:	f8c9 2004 	str.w	r2, [r9, #4]
1a0061b2:	f300 8246 	bgt.w	1a006642 <_svfprintf_r+0x11e2>
1a0061b6:	3302      	adds	r3, #2
1a0061b8:	930a      	str	r3, [sp, #40]	; 0x28
1a0061ba:	f109 0910 	add.w	r9, r9, #16
1a0061be:	e6e0      	b.n	1a005f82 <_svfprintf_r+0xb22>
1a0061c0:	f1b8 0f00 	cmp.w	r8, #0
1a0061c4:	f77f aedd 	ble.w	1a005f82 <_svfprintf_r+0xb22>
1a0061c8:	f1b8 0f10 	cmp.w	r8, #16
1a0061cc:	4ba4      	ldr	r3, [pc, #656]	; (1a006460 <_svfprintf_r+0x1000>)
1a0061ce:	f340 8639 	ble.w	1a006e44 <_svfprintf_r+0x19e4>
1a0061d2:	461a      	mov	r2, r3
1a0061d4:	4655      	mov	r5, sl
1a0061d6:	4623      	mov	r3, r4
1a0061d8:	2610      	movs	r6, #16
1a0061da:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a0061de:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a0061e2:	4614      	mov	r4, r2
1a0061e4:	e007      	b.n	1a0061f6 <_svfprintf_r+0xd96>
1a0061e6:	3708      	adds	r7, #8
1a0061e8:	f1a8 0810 	sub.w	r8, r8, #16
1a0061ec:	f1b8 0f10 	cmp.w	r8, #16
1a0061f0:	f340 8304 	ble.w	1a0067fc <_svfprintf_r+0x139c>
1a0061f4:	3501      	adds	r5, #1
1a0061f6:	3310      	adds	r3, #16
1a0061f8:	2d07      	cmp	r5, #7
1a0061fa:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a0061fe:	e9c7 4600 	strd	r4, r6, [r7]
1a006202:	ddf0      	ble.n	1a0061e6 <_svfprintf_r+0xd86>
1a006204:	aa28      	add	r2, sp, #160	; 0xa0
1a006206:	4651      	mov	r1, sl
1a006208:	4648      	mov	r0, r9
1a00620a:	f004 fc49 	bl	1a00aaa0 <__ssprint_r>
1a00620e:	2800      	cmp	r0, #0
1a006210:	f47f aa05 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006214:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a006218:	af2b      	add	r7, sp, #172	; 0xac
1a00621a:	e7e5      	b.n	1a0061e8 <_svfprintf_r+0xd88>
1a00621c:	aa28      	add	r2, sp, #160	; 0xa0
1a00621e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006222:	f004 fc3d 	bl	1a00aaa0 <__ssprint_r>
1a006226:	2800      	cmp	r0, #0
1a006228:	f47f a9f9 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00622c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00622e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006232:	f7ff bbef 	b.w	1a005a14 <_svfprintf_r+0x5b4>
1a006236:	232d      	movs	r3, #45	; 0x2d
1a006238:	4264      	negs	r4, r4
1a00623a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a00623e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a006242:	2301      	movs	r3, #1
1a006244:	f7ff ba65 	b.w	1a005712 <_svfprintf_r+0x2b2>
1a006248:	4634      	mov	r4, r6
1a00624a:	f7ff b95c 	b.w	1a005506 <_svfprintf_r+0xa6>
1a00624e:	aa28      	add	r2, sp, #160	; 0xa0
1a006250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006254:	f004 fc24 	bl	1a00aaa0 <__ssprint_r>
1a006258:	2800      	cmp	r0, #0
1a00625a:	f47f a9e0 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00625e:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a006262:	af2b      	add	r7, sp, #172	; 0xac
1a006264:	e65b      	b.n	1a005f1e <_svfprintf_r+0xabe>
1a006266:	aa28      	add	r2, sp, #160	; 0xa0
1a006268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00626c:	f004 fc18 	bl	1a00aaa0 <__ssprint_r>
1a006270:	2800      	cmp	r0, #0
1a006272:	f47f a9d4 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006276:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00627a:	af2b      	add	r7, sp, #172	; 0xac
1a00627c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00627e:	e65b      	b.n	1a005f38 <_svfprintf_r+0xad8>
1a006280:	9b02      	ldr	r3, [sp, #8]
1a006282:	07db      	lsls	r3, r3, #31
1a006284:	f53f ad72 	bmi.w	1a005d6c <_svfprintf_r+0x90c>
1a006288:	f7ff bbd6 	b.w	1a005a38 <_svfprintf_r+0x5d8>
1a00628c:	ae54      	add	r6, sp, #336	; 0x150
1a00628e:	e4d1      	b.n	1a005c34 <_svfprintf_r+0x7d4>
1a006290:	9b02      	ldr	r3, [sp, #8]
1a006292:	059f      	lsls	r7, r3, #22
1a006294:	f100 831c 	bmi.w	1a0068d0 <_svfprintf_r+0x1470>
1a006298:	2500      	movs	r5, #0
1a00629a:	f7ff b9df 	b.w	1a00565c <_svfprintf_r+0x1fc>
1a00629e:	9904      	ldr	r1, [sp, #16]
1a0062a0:	6812      	ldr	r2, [r2, #0]
1a0062a2:	9309      	str	r3, [sp, #36]	; 0x24
1a0062a4:	17cd      	asrs	r5, r1, #31
1a0062a6:	4608      	mov	r0, r1
1a0062a8:	4629      	mov	r1, r5
1a0062aa:	e9c2 0100 	strd	r0, r1, [r2]
1a0062ae:	465e      	mov	r6, fp
1a0062b0:	f7ff ba76 	b.w	1a0057a0 <_svfprintf_r+0x340>
1a0062b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0062b6:	1d1a      	adds	r2, r3, #4
1a0062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0062ba:	9209      	str	r2, [sp, #36]	; 0x24
1a0062bc:	681c      	ldr	r4, [r3, #0]
1a0062be:	2500      	movs	r5, #0
1a0062c0:	2301      	movs	r3, #1
1a0062c2:	f7ff ba23 	b.w	1a00570c <_svfprintf_r+0x2ac>
1a0062c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0062ca:	4602      	mov	r2, r0
1a0062cc:	460b      	mov	r3, r1
1a0062ce:	f7fd feaf 	bl	1a004030 <__aeabi_dcmpun>
1a0062d2:	2800      	cmp	r0, #0
1a0062d4:	f040 8528 	bne.w	1a006d28 <_svfprintf_r+0x18c8>
1a0062d8:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a0062dc:	f000 850d 	beq.w	1a006cfa <_svfprintf_r+0x189a>
1a0062e0:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a0062e4:	f000 83e9 	beq.w	1a006aba <_svfprintf_r+0x165a>
1a0062e8:	f028 0320 	bic.w	r3, r8, #32
1a0062ec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0062f0:	9303      	str	r3, [sp, #12]
1a0062f2:	f000 8307 	beq.w	1a006904 <_svfprintf_r+0x14a4>
1a0062f6:	2b47      	cmp	r3, #71	; 0x47
1a0062f8:	d104      	bne.n	1a006304 <_svfprintf_r+0xea4>
1a0062fa:	f1ba 0f00 	cmp.w	sl, #0
1a0062fe:	bf08      	it	eq
1a006300:	f04f 0a01 	moveq.w	sl, #1
1a006304:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a006308:	9902      	ldr	r1, [sp, #8]
1a00630a:	2d00      	cmp	r5, #0
1a00630c:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a006310:	f2c0 8476 	blt.w	1a006c00 <_svfprintf_r+0x17a0>
1a006314:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a006318:	2300      	movs	r3, #0
1a00631a:	931e      	str	r3, [sp, #120]	; 0x78
1a00631c:	910a      	str	r1, [sp, #40]	; 0x28
1a00631e:	9308      	str	r3, [sp, #32]
1a006320:	9202      	str	r2, [sp, #8]
1a006322:	9b03      	ldr	r3, [sp, #12]
1a006324:	2b46      	cmp	r3, #70	; 0x46
1a006326:	f000 837c 	beq.w	1a006a22 <_svfprintf_r+0x15c2>
1a00632a:	2b45      	cmp	r3, #69	; 0x45
1a00632c:	f000 84d4 	beq.w	1a006cd8 <_svfprintf_r+0x1878>
1a006330:	aa26      	add	r2, sp, #152	; 0x98
1a006332:	ab23      	add	r3, sp, #140	; 0x8c
1a006334:	e9cd 3200 	strd	r3, r2, [sp]
1a006338:	2102      	movs	r1, #2
1a00633a:	ab22      	add	r3, sp, #136	; 0x88
1a00633c:	4652      	mov	r2, sl
1a00633e:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006342:	9806      	ldr	r0, [sp, #24]
1a006344:	f002 fc94 	bl	1a008c70 <_dtoa_r>
1a006348:	9b03      	ldr	r3, [sp, #12]
1a00634a:	2b47      	cmp	r3, #71	; 0x47
1a00634c:	4606      	mov	r6, r0
1a00634e:	f040 858e 	bne.w	1a006e6e <_svfprintf_r+0x1a0e>
1a006352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006354:	07db      	lsls	r3, r3, #31
1a006356:	f100 847b 	bmi.w	1a006c50 <_svfprintf_r+0x17f0>
1a00635a:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a00635c:	1bbb      	subs	r3, r7, r6
1a00635e:	9312      	str	r3, [sp, #72]	; 0x48
1a006360:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006362:	930e      	str	r3, [sp, #56]	; 0x38
1a006364:	9b03      	ldr	r3, [sp, #12]
1a006366:	2b47      	cmp	r3, #71	; 0x47
1a006368:	f000 82ee 	beq.w	1a006948 <_svfprintf_r+0x14e8>
1a00636c:	9b03      	ldr	r3, [sp, #12]
1a00636e:	2b46      	cmp	r3, #70	; 0x46
1a006370:	f000 8380 	beq.w	1a006a74 <_svfprintf_r+0x1614>
1a006374:	9903      	ldr	r1, [sp, #12]
1a006376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a006378:	2941      	cmp	r1, #65	; 0x41
1a00637a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00637e:	fa5f f388 	uxtb.w	r3, r8
1a006382:	bf03      	ittte	eq
1a006384:	330f      	addeq	r3, #15
1a006386:	b2db      	uxtbeq	r3, r3
1a006388:	2101      	moveq	r1, #1
1a00638a:	2100      	movne	r1, #0
1a00638c:	2a00      	cmp	r2, #0
1a00638e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a006392:	bfb8      	it	lt
1a006394:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a006396:	9222      	str	r2, [sp, #136]	; 0x88
1a006398:	bfb6      	itet	lt
1a00639a:	f1c3 0201 	rsblt	r2, r3, #1
1a00639e:	232b      	movge	r3, #43	; 0x2b
1a0063a0:	232d      	movlt	r3, #45	; 0x2d
1a0063a2:	2a09      	cmp	r2, #9
1a0063a4:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a0063a8:	f340 84ae 	ble.w	1a006d08 <_svfprintf_r+0x18a8>
1a0063ac:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a0063b0:	4620      	mov	r0, r4
1a0063b2:	4d2c      	ldr	r5, [pc, #176]	; (1a006464 <_svfprintf_r+0x1004>)
1a0063b4:	e001      	b.n	1a0063ba <_svfprintf_r+0xf5a>
1a0063b6:	4608      	mov	r0, r1
1a0063b8:	461a      	mov	r2, r3
1a0063ba:	fb85 3102 	smull	r3, r1, r5, r2
1a0063be:	17d3      	asrs	r3, r2, #31
1a0063c0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a0063c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0063c8:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a0063cc:	3130      	adds	r1, #48	; 0x30
1a0063ce:	2a63      	cmp	r2, #99	; 0x63
1a0063d0:	f800 1c01 	strb.w	r1, [r0, #-1]
1a0063d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a0063d8:	dced      	bgt.n	1a0063b6 <_svfprintf_r+0xf56>
1a0063da:	3330      	adds	r3, #48	; 0x30
1a0063dc:	1e82      	subs	r2, r0, #2
1a0063de:	b2db      	uxtb	r3, r3
1a0063e0:	4294      	cmp	r4, r2
1a0063e2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0063e6:	f240 8545 	bls.w	1a006e74 <_svfprintf_r+0x1a14>
1a0063ea:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a0063ee:	e001      	b.n	1a0063f4 <_svfprintf_r+0xf94>
1a0063f0:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0063f4:	f802 3b01 	strb.w	r3, [r2], #1
1a0063f8:	428c      	cmp	r4, r1
1a0063fa:	d1f9      	bne.n	1a0063f0 <_svfprintf_r+0xf90>
1a0063fc:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a006400:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a006404:	1a1b      	subs	r3, r3, r0
1a006406:	4413      	add	r3, r2
1a006408:	aa24      	add	r2, sp, #144	; 0x90
1a00640a:	1a9b      	subs	r3, r3, r2
1a00640c:	9316      	str	r3, [sp, #88]	; 0x58
1a00640e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006410:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a006412:	2b01      	cmp	r3, #1
1a006414:	eb03 0702 	add.w	r7, r3, r2
1a006418:	f340 84ee 	ble.w	1a006df8 <_svfprintf_r+0x1998>
1a00641c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00641e:	441f      	add	r7, r3
1a006420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006422:	2200      	movs	r2, #0
1a006424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a006428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a00642c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a006430:	9302      	str	r3, [sp, #8]
1a006432:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a006436:	920c      	str	r2, [sp, #48]	; 0x30
1a006438:	9303      	str	r3, [sp, #12]
1a00643a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a00643c:	2b00      	cmp	r3, #0
1a00643e:	f040 82aa 	bne.w	1a006996 <_svfprintf_r+0x1536>
1a006442:	469a      	mov	sl, r3
1a006444:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a006448:	f7ff b9ea 	b.w	1a005820 <_svfprintf_r+0x3c0>
1a00644c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00644e:	1d1a      	adds	r2, r3, #4
1a006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006452:	9209      	str	r2, [sp, #36]	; 0x24
1a006454:	681c      	ldr	r4, [r3, #0]
1a006456:	17e5      	asrs	r5, r4, #31
1a006458:	4622      	mov	r2, r4
1a00645a:	462b      	mov	r3, r5
1a00645c:	f7ff ba0f 	b.w	1a00587e <_svfprintf_r+0x41e>
1a006460:	1a00b3c8 	.word	0x1a00b3c8
1a006464:	66666667 	.word	0x66666667
1a006468:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00646a:	1d1a      	adds	r2, r3, #4
1a00646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00646e:	9209      	str	r2, [sp, #36]	; 0x24
1a006470:	681c      	ldr	r4, [r3, #0]
1a006472:	2500      	movs	r5, #0
1a006474:	f7ff b9e8 	b.w	1a005848 <_svfprintf_r+0x3e8>
1a006478:	4252      	negs	r2, r2
1a00647a:	9205      	str	r2, [sp, #20]
1a00647c:	9309      	str	r3, [sp, #36]	; 0x24
1a00647e:	f7ff b925 	b.w	1a0056cc <_svfprintf_r+0x26c>
1a006482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a006486:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00648a:	9302      	str	r3, [sp, #8]
1a00648c:	f10b 0b01 	add.w	fp, fp, #1
1a006490:	f7ff b846 	b.w	1a005520 <_svfprintf_r+0xc0>
1a006494:	f043 0320 	orr.w	r3, r3, #32
1a006498:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00649c:	9302      	str	r3, [sp, #8]
1a00649e:	f10b 0b01 	add.w	fp, fp, #1
1a0064a2:	f7ff b83d 	b.w	1a005520 <_svfprintf_r+0xc0>
1a0064a6:	aa28      	add	r2, sp, #160	; 0xa0
1a0064a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0064ac:	f004 faf8 	bl	1a00aaa0 <__ssprint_r>
1a0064b0:	2800      	cmp	r0, #0
1a0064b2:	f47f a8b4 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a0064b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0064b8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0064bc:	e466      	b.n	1a005d8c <_svfprintf_r+0x92c>
1a0064be:	2140      	movs	r1, #64	; 0x40
1a0064c0:	9806      	ldr	r0, [sp, #24]
1a0064c2:	f7fe fab1 	bl	1a004a28 <_malloc_r>
1a0064c6:	9b07      	ldr	r3, [sp, #28]
1a0064c8:	6018      	str	r0, [r3, #0]
1a0064ca:	6118      	str	r0, [r3, #16]
1a0064cc:	2800      	cmp	r0, #0
1a0064ce:	f000 84c6 	beq.w	1a006e5e <_svfprintf_r+0x19fe>
1a0064d2:	9a07      	ldr	r2, [sp, #28]
1a0064d4:	2340      	movs	r3, #64	; 0x40
1a0064d6:	6153      	str	r3, [r2, #20]
1a0064d8:	f7fe bfd9 	b.w	1a00548e <_svfprintf_r+0x2e>
1a0064dc:	4657      	mov	r7, sl
1a0064de:	2f06      	cmp	r7, #6
1a0064e0:	bf28      	it	cs
1a0064e2:	2706      	movcs	r7, #6
1a0064e4:	46b2      	mov	sl, r6
1a0064e6:	960c      	str	r6, [sp, #48]	; 0x30
1a0064e8:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
1a0064ec:	9608      	str	r6, [sp, #32]
1a0064ee:	4632      	mov	r2, r6
1a0064f0:	9703      	str	r7, [sp, #12]
1a0064f2:	9409      	str	r4, [sp, #36]	; 0x24
1a0064f4:	4ebe      	ldr	r6, [pc, #760]	; (1a0067f0 <_svfprintf_r+0x1390>)
1a0064f6:	f7ff b993 	b.w	1a005820 <_svfprintf_r+0x3c0>
1a0064fa:	2d10      	cmp	r5, #16
1a0064fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0064fe:	4bbd      	ldr	r3, [pc, #756]	; (1a0067f4 <_svfprintf_r+0x1394>)
1a006500:	f340 81b8 	ble.w	1a006874 <_svfprintf_r+0x1414>
1a006504:	4619      	mov	r1, r3
1a006506:	2710      	movs	r7, #16
1a006508:	4623      	mov	r3, r4
1a00650a:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a00650e:	460c      	mov	r4, r1
1a006510:	e005      	b.n	1a00651e <_svfprintf_r+0x10be>
1a006512:	f109 0908 	add.w	r9, r9, #8
1a006516:	3d10      	subs	r5, #16
1a006518:	2d10      	cmp	r5, #16
1a00651a:	f340 81a8 	ble.w	1a00686e <_svfprintf_r+0x140e>
1a00651e:	3201      	adds	r2, #1
1a006520:	3310      	adds	r3, #16
1a006522:	2a07      	cmp	r2, #7
1a006524:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a006528:	e9c9 4700 	strd	r4, r7, [r9]
1a00652c:	ddf1      	ble.n	1a006512 <_svfprintf_r+0x10b2>
1a00652e:	aa28      	add	r2, sp, #160	; 0xa0
1a006530:	4651      	mov	r1, sl
1a006532:	4640      	mov	r0, r8
1a006534:	f004 fab4 	bl	1a00aaa0 <__ssprint_r>
1a006538:	2800      	cmp	r0, #0
1a00653a:	f47f a870 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00653e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a006542:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006546:	e7e6      	b.n	1a006516 <_svfprintf_r+0x10b6>
1a006548:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00654a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a00654e:	18f3      	adds	r3, r6, r3
1a006550:	930a      	str	r3, [sp, #40]	; 0x28
1a006552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006554:	960e      	str	r6, [sp, #56]	; 0x38
1a006556:	464a      	mov	r2, r9
1a006558:	4656      	mov	r6, sl
1a00655a:	4fa6      	ldr	r7, [pc, #664]	; (1a0067f4 <_svfprintf_r+0x1394>)
1a00655c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a006560:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
1a006564:	4621      	mov	r1, r4
1a006566:	e9dd b906 	ldrd	fp, r9, [sp, #24]
1a00656a:	2b00      	cmp	r3, #0
1a00656c:	d033      	beq.n	1a0065d6 <_svfprintf_r+0x1176>
1a00656e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006570:	2b00      	cmp	r3, #0
1a006572:	d134      	bne.n	1a0065de <_svfprintf_r+0x117e>
1a006574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006576:	3b01      	subs	r3, #1
1a006578:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a00657c:	930f      	str	r3, [sp, #60]	; 0x3c
1a00657e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a006580:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a006582:	6010      	str	r0, [r2, #0]
1a006584:	3301      	adds	r3, #1
1a006586:	4451      	add	r1, sl
1a006588:	2b07      	cmp	r3, #7
1a00658a:	912a      	str	r1, [sp, #168]	; 0xa8
1a00658c:	f8c2 a004 	str.w	sl, [r2, #4]
1a006590:	9329      	str	r3, [sp, #164]	; 0xa4
1a006592:	dc66      	bgt.n	1a006662 <_svfprintf_r+0x1202>
1a006594:	3208      	adds	r2, #8
1a006596:	980a      	ldr	r0, [sp, #40]	; 0x28
1a006598:	f898 3000 	ldrb.w	r3, [r8]
1a00659c:	1b85      	subs	r5, r0, r6
1a00659e:	429d      	cmp	r5, r3
1a0065a0:	bfa8      	it	ge
1a0065a2:	461d      	movge	r5, r3
1a0065a4:	2d00      	cmp	r5, #0
1a0065a6:	dd0c      	ble.n	1a0065c2 <_svfprintf_r+0x1162>
1a0065a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0065aa:	6016      	str	r6, [r2, #0]
1a0065ac:	3301      	adds	r3, #1
1a0065ae:	4429      	add	r1, r5
1a0065b0:	2b07      	cmp	r3, #7
1a0065b2:	912a      	str	r1, [sp, #168]	; 0xa8
1a0065b4:	6055      	str	r5, [r2, #4]
1a0065b6:	9329      	str	r3, [sp, #164]	; 0xa4
1a0065b8:	f300 80b8 	bgt.w	1a00672c <_svfprintf_r+0x12cc>
1a0065bc:	f898 3000 	ldrb.w	r3, [r8]
1a0065c0:	3208      	adds	r2, #8
1a0065c2:	2d00      	cmp	r5, #0
1a0065c4:	bfac      	ite	ge
1a0065c6:	1b5d      	subge	r5, r3, r5
1a0065c8:	461d      	movlt	r5, r3
1a0065ca:	2d00      	cmp	r5, #0
1a0065cc:	dc0b      	bgt.n	1a0065e6 <_svfprintf_r+0x1186>
1a0065ce:	441e      	add	r6, r3
1a0065d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0065d2:	2b00      	cmp	r3, #0
1a0065d4:	d1cb      	bne.n	1a00656e <_svfprintf_r+0x110e>
1a0065d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0065d8:	2b00      	cmp	r3, #0
1a0065da:	f000 81a6 	beq.w	1a00692a <_svfprintf_r+0x14ca>
1a0065de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0065e0:	3b01      	subs	r3, #1
1a0065e2:	930c      	str	r3, [sp, #48]	; 0x30
1a0065e4:	e7cb      	b.n	1a00657e <_svfprintf_r+0x111e>
1a0065e6:	2d10      	cmp	r5, #16
1a0065e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0065ea:	dd1c      	ble.n	1a006626 <_svfprintf_r+0x11c6>
1a0065ec:	2410      	movs	r4, #16
1a0065ee:	e004      	b.n	1a0065fa <_svfprintf_r+0x119a>
1a0065f0:	3d10      	subs	r5, #16
1a0065f2:	2d10      	cmp	r5, #16
1a0065f4:	f102 0208 	add.w	r2, r2, #8
1a0065f8:	dd15      	ble.n	1a006626 <_svfprintf_r+0x11c6>
1a0065fa:	3001      	adds	r0, #1
1a0065fc:	3110      	adds	r1, #16
1a0065fe:	2807      	cmp	r0, #7
1a006600:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a006604:	e9c2 7400 	strd	r7, r4, [r2]
1a006608:	ddf2      	ble.n	1a0065f0 <_svfprintf_r+0x1190>
1a00660a:	aa28      	add	r2, sp, #160	; 0xa0
1a00660c:	4649      	mov	r1, r9
1a00660e:	4658      	mov	r0, fp
1a006610:	f004 fa46 	bl	1a00aaa0 <__ssprint_r>
1a006614:	2800      	cmp	r0, #0
1a006616:	f47f a802 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00661a:	3d10      	subs	r5, #16
1a00661c:	2d10      	cmp	r5, #16
1a00661e:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a006622:	aa2b      	add	r2, sp, #172	; 0xac
1a006624:	dce9      	bgt.n	1a0065fa <_svfprintf_r+0x119a>
1a006626:	3001      	adds	r0, #1
1a006628:	4429      	add	r1, r5
1a00662a:	2807      	cmp	r0, #7
1a00662c:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a006630:	e9c2 7500 	strd	r7, r5, [r2]
1a006634:	f300 81b6 	bgt.w	1a0069a4 <_svfprintf_r+0x1544>
1a006638:	f898 3000 	ldrb.w	r3, [r8]
1a00663c:	3208      	adds	r2, #8
1a00663e:	441e      	add	r6, r3
1a006640:	e7c6      	b.n	1a0065d0 <_svfprintf_r+0x1170>
1a006642:	aa28      	add	r2, sp, #160	; 0xa0
1a006644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006648:	f004 fa2a 	bl	1a00aaa0 <__ssprint_r>
1a00664c:	2800      	cmp	r0, #0
1a00664e:	f47e afe6 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006652:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a006656:	3301      	adds	r3, #1
1a006658:	930a      	str	r3, [sp, #40]	; 0x28
1a00665a:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
1a00665e:	af2b      	add	r7, sp, #172	; 0xac
1a006660:	e48f      	b.n	1a005f82 <_svfprintf_r+0xb22>
1a006662:	aa28      	add	r2, sp, #160	; 0xa0
1a006664:	4649      	mov	r1, r9
1a006666:	4658      	mov	r0, fp
1a006668:	f004 fa1a 	bl	1a00aaa0 <__ssprint_r>
1a00666c:	2800      	cmp	r0, #0
1a00666e:	f47e afd6 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006672:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a006674:	aa2b      	add	r2, sp, #172	; 0xac
1a006676:	e78e      	b.n	1a006596 <_svfprintf_r+0x1136>
1a006678:	aa28      	add	r2, sp, #160	; 0xa0
1a00667a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00667e:	f004 fa0f 	bl	1a00aaa0 <__ssprint_r>
1a006682:	2800      	cmp	r0, #0
1a006684:	f47e afcb 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006688:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00668c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00668e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006692:	f7ff b996 	b.w	1a0059c2 <_svfprintf_r+0x562>
1a006696:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a006698:	4957      	ldr	r1, [pc, #348]	; (1a0067f8 <_svfprintf_r+0x1398>)
1a00669a:	f8c9 1000 	str.w	r1, [r9]
1a00669e:	3201      	adds	r2, #1
1a0066a0:	3401      	adds	r4, #1
1a0066a2:	2101      	movs	r1, #1
1a0066a4:	2a07      	cmp	r2, #7
1a0066a6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0066aa:	f8c9 1004 	str.w	r1, [r9, #4]
1a0066ae:	f300 80f1 	bgt.w	1a006894 <_svfprintf_r+0x1434>
1a0066b2:	f109 0908 	add.w	r9, r9, #8
1a0066b6:	2b00      	cmp	r3, #0
1a0066b8:	d15a      	bne.n	1a006770 <_svfprintf_r+0x1310>
1a0066ba:	9b02      	ldr	r3, [sp, #8]
1a0066bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0066be:	f003 0301 	and.w	r3, r3, #1
1a0066c2:	4313      	orrs	r3, r2
1a0066c4:	f43f a9b8 	beq.w	1a005a38 <_svfprintf_r+0x5d8>
1a0066c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0066ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0066cc:	f8c9 3000 	str.w	r3, [r9]
1a0066d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0066d2:	f8c9 3004 	str.w	r3, [r9, #4]
1a0066d6:	3201      	adds	r2, #1
1a0066d8:	441c      	add	r4, r3
1a0066da:	2a07      	cmp	r2, #7
1a0066dc:	942a      	str	r4, [sp, #168]	; 0xa8
1a0066de:	9229      	str	r2, [sp, #164]	; 0xa4
1a0066e0:	f300 8102 	bgt.w	1a0068e8 <_svfprintf_r+0x1488>
1a0066e4:	f109 0908 	add.w	r9, r9, #8
1a0066e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0066ea:	3201      	adds	r2, #1
1a0066ec:	441c      	add	r4, r3
1a0066ee:	2a07      	cmp	r2, #7
1a0066f0:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0066f4:	e9c9 6300 	strd	r6, r3, [r9]
1a0066f8:	f77f a99c 	ble.w	1a005a34 <_svfprintf_r+0x5d4>
1a0066fc:	e44c      	b.n	1a005f98 <_svfprintf_r+0xb38>
1a0066fe:	aa28      	add	r2, sp, #160	; 0xa0
1a006700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006704:	f004 f9cc 	bl	1a00aaa0 <__ssprint_r>
1a006708:	2800      	cmp	r0, #0
1a00670a:	f47e af88 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00670e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006712:	f7ff bb25 	b.w	1a005d60 <_svfprintf_r+0x900>
1a006716:	4653      	mov	r3, sl
1a006718:	3201      	adds	r2, #1
1a00671a:	442c      	add	r4, r5
1a00671c:	2a07      	cmp	r2, #7
1a00671e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a006722:	e9c9 3500 	strd	r3, r5, [r9]
1a006726:	f77f a985 	ble.w	1a005a34 <_svfprintf_r+0x5d4>
1a00672a:	e435      	b.n	1a005f98 <_svfprintf_r+0xb38>
1a00672c:	aa28      	add	r2, sp, #160	; 0xa0
1a00672e:	4649      	mov	r1, r9
1a006730:	4658      	mov	r0, fp
1a006732:	f004 f9b5 	bl	1a00aaa0 <__ssprint_r>
1a006736:	2800      	cmp	r0, #0
1a006738:	f47e af71 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00673c:	f898 3000 	ldrb.w	r3, [r8]
1a006740:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a006742:	aa2b      	add	r2, sp, #172	; 0xac
1a006744:	e73d      	b.n	1a0065c2 <_svfprintf_r+0x1162>
1a006746:	aa28      	add	r2, sp, #160	; 0xa0
1a006748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00674c:	f004 f9a8 	bl	1a00aaa0 <__ssprint_r>
1a006750:	2800      	cmp	r0, #0
1a006752:	f47e af64 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006756:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a006758:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00675c:	f7ff b955 	b.w	1a005a0a <_svfprintf_r+0x5aa>
1a006760:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a006762:	6812      	ldr	r2, [r2, #0]
1a006764:	9309      	str	r3, [sp, #36]	; 0x24
1a006766:	9b04      	ldr	r3, [sp, #16]
1a006768:	6013      	str	r3, [r2, #0]
1a00676a:	465e      	mov	r6, fp
1a00676c:	f7ff b818 	b.w	1a0057a0 <_svfprintf_r+0x340>
1a006770:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a006772:	9915      	ldr	r1, [sp, #84]	; 0x54
1a006774:	f8c9 1000 	str.w	r1, [r9]
1a006778:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00677a:	f8c9 1004 	str.w	r1, [r9, #4]
1a00677e:	3201      	adds	r2, #1
1a006780:	440c      	add	r4, r1
1a006782:	2a07      	cmp	r2, #7
1a006784:	942a      	str	r4, [sp, #168]	; 0xa8
1a006786:	9229      	str	r2, [sp, #164]	; 0xa4
1a006788:	f300 80ae 	bgt.w	1a0068e8 <_svfprintf_r+0x1488>
1a00678c:	f109 0908 	add.w	r9, r9, #8
1a006790:	2b00      	cmp	r3, #0
1a006792:	daa9      	bge.n	1a0066e8 <_svfprintf_r+0x1288>
1a006794:	425d      	negs	r5, r3
1a006796:	3310      	adds	r3, #16
1a006798:	4b16      	ldr	r3, [pc, #88]	; (1a0067f4 <_svfprintf_r+0x1394>)
1a00679a:	f280 8287 	bge.w	1a006cac <_svfprintf_r+0x184c>
1a00679e:	4619      	mov	r1, r3
1a0067a0:	2710      	movs	r7, #16
1a0067a2:	4623      	mov	r3, r4
1a0067a4:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a0067a8:	460c      	mov	r4, r1
1a0067aa:	e005      	b.n	1a0067b8 <_svfprintf_r+0x1358>
1a0067ac:	f109 0908 	add.w	r9, r9, #8
1a0067b0:	3d10      	subs	r5, #16
1a0067b2:	2d10      	cmp	r5, #16
1a0067b4:	f340 8277 	ble.w	1a006ca6 <_svfprintf_r+0x1846>
1a0067b8:	3201      	adds	r2, #1
1a0067ba:	3310      	adds	r3, #16
1a0067bc:	2a07      	cmp	r2, #7
1a0067be:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a0067c2:	e9c9 4700 	strd	r4, r7, [r9]
1a0067c6:	ddf1      	ble.n	1a0067ac <_svfprintf_r+0x134c>
1a0067c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0067ca:	4651      	mov	r1, sl
1a0067cc:	4640      	mov	r0, r8
1a0067ce:	f004 f967 	bl	1a00aaa0 <__ssprint_r>
1a0067d2:	2800      	cmp	r0, #0
1a0067d4:	f47e af23 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a0067d8:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a0067dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0067e0:	e7e6      	b.n	1a0067b0 <_svfprintf_r+0x1350>
1a0067e2:	4630      	mov	r0, r6
1a0067e4:	f7fe fdcc 	bl	1a005380 <strlen>
1a0067e8:	46aa      	mov	sl, r5
1a0067ea:	4607      	mov	r7, r0
1a0067ec:	f7ff b80c 	b.w	1a005808 <_svfprintf_r+0x3a8>
1a0067f0:	1a00b3ac 	.word	0x1a00b3ac
1a0067f4:	1a00b3c8 	.word	0x1a00b3c8
1a0067f8:	1a00b3b4 	.word	0x1a00b3b4
1a0067fc:	4622      	mov	r2, r4
1a0067fe:	461c      	mov	r4, r3
1a006800:	4613      	mov	r3, r2
1a006802:	462a      	mov	r2, r5
1a006804:	3201      	adds	r2, #1
1a006806:	920a      	str	r2, [sp, #40]	; 0x28
1a006808:	f107 0208 	add.w	r2, r7, #8
1a00680c:	e9c7 3800 	strd	r3, r8, [r7]
1a006810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006812:	9329      	str	r3, [sp, #164]	; 0xa4
1a006814:	4444      	add	r4, r8
1a006816:	2b07      	cmp	r3, #7
1a006818:	942a      	str	r4, [sp, #168]	; 0xa8
1a00681a:	f73f af12 	bgt.w	1a006642 <_svfprintf_r+0x11e2>
1a00681e:	3301      	adds	r3, #1
1a006820:	930a      	str	r3, [sp, #40]	; 0x28
1a006822:	f102 0908 	add.w	r9, r2, #8
1a006826:	4617      	mov	r7, r2
1a006828:	f7ff bbab 	b.w	1a005f82 <_svfprintf_r+0xb22>
1a00682c:	9f02      	ldr	r7, [sp, #8]
1a00682e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006830:	f417 7f00 	tst.w	r7, #512	; 0x200
1a006834:	d044      	beq.n	1a0068c0 <_svfprintf_r+0x1460>
1a006836:	f993 4000 	ldrsb.w	r4, [r3]
1a00683a:	9209      	str	r2, [sp, #36]	; 0x24
1a00683c:	17e5      	asrs	r5, r4, #31
1a00683e:	4622      	mov	r2, r4
1a006840:	462b      	mov	r3, r5
1a006842:	f7ff b81c 	b.w	1a00587e <_svfprintf_r+0x41e>
1a006846:	9f02      	ldr	r7, [sp, #8]
1a006848:	05b9      	lsls	r1, r7, #22
1a00684a:	bf47      	ittee	mi
1a00684c:	9209      	strmi	r2, [sp, #36]	; 0x24
1a00684e:	b2e4      	uxtbmi	r4, r4
1a006850:	9f02      	ldrpl	r7, [sp, #8]
1a006852:	9209      	strpl	r2, [sp, #36]	; 0x24
1a006854:	2500      	movs	r5, #0
1a006856:	f7fe bff7 	b.w	1a005848 <_svfprintf_r+0x3e8>
1a00685a:	9f02      	ldr	r7, [sp, #8]
1a00685c:	9209      	str	r2, [sp, #36]	; 0x24
1a00685e:	05b8      	lsls	r0, r7, #22
1a006860:	bf4c      	ite	mi
1a006862:	b2e4      	uxtbmi	r4, r4
1a006864:	9f02      	ldrpl	r7, [sp, #8]
1a006866:	2500      	movs	r5, #0
1a006868:	2301      	movs	r3, #1
1a00686a:	f7fe bf4f 	b.w	1a00570c <_svfprintf_r+0x2ac>
1a00686e:	4621      	mov	r1, r4
1a006870:	461c      	mov	r4, r3
1a006872:	460b      	mov	r3, r1
1a006874:	3201      	adds	r2, #1
1a006876:	442c      	add	r4, r5
1a006878:	2a07      	cmp	r2, #7
1a00687a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00687e:	e9c9 3500 	strd	r3, r5, [r9]
1a006882:	dc42      	bgt.n	1a00690a <_svfprintf_r+0x14aa>
1a006884:	f109 0908 	add.w	r9, r9, #8
1a006888:	e424      	b.n	1a0060d4 <_svfprintf_r+0xc74>
1a00688a:	222d      	movs	r2, #45	; 0x2d
1a00688c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a006890:	f7ff b95d 	b.w	1a005b4e <_svfprintf_r+0x6ee>
1a006894:	aa28      	add	r2, sp, #160	; 0xa0
1a006896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00689a:	f004 f901 	bl	1a00aaa0 <__ssprint_r>
1a00689e:	2800      	cmp	r0, #0
1a0068a0:	f47e aebd 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a0068a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0068a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0068a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0068ac:	e703      	b.n	1a0066b6 <_svfprintf_r+0x1256>
1a0068ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0068b0:	18b5      	adds	r5, r6, r2
1a0068b2:	eba5 050a 	sub.w	r5, r5, sl
1a0068b6:	1ad3      	subs	r3, r2, r3
1a0068b8:	429d      	cmp	r5, r3
1a0068ba:	bfa8      	it	ge
1a0068bc:	461d      	movge	r5, r3
1a0068be:	e440      	b.n	1a006142 <_svfprintf_r+0xce2>
1a0068c0:	681c      	ldr	r4, [r3, #0]
1a0068c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0068c4:	17e5      	asrs	r5, r4, #31
1a0068c6:	9f02      	ldr	r7, [sp, #8]
1a0068c8:	4622      	mov	r2, r4
1a0068ca:	462b      	mov	r3, r5
1a0068cc:	f7fe bfd7 	b.w	1a00587e <_svfprintf_r+0x41e>
1a0068d0:	b2e4      	uxtb	r4, r4
1a0068d2:	2500      	movs	r5, #0
1a0068d4:	f7fe bec2 	b.w	1a00565c <_svfprintf_r+0x1fc>
1a0068d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0068da:	9309      	str	r3, [sp, #36]	; 0x24
1a0068dc:	6812      	ldr	r2, [r2, #0]
1a0068de:	9b04      	ldr	r3, [sp, #16]
1a0068e0:	8013      	strh	r3, [r2, #0]
1a0068e2:	465e      	mov	r6, fp
1a0068e4:	f7fe bf5c 	b.w	1a0057a0 <_svfprintf_r+0x340>
1a0068e8:	aa28      	add	r2, sp, #160	; 0xa0
1a0068ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0068ee:	f004 f8d7 	bl	1a00aaa0 <__ssprint_r>
1a0068f2:	2800      	cmp	r0, #0
1a0068f4:	f47e ae93 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a0068f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0068fa:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0068fe:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006902:	e745      	b.n	1a006790 <_svfprintf_r+0x1330>
1a006904:	f04f 0a06 	mov.w	sl, #6
1a006908:	e4fc      	b.n	1a006304 <_svfprintf_r+0xea4>
1a00690a:	aa28      	add	r2, sp, #160	; 0xa0
1a00690c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006910:	f004 f8c6 	bl	1a00aaa0 <__ssprint_r>
1a006914:	2800      	cmp	r0, #0
1a006916:	f47e ae82 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a00691a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00691c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006920:	f7ff bbd8 	b.w	1a0060d4 <_svfprintf_r+0xc74>
1a006924:	9f02      	ldr	r7, [sp, #8]
1a006926:	f7ff b97e 	b.w	1a005c26 <_svfprintf_r+0x7c6>
1a00692a:	46b2      	mov	sl, r6
1a00692c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00692e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a006930:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a006934:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a006938:	18f3      	adds	r3, r6, r3
1a00693a:	459a      	cmp	sl, r3
1a00693c:	460c      	mov	r4, r1
1a00693e:	4691      	mov	r9, r2
1a006940:	bf28      	it	cs
1a006942:	469a      	movcs	sl, r3
1a006944:	f7ff bbcd 	b.w	1a0060e2 <_svfprintf_r+0xc82>
1a006948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00694a:	1cda      	adds	r2, r3, #3
1a00694c:	db01      	blt.n	1a006952 <_svfprintf_r+0x14f2>
1a00694e:	459a      	cmp	sl, r3
1a006950:	da05      	bge.n	1a00695e <_svfprintf_r+0x14fe>
1a006952:	f1a8 0802 	sub.w	r8, r8, #2
1a006956:	f028 0320 	bic.w	r3, r8, #32
1a00695a:	9303      	str	r3, [sp, #12]
1a00695c:	e50a      	b.n	1a006374 <_svfprintf_r+0xf14>
1a00695e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006960:	4619      	mov	r1, r3
1a006962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a006964:	4299      	cmp	r1, r3
1a006966:	f300 8159 	bgt.w	1a006c1c <_svfprintf_r+0x17bc>
1a00696a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00696c:	07d7      	lsls	r7, r2, #31
1a00696e:	f140 81c9 	bpl.w	1a006d04 <_svfprintf_r+0x18a4>
1a006972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a006974:	189f      	adds	r7, r3, r2
1a006976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006978:	055d      	lsls	r5, r3, #21
1a00697a:	d503      	bpl.n	1a006984 <_svfprintf_r+0x1524>
1a00697c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00697e:	2b00      	cmp	r3, #0
1a006980:	f300 81f6 	bgt.w	1a006d70 <_svfprintf_r+0x1910>
1a006984:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a006988:	9303      	str	r3, [sp, #12]
1a00698a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00698e:	2300      	movs	r3, #0
1a006990:	930c      	str	r3, [sp, #48]	; 0x30
1a006992:	930f      	str	r3, [sp, #60]	; 0x3c
1a006994:	e551      	b.n	1a00643a <_svfprintf_r+0xfda>
1a006996:	222d      	movs	r2, #45	; 0x2d
1a006998:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a00699c:	f04f 0a00 	mov.w	sl, #0
1a0069a0:	f7fe bf41 	b.w	1a005826 <_svfprintf_r+0x3c6>
1a0069a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0069a6:	4649      	mov	r1, r9
1a0069a8:	4658      	mov	r0, fp
1a0069aa:	f004 f879 	bl	1a00aaa0 <__ssprint_r>
1a0069ae:	2800      	cmp	r0, #0
1a0069b0:	f47e ae35 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a0069b4:	f898 3000 	ldrb.w	r3, [r8]
1a0069b8:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0069ba:	aa2b      	add	r2, sp, #172	; 0xac
1a0069bc:	441e      	add	r6, r3
1a0069be:	e607      	b.n	1a0065d0 <_svfprintf_r+0x1170>
1a0069c0:	aa28      	add	r2, sp, #160	; 0xa0
1a0069c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0069c6:	f004 f86b 	bl	1a00aaa0 <__ssprint_r>
1a0069ca:	2800      	cmp	r0, #0
1a0069cc:	f47e ae27 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a0069d0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0069d2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0069d6:	f7ff bb75 	b.w	1a0060c4 <_svfprintf_r+0xc64>
1a0069da:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0069dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0069de:	1af6      	subs	r6, r6, r3
1a0069e0:	461a      	mov	r2, r3
1a0069e2:	4630      	mov	r0, r6
1a0069e4:	f004 f822 	bl	1a00aa2c <strncpy>
1a0069e8:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0069ec:	b10b      	cbz	r3, 1a0069f2 <_svfprintf_r+0x1592>
1a0069ee:	f108 0801 	add.w	r8, r8, #1
1a0069f2:	220a      	movs	r2, #10
1a0069f4:	2300      	movs	r3, #0
1a0069f6:	4620      	mov	r0, r4
1a0069f8:	4629      	mov	r1, r5
1a0069fa:	f04f 0b00 	mov.w	fp, #0
1a0069fe:	f7fd fb55 	bl	1a0040ac <__aeabi_uldivmod>
1a006a02:	f7ff b960 	b.w	1a005cc6 <_svfprintf_r+0x866>
1a006a06:	aa28      	add	r2, sp, #160	; 0xa0
1a006a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006a0c:	f004 f848 	bl	1a00aaa0 <__ssprint_r>
1a006a10:	2800      	cmp	r0, #0
1a006a12:	f47e ae04 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006a16:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006a18:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a006a1a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006a1e:	f7ff bb78 	b.w	1a006112 <_svfprintf_r+0xcb2>
1a006a22:	aa26      	add	r2, sp, #152	; 0x98
1a006a24:	ab23      	add	r3, sp, #140	; 0x8c
1a006a26:	e9cd 3200 	strd	r3, r2, [sp]
1a006a2a:	2103      	movs	r1, #3
1a006a2c:	ab22      	add	r3, sp, #136	; 0x88
1a006a2e:	4652      	mov	r2, sl
1a006a30:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006a34:	9806      	ldr	r0, [sp, #24]
1a006a36:	f002 f91b 	bl	1a008c70 <_dtoa_r>
1a006a3a:	7803      	ldrb	r3, [r0, #0]
1a006a3c:	2b30      	cmp	r3, #48	; 0x30
1a006a3e:	4606      	mov	r6, r0
1a006a40:	f000 81cd 	beq.w	1a006dde <_svfprintf_r+0x197e>
1a006a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006a46:	4453      	add	r3, sl
1a006a48:	18f4      	adds	r4, r6, r3
1a006a4a:	2200      	movs	r2, #0
1a006a4c:	2300      	movs	r3, #0
1a006a4e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006a52:	f7fd fabb 	bl	1a003fcc <__aeabi_dcmpeq>
1a006a56:	b108      	cbz	r0, 1a006a5c <_svfprintf_r+0x15fc>
1a006a58:	4627      	mov	r7, r4
1a006a5a:	e47f      	b.n	1a00635c <_svfprintf_r+0xefc>
1a006a5c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a006a5e:	42a7      	cmp	r7, r4
1a006a60:	f4bf ac7c 	bcs.w	1a00635c <_svfprintf_r+0xefc>
1a006a64:	2230      	movs	r2, #48	; 0x30
1a006a66:	1c7b      	adds	r3, r7, #1
1a006a68:	9326      	str	r3, [sp, #152]	; 0x98
1a006a6a:	703a      	strb	r2, [r7, #0]
1a006a6c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a006a6e:	42bc      	cmp	r4, r7
1a006a70:	d8f9      	bhi.n	1a006a66 <_svfprintf_r+0x1606>
1a006a72:	e473      	b.n	1a00635c <_svfprintf_r+0xefc>
1a006a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006a78:	f003 0301 	and.w	r3, r3, #1
1a006a7c:	2a00      	cmp	r2, #0
1a006a7e:	ea43 030a 	orr.w	r3, r3, sl
1a006a82:	f340 81bf 	ble.w	1a006e04 <_svfprintf_r+0x19a4>
1a006a86:	2b00      	cmp	r3, #0
1a006a88:	f040 819a 	bne.w	1a006dc0 <_svfprintf_r+0x1960>
1a006a8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a006a8e:	f04f 0866 	mov.w	r8, #102	; 0x66
1a006a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006a94:	055a      	lsls	r2, r3, #21
1a006a96:	f100 816d 	bmi.w	1a006d74 <_svfprintf_r+0x1914>
1a006a9a:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a006a9e:	9303      	str	r3, [sp, #12]
1a006aa0:	e775      	b.n	1a00698e <_svfprintf_r+0x152e>
1a006aa2:	4657      	mov	r7, sl
1a006aa4:	f8cd a00c 	str.w	sl, [sp, #12]
1a006aa8:	9409      	str	r4, [sp, #36]	; 0x24
1a006aaa:	4682      	mov	sl, r0
1a006aac:	900c      	str	r0, [sp, #48]	; 0x30
1a006aae:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a006ab2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a006ab6:	f7fe beb3 	b.w	1a005820 <_svfprintf_r+0x3c0>
1a006aba:	2330      	movs	r3, #48	; 0x30
1a006abc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a006ac0:	2358      	movs	r3, #88	; 0x58
1a006ac2:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a006ac6:	9b02      	ldr	r3, [sp, #8]
1a006ac8:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
1a006acc:	f043 0302 	orr.w	r3, r3, #2
1a006ad0:	930a      	str	r3, [sp, #40]	; 0x28
1a006ad2:	f300 80dd 	bgt.w	1a006c90 <_svfprintf_r+0x1830>
1a006ad6:	2300      	movs	r3, #0
1a006ad8:	9308      	str	r3, [sp, #32]
1a006ada:	ae3b      	add	r6, sp, #236	; 0xec
1a006adc:	9a02      	ldr	r2, [sp, #8]
1a006ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a006ae0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a006ae4:	9202      	str	r2, [sp, #8]
1a006ae6:	2b00      	cmp	r3, #0
1a006ae8:	f028 0220 	bic.w	r2, r8, #32
1a006aec:	9203      	str	r2, [sp, #12]
1a006aee:	f2c0 808c 	blt.w	1a006c0a <_svfprintf_r+0x17aa>
1a006af2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a006af6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a006afa:	2300      	movs	r3, #0
1a006afc:	931e      	str	r3, [sp, #120]	; 0x78
1a006afe:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a006b02:	f000 811d 	beq.w	1a006d40 <_svfprintf_r+0x18e0>
1a006b06:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a006b0a:	f47f ac0a 	bne.w	1a006322 <_svfprintf_r+0xec2>
1a006b0e:	a822      	add	r0, sp, #136	; 0x88
1a006b10:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006b14:	f003 ff54 	bl	1a00a9c0 <frexp>
1a006b18:	2200      	movs	r2, #0
1a006b1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a006b1e:	ec51 0b10 	vmov	r0, r1, d0
1a006b22:	f7fc ffeb 	bl	1a003afc <__aeabi_dmul>
1a006b26:	2200      	movs	r2, #0
1a006b28:	2300      	movs	r3, #0
1a006b2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a006b2e:	f7fd fa4d 	bl	1a003fcc <__aeabi_dcmpeq>
1a006b32:	b108      	cbz	r0, 1a006b38 <_svfprintf_r+0x16d8>
1a006b34:	2301      	movs	r3, #1
1a006b36:	9322      	str	r3, [sp, #136]	; 0x88
1a006b38:	4bb6      	ldr	r3, [pc, #728]	; (1a006e14 <_svfprintf_r+0x19b4>)
1a006b3a:	930b      	str	r3, [sp, #44]	; 0x2c
1a006b3c:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
1a006b40:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
1a006b44:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a006b48:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
1a006b4c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a006b50:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a006b54:	46b2      	mov	sl, r6
1a006b56:	960c      	str	r6, [sp, #48]	; 0x30
1a006b58:	e003      	b.n	1a006b62 <_svfprintf_r+0x1702>
1a006b5a:	f7fd fa37 	bl	1a003fcc <__aeabi_dcmpeq>
1a006b5e:	bb20      	cbnz	r0, 1a006baa <_svfprintf_r+0x174a>
1a006b60:	46ba      	mov	sl, r7
1a006b62:	2200      	movs	r2, #0
1a006b64:	4bac      	ldr	r3, [pc, #688]	; (1a006e18 <_svfprintf_r+0x19b8>)
1a006b66:	4640      	mov	r0, r8
1a006b68:	4649      	mov	r1, r9
1a006b6a:	f7fc ffc7 	bl	1a003afc <__aeabi_dmul>
1a006b6e:	4689      	mov	r9, r1
1a006b70:	4680      	mov	r8, r0
1a006b72:	f7fd fa73 	bl	1a00405c <__aeabi_d2iz>
1a006b76:	4606      	mov	r6, r0
1a006b78:	f7fc ff56 	bl	1a003a28 <__aeabi_i2d>
1a006b7c:	4602      	mov	r2, r0
1a006b7e:	460b      	mov	r3, r1
1a006b80:	4640      	mov	r0, r8
1a006b82:	4649      	mov	r1, r9
1a006b84:	f7fc fe02 	bl	1a00378c <__aeabi_dsub>
1a006b88:	4657      	mov	r7, sl
1a006b8a:	f81b 4006 	ldrb.w	r4, [fp, r6]
1a006b8e:	f807 4b01 	strb.w	r4, [r7], #1
1a006b92:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a006b96:	462c      	mov	r4, r5
1a006b98:	4680      	mov	r8, r0
1a006b9a:	4689      	mov	r9, r1
1a006b9c:	f04f 0200 	mov.w	r2, #0
1a006ba0:	f04f 0300 	mov.w	r3, #0
1a006ba4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a006ba8:	d1d7      	bne.n	1a006b5a <_svfprintf_r+0x16fa>
1a006baa:	4640      	mov	r0, r8
1a006bac:	4649      	mov	r1, r9
1a006bae:	2200      	movs	r2, #0
1a006bb0:	4b9a      	ldr	r3, [pc, #616]	; (1a006e1c <_svfprintf_r+0x19bc>)
1a006bb2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1a006bb6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
1a006bba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a006bbe:	4635      	mov	r5, r6
1a006bc0:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
1a006bc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006bc6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a006bca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a006bce:	f7fd fa25 	bl	1a00401c <__aeabi_dcmpgt>
1a006bd2:	2800      	cmp	r0, #0
1a006bd4:	d13f      	bne.n	1a006c56 <_svfprintf_r+0x17f6>
1a006bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a006bda:	2200      	movs	r2, #0
1a006bdc:	4b8f      	ldr	r3, [pc, #572]	; (1a006e1c <_svfprintf_r+0x19bc>)
1a006bde:	f7fd f9f5 	bl	1a003fcc <__aeabi_dcmpeq>
1a006be2:	b108      	cbz	r0, 1a006be8 <_svfprintf_r+0x1788>
1a006be4:	07e9      	lsls	r1, r5, #31
1a006be6:	d436      	bmi.n	1a006c56 <_svfprintf_r+0x17f6>
1a006be8:	2c00      	cmp	r4, #0
1a006bea:	f6ff abb7 	blt.w	1a00635c <_svfprintf_r+0xefc>
1a006bee:	1c63      	adds	r3, r4, #1
1a006bf0:	443b      	add	r3, r7
1a006bf2:	2230      	movs	r2, #48	; 0x30
1a006bf4:	f807 2b01 	strb.w	r2, [r7], #1
1a006bf8:	42bb      	cmp	r3, r7
1a006bfa:	d1fb      	bne.n	1a006bf4 <_svfprintf_r+0x1794>
1a006bfc:	f7ff bbae 	b.w	1a00635c <_svfprintf_r+0xefc>
1a006c00:	9b02      	ldr	r3, [sp, #8]
1a006c02:	930a      	str	r3, [sp, #40]	; 0x28
1a006c04:	2300      	movs	r3, #0
1a006c06:	9308      	str	r3, [sp, #32]
1a006c08:	9202      	str	r2, [sp, #8]
1a006c0a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a006c0e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a006c12:	931d      	str	r3, [sp, #116]	; 0x74
1a006c14:	232d      	movs	r3, #45	; 0x2d
1a006c16:	911c      	str	r1, [sp, #112]	; 0x70
1a006c18:	931e      	str	r3, [sp, #120]	; 0x78
1a006c1a:	e770      	b.n	1a006afe <_svfprintf_r+0x169e>
1a006c1c:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a006c20:	189f      	adds	r7, r3, r2
1a006c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a006c24:	2b00      	cmp	r3, #0
1a006c26:	f340 80d1 	ble.w	1a006dcc <_svfprintf_r+0x196c>
1a006c2a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a006c2e:	e730      	b.n	1a006a92 <_svfprintf_r+0x1632>
1a006c30:	aa28      	add	r2, sp, #160	; 0xa0
1a006c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006c36:	f003 ff33 	bl	1a00aaa0 <__ssprint_r>
1a006c3a:	2800      	cmp	r0, #0
1a006c3c:	f47e acef 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006c42:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a006c44:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a006c46:	1ad3      	subs	r3, r2, r3
1a006c48:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006c4c:	f7ff ba79 	b.w	1a006142 <_svfprintf_r+0xce2>
1a006c50:	eb06 040a 	add.w	r4, r6, sl
1a006c54:	e6f9      	b.n	1a006a4a <_svfprintf_r+0x15ea>
1a006c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a006c58:	9326      	str	r3, [sp, #152]	; 0x98
1a006c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006c5c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
1a006c60:	7bd9      	ldrb	r1, [r3, #15]
1a006c62:	4291      	cmp	r1, r2
1a006c64:	463b      	mov	r3, r7
1a006c66:	d109      	bne.n	1a006c7c <_svfprintf_r+0x181c>
1a006c68:	2030      	movs	r0, #48	; 0x30
1a006c6a:	f803 0c01 	strb.w	r0, [r3, #-1]
1a006c6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a006c70:	1e5a      	subs	r2, r3, #1
1a006c72:	9226      	str	r2, [sp, #152]	; 0x98
1a006c74:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a006c78:	4291      	cmp	r1, r2
1a006c7a:	d0f6      	beq.n	1a006c6a <_svfprintf_r+0x180a>
1a006c7c:	2a39      	cmp	r2, #57	; 0x39
1a006c7e:	bf0b      	itete	eq
1a006c80:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a006c82:	3201      	addne	r2, #1
1a006c84:	7a92      	ldrbeq	r2, [r2, #10]
1a006c86:	b2d2      	uxtbne	r2, r2
1a006c88:	f803 2c01 	strb.w	r2, [r3, #-1]
1a006c8c:	f7ff bb66 	b.w	1a00635c <_svfprintf_r+0xefc>
1a006c90:	f10a 0101 	add.w	r1, sl, #1
1a006c94:	9806      	ldr	r0, [sp, #24]
1a006c96:	f7fd fec7 	bl	1a004a28 <_malloc_r>
1a006c9a:	4606      	mov	r6, r0
1a006c9c:	2800      	cmp	r0, #0
1a006c9e:	f000 80ed 	beq.w	1a006e7c <_svfprintf_r+0x1a1c>
1a006ca2:	9008      	str	r0, [sp, #32]
1a006ca4:	e71a      	b.n	1a006adc <_svfprintf_r+0x167c>
1a006ca6:	4621      	mov	r1, r4
1a006ca8:	461c      	mov	r4, r3
1a006caa:	460b      	mov	r3, r1
1a006cac:	3201      	adds	r2, #1
1a006cae:	442c      	add	r4, r5
1a006cb0:	2a07      	cmp	r2, #7
1a006cb2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a006cb6:	e9c9 3500 	strd	r3, r5, [r9]
1a006cba:	f77f ad13 	ble.w	1a0066e4 <_svfprintf_r+0x1284>
1a006cbe:	aa28      	add	r2, sp, #160	; 0xa0
1a006cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a006cc4:	f003 feec 	bl	1a00aaa0 <__ssprint_r>
1a006cc8:	2800      	cmp	r0, #0
1a006cca:	f47e aca8 	bne.w	1a00561e <_svfprintf_r+0x1be>
1a006cce:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a006cd2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a006cd6:	e507      	b.n	1a0066e8 <_svfprintf_r+0x1288>
1a006cd8:	f10a 0401 	add.w	r4, sl, #1
1a006cdc:	a926      	add	r1, sp, #152	; 0x98
1a006cde:	ab23      	add	r3, sp, #140	; 0x8c
1a006ce0:	e9cd 3100 	strd	r3, r1, [sp]
1a006ce4:	4622      	mov	r2, r4
1a006ce6:	ab22      	add	r3, sp, #136	; 0x88
1a006ce8:	2102      	movs	r1, #2
1a006cea:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006cee:	9806      	ldr	r0, [sp, #24]
1a006cf0:	f001 ffbe 	bl	1a008c70 <_dtoa_r>
1a006cf4:	4606      	mov	r6, r0
1a006cf6:	4434      	add	r4, r6
1a006cf8:	e6a7      	b.n	1a006a4a <_svfprintf_r+0x15ea>
1a006cfa:	2330      	movs	r3, #48	; 0x30
1a006cfc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a006d00:	2378      	movs	r3, #120	; 0x78
1a006d02:	e6de      	b.n	1a006ac2 <_svfprintf_r+0x1662>
1a006d04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a006d06:	e636      	b.n	1a006976 <_svfprintf_r+0x1516>
1a006d08:	2900      	cmp	r1, #0
1a006d0a:	f040 8098 	bne.w	1a006e3e <_svfprintf_r+0x19de>
1a006d0e:	2330      	movs	r3, #48	; 0x30
1a006d10:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a006d14:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a006d18:	3230      	adds	r2, #48	; 0x30
1a006d1a:	f803 2b01 	strb.w	r2, [r3], #1
1a006d1e:	aa24      	add	r2, sp, #144	; 0x90
1a006d20:	1a9b      	subs	r3, r3, r2
1a006d22:	9316      	str	r3, [sp, #88]	; 0x58
1a006d24:	f7ff bb73 	b.w	1a00640e <_svfprintf_r+0xfae>
1a006d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a006d2a:	4e3d      	ldr	r6, [pc, #244]	; (1a006e20 <_svfprintf_r+0x19c0>)
1a006d2c:	2b00      	cmp	r3, #0
1a006d2e:	bfb6      	itet	lt
1a006d30:	222d      	movlt	r2, #45	; 0x2d
1a006d32:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a006d36:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a006d3a:	4b3a      	ldr	r3, [pc, #232]	; (1a006e24 <_svfprintf_r+0x19c4>)
1a006d3c:	f7fe bf09 	b.w	1a005b52 <_svfprintf_r+0x6f2>
1a006d40:	a822      	add	r0, sp, #136	; 0x88
1a006d42:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a006d46:	f003 fe3b 	bl	1a00a9c0 <frexp>
1a006d4a:	2200      	movs	r2, #0
1a006d4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a006d50:	ec51 0b10 	vmov	r0, r1, d0
1a006d54:	f7fc fed2 	bl	1a003afc <__aeabi_dmul>
1a006d58:	2200      	movs	r2, #0
1a006d5a:	2300      	movs	r3, #0
1a006d5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a006d60:	f7fd f934 	bl	1a003fcc <__aeabi_dcmpeq>
1a006d64:	b108      	cbz	r0, 1a006d6a <_svfprintf_r+0x190a>
1a006d66:	2301      	movs	r3, #1
1a006d68:	9322      	str	r3, [sp, #136]	; 0x88
1a006d6a:	4b2f      	ldr	r3, [pc, #188]	; (1a006e28 <_svfprintf_r+0x19c8>)
1a006d6c:	930b      	str	r3, [sp, #44]	; 0x2c
1a006d6e:	e6e5      	b.n	1a006b3c <_svfprintf_r+0x16dc>
1a006d70:	f04f 0867 	mov.w	r8, #103	; 0x67
1a006d74:	9818      	ldr	r0, [sp, #96]	; 0x60
1a006d76:	2200      	movs	r2, #0
1a006d78:	920c      	str	r2, [sp, #48]	; 0x30
1a006d7a:	920f      	str	r2, [sp, #60]	; 0x3c
1a006d7c:	7803      	ldrb	r3, [r0, #0]
1a006d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006d80:	2bff      	cmp	r3, #255	; 0xff
1a006d82:	d00c      	beq.n	1a006d9e <_svfprintf_r+0x193e>
1a006d84:	4293      	cmp	r3, r2
1a006d86:	da0a      	bge.n	1a006d9e <_svfprintf_r+0x193e>
1a006d88:	7841      	ldrb	r1, [r0, #1]
1a006d8a:	1ad2      	subs	r2, r2, r3
1a006d8c:	b1a1      	cbz	r1, 1a006db8 <_svfprintf_r+0x1958>
1a006d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006d90:	3301      	adds	r3, #1
1a006d92:	930f      	str	r3, [sp, #60]	; 0x3c
1a006d94:	460b      	mov	r3, r1
1a006d96:	2bff      	cmp	r3, #255	; 0xff
1a006d98:	f100 0001 	add.w	r0, r0, #1
1a006d9c:	d1f2      	bne.n	1a006d84 <_svfprintf_r+0x1924>
1a006d9e:	920e      	str	r2, [sp, #56]	; 0x38
1a006da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006da4:	9018      	str	r0, [sp, #96]	; 0x60
1a006da6:	4413      	add	r3, r2
1a006da8:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a006daa:	fb02 7703 	mla	r7, r2, r3, r7
1a006dae:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a006db2:	9303      	str	r3, [sp, #12]
1a006db4:	f7ff bb41 	b.w	1a00643a <_svfprintf_r+0xfda>
1a006db8:	990c      	ldr	r1, [sp, #48]	; 0x30
1a006dba:	3101      	adds	r1, #1
1a006dbc:	910c      	str	r1, [sp, #48]	; 0x30
1a006dbe:	e7df      	b.n	1a006d80 <_svfprintf_r+0x1920>
1a006dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a006dc2:	18d7      	adds	r7, r2, r3
1a006dc4:	4457      	add	r7, sl
1a006dc6:	f04f 0866 	mov.w	r8, #102	; 0x66
1a006dca:	e662      	b.n	1a006a92 <_svfprintf_r+0x1632>
1a006dcc:	f1c3 0301 	rsb	r3, r3, #1
1a006dd0:	441f      	add	r7, r3
1a006dd2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a006dd6:	9303      	str	r3, [sp, #12]
1a006dd8:	f04f 0867 	mov.w	r8, #103	; 0x67
1a006ddc:	e5d7      	b.n	1a00698e <_svfprintf_r+0x152e>
1a006dde:	2200      	movs	r2, #0
1a006de0:	2300      	movs	r3, #0
1a006de2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006de6:	f7fd f8f1 	bl	1a003fcc <__aeabi_dcmpeq>
1a006dea:	2800      	cmp	r0, #0
1a006dec:	f47f ae2a 	bne.w	1a006a44 <_svfprintf_r+0x15e4>
1a006df0:	f1ca 0301 	rsb	r3, sl, #1
1a006df4:	9322      	str	r3, [sp, #136]	; 0x88
1a006df6:	e626      	b.n	1a006a46 <_svfprintf_r+0x15e6>
1a006df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006dfa:	07db      	lsls	r3, r3, #31
1a006dfc:	f57f ab10 	bpl.w	1a006420 <_svfprintf_r+0xfc0>
1a006e00:	f7ff bb0c 	b.w	1a00641c <_svfprintf_r+0xfbc>
1a006e04:	b993      	cbnz	r3, 1a006e2c <_svfprintf_r+0x19cc>
1a006e06:	2301      	movs	r3, #1
1a006e08:	9303      	str	r3, [sp, #12]
1a006e0a:	461f      	mov	r7, r3
1a006e0c:	f04f 0866 	mov.w	r8, #102	; 0x66
1a006e10:	e5bd      	b.n	1a00698e <_svfprintf_r+0x152e>
1a006e12:	bf00      	nop
1a006e14:	1a00b398 	.word	0x1a00b398
1a006e18:	40300000 	.word	0x40300000
1a006e1c:	3fe00000 	.word	0x3fe00000
1a006e20:	1a00b37c 	.word	0x1a00b37c
1a006e24:	1a00b380 	.word	0x1a00b380
1a006e28:	1a00b384 	.word	0x1a00b384
1a006e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a006e2e:	1c5f      	adds	r7, r3, #1
1a006e30:	4457      	add	r7, sl
1a006e32:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a006e36:	9303      	str	r3, [sp, #12]
1a006e38:	f04f 0866 	mov.w	r8, #102	; 0x66
1a006e3c:	e5a7      	b.n	1a00698e <_svfprintf_r+0x152e>
1a006e3e:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a006e42:	e769      	b.n	1a006d18 <_svfprintf_r+0x18b8>
1a006e44:	464a      	mov	r2, r9
1a006e46:	e4e1      	b.n	1a00680c <_svfprintf_r+0x13ac>
1a006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006e4a:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a006e4e:	f853 0b04 	ldr.w	r0, [r3], #4
1a006e52:	9309      	str	r3, [sp, #36]	; 0x24
1a006e54:	4693      	mov	fp, r2
1a006e56:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
1a006e5a:	f7fe bb61 	b.w	1a005520 <_svfprintf_r+0xc0>
1a006e5e:	9a06      	ldr	r2, [sp, #24]
1a006e60:	230c      	movs	r3, #12
1a006e62:	6013      	str	r3, [r2, #0]
1a006e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006e68:	9304      	str	r3, [sp, #16]
1a006e6a:	f7fe bbe7 	b.w	1a00563c <_svfprintf_r+0x1dc>
1a006e6e:	4654      	mov	r4, sl
1a006e70:	4434      	add	r4, r6
1a006e72:	e5ea      	b.n	1a006a4a <_svfprintf_r+0x15ea>
1a006e74:	2302      	movs	r3, #2
1a006e76:	9316      	str	r3, [sp, #88]	; 0x58
1a006e78:	f7ff bac9 	b.w	1a00640e <_svfprintf_r+0xfae>
1a006e7c:	9a07      	ldr	r2, [sp, #28]
1a006e7e:	8993      	ldrh	r3, [r2, #12]
1a006e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006e84:	8193      	strh	r3, [r2, #12]
1a006e86:	f7fe bbd2 	b.w	1a00562e <_svfprintf_r+0x1ce>
1a006e8a:	461f      	mov	r7, r3
1a006e8c:	f7ff ba14 	b.w	1a0062b8 <_svfprintf_r+0xe58>
1a006e90:	461f      	mov	r7, r3
1a006e92:	f7ff baeb 	b.w	1a00646c <_svfprintf_r+0x100c>
1a006e96:	461f      	mov	r7, r3
1a006e98:	f7ff bada 	b.w	1a006450 <_svfprintf_r+0xff0>
1a006e9c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006ea0 <_vfprintf_r>:
1a006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006ea4:	b0d5      	sub	sp, #340	; 0x154
1a006ea6:	461c      	mov	r4, r3
1a006ea8:	4689      	mov	r9, r1
1a006eaa:	4617      	mov	r7, r2
1a006eac:	4605      	mov	r5, r0
1a006eae:	9005      	str	r0, [sp, #20]
1a006eb0:	f002 ff8c 	bl	1a009dcc <_localeconv_r>
1a006eb4:	6803      	ldr	r3, [r0, #0]
1a006eb6:	9315      	str	r3, [sp, #84]	; 0x54
1a006eb8:	4618      	mov	r0, r3
1a006eba:	f7fe fa61 	bl	1a005380 <strlen>
1a006ebe:	9408      	str	r4, [sp, #32]
1a006ec0:	9013      	str	r0, [sp, #76]	; 0x4c
1a006ec2:	b11d      	cbz	r5, 1a006ecc <_vfprintf_r+0x2c>
1a006ec4:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a006ec6:	2b00      	cmp	r3, #0
1a006ec8:	f000 8411 	beq.w	1a0076ee <_vfprintf_r+0x84e>
1a006ecc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006ed0:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a006ed4:	07cd      	lsls	r5, r1, #31
1a006ed6:	b293      	uxth	r3, r2
1a006ed8:	d402      	bmi.n	1a006ee0 <_vfprintf_r+0x40>
1a006eda:	0598      	lsls	r0, r3, #22
1a006edc:	f140 8754 	bpl.w	1a007d88 <_vfprintf_r+0xee8>
1a006ee0:	0499      	lsls	r1, r3, #18
1a006ee2:	d40a      	bmi.n	1a006efa <_vfprintf_r+0x5a>
1a006ee4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006ee8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a006eec:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a006ef0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a006ef4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a006ef8:	b29b      	uxth	r3, r3
1a006efa:	071a      	lsls	r2, r3, #28
1a006efc:	f140 80bf 	bpl.w	1a00707e <_vfprintf_r+0x1de>
1a006f00:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a006f04:	2a00      	cmp	r2, #0
1a006f06:	f000 80ba 	beq.w	1a00707e <_vfprintf_r+0x1de>
1a006f0a:	f003 021a 	and.w	r2, r3, #26
1a006f0e:	2a0a      	cmp	r2, #10
1a006f10:	f000 80c3 	beq.w	1a00709a <_vfprintf_r+0x1fa>
1a006f14:	2300      	movs	r3, #0
1a006f16:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a007188 <_vfprintf_r+0x2e8>
1a006f1a:	9312      	str	r3, [sp, #72]	; 0x48
1a006f1c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a006f20:	9314      	str	r3, [sp, #80]	; 0x50
1a006f22:	9316      	str	r3, [sp, #88]	; 0x58
1a006f24:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a006f28:	9317      	str	r3, [sp, #92]	; 0x5c
1a006f2a:	9304      	str	r3, [sp, #16]
1a006f2c:	ab2b      	add	r3, sp, #172	; 0xac
1a006f2e:	9328      	str	r3, [sp, #160]	; 0xa0
1a006f30:	469b      	mov	fp, r3
1a006f32:	783b      	ldrb	r3, [r7, #0]
1a006f34:	f8cd 901c 	str.w	r9, [sp, #28]
1a006f38:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a006f3c:	2b00      	cmp	r3, #0
1a006f3e:	f000 8267 	beq.w	1a007410 <_vfprintf_r+0x570>
1a006f42:	2b25      	cmp	r3, #37	; 0x25
1a006f44:	f001 80ab 	beq.w	1a00809e <_vfprintf_r+0x11fe>
1a006f48:	463d      	mov	r5, r7
1a006f4a:	e003      	b.n	1a006f54 <_vfprintf_r+0xb4>
1a006f4c:	2b25      	cmp	r3, #37	; 0x25
1a006f4e:	f000 80bb 	beq.w	1a0070c8 <_vfprintf_r+0x228>
1a006f52:	4625      	mov	r5, r4
1a006f54:	786b      	ldrb	r3, [r5, #1]
1a006f56:	1c6c      	adds	r4, r5, #1
1a006f58:	2b00      	cmp	r3, #0
1a006f5a:	d1f7      	bne.n	1a006f4c <_vfprintf_r+0xac>
1a006f5c:	1be6      	subs	r6, r4, r7
1a006f5e:	f000 8257 	beq.w	1a007410 <_vfprintf_r+0x570>
1a006f62:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a006f66:	3301      	adds	r3, #1
1a006f68:	4432      	add	r2, r6
1a006f6a:	2b07      	cmp	r3, #7
1a006f6c:	f8cb 7000 	str.w	r7, [fp]
1a006f70:	f8cb 6004 	str.w	r6, [fp, #4]
1a006f74:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a006f78:	f300 80aa 	bgt.w	1a0070d0 <_vfprintf_r+0x230>
1a006f7c:	f10b 0b08 	add.w	fp, fp, #8
1a006f80:	9a04      	ldr	r2, [sp, #16]
1a006f82:	786b      	ldrb	r3, [r5, #1]
1a006f84:	4432      	add	r2, r6
1a006f86:	9204      	str	r2, [sp, #16]
1a006f88:	2b00      	cmp	r3, #0
1a006f8a:	f000 8241 	beq.w	1a007410 <_vfprintf_r+0x570>
1a006f8e:	2300      	movs	r3, #0
1a006f90:	f894 8001 	ldrb.w	r8, [r4, #1]
1a006f94:	9306      	str	r3, [sp, #24]
1a006f96:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a006f9a:	9302      	str	r3, [sp, #8]
1a006f9c:	f104 0a01 	add.w	sl, r4, #1
1a006fa0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a006fa4:	262b      	movs	r6, #43	; 0x2b
1a006fa6:	2120      	movs	r1, #32
1a006fa8:	f10a 0a01 	add.w	sl, sl, #1
1a006fac:	f1a8 0320 	sub.w	r3, r8, #32
1a006fb0:	2b5a      	cmp	r3, #90	; 0x5a
1a006fb2:	f200 83a1 	bhi.w	1a0076f8 <_vfprintf_r+0x858>
1a006fb6:	e8df f013 	tbh	[pc, r3, lsl #1]
1a006fba:	0282      	.short	0x0282
1a006fbc:	039f039f 	.word	0x039f039f
1a006fc0:	039f027b 	.word	0x039f027b
1a006fc4:	039f039f 	.word	0x039f039f
1a006fc8:	039f0301 	.word	0x039f0301
1a006fcc:	02f6039f 	.word	0x02f6039f
1a006fd0:	039f00df 	.word	0x039f00df
1a006fd4:	032b00c4 	.word	0x032b00c4
1a006fd8:	0324039f 	.word	0x0324039f
1a006fdc:	00960096 	.word	0x00960096
1a006fe0:	00960096 	.word	0x00960096
1a006fe4:	00960096 	.word	0x00960096
1a006fe8:	00960096 	.word	0x00960096
1a006fec:	039f0096 	.word	0x039f0096
1a006ff0:	039f039f 	.word	0x039f039f
1a006ff4:	039f039f 	.word	0x039f039f
1a006ff8:	039f039f 	.word	0x039f039f
1a006ffc:	039f0345 	.word	0x039f0345
1a007000:	016201a8 	.word	0x016201a8
1a007004:	03450345 	.word	0x03450345
1a007008:	039f0345 	.word	0x039f0345
1a00700c:	039f039f 	.word	0x039f039f
1a007010:	015b039f 	.word	0x015b039f
1a007014:	039f039f 	.word	0x039f039f
1a007018:	039f014e 	.word	0x039f014e
1a00701c:	039f039f 	.word	0x039f039f
1a007020:	039f0123 	.word	0x039f0123
1a007024:	039f0115 	.word	0x039f0115
1a007028:	00cb039f 	.word	0x00cb039f
1a00702c:	039f039f 	.word	0x039f039f
1a007030:	039f039f 	.word	0x039f039f
1a007034:	039f039f 	.word	0x039f039f
1a007038:	039f039f 	.word	0x039f039f
1a00703c:	039f0345 	.word	0x039f0345
1a007040:	00ef01a8 	.word	0x00ef01a8
1a007044:	03450345 	.word	0x03450345
1a007048:	02700345 	.word	0x02700345
1a00704c:	005b00ef 	.word	0x005b00ef
1a007050:	02eb039f 	.word	0x02eb039f
1a007054:	02d1039f 	.word	0x02d1039f
1a007058:	028c02bd 	.word	0x028c02bd
1a00705c:	039f005b 	.word	0x039f005b
1a007060:	005f0123 	.word	0x005f0123
1a007064:	039f0387 	.word	0x039f0387
1a007068:	00a5039f 	.word	0x00a5039f
1a00706c:	005f039f 	.word	0x005f039f
1a007070:	9b02      	ldr	r3, [sp, #8]
1a007072:	f043 0320 	orr.w	r3, r3, #32
1a007076:	9302      	str	r3, [sp, #8]
1a007078:	f89a 8000 	ldrb.w	r8, [sl]
1a00707c:	e794      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a00707e:	4649      	mov	r1, r9
1a007080:	9805      	ldr	r0, [sp, #20]
1a007082:	f001 fcf9 	bl	1a008a78 <__swsetup_r>
1a007086:	2800      	cmp	r0, #0
1a007088:	f041 8381 	bne.w	1a00878e <_vfprintf_r+0x18ee>
1a00708c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007090:	f003 021a 	and.w	r2, r3, #26
1a007094:	2a0a      	cmp	r2, #10
1a007096:	f47f af3d 	bne.w	1a006f14 <_vfprintf_r+0x74>
1a00709a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a00709e:	2a00      	cmp	r2, #0
1a0070a0:	f6ff af38 	blt.w	1a006f14 <_vfprintf_r+0x74>
1a0070a4:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a0070a8:	07d6      	lsls	r6, r2, #31
1a0070aa:	d402      	bmi.n	1a0070b2 <_vfprintf_r+0x212>
1a0070ac:	059d      	lsls	r5, r3, #22
1a0070ae:	f141 8190 	bpl.w	1a0083d2 <_vfprintf_r+0x1532>
1a0070b2:	4623      	mov	r3, r4
1a0070b4:	463a      	mov	r2, r7
1a0070b6:	4649      	mov	r1, r9
1a0070b8:	9805      	ldr	r0, [sp, #20]
1a0070ba:	f001 fc9b 	bl	1a0089f4 <__sbprintf>
1a0070be:	9004      	str	r0, [sp, #16]
1a0070c0:	9804      	ldr	r0, [sp, #16]
1a0070c2:	b055      	add	sp, #340	; 0x154
1a0070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0070c8:	1be6      	subs	r6, r4, r7
1a0070ca:	f43f af60 	beq.w	1a006f8e <_vfprintf_r+0xee>
1a0070ce:	e748      	b.n	1a006f62 <_vfprintf_r+0xc2>
1a0070d0:	aa28      	add	r2, sp, #160	; 0xa0
1a0070d2:	9907      	ldr	r1, [sp, #28]
1a0070d4:	9805      	ldr	r0, [sp, #20]
1a0070d6:	f003 fd9b 	bl	1a00ac10 <__sprint_r>
1a0070da:	2800      	cmp	r0, #0
1a0070dc:	f041 8427 	bne.w	1a00892e <_vfprintf_r+0x1a8e>
1a0070e0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0070e4:	e74c      	b.n	1a006f80 <_vfprintf_r+0xe0>
1a0070e6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0070ea:	2200      	movs	r2, #0
1a0070ec:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0070f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0070f4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0070f8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0070fc:	2b09      	cmp	r3, #9
1a0070fe:	d9f5      	bls.n	1a0070ec <_vfprintf_r+0x24c>
1a007100:	9206      	str	r2, [sp, #24]
1a007102:	e753      	b.n	1a006fac <_vfprintf_r+0x10c>
1a007104:	4b22      	ldr	r3, [pc, #136]	; (1a007190 <_vfprintf_r+0x2f0>)
1a007106:	9314      	str	r3, [sp, #80]	; 0x50
1a007108:	9b02      	ldr	r3, [sp, #8]
1a00710a:	069f      	lsls	r7, r3, #26
1a00710c:	d525      	bpl.n	1a00715a <_vfprintf_r+0x2ba>
1a00710e:	9c08      	ldr	r4, [sp, #32]
1a007110:	3407      	adds	r4, #7
1a007112:	f024 0307 	bic.w	r3, r4, #7
1a007116:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00711a:	9308      	str	r3, [sp, #32]
1a00711c:	9a02      	ldr	r2, [sp, #8]
1a00711e:	07d1      	lsls	r1, r2, #31
1a007120:	d50a      	bpl.n	1a007138 <_vfprintf_r+0x298>
1a007122:	ea54 0305 	orrs.w	r3, r4, r5
1a007126:	d007      	beq.n	1a007138 <_vfprintf_r+0x298>
1a007128:	2330      	movs	r3, #48	; 0x30
1a00712a:	f042 0202 	orr.w	r2, r2, #2
1a00712e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a007132:	9202      	str	r2, [sp, #8]
1a007134:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a007138:	9b02      	ldr	r3, [sp, #8]
1a00713a:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a00713e:	2302      	movs	r3, #2
1a007140:	e1d9      	b.n	1a0074f6 <_vfprintf_r+0x656>
1a007142:	f89a 8000 	ldrb.w	r8, [sl]
1a007146:	9b02      	ldr	r3, [sp, #8]
1a007148:	f043 0304 	orr.w	r3, r3, #4
1a00714c:	9302      	str	r3, [sp, #8]
1a00714e:	e72b      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a007150:	4b10      	ldr	r3, [pc, #64]	; (1a007194 <_vfprintf_r+0x2f4>)
1a007152:	9314      	str	r3, [sp, #80]	; 0x50
1a007154:	9b02      	ldr	r3, [sp, #8]
1a007156:	069f      	lsls	r7, r3, #26
1a007158:	d4d9      	bmi.n	1a00710e <_vfprintf_r+0x26e>
1a00715a:	9b08      	ldr	r3, [sp, #32]
1a00715c:	f853 4b04 	ldr.w	r4, [r3], #4
1a007160:	9308      	str	r3, [sp, #32]
1a007162:	9b02      	ldr	r3, [sp, #8]
1a007164:	06de      	lsls	r6, r3, #27
1a007166:	f100 864f 	bmi.w	1a007e08 <_vfprintf_r+0xf68>
1a00716a:	9b02      	ldr	r3, [sp, #8]
1a00716c:	065d      	lsls	r5, r3, #25
1a00716e:	f140 8647 	bpl.w	1a007e00 <_vfprintf_r+0xf60>
1a007172:	b2a4      	uxth	r4, r4
1a007174:	2500      	movs	r5, #0
1a007176:	e7d1      	b.n	1a00711c <_vfprintf_r+0x27c>
1a007178:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a00717c:	f89a 8000 	ldrb.w	r8, [sl]
1a007180:	e712      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a007182:	bf00      	nop
1a007184:	f3af 8000 	nop.w
	...
1a007190:	1a00b384 	.word	0x1a00b384
1a007194:	1a00b398 	.word	0x1a00b398
1a007198:	9e02      	ldr	r6, [sp, #8]
1a00719a:	06b0      	lsls	r0, r6, #26
1a00719c:	f140 870b 	bpl.w	1a007fb6 <_vfprintf_r+0x1116>
1a0071a0:	9c08      	ldr	r4, [sp, #32]
1a0071a2:	3407      	adds	r4, #7
1a0071a4:	f024 0307 	bic.w	r3, r4, #7
1a0071a8:	4619      	mov	r1, r3
1a0071aa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a0071ae:	9108      	str	r1, [sp, #32]
1a0071b0:	4614      	mov	r4, r2
1a0071b2:	461d      	mov	r5, r3
1a0071b4:	2a00      	cmp	r2, #0
1a0071b6:	f173 0300 	sbcs.w	r3, r3, #0
1a0071ba:	db71      	blt.n	1a0072a0 <_vfprintf_r+0x400>
1a0071bc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0071c0:	f000 82c5 	beq.w	1a00774e <_vfprintf_r+0x8ae>
1a0071c4:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a0071c8:	9302      	str	r3, [sp, #8]
1a0071ca:	ea54 0305 	orrs.w	r3, r4, r5
1a0071ce:	f040 82bd 	bne.w	1a00774c <_vfprintf_r+0x8ac>
1a0071d2:	f1b9 0f00 	cmp.w	r9, #0
1a0071d6:	f041 810e 	bne.w	1a0083f6 <_vfprintf_r+0x1556>
1a0071da:	f04f 0900 	mov.w	r9, #0
1a0071de:	464e      	mov	r6, r9
1a0071e0:	af54      	add	r7, sp, #336	; 0x150
1a0071e2:	e2bf      	b.n	1a007764 <_vfprintf_r+0x8c4>
1a0071e4:	9b02      	ldr	r3, [sp, #8]
1a0071e6:	069d      	lsls	r5, r3, #26
1a0071e8:	f043 0610 	orr.w	r6, r3, #16
1a0071ec:	f100 828f 	bmi.w	1a00770e <_vfprintf_r+0x86e>
1a0071f0:	9b08      	ldr	r3, [sp, #32]
1a0071f2:	1d1a      	adds	r2, r3, #4
1a0071f4:	9b08      	ldr	r3, [sp, #32]
1a0071f6:	9208      	str	r2, [sp, #32]
1a0071f8:	681c      	ldr	r4, [r3, #0]
1a0071fa:	2500      	movs	r5, #0
1a0071fc:	2301      	movs	r3, #1
1a0071fe:	e17a      	b.n	1a0074f6 <_vfprintf_r+0x656>
1a007200:	9c08      	ldr	r4, [sp, #32]
1a007202:	f854 7b04 	ldr.w	r7, [r4], #4
1a007206:	2500      	movs	r5, #0
1a007208:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a00720c:	2f00      	cmp	r7, #0
1a00720e:	f000 8737 	beq.w	1a008080 <_vfprintf_r+0x11e0>
1a007212:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007216:	f000 87bc 	beq.w	1a008192 <_vfprintf_r+0x12f2>
1a00721a:	464a      	mov	r2, r9
1a00721c:	4629      	mov	r1, r5
1a00721e:	4638      	mov	r0, r7
1a007220:	f002 fe56 	bl	1a009ed0 <memchr>
1a007224:	9009      	str	r0, [sp, #36]	; 0x24
1a007226:	2800      	cmp	r0, #0
1a007228:	f001 824a 	beq.w	1a0086c0 <_vfprintf_r+0x1820>
1a00722c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00722e:	46a9      	mov	r9, r5
1a007230:	1bde      	subs	r6, r3, r7
1a007232:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a007236:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00723a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00723e:	9408      	str	r4, [sp, #32]
1a007240:	9303      	str	r3, [sp, #12]
1a007242:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a007246:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a00724a:	2a00      	cmp	r2, #0
1a00724c:	d06f      	beq.n	1a00732e <_vfprintf_r+0x48e>
1a00724e:	9b03      	ldr	r3, [sp, #12]
1a007250:	3301      	adds	r3, #1
1a007252:	9303      	str	r3, [sp, #12]
1a007254:	e06b      	b.n	1a00732e <_vfprintf_r+0x48e>
1a007256:	9b02      	ldr	r3, [sp, #8]
1a007258:	069c      	lsls	r4, r3, #26
1a00725a:	f043 0610 	orr.w	r6, r3, #16
1a00725e:	f100 825f 	bmi.w	1a007720 <_vfprintf_r+0x880>
1a007262:	9b08      	ldr	r3, [sp, #32]
1a007264:	1d1a      	adds	r2, r3, #4
1a007266:	9b08      	ldr	r3, [sp, #32]
1a007268:	9208      	str	r2, [sp, #32]
1a00726a:	681c      	ldr	r4, [r3, #0]
1a00726c:	2500      	movs	r5, #0
1a00726e:	e25e      	b.n	1a00772e <_vfprintf_r+0x88e>
1a007270:	9b02      	ldr	r3, [sp, #8]
1a007272:	f89a 8000 	ldrb.w	r8, [sl]
1a007276:	f043 0308 	orr.w	r3, r3, #8
1a00727a:	9302      	str	r3, [sp, #8]
1a00727c:	e694      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a00727e:	9b02      	ldr	r3, [sp, #8]
1a007280:	069c      	lsls	r4, r3, #26
1a007282:	f043 0610 	orr.w	r6, r3, #16
1a007286:	d48b      	bmi.n	1a0071a0 <_vfprintf_r+0x300>
1a007288:	9b08      	ldr	r3, [sp, #32]
1a00728a:	1d1a      	adds	r2, r3, #4
1a00728c:	9b08      	ldr	r3, [sp, #32]
1a00728e:	9208      	str	r2, [sp, #32]
1a007290:	681c      	ldr	r4, [r3, #0]
1a007292:	17e5      	asrs	r5, r4, #31
1a007294:	4622      	mov	r2, r4
1a007296:	462b      	mov	r3, r5
1a007298:	2a00      	cmp	r2, #0
1a00729a:	f173 0300 	sbcs.w	r3, r3, #0
1a00729e:	da8d      	bge.n	1a0071bc <_vfprintf_r+0x31c>
1a0072a0:	4264      	negs	r4, r4
1a0072a2:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a0072a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a0072aa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0072ae:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0072b2:	f04f 0301 	mov.w	r3, #1
1a0072b6:	f040 8125 	bne.w	1a007504 <_vfprintf_r+0x664>
1a0072ba:	2b01      	cmp	r3, #1
1a0072bc:	f000 8247 	beq.w	1a00774e <_vfprintf_r+0x8ae>
1a0072c0:	2b02      	cmp	r3, #2
1a0072c2:	f000 8479 	beq.w	1a007bb8 <_vfprintf_r+0xd18>
1a0072c6:	a954      	add	r1, sp, #336	; 0x150
1a0072c8:	e000      	b.n	1a0072cc <_vfprintf_r+0x42c>
1a0072ca:	4639      	mov	r1, r7
1a0072cc:	08e2      	lsrs	r2, r4, #3
1a0072ce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a0072d2:	08e8      	lsrs	r0, r5, #3
1a0072d4:	f004 0307 	and.w	r3, r4, #7
1a0072d8:	4605      	mov	r5, r0
1a0072da:	4614      	mov	r4, r2
1a0072dc:	3330      	adds	r3, #48	; 0x30
1a0072de:	ea54 0205 	orrs.w	r2, r4, r5
1a0072e2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0072e6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0072ea:	d1ee      	bne.n	1a0072ca <_vfprintf_r+0x42a>
1a0072ec:	07f2      	lsls	r2, r6, #31
1a0072ee:	f140 8288 	bpl.w	1a007802 <_vfprintf_r+0x962>
1a0072f2:	2b30      	cmp	r3, #48	; 0x30
1a0072f4:	f000 8285 	beq.w	1a007802 <_vfprintf_r+0x962>
1a0072f8:	2330      	movs	r3, #48	; 0x30
1a0072fa:	3902      	subs	r1, #2
1a0072fc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a007300:	ab54      	add	r3, sp, #336	; 0x150
1a007302:	9602      	str	r6, [sp, #8]
1a007304:	460f      	mov	r7, r1
1a007306:	1a5e      	subs	r6, r3, r1
1a007308:	e22c      	b.n	1a007764 <_vfprintf_r+0x8c4>
1a00730a:	9c08      	ldr	r4, [sp, #32]
1a00730c:	2300      	movs	r3, #0
1a00730e:	f854 2b04 	ldr.w	r2, [r4], #4
1a007312:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a007316:	2601      	movs	r6, #1
1a007318:	461a      	mov	r2, r3
1a00731a:	9603      	str	r6, [sp, #12]
1a00731c:	9408      	str	r4, [sp, #32]
1a00731e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a007322:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007326:	9209      	str	r2, [sp, #36]	; 0x24
1a007328:	4691      	mov	r9, r2
1a00732a:	920c      	str	r2, [sp, #48]	; 0x30
1a00732c:	af3b      	add	r7, sp, #236	; 0xec
1a00732e:	9b02      	ldr	r3, [sp, #8]
1a007330:	f013 0302 	ands.w	r3, r3, #2
1a007334:	930a      	str	r3, [sp, #40]	; 0x28
1a007336:	d002      	beq.n	1a00733e <_vfprintf_r+0x49e>
1a007338:	9b03      	ldr	r3, [sp, #12]
1a00733a:	3302      	adds	r3, #2
1a00733c:	9303      	str	r3, [sp, #12]
1a00733e:	9b02      	ldr	r3, [sp, #8]
1a007340:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007342:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a007346:	930b      	str	r3, [sp, #44]	; 0x2c
1a007348:	d104      	bne.n	1a007354 <_vfprintf_r+0x4b4>
1a00734a:	9b06      	ldr	r3, [sp, #24]
1a00734c:	9903      	ldr	r1, [sp, #12]
1a00734e:	1a5d      	subs	r5, r3, r1
1a007350:	2d00      	cmp	r5, #0
1a007352:	dc66      	bgt.n	1a007422 <_vfprintf_r+0x582>
1a007354:	b172      	cbz	r2, 1a007374 <_vfprintf_r+0x4d4>
1a007356:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007358:	3201      	adds	r2, #1
1a00735a:	3401      	adds	r4, #1
1a00735c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a007360:	2101      	movs	r1, #1
1a007362:	2a07      	cmp	r2, #7
1a007364:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007368:	e9cb 0100 	strd	r0, r1, [fp]
1a00736c:	f300 83b1 	bgt.w	1a007ad2 <_vfprintf_r+0xc32>
1a007370:	f10b 0b08 	add.w	fp, fp, #8
1a007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007376:	b16b      	cbz	r3, 1a007394 <_vfprintf_r+0x4f4>
1a007378:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00737a:	3301      	adds	r3, #1
1a00737c:	3402      	adds	r4, #2
1a00737e:	a921      	add	r1, sp, #132	; 0x84
1a007380:	2202      	movs	r2, #2
1a007382:	2b07      	cmp	r3, #7
1a007384:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007388:	e9cb 1200 	strd	r1, r2, [fp]
1a00738c:	f300 83ad 	bgt.w	1a007aea <_vfprintf_r+0xc4a>
1a007390:	f10b 0b08 	add.w	fp, fp, #8
1a007394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a007396:	2b80      	cmp	r3, #128	; 0x80
1a007398:	f000 8295 	beq.w	1a0078c6 <_vfprintf_r+0xa26>
1a00739c:	eba9 0506 	sub.w	r5, r9, r6
1a0073a0:	2d00      	cmp	r5, #0
1a0073a2:	f300 82d3 	bgt.w	1a00794c <_vfprintf_r+0xaac>
1a0073a6:	9b02      	ldr	r3, [sp, #8]
1a0073a8:	05db      	lsls	r3, r3, #23
1a0073aa:	f100 822e 	bmi.w	1a00780a <_vfprintf_r+0x96a>
1a0073ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0073b0:	f8cb 7000 	str.w	r7, [fp]
1a0073b4:	3301      	adds	r3, #1
1a0073b6:	4434      	add	r4, r6
1a0073b8:	2b07      	cmp	r3, #7
1a0073ba:	942a      	str	r4, [sp, #168]	; 0xa8
1a0073bc:	f8cb 6004 	str.w	r6, [fp, #4]
1a0073c0:	9329      	str	r3, [sp, #164]	; 0xa4
1a0073c2:	f300 8325 	bgt.w	1a007a10 <_vfprintf_r+0xb70>
1a0073c6:	f10b 0b08 	add.w	fp, fp, #8
1a0073ca:	9b02      	ldr	r3, [sp, #8]
1a0073cc:	075d      	lsls	r5, r3, #29
1a0073ce:	d505      	bpl.n	1a0073dc <_vfprintf_r+0x53c>
1a0073d0:	9b06      	ldr	r3, [sp, #24]
1a0073d2:	9a03      	ldr	r2, [sp, #12]
1a0073d4:	1a9d      	subs	r5, r3, r2
1a0073d6:	2d00      	cmp	r5, #0
1a0073d8:	f300 83ae 	bgt.w	1a007b38 <_vfprintf_r+0xc98>
1a0073dc:	9b04      	ldr	r3, [sp, #16]
1a0073de:	9a06      	ldr	r2, [sp, #24]
1a0073e0:	9903      	ldr	r1, [sp, #12]
1a0073e2:	428a      	cmp	r2, r1
1a0073e4:	bfac      	ite	ge
1a0073e6:	189b      	addge	r3, r3, r2
1a0073e8:	185b      	addlt	r3, r3, r1
1a0073ea:	9304      	str	r3, [sp, #16]
1a0073ec:	2c00      	cmp	r4, #0
1a0073ee:	f040 82e7 	bne.w	1a0079c0 <_vfprintf_r+0xb20>
1a0073f2:	2300      	movs	r3, #0
1a0073f4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0073f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0073f8:	b11b      	cbz	r3, 1a007402 <_vfprintf_r+0x562>
1a0073fa:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0073fc:	9805      	ldr	r0, [sp, #20]
1a0073fe:	f7fd f9c7 	bl	1a004790 <_free_r>
1a007402:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007406:	4657      	mov	r7, sl
1a007408:	783b      	ldrb	r3, [r7, #0]
1a00740a:	2b00      	cmp	r3, #0
1a00740c:	f47f ad99 	bne.w	1a006f42 <_vfprintf_r+0xa2>
1a007410:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a007412:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007416:	2b00      	cmp	r3, #0
1a007418:	f040 86f5 	bne.w	1a008206 <_vfprintf_r+0x1366>
1a00741c:	2300      	movs	r3, #0
1a00741e:	9329      	str	r3, [sp, #164]	; 0xa4
1a007420:	e375      	b.n	1a007b0e <_vfprintf_r+0xc6e>
1a007422:	2d10      	cmp	r5, #16
1a007424:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007426:	dd29      	ble.n	1a00747c <_vfprintf_r+0x5dc>
1a007428:	4659      	mov	r1, fp
1a00742a:	4620      	mov	r0, r4
1a00742c:	961e      	str	r6, [sp, #120]	; 0x78
1a00742e:	2310      	movs	r3, #16
1a007430:	9c05      	ldr	r4, [sp, #20]
1a007432:	9e07      	ldr	r6, [sp, #28]
1a007434:	46bb      	mov	fp, r7
1a007436:	e004      	b.n	1a007442 <_vfprintf_r+0x5a2>
1a007438:	3d10      	subs	r5, #16
1a00743a:	2d10      	cmp	r5, #16
1a00743c:	f101 0108 	add.w	r1, r1, #8
1a007440:	dd18      	ble.n	1a007474 <_vfprintf_r+0x5d4>
1a007442:	3201      	adds	r2, #1
1a007444:	4fbc      	ldr	r7, [pc, #752]	; (1a007738 <_vfprintf_r+0x898>)
1a007446:	3010      	adds	r0, #16
1a007448:	2a07      	cmp	r2, #7
1a00744a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00744e:	e9c1 7300 	strd	r7, r3, [r1]
1a007452:	ddf1      	ble.n	1a007438 <_vfprintf_r+0x598>
1a007454:	aa28      	add	r2, sp, #160	; 0xa0
1a007456:	4631      	mov	r1, r6
1a007458:	4620      	mov	r0, r4
1a00745a:	f003 fbd9 	bl	1a00ac10 <__sprint_r>
1a00745e:	2800      	cmp	r0, #0
1a007460:	f040 834f 	bne.w	1a007b02 <_vfprintf_r+0xc62>
1a007464:	3d10      	subs	r5, #16
1a007466:	2d10      	cmp	r5, #16
1a007468:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00746c:	a92b      	add	r1, sp, #172	; 0xac
1a00746e:	f04f 0310 	mov.w	r3, #16
1a007472:	dce6      	bgt.n	1a007442 <_vfprintf_r+0x5a2>
1a007474:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a007476:	465f      	mov	r7, fp
1a007478:	4604      	mov	r4, r0
1a00747a:	468b      	mov	fp, r1
1a00747c:	3201      	adds	r2, #1
1a00747e:	4bae      	ldr	r3, [pc, #696]	; (1a007738 <_vfprintf_r+0x898>)
1a007480:	442c      	add	r4, r5
1a007482:	2a07      	cmp	r2, #7
1a007484:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007488:	e9cb 3500 	strd	r3, r5, [fp]
1a00748c:	f300 862a 	bgt.w	1a0080e4 <_vfprintf_r+0x1244>
1a007490:	f10b 0b08 	add.w	fp, fp, #8
1a007494:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007498:	e75c      	b.n	1a007354 <_vfprintf_r+0x4b4>
1a00749a:	f89a 8000 	ldrb.w	r8, [sl]
1a00749e:	9b02      	ldr	r3, [sp, #8]
1a0074a0:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a0074a4:	f000 85e3 	beq.w	1a00806e <_vfprintf_r+0x11ce>
1a0074a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0074ac:	9302      	str	r3, [sp, #8]
1a0074ae:	e57b      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a0074b0:	9b02      	ldr	r3, [sp, #8]
1a0074b2:	f89a 8000 	ldrb.w	r8, [sl]
1a0074b6:	f043 0301 	orr.w	r3, r3, #1
1a0074ba:	9302      	str	r3, [sp, #8]
1a0074bc:	e574      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a0074be:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a0074c2:	f89a 8000 	ldrb.w	r8, [sl]
1a0074c6:	2b00      	cmp	r3, #0
1a0074c8:	f47f ad6e 	bne.w	1a006fa8 <_vfprintf_r+0x108>
1a0074cc:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a0074d0:	e56a      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a0074d2:	9c08      	ldr	r4, [sp, #32]
1a0074d4:	f647 0230 	movw	r2, #30768	; 0x7830
1a0074d8:	f854 3b04 	ldr.w	r3, [r4], #4
1a0074dc:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0074e0:	9a02      	ldr	r2, [sp, #8]
1a0074e2:	9408      	str	r4, [sp, #32]
1a0074e4:	461c      	mov	r4, r3
1a0074e6:	4b95      	ldr	r3, [pc, #596]	; (1a00773c <_vfprintf_r+0x89c>)
1a0074e8:	9314      	str	r3, [sp, #80]	; 0x50
1a0074ea:	f042 0602 	orr.w	r6, r2, #2
1a0074ee:	2500      	movs	r5, #0
1a0074f0:	2302      	movs	r3, #2
1a0074f2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0074f6:	2200      	movs	r2, #0
1a0074f8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0074fc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a007500:	f43f aedb 	beq.w	1a0072ba <_vfprintf_r+0x41a>
1a007504:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a007508:	9202      	str	r2, [sp, #8]
1a00750a:	ea54 0205 	orrs.w	r2, r4, r5
1a00750e:	f040 82dd 	bne.w	1a007acc <_vfprintf_r+0xc2c>
1a007512:	f1b9 0f00 	cmp.w	r9, #0
1a007516:	f040 8348 	bne.w	1a007baa <_vfprintf_r+0xd0a>
1a00751a:	2b00      	cmp	r3, #0
1a00751c:	f47f ae5d 	bne.w	1a0071da <_vfprintf_r+0x33a>
1a007520:	f016 0601 	ands.w	r6, r6, #1
1a007524:	f000 846a 	beq.w	1a007dfc <_vfprintf_r+0xf5c>
1a007528:	2330      	movs	r3, #48	; 0x30
1a00752a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a00752e:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a007532:	e117      	b.n	1a007764 <_vfprintf_r+0x8c4>
1a007534:	9e02      	ldr	r6, [sp, #8]
1a007536:	06b0      	lsls	r0, r6, #26
1a007538:	f100 80f2 	bmi.w	1a007720 <_vfprintf_r+0x880>
1a00753c:	9b02      	ldr	r3, [sp, #8]
1a00753e:	9a08      	ldr	r2, [sp, #32]
1a007540:	06d9      	lsls	r1, r3, #27
1a007542:	f852 4b04 	ldr.w	r4, [r2], #4
1a007546:	f101 8243 	bmi.w	1a0089d0 <_vfprintf_r+0x1b30>
1a00754a:	9e02      	ldr	r6, [sp, #8]
1a00754c:	4633      	mov	r3, r6
1a00754e:	065b      	lsls	r3, r3, #25
1a007550:	f140 8635 	bpl.w	1a0081be <_vfprintf_r+0x131e>
1a007554:	9208      	str	r2, [sp, #32]
1a007556:	b2a4      	uxth	r4, r4
1a007558:	2500      	movs	r5, #0
1a00755a:	e0e8      	b.n	1a00772e <_vfprintf_r+0x88e>
1a00755c:	9902      	ldr	r1, [sp, #8]
1a00755e:	9a08      	ldr	r2, [sp, #32]
1a007560:	0689      	lsls	r1, r1, #26
1a007562:	f102 0304 	add.w	r3, r2, #4
1a007566:	f100 8452 	bmi.w	1a007e0e <_vfprintf_r+0xf6e>
1a00756a:	9a02      	ldr	r2, [sp, #8]
1a00756c:	06d7      	lsls	r7, r2, #27
1a00756e:	f100 85e1 	bmi.w	1a008134 <_vfprintf_r+0x1294>
1a007572:	9a02      	ldr	r2, [sp, #8]
1a007574:	0656      	lsls	r6, r2, #25
1a007576:	f100 8664 	bmi.w	1a008242 <_vfprintf_r+0x13a2>
1a00757a:	9a02      	ldr	r2, [sp, #8]
1a00757c:	0595      	lsls	r5, r2, #22
1a00757e:	f140 85d9 	bpl.w	1a008134 <_vfprintf_r+0x1294>
1a007582:	9a08      	ldr	r2, [sp, #32]
1a007584:	9308      	str	r3, [sp, #32]
1a007586:	6812      	ldr	r2, [r2, #0]
1a007588:	9b04      	ldr	r3, [sp, #16]
1a00758a:	7013      	strb	r3, [r2, #0]
1a00758c:	4657      	mov	r7, sl
1a00758e:	e73b      	b.n	1a007408 <_vfprintf_r+0x568>
1a007590:	f89a 8000 	ldrb.w	r8, [sl]
1a007594:	9b02      	ldr	r3, [sp, #8]
1a007596:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00759a:	f000 855f 	beq.w	1a00805c <_vfprintf_r+0x11bc>
1a00759e:	f043 0310 	orr.w	r3, r3, #16
1a0075a2:	9302      	str	r3, [sp, #8]
1a0075a4:	e500      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a0075a6:	9b08      	ldr	r3, [sp, #32]
1a0075a8:	f89a 8000 	ldrb.w	r8, [sl]
1a0075ac:	f853 2b04 	ldr.w	r2, [r3], #4
1a0075b0:	9206      	str	r2, [sp, #24]
1a0075b2:	2a00      	cmp	r2, #0
1a0075b4:	f2c0 8513 	blt.w	1a007fde <_vfprintf_r+0x113e>
1a0075b8:	9308      	str	r3, [sp, #32]
1a0075ba:	e4f5      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a0075bc:	9d05      	ldr	r5, [sp, #20]
1a0075be:	4628      	mov	r0, r5
1a0075c0:	f002 fc04 	bl	1a009dcc <_localeconv_r>
1a0075c4:	6843      	ldr	r3, [r0, #4]
1a0075c6:	9317      	str	r3, [sp, #92]	; 0x5c
1a0075c8:	4618      	mov	r0, r3
1a0075ca:	f7fd fed9 	bl	1a005380 <strlen>
1a0075ce:	9019      	str	r0, [sp, #100]	; 0x64
1a0075d0:	4604      	mov	r4, r0
1a0075d2:	4628      	mov	r0, r5
1a0075d4:	f002 fbfa 	bl	1a009dcc <_localeconv_r>
1a0075d8:	6883      	ldr	r3, [r0, #8]
1a0075da:	9318      	str	r3, [sp, #96]	; 0x60
1a0075dc:	2120      	movs	r1, #32
1a0075de:	2c00      	cmp	r4, #0
1a0075e0:	f43f ad4a 	beq.w	1a007078 <_vfprintf_r+0x1d8>
1a0075e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0075e6:	f89a 8000 	ldrb.w	r8, [sl]
1a0075ea:	2b00      	cmp	r3, #0
1a0075ec:	f43f acdc 	beq.w	1a006fa8 <_vfprintf_r+0x108>
1a0075f0:	781b      	ldrb	r3, [r3, #0]
1a0075f2:	2b00      	cmp	r3, #0
1a0075f4:	f43f acd8 	beq.w	1a006fa8 <_vfprintf_r+0x108>
1a0075f8:	9b02      	ldr	r3, [sp, #8]
1a0075fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0075fe:	9302      	str	r3, [sp, #8]
1a007600:	e4d2      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a007602:	9b02      	ldr	r3, [sp, #8]
1a007604:	f89a 8000 	ldrb.w	r8, [sl]
1a007608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00760c:	9302      	str	r3, [sp, #8]
1a00760e:	e4cb      	b.n	1a006fa8 <_vfprintf_r+0x108>
1a007610:	4652      	mov	r2, sl
1a007612:	f812 8b01 	ldrb.w	r8, [r2], #1
1a007616:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a00761a:	f001 81be 	beq.w	1a00899a <_vfprintf_r+0x1afa>
1a00761e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a007622:	2b09      	cmp	r3, #9
1a007624:	4692      	mov	sl, r2
1a007626:	f04f 0900 	mov.w	r9, #0
1a00762a:	f63f acbf 	bhi.w	1a006fac <_vfprintf_r+0x10c>
1a00762e:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a007632:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a007636:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a00763a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00763e:	2b09      	cmp	r3, #9
1a007640:	d9f5      	bls.n	1a00762e <_vfprintf_r+0x78e>
1a007642:	e4b3      	b.n	1a006fac <_vfprintf_r+0x10c>
1a007644:	9c08      	ldr	r4, [sp, #32]
1a007646:	3407      	adds	r4, #7
1a007648:	f024 0307 	bic.w	r3, r4, #7
1a00764c:	ecb3 7b02 	vldmia	r3!, {d7}
1a007650:	ec55 4b17 	vmov	r4, r5, d7
1a007654:	9308      	str	r3, [sp, #32]
1a007656:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00765a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00765c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a007660:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a007664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a007668:	4b35      	ldr	r3, [pc, #212]	; (1a007740 <_vfprintf_r+0x8a0>)
1a00766a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00766e:	f7fc fcdf 	bl	1a004030 <__aeabi_dcmpun>
1a007672:	2800      	cmp	r0, #0
1a007674:	f040 83dc 	bne.w	1a007e30 <_vfprintf_r+0xf90>
1a007678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00767c:	4b30      	ldr	r3, [pc, #192]	; (1a007740 <_vfprintf_r+0x8a0>)
1a00767e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a007682:	f7fc fcb7 	bl	1a003ff4 <__aeabi_dcmple>
1a007686:	2800      	cmp	r0, #0
1a007688:	f040 83d2 	bne.w	1a007e30 <_vfprintf_r+0xf90>
1a00768c:	2200      	movs	r2, #0
1a00768e:	2300      	movs	r3, #0
1a007690:	4620      	mov	r0, r4
1a007692:	4629      	mov	r1, r5
1a007694:	f7fc fca4 	bl	1a003fe0 <__aeabi_dcmplt>
1a007698:	2800      	cmp	r0, #0
1a00769a:	f040 8780 	bne.w	1a00859e <_vfprintf_r+0x16fe>
1a00769e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0076a2:	4f28      	ldr	r7, [pc, #160]	; (1a007744 <_vfprintf_r+0x8a4>)
1a0076a4:	4b28      	ldr	r3, [pc, #160]	; (1a007748 <_vfprintf_r+0x8a8>)
1a0076a6:	9802      	ldr	r0, [sp, #8]
1a0076a8:	2100      	movs	r1, #0
1a0076aa:	2603      	movs	r6, #3
1a0076ac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a0076b0:	9603      	str	r6, [sp, #12]
1a0076b2:	9109      	str	r1, [sp, #36]	; 0x24
1a0076b4:	9002      	str	r0, [sp, #8]
1a0076b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a0076ba:	bfc8      	it	gt
1a0076bc:	461f      	movgt	r7, r3
1a0076be:	4689      	mov	r9, r1
1a0076c0:	910c      	str	r1, [sp, #48]	; 0x30
1a0076c2:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a0076c6:	e5c0      	b.n	1a00724a <_vfprintf_r+0x3aa>
1a0076c8:	9e02      	ldr	r6, [sp, #8]
1a0076ca:	06b4      	lsls	r4, r6, #26
1a0076cc:	d41f      	bmi.n	1a00770e <_vfprintf_r+0x86e>
1a0076ce:	9b02      	ldr	r3, [sp, #8]
1a0076d0:	9a08      	ldr	r2, [sp, #32]
1a0076d2:	06d8      	lsls	r0, r3, #27
1a0076d4:	f852 4b04 	ldr.w	r4, [r2], #4
1a0076d8:	f101 8174 	bmi.w	1a0089c4 <_vfprintf_r+0x1b24>
1a0076dc:	9e02      	ldr	r6, [sp, #8]
1a0076de:	0671      	lsls	r1, r6, #25
1a0076e0:	f140 8577 	bpl.w	1a0081d2 <_vfprintf_r+0x1332>
1a0076e4:	9208      	str	r2, [sp, #32]
1a0076e6:	b2a4      	uxth	r4, r4
1a0076e8:	2500      	movs	r5, #0
1a0076ea:	2301      	movs	r3, #1
1a0076ec:	e703      	b.n	1a0074f6 <_vfprintf_r+0x656>
1a0076ee:	9805      	ldr	r0, [sp, #20]
1a0076f0:	f7fc ffc8 	bl	1a004684 <__sinit>
1a0076f4:	f7ff bbea 	b.w	1a006ecc <_vfprintf_r+0x2c>
1a0076f8:	f1b8 0f00 	cmp.w	r8, #0
1a0076fc:	f43f ae88 	beq.w	1a007410 <_vfprintf_r+0x570>
1a007700:	2300      	movs	r3, #0
1a007702:	2601      	movs	r6, #1
1a007704:	461a      	mov	r2, r3
1a007706:	9603      	str	r6, [sp, #12]
1a007708:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00770c:	e607      	b.n	1a00731e <_vfprintf_r+0x47e>
1a00770e:	9c08      	ldr	r4, [sp, #32]
1a007710:	3407      	adds	r4, #7
1a007712:	f024 0307 	bic.w	r3, r4, #7
1a007716:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00771a:	9308      	str	r3, [sp, #32]
1a00771c:	2301      	movs	r3, #1
1a00771e:	e6ea      	b.n	1a0074f6 <_vfprintf_r+0x656>
1a007720:	9c08      	ldr	r4, [sp, #32]
1a007722:	3407      	adds	r4, #7
1a007724:	f024 0307 	bic.w	r3, r4, #7
1a007728:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00772c:	9308      	str	r3, [sp, #32]
1a00772e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a007732:	2300      	movs	r3, #0
1a007734:	e6df      	b.n	1a0074f6 <_vfprintf_r+0x656>
1a007736:	bf00      	nop
1a007738:	1a00b3d8 	.word	0x1a00b3d8
1a00773c:	1a00b384 	.word	0x1a00b384
1a007740:	7fefffff 	.word	0x7fefffff
1a007744:	1a00b374 	.word	0x1a00b374
1a007748:	1a00b378 	.word	0x1a00b378
1a00774c:	9e02      	ldr	r6, [sp, #8]
1a00774e:	2d00      	cmp	r5, #0
1a007750:	bf08      	it	eq
1a007752:	2c0a      	cmpeq	r4, #10
1a007754:	d213      	bcs.n	1a00777e <_vfprintf_r+0x8de>
1a007756:	3430      	adds	r4, #48	; 0x30
1a007758:	9602      	str	r6, [sp, #8]
1a00775a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00775e:	2601      	movs	r6, #1
1a007760:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a007764:	2300      	movs	r3, #0
1a007766:	454e      	cmp	r6, r9
1a007768:	9309      	str	r3, [sp, #36]	; 0x24
1a00776a:	930c      	str	r3, [sp, #48]	; 0x30
1a00776c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a007770:	4633      	mov	r3, r6
1a007772:	bfb8      	it	lt
1a007774:	464b      	movlt	r3, r9
1a007776:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00777a:	9303      	str	r3, [sp, #12]
1a00777c:	e565      	b.n	1a00724a <_vfprintf_r+0x3aa>
1a00777e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a007782:	2200      	movs	r2, #0
1a007784:	e9cd a802 	strd	sl, r8, [sp, #8]
1a007788:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00778c:	af54      	add	r7, sp, #336	; 0x150
1a00778e:	46cb      	mov	fp, r9
1a007790:	4692      	mov	sl, r2
1a007792:	46b1      	mov	r9, r6
1a007794:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a007798:	461e      	mov	r6, r3
1a00779a:	e007      	b.n	1a0077ac <_vfprintf_r+0x90c>
1a00779c:	f7fc fc86 	bl	1a0040ac <__aeabi_uldivmod>
1a0077a0:	2d00      	cmp	r5, #0
1a0077a2:	bf08      	it	eq
1a0077a4:	2c0a      	cmpeq	r4, #10
1a0077a6:	d320      	bcc.n	1a0077ea <_vfprintf_r+0x94a>
1a0077a8:	4604      	mov	r4, r0
1a0077aa:	460d      	mov	r5, r1
1a0077ac:	220a      	movs	r2, #10
1a0077ae:	2300      	movs	r3, #0
1a0077b0:	4620      	mov	r0, r4
1a0077b2:	4629      	mov	r1, r5
1a0077b4:	f7fc fc7a 	bl	1a0040ac <__aeabi_uldivmod>
1a0077b8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a0077bc:	f807 cc01 	strb.w	ip, [r7, #-1]
1a0077c0:	4620      	mov	r0, r4
1a0077c2:	4629      	mov	r1, r5
1a0077c4:	220a      	movs	r2, #10
1a0077c6:	2300      	movs	r3, #0
1a0077c8:	f10a 0a01 	add.w	sl, sl, #1
1a0077cc:	3f01      	subs	r7, #1
1a0077ce:	2e00      	cmp	r6, #0
1a0077d0:	d0e4      	beq.n	1a00779c <_vfprintf_r+0x8fc>
1a0077d2:	f898 c000 	ldrb.w	ip, [r8]
1a0077d6:	45e2      	cmp	sl, ip
1a0077d8:	d1e0      	bne.n	1a00779c <_vfprintf_r+0x8fc>
1a0077da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a0077de:	d0dd      	beq.n	1a00779c <_vfprintf_r+0x8fc>
1a0077e0:	429d      	cmp	r5, r3
1a0077e2:	bf08      	it	eq
1a0077e4:	4294      	cmpeq	r4, r2
1a0077e6:	f080 871e 	bcs.w	1a008626 <_vfprintf_r+0x1786>
1a0077ea:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0077ee:	464e      	mov	r6, r9
1a0077f0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0077f4:	46d9      	mov	r9, fp
1a0077f6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0077fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a0077fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a007802:	9602      	str	r6, [sp, #8]
1a007804:	ab54      	add	r3, sp, #336	; 0x150
1a007806:	1bde      	subs	r6, r3, r7
1a007808:	e7ac      	b.n	1a007764 <_vfprintf_r+0x8c4>
1a00780a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a00780e:	f340 810a 	ble.w	1a007a26 <_vfprintf_r+0xb86>
1a007812:	2200      	movs	r2, #0
1a007814:	2300      	movs	r3, #0
1a007816:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00781a:	f7fc fbd7 	bl	1a003fcc <__aeabi_dcmpeq>
1a00781e:	2800      	cmp	r0, #0
1a007820:	f000 81de 	beq.w	1a007be0 <_vfprintf_r+0xd40>
1a007824:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007826:	4ac2      	ldr	r2, [pc, #776]	; (1a007b30 <_vfprintf_r+0xc90>)
1a007828:	f8cb 2000 	str.w	r2, [fp]
1a00782c:	3301      	adds	r3, #1
1a00782e:	3401      	adds	r4, #1
1a007830:	2201      	movs	r2, #1
1a007832:	2b07      	cmp	r3, #7
1a007834:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007838:	f8cb 2004 	str.w	r2, [fp, #4]
1a00783c:	f300 8463 	bgt.w	1a008106 <_vfprintf_r+0x1266>
1a007840:	f10b 0b08 	add.w	fp, fp, #8
1a007844:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007846:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007848:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00784a:	4293      	cmp	r3, r2
1a00784c:	f280 82a5 	bge.w	1a007d9a <_vfprintf_r+0xefa>
1a007850:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007852:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007854:	f8cb 2000 	str.w	r2, [fp]
1a007858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00785a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00785e:	3301      	adds	r3, #1
1a007860:	4414      	add	r4, r2
1a007862:	2b07      	cmp	r3, #7
1a007864:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007868:	f300 83ec 	bgt.w	1a008044 <_vfprintf_r+0x11a4>
1a00786c:	f10b 0b08 	add.w	fp, fp, #8
1a007870:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007872:	1e5d      	subs	r5, r3, #1
1a007874:	2d00      	cmp	r5, #0
1a007876:	f77f ada8 	ble.w	1a0073ca <_vfprintf_r+0x52a>
1a00787a:	2d10      	cmp	r5, #16
1a00787c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00787e:	4bad      	ldr	r3, [pc, #692]	; (1a007b34 <_vfprintf_r+0xc94>)
1a007880:	f340 844e 	ble.w	1a008120 <_vfprintf_r+0x1280>
1a007884:	2610      	movs	r6, #16
1a007886:	9f05      	ldr	r7, [sp, #20]
1a007888:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00788c:	4699      	mov	r9, r3
1a00788e:	e005      	b.n	1a00789c <_vfprintf_r+0x9fc>
1a007890:	f10b 0b08 	add.w	fp, fp, #8
1a007894:	3d10      	subs	r5, #16
1a007896:	2d10      	cmp	r5, #16
1a007898:	f340 8441 	ble.w	1a00811e <_vfprintf_r+0x127e>
1a00789c:	3201      	adds	r2, #1
1a00789e:	3410      	adds	r4, #16
1a0078a0:	2a07      	cmp	r2, #7
1a0078a2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0078a6:	e9cb 9600 	strd	r9, r6, [fp]
1a0078aa:	ddf1      	ble.n	1a007890 <_vfprintf_r+0x9f0>
1a0078ac:	aa28      	add	r2, sp, #160	; 0xa0
1a0078ae:	4641      	mov	r1, r8
1a0078b0:	4638      	mov	r0, r7
1a0078b2:	f003 f9ad 	bl	1a00ac10 <__sprint_r>
1a0078b6:	2800      	cmp	r0, #0
1a0078b8:	f040 8423 	bne.w	1a008102 <_vfprintf_r+0x1262>
1a0078bc:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0078c0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0078c4:	e7e6      	b.n	1a007894 <_vfprintf_r+0x9f4>
1a0078c6:	9b06      	ldr	r3, [sp, #24]
1a0078c8:	9a03      	ldr	r2, [sp, #12]
1a0078ca:	1a9d      	subs	r5, r3, r2
1a0078cc:	2d00      	cmp	r5, #0
1a0078ce:	f77f ad65 	ble.w	1a00739c <_vfprintf_r+0x4fc>
1a0078d2:	2d10      	cmp	r5, #16
1a0078d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0078d6:	4b97      	ldr	r3, [pc, #604]	; (1a007b34 <_vfprintf_r+0xc94>)
1a0078d8:	dd28      	ble.n	1a00792c <_vfprintf_r+0xa8c>
1a0078da:	960a      	str	r6, [sp, #40]	; 0x28
1a0078dc:	4659      	mov	r1, fp
1a0078de:	4620      	mov	r0, r4
1a0078e0:	46bb      	mov	fp, r7
1a0078e2:	9c05      	ldr	r4, [sp, #20]
1a0078e4:	9e07      	ldr	r6, [sp, #28]
1a0078e6:	461f      	mov	r7, r3
1a0078e8:	e004      	b.n	1a0078f4 <_vfprintf_r+0xa54>
1a0078ea:	3d10      	subs	r5, #16
1a0078ec:	2d10      	cmp	r5, #16
1a0078ee:	f101 0108 	add.w	r1, r1, #8
1a0078f2:	dd16      	ble.n	1a007922 <_vfprintf_r+0xa82>
1a0078f4:	3201      	adds	r2, #1
1a0078f6:	3010      	adds	r0, #16
1a0078f8:	2310      	movs	r3, #16
1a0078fa:	2a07      	cmp	r2, #7
1a0078fc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a007900:	600f      	str	r7, [r1, #0]
1a007902:	604b      	str	r3, [r1, #4]
1a007904:	ddf1      	ble.n	1a0078ea <_vfprintf_r+0xa4a>
1a007906:	aa28      	add	r2, sp, #160	; 0xa0
1a007908:	4631      	mov	r1, r6
1a00790a:	4620      	mov	r0, r4
1a00790c:	f003 f980 	bl	1a00ac10 <__sprint_r>
1a007910:	2800      	cmp	r0, #0
1a007912:	f040 80f6 	bne.w	1a007b02 <_vfprintf_r+0xc62>
1a007916:	3d10      	subs	r5, #16
1a007918:	2d10      	cmp	r5, #16
1a00791a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00791e:	a92b      	add	r1, sp, #172	; 0xac
1a007920:	dce8      	bgt.n	1a0078f4 <_vfprintf_r+0xa54>
1a007922:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a007924:	463b      	mov	r3, r7
1a007926:	4604      	mov	r4, r0
1a007928:	465f      	mov	r7, fp
1a00792a:	468b      	mov	fp, r1
1a00792c:	3201      	adds	r2, #1
1a00792e:	442c      	add	r4, r5
1a007930:	2a07      	cmp	r2, #7
1a007932:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007936:	e9cb 3500 	strd	r3, r5, [fp]
1a00793a:	f300 8355 	bgt.w	1a007fe8 <_vfprintf_r+0x1148>
1a00793e:	eba9 0506 	sub.w	r5, r9, r6
1a007942:	2d00      	cmp	r5, #0
1a007944:	f10b 0b08 	add.w	fp, fp, #8
1a007948:	f77f ad2d 	ble.w	1a0073a6 <_vfprintf_r+0x506>
1a00794c:	2d10      	cmp	r5, #16
1a00794e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007950:	4b78      	ldr	r3, [pc, #480]	; (1a007b34 <_vfprintf_r+0xc94>)
1a007952:	dd29      	ble.n	1a0079a8 <_vfprintf_r+0xb08>
1a007954:	960a      	str	r6, [sp, #40]	; 0x28
1a007956:	4659      	mov	r1, fp
1a007958:	4620      	mov	r0, r4
1a00795a:	46bb      	mov	fp, r7
1a00795c:	f04f 0910 	mov.w	r9, #16
1a007960:	9c05      	ldr	r4, [sp, #20]
1a007962:	9e07      	ldr	r6, [sp, #28]
1a007964:	461f      	mov	r7, r3
1a007966:	e004      	b.n	1a007972 <_vfprintf_r+0xad2>
1a007968:	3d10      	subs	r5, #16
1a00796a:	2d10      	cmp	r5, #16
1a00796c:	f101 0108 	add.w	r1, r1, #8
1a007970:	dd15      	ble.n	1a00799e <_vfprintf_r+0xafe>
1a007972:	3201      	adds	r2, #1
1a007974:	3010      	adds	r0, #16
1a007976:	2a07      	cmp	r2, #7
1a007978:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00797c:	e9c1 7900 	strd	r7, r9, [r1]
1a007980:	ddf2      	ble.n	1a007968 <_vfprintf_r+0xac8>
1a007982:	aa28      	add	r2, sp, #160	; 0xa0
1a007984:	4631      	mov	r1, r6
1a007986:	4620      	mov	r0, r4
1a007988:	f003 f942 	bl	1a00ac10 <__sprint_r>
1a00798c:	2800      	cmp	r0, #0
1a00798e:	f040 80b8 	bne.w	1a007b02 <_vfprintf_r+0xc62>
1a007992:	3d10      	subs	r5, #16
1a007994:	2d10      	cmp	r5, #16
1a007996:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00799a:	a92b      	add	r1, sp, #172	; 0xac
1a00799c:	dce9      	bgt.n	1a007972 <_vfprintf_r+0xad2>
1a00799e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0079a0:	463b      	mov	r3, r7
1a0079a2:	4604      	mov	r4, r0
1a0079a4:	465f      	mov	r7, fp
1a0079a6:	468b      	mov	fp, r1
1a0079a8:	3201      	adds	r2, #1
1a0079aa:	442c      	add	r4, r5
1a0079ac:	2a07      	cmp	r2, #7
1a0079ae:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0079b2:	e9cb 3500 	strd	r3, r5, [fp]
1a0079b6:	f300 81da 	bgt.w	1a007d6e <_vfprintf_r+0xece>
1a0079ba:	f10b 0b08 	add.w	fp, fp, #8
1a0079be:	e4f2      	b.n	1a0073a6 <_vfprintf_r+0x506>
1a0079c0:	aa28      	add	r2, sp, #160	; 0xa0
1a0079c2:	9907      	ldr	r1, [sp, #28]
1a0079c4:	9805      	ldr	r0, [sp, #20]
1a0079c6:	f003 f923 	bl	1a00ac10 <__sprint_r>
1a0079ca:	2800      	cmp	r0, #0
1a0079cc:	f43f ad11 	beq.w	1a0073f2 <_vfprintf_r+0x552>
1a0079d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0079d4:	e096      	b.n	1a007b04 <_vfprintf_r+0xc64>
1a0079d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0079d8:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0079da:	f8cb 1000 	str.w	r1, [fp]
1a0079de:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0079e0:	f8cb 1004 	str.w	r1, [fp, #4]
1a0079e4:	3201      	adds	r2, #1
1a0079e6:	440c      	add	r4, r1
1a0079e8:	2a07      	cmp	r2, #7
1a0079ea:	942a      	str	r4, [sp, #168]	; 0xa8
1a0079ec:	9229      	str	r2, [sp, #164]	; 0xa4
1a0079ee:	f300 84e1 	bgt.w	1a0083b4 <_vfprintf_r+0x1514>
1a0079f2:	f10b 0b08 	add.w	fp, fp, #8
1a0079f6:	2b00      	cmp	r3, #0
1a0079f8:	f2c0 86a2 	blt.w	1a008740 <_vfprintf_r+0x18a0>
1a0079fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0079fe:	3201      	adds	r2, #1
1a007a00:	441c      	add	r4, r3
1a007a02:	2a07      	cmp	r2, #7
1a007a04:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007a08:	e9cb 7300 	strd	r7, r3, [fp]
1a007a0c:	f77f acdb 	ble.w	1a0073c6 <_vfprintf_r+0x526>
1a007a10:	aa28      	add	r2, sp, #160	; 0xa0
1a007a12:	9907      	ldr	r1, [sp, #28]
1a007a14:	9805      	ldr	r0, [sp, #20]
1a007a16:	f003 f8fb 	bl	1a00ac10 <__sprint_r>
1a007a1a:	2800      	cmp	r0, #0
1a007a1c:	d1d8      	bne.n	1a0079d0 <_vfprintf_r+0xb30>
1a007a1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007a20:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007a24:	e4d1      	b.n	1a0073ca <_vfprintf_r+0x52a>
1a007a26:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007a28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007a2a:	2a01      	cmp	r2, #1
1a007a2c:	f104 0401 	add.w	r4, r4, #1
1a007a30:	f103 0501 	add.w	r5, r3, #1
1a007a34:	f10b 0608 	add.w	r6, fp, #8
1a007a38:	f340 8158 	ble.w	1a007cec <_vfprintf_r+0xe4c>
1a007a3c:	2301      	movs	r3, #1
1a007a3e:	2d07      	cmp	r5, #7
1a007a40:	f8cb 7000 	str.w	r7, [fp]
1a007a44:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a007a48:	f8cb 3004 	str.w	r3, [fp, #4]
1a007a4c:	f300 832a 	bgt.w	1a0080a4 <_vfprintf_r+0x1204>
1a007a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007a52:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007a54:	1c69      	adds	r1, r5, #1
1a007a56:	441c      	add	r4, r3
1a007a58:	2907      	cmp	r1, #7
1a007a5a:	910b      	str	r1, [sp, #44]	; 0x2c
1a007a5c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a007a60:	e9c6 2300 	strd	r2, r3, [r6]
1a007a64:	f300 832a 	bgt.w	1a0080bc <_vfprintf_r+0x121c>
1a007a68:	3608      	adds	r6, #8
1a007a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007a6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a007a6e:	f102 0901 	add.w	r9, r2, #1
1a007a72:	2300      	movs	r3, #0
1a007a74:	2200      	movs	r2, #0
1a007a76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a007a7a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a007a7e:	f106 0b08 	add.w	fp, r6, #8
1a007a82:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a007a86:	f7fc faa1 	bl	1a003fcc <__aeabi_dcmpeq>
1a007a8a:	2800      	cmp	r0, #0
1a007a8c:	f040 8141 	bne.w	1a007d12 <_vfprintf_r+0xe72>
1a007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007a92:	f8c6 8004 	str.w	r8, [r6, #4]
1a007a96:	3701      	adds	r7, #1
1a007a98:	4444      	add	r4, r8
1a007a9a:	2b07      	cmp	r3, #7
1a007a9c:	6037      	str	r7, [r6, #0]
1a007a9e:	942a      	str	r4, [sp, #168]	; 0xa8
1a007aa0:	9329      	str	r3, [sp, #164]	; 0xa4
1a007aa2:	f300 82bf 	bgt.w	1a008024 <_vfprintf_r+0x1184>
1a007aa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007aa8:	f106 0310 	add.w	r3, r6, #16
1a007aac:	3202      	adds	r2, #2
1a007aae:	465e      	mov	r6, fp
1a007ab0:	920a      	str	r2, [sp, #40]	; 0x28
1a007ab2:	469b      	mov	fp, r3
1a007ab4:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a007ab6:	6072      	str	r2, [r6, #4]
1a007ab8:	4414      	add	r4, r2
1a007aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a007abc:	942a      	str	r4, [sp, #168]	; 0xa8
1a007abe:	ab24      	add	r3, sp, #144	; 0x90
1a007ac0:	2a07      	cmp	r2, #7
1a007ac2:	9229      	str	r2, [sp, #164]	; 0xa4
1a007ac4:	6033      	str	r3, [r6, #0]
1a007ac6:	f77f ac80 	ble.w	1a0073ca <_vfprintf_r+0x52a>
1a007aca:	e7a1      	b.n	1a007a10 <_vfprintf_r+0xb70>
1a007acc:	9e02      	ldr	r6, [sp, #8]
1a007ace:	f7ff bbf4 	b.w	1a0072ba <_vfprintf_r+0x41a>
1a007ad2:	aa28      	add	r2, sp, #160	; 0xa0
1a007ad4:	9907      	ldr	r1, [sp, #28]
1a007ad6:	9805      	ldr	r0, [sp, #20]
1a007ad8:	f003 f89a 	bl	1a00ac10 <__sprint_r>
1a007adc:	2800      	cmp	r0, #0
1a007ade:	f47f af77 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a007ae2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007ae4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007ae8:	e444      	b.n	1a007374 <_vfprintf_r+0x4d4>
1a007aea:	aa28      	add	r2, sp, #160	; 0xa0
1a007aec:	9907      	ldr	r1, [sp, #28]
1a007aee:	9805      	ldr	r0, [sp, #20]
1a007af0:	f003 f88e 	bl	1a00ac10 <__sprint_r>
1a007af4:	2800      	cmp	r0, #0
1a007af6:	f47f af6b 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a007afa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007afc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007b00:	e448      	b.n	1a007394 <_vfprintf_r+0x4f4>
1a007b02:	46b1      	mov	r9, r6
1a007b04:	9909      	ldr	r1, [sp, #36]	; 0x24
1a007b06:	b111      	cbz	r1, 1a007b0e <_vfprintf_r+0xc6e>
1a007b08:	9805      	ldr	r0, [sp, #20]
1a007b0a:	f7fc fe41 	bl	1a004790 <_free_r>
1a007b0e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a007b12:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007b16:	07d4      	lsls	r4, r2, #31
1a007b18:	d402      	bmi.n	1a007b20 <_vfprintf_r+0xc80>
1a007b1a:	0598      	lsls	r0, r3, #22
1a007b1c:	f140 82db 	bpl.w	1a0080d6 <_vfprintf_r+0x1236>
1a007b20:	0659      	lsls	r1, r3, #25
1a007b22:	f100 8640 	bmi.w	1a0087a6 <_vfprintf_r+0x1906>
1a007b26:	9804      	ldr	r0, [sp, #16]
1a007b28:	b055      	add	sp, #340	; 0x154
1a007b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007b2e:	bf00      	nop
1a007b30:	1a00b3b4 	.word	0x1a00b3b4
1a007b34:	1a00b3e8 	.word	0x1a00b3e8
1a007b38:	2d10      	cmp	r5, #16
1a007b3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007b3c:	dd21      	ble.n	1a007b82 <_vfprintf_r+0xce2>
1a007b3e:	2610      	movs	r6, #16
1a007b40:	9f05      	ldr	r7, [sp, #20]
1a007b42:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a007b46:	e004      	b.n	1a007b52 <_vfprintf_r+0xcb2>
1a007b48:	3d10      	subs	r5, #16
1a007b4a:	2d10      	cmp	r5, #16
1a007b4c:	f10b 0b08 	add.w	fp, fp, #8
1a007b50:	dd17      	ble.n	1a007b82 <_vfprintf_r+0xce2>
1a007b52:	3301      	adds	r3, #1
1a007b54:	4ab3      	ldr	r2, [pc, #716]	; (1a007e24 <_vfprintf_r+0xf84>)
1a007b56:	3410      	adds	r4, #16
1a007b58:	2b07      	cmp	r3, #7
1a007b5a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007b5e:	e9cb 2600 	strd	r2, r6, [fp]
1a007b62:	ddf1      	ble.n	1a007b48 <_vfprintf_r+0xca8>
1a007b64:	aa28      	add	r2, sp, #160	; 0xa0
1a007b66:	4641      	mov	r1, r8
1a007b68:	4638      	mov	r0, r7
1a007b6a:	f003 f851 	bl	1a00ac10 <__sprint_r>
1a007b6e:	2800      	cmp	r0, #0
1a007b70:	f040 82c7 	bne.w	1a008102 <_vfprintf_r+0x1262>
1a007b74:	3d10      	subs	r5, #16
1a007b76:	2d10      	cmp	r5, #16
1a007b78:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a007b7c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007b80:	dce7      	bgt.n	1a007b52 <_vfprintf_r+0xcb2>
1a007b82:	3301      	adds	r3, #1
1a007b84:	4aa7      	ldr	r2, [pc, #668]	; (1a007e24 <_vfprintf_r+0xf84>)
1a007b86:	442c      	add	r4, r5
1a007b88:	2b07      	cmp	r3, #7
1a007b8a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007b8e:	e9cb 2500 	strd	r2, r5, [fp]
1a007b92:	f77f ac23 	ble.w	1a0073dc <_vfprintf_r+0x53c>
1a007b96:	aa28      	add	r2, sp, #160	; 0xa0
1a007b98:	9907      	ldr	r1, [sp, #28]
1a007b9a:	9805      	ldr	r0, [sp, #20]
1a007b9c:	f003 f838 	bl	1a00ac10 <__sprint_r>
1a007ba0:	2800      	cmp	r0, #0
1a007ba2:	f47f af15 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a007ba6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007ba8:	e418      	b.n	1a0073dc <_vfprintf_r+0x53c>
1a007baa:	2b01      	cmp	r3, #1
1a007bac:	f000 8423 	beq.w	1a0083f6 <_vfprintf_r+0x1556>
1a007bb0:	2b02      	cmp	r3, #2
1a007bb2:	9e02      	ldr	r6, [sp, #8]
1a007bb4:	f47f ab87 	bne.w	1a0072c6 <_vfprintf_r+0x426>
1a007bb8:	9814      	ldr	r0, [sp, #80]	; 0x50
1a007bba:	af54      	add	r7, sp, #336	; 0x150
1a007bbc:	0923      	lsrs	r3, r4, #4
1a007bbe:	f004 010f 	and.w	r1, r4, #15
1a007bc2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a007bc6:	092a      	lsrs	r2, r5, #4
1a007bc8:	461c      	mov	r4, r3
1a007bca:	4615      	mov	r5, r2
1a007bcc:	5c43      	ldrb	r3, [r0, r1]
1a007bce:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a007bd2:	ea54 0305 	orrs.w	r3, r4, r5
1a007bd6:	d1f1      	bne.n	1a007bbc <_vfprintf_r+0xd1c>
1a007bd8:	ab54      	add	r3, sp, #336	; 0x150
1a007bda:	9602      	str	r6, [sp, #8]
1a007bdc:	1bde      	subs	r6, r3, r7
1a007bde:	e5c1      	b.n	1a007764 <_vfprintf_r+0x8c4>
1a007be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007be2:	2b00      	cmp	r3, #0
1a007be4:	f340 80df 	ble.w	1a007da6 <_vfprintf_r+0xf06>
1a007be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007bea:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007bec:	4293      	cmp	r3, r2
1a007bee:	bfa8      	it	ge
1a007bf0:	4613      	movge	r3, r2
1a007bf2:	2b00      	cmp	r3, #0
1a007bf4:	461d      	mov	r5, r3
1a007bf6:	dd0d      	ble.n	1a007c14 <_vfprintf_r+0xd74>
1a007bf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007bfa:	f8cb 7000 	str.w	r7, [fp]
1a007bfe:	3301      	adds	r3, #1
1a007c00:	442c      	add	r4, r5
1a007c02:	2b07      	cmp	r3, #7
1a007c04:	942a      	str	r4, [sp, #168]	; 0xa8
1a007c06:	f8cb 5004 	str.w	r5, [fp, #4]
1a007c0a:	9329      	str	r3, [sp, #164]	; 0xa4
1a007c0c:	f300 84fe 	bgt.w	1a00860c <_vfprintf_r+0x176c>
1a007c10:	f10b 0b08 	add.w	fp, fp, #8
1a007c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007c16:	2d00      	cmp	r5, #0
1a007c18:	bfa8      	it	ge
1a007c1a:	1b5b      	subge	r3, r3, r5
1a007c1c:	2b00      	cmp	r3, #0
1a007c1e:	461d      	mov	r5, r3
1a007c20:	f300 8290 	bgt.w	1a008144 <_vfprintf_r+0x12a4>
1a007c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007c26:	443b      	add	r3, r7
1a007c28:	4699      	mov	r9, r3
1a007c2a:	9b02      	ldr	r3, [sp, #8]
1a007c2c:	0558      	lsls	r0, r3, #21
1a007c2e:	f100 8413 	bmi.w	1a008458 <_vfprintf_r+0x15b8>
1a007c32:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007c34:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007c36:	4293      	cmp	r3, r2
1a007c38:	db03      	blt.n	1a007c42 <_vfprintf_r+0xda2>
1a007c3a:	9a02      	ldr	r2, [sp, #8]
1a007c3c:	07d1      	lsls	r1, r2, #31
1a007c3e:	f140 82f7 	bpl.w	1a008230 <_vfprintf_r+0x1390>
1a007c42:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c44:	9915      	ldr	r1, [sp, #84]	; 0x54
1a007c46:	f8cb 1000 	str.w	r1, [fp]
1a007c4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a007c4c:	f8cb 1004 	str.w	r1, [fp, #4]
1a007c50:	3201      	adds	r2, #1
1a007c52:	440c      	add	r4, r1
1a007c54:	2a07      	cmp	r2, #7
1a007c56:	942a      	str	r4, [sp, #168]	; 0xa8
1a007c58:	9229      	str	r2, [sp, #164]	; 0xa4
1a007c5a:	f300 8523 	bgt.w	1a0086a4 <_vfprintf_r+0x1804>
1a007c5e:	f10b 0b08 	add.w	fp, fp, #8
1a007c62:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007c64:	18bd      	adds	r5, r7, r2
1a007c66:	eba5 0509 	sub.w	r5, r5, r9
1a007c6a:	1ad3      	subs	r3, r2, r3
1a007c6c:	429d      	cmp	r5, r3
1a007c6e:	bfa8      	it	ge
1a007c70:	461d      	movge	r5, r3
1a007c72:	2d00      	cmp	r5, #0
1a007c74:	dd0d      	ble.n	1a007c92 <_vfprintf_r+0xdf2>
1a007c76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c78:	f8cb 9000 	str.w	r9, [fp]
1a007c7c:	3201      	adds	r2, #1
1a007c7e:	442c      	add	r4, r5
1a007c80:	2a07      	cmp	r2, #7
1a007c82:	942a      	str	r4, [sp, #168]	; 0xa8
1a007c84:	f8cb 5004 	str.w	r5, [fp, #4]
1a007c88:	9229      	str	r2, [sp, #164]	; 0xa4
1a007c8a:	f300 8546 	bgt.w	1a00871a <_vfprintf_r+0x187a>
1a007c8e:	f10b 0b08 	add.w	fp, fp, #8
1a007c92:	2d00      	cmp	r5, #0
1a007c94:	bfac      	ite	ge
1a007c96:	1b5d      	subge	r5, r3, r5
1a007c98:	461d      	movlt	r5, r3
1a007c9a:	2d00      	cmp	r5, #0
1a007c9c:	f77f ab95 	ble.w	1a0073ca <_vfprintf_r+0x52a>
1a007ca0:	2d10      	cmp	r5, #16
1a007ca2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007ca4:	4b60      	ldr	r3, [pc, #384]	; (1a007e28 <_vfprintf_r+0xf88>)
1a007ca6:	f340 823b 	ble.w	1a008120 <_vfprintf_r+0x1280>
1a007caa:	2610      	movs	r6, #16
1a007cac:	9f05      	ldr	r7, [sp, #20]
1a007cae:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a007cb2:	4699      	mov	r9, r3
1a007cb4:	e005      	b.n	1a007cc2 <_vfprintf_r+0xe22>
1a007cb6:	f10b 0b08 	add.w	fp, fp, #8
1a007cba:	3d10      	subs	r5, #16
1a007cbc:	2d10      	cmp	r5, #16
1a007cbe:	f340 822e 	ble.w	1a00811e <_vfprintf_r+0x127e>
1a007cc2:	3201      	adds	r2, #1
1a007cc4:	3410      	adds	r4, #16
1a007cc6:	2a07      	cmp	r2, #7
1a007cc8:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007ccc:	e9cb 9600 	strd	r9, r6, [fp]
1a007cd0:	ddf1      	ble.n	1a007cb6 <_vfprintf_r+0xe16>
1a007cd2:	aa28      	add	r2, sp, #160	; 0xa0
1a007cd4:	4641      	mov	r1, r8
1a007cd6:	4638      	mov	r0, r7
1a007cd8:	f002 ff9a 	bl	1a00ac10 <__sprint_r>
1a007cdc:	2800      	cmp	r0, #0
1a007cde:	f040 8210 	bne.w	1a008102 <_vfprintf_r+0x1262>
1a007ce2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a007ce6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007cea:	e7e6      	b.n	1a007cba <_vfprintf_r+0xe1a>
1a007cec:	9a02      	ldr	r2, [sp, #8]
1a007cee:	07d2      	lsls	r2, r2, #31
1a007cf0:	f53f aea4 	bmi.w	1a007a3c <_vfprintf_r+0xb9c>
1a007cf4:	2201      	movs	r2, #1
1a007cf6:	2d07      	cmp	r5, #7
1a007cf8:	f8cb 7000 	str.w	r7, [fp]
1a007cfc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a007d00:	f8cb 2004 	str.w	r2, [fp, #4]
1a007d04:	f300 818e 	bgt.w	1a008024 <_vfprintf_r+0x1184>
1a007d08:	3302      	adds	r3, #2
1a007d0a:	930a      	str	r3, [sp, #40]	; 0x28
1a007d0c:	f10b 0b10 	add.w	fp, fp, #16
1a007d10:	e6d0      	b.n	1a007ab4 <_vfprintf_r+0xc14>
1a007d12:	f1b8 0f00 	cmp.w	r8, #0
1a007d16:	f77f aecd 	ble.w	1a007ab4 <_vfprintf_r+0xc14>
1a007d1a:	f1b8 0f10 	cmp.w	r8, #16
1a007d1e:	4b42      	ldr	r3, [pc, #264]	; (1a007e28 <_vfprintf_r+0xf88>)
1a007d20:	f340 8635 	ble.w	1a00898e <_vfprintf_r+0x1aee>
1a007d24:	461a      	mov	r2, r3
1a007d26:	464d      	mov	r5, r9
1a007d28:	4623      	mov	r3, r4
1a007d2a:	2710      	movs	r7, #16
1a007d2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a007d30:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a007d34:	4614      	mov	r4, r2
1a007d36:	e007      	b.n	1a007d48 <_vfprintf_r+0xea8>
1a007d38:	3608      	adds	r6, #8
1a007d3a:	f1a8 0810 	sub.w	r8, r8, #16
1a007d3e:	f1b8 0f10 	cmp.w	r8, #16
1a007d42:	f340 815e 	ble.w	1a008002 <_vfprintf_r+0x1162>
1a007d46:	3501      	adds	r5, #1
1a007d48:	3310      	adds	r3, #16
1a007d4a:	2d07      	cmp	r5, #7
1a007d4c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a007d50:	e9c6 4700 	strd	r4, r7, [r6]
1a007d54:	ddf0      	ble.n	1a007d38 <_vfprintf_r+0xe98>
1a007d56:	aa28      	add	r2, sp, #160	; 0xa0
1a007d58:	4659      	mov	r1, fp
1a007d5a:	4648      	mov	r0, r9
1a007d5c:	f002 ff58 	bl	1a00ac10 <__sprint_r>
1a007d60:	2800      	cmp	r0, #0
1a007d62:	f040 821d 	bne.w	1a0081a0 <_vfprintf_r+0x1300>
1a007d66:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a007d6a:	ae2b      	add	r6, sp, #172	; 0xac
1a007d6c:	e7e5      	b.n	1a007d3a <_vfprintf_r+0xe9a>
1a007d6e:	aa28      	add	r2, sp, #160	; 0xa0
1a007d70:	9907      	ldr	r1, [sp, #28]
1a007d72:	9805      	ldr	r0, [sp, #20]
1a007d74:	f002 ff4c 	bl	1a00ac10 <__sprint_r>
1a007d78:	2800      	cmp	r0, #0
1a007d7a:	f47f ae29 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a007d7e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007d80:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007d84:	f7ff bb0f 	b.w	1a0073a6 <_vfprintf_r+0x506>
1a007d88:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a007d8c:	f7fc fe48 	bl	1a004a20 <__retarget_lock_acquire_recursive>
1a007d90:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a007d94:	b293      	uxth	r3, r2
1a007d96:	f7ff b8a3 	b.w	1a006ee0 <_vfprintf_r+0x40>
1a007d9a:	9b02      	ldr	r3, [sp, #8]
1a007d9c:	07dd      	lsls	r5, r3, #31
1a007d9e:	f53f ad57 	bmi.w	1a007850 <_vfprintf_r+0x9b0>
1a007da2:	f7ff bb12 	b.w	1a0073ca <_vfprintf_r+0x52a>
1a007da6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007da8:	4920      	ldr	r1, [pc, #128]	; (1a007e2c <_vfprintf_r+0xf8c>)
1a007daa:	f8cb 1000 	str.w	r1, [fp]
1a007dae:	3201      	adds	r2, #1
1a007db0:	3401      	adds	r4, #1
1a007db2:	2101      	movs	r1, #1
1a007db4:	2a07      	cmp	r2, #7
1a007db6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007dba:	f8cb 1004 	str.w	r1, [fp, #4]
1a007dbe:	f300 8409 	bgt.w	1a0085d4 <_vfprintf_r+0x1734>
1a007dc2:	f10b 0b08 	add.w	fp, fp, #8
1a007dc6:	2b00      	cmp	r3, #0
1a007dc8:	f47f ae05 	bne.w	1a0079d6 <_vfprintf_r+0xb36>
1a007dcc:	9b02      	ldr	r3, [sp, #8]
1a007dce:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007dd0:	f003 0301 	and.w	r3, r3, #1
1a007dd4:	4313      	orrs	r3, r2
1a007dd6:	f43f aaf8 	beq.w	1a0073ca <_vfprintf_r+0x52a>
1a007dda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a007dde:	f8cb 3000 	str.w	r3, [fp]
1a007de2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007de4:	f8cb 3004 	str.w	r3, [fp, #4]
1a007de8:	3201      	adds	r2, #1
1a007dea:	441c      	add	r4, r3
1a007dec:	2a07      	cmp	r2, #7
1a007dee:	942a      	str	r4, [sp, #168]	; 0xa8
1a007df0:	9229      	str	r2, [sp, #164]	; 0xa4
1a007df2:	f300 82df 	bgt.w	1a0083b4 <_vfprintf_r+0x1514>
1a007df6:	f10b 0b08 	add.w	fp, fp, #8
1a007dfa:	e5ff      	b.n	1a0079fc <_vfprintf_r+0xb5c>
1a007dfc:	af54      	add	r7, sp, #336	; 0x150
1a007dfe:	e4b1      	b.n	1a007764 <_vfprintf_r+0x8c4>
1a007e00:	9b02      	ldr	r3, [sp, #8]
1a007e02:	0598      	lsls	r0, r3, #22
1a007e04:	f100 822d 	bmi.w	1a008262 <_vfprintf_r+0x13c2>
1a007e08:	2500      	movs	r5, #0
1a007e0a:	f7ff b987 	b.w	1a00711c <_vfprintf_r+0x27c>
1a007e0e:	9904      	ldr	r1, [sp, #16]
1a007e10:	6812      	ldr	r2, [r2, #0]
1a007e12:	9308      	str	r3, [sp, #32]
1a007e14:	17cd      	asrs	r5, r1, #31
1a007e16:	4608      	mov	r0, r1
1a007e18:	4629      	mov	r1, r5
1a007e1a:	e9c2 0100 	strd	r0, r1, [r2]
1a007e1e:	4657      	mov	r7, sl
1a007e20:	f7ff baf2 	b.w	1a007408 <_vfprintf_r+0x568>
1a007e24:	1a00b3d8 	.word	0x1a00b3d8
1a007e28:	1a00b3e8 	.word	0x1a00b3e8
1a007e2c:	1a00b3b4 	.word	0x1a00b3b4
1a007e30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a007e34:	4602      	mov	r2, r0
1a007e36:	460b      	mov	r3, r1
1a007e38:	f7fc f8fa 	bl	1a004030 <__aeabi_dcmpun>
1a007e3c:	2800      	cmp	r0, #0
1a007e3e:	f040 853a 	bne.w	1a0088b6 <_vfprintf_r+0x1a16>
1a007e42:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a007e46:	f000 84d0 	beq.w	1a0087ea <_vfprintf_r+0x194a>
1a007e4a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a007e4e:	f000 820c 	beq.w	1a00826a <_vfprintf_r+0x13ca>
1a007e52:	f028 0320 	bic.w	r3, r8, #32
1a007e56:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007e5a:	9303      	str	r3, [sp, #12]
1a007e5c:	f000 8500 	beq.w	1a008860 <_vfprintf_r+0x19c0>
1a007e60:	2b47      	cmp	r3, #71	; 0x47
1a007e62:	d104      	bne.n	1a007e6e <_vfprintf_r+0xfce>
1a007e64:	f1b9 0f00 	cmp.w	r9, #0
1a007e68:	bf08      	it	eq
1a007e6a:	f04f 0901 	moveq.w	r9, #1
1a007e6e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a007e72:	9902      	ldr	r1, [sp, #8]
1a007e74:	2d00      	cmp	r5, #0
1a007e76:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a007e7a:	f2c0 8395 	blt.w	1a0085a8 <_vfprintf_r+0x1708>
1a007e7e:	2300      	movs	r3, #0
1a007e80:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a007e84:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a007e88:	931e      	str	r3, [sp, #120]	; 0x78
1a007e8a:	9202      	str	r2, [sp, #8]
1a007e8c:	9b03      	ldr	r3, [sp, #12]
1a007e8e:	2b46      	cmp	r3, #70	; 0x46
1a007e90:	f000 83df 	beq.w	1a008652 <_vfprintf_r+0x17b2>
1a007e94:	2b45      	cmp	r3, #69	; 0x45
1a007e96:	f000 84d2 	beq.w	1a00883e <_vfprintf_r+0x199e>
1a007e9a:	aa26      	add	r2, sp, #152	; 0x98
1a007e9c:	ab23      	add	r3, sp, #140	; 0x8c
1a007e9e:	e9cd 3200 	strd	r3, r2, [sp]
1a007ea2:	2102      	movs	r1, #2
1a007ea4:	ab22      	add	r3, sp, #136	; 0x88
1a007ea6:	464a      	mov	r2, r9
1a007ea8:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a007eac:	9805      	ldr	r0, [sp, #20]
1a007eae:	f000 fedf 	bl	1a008c70 <_dtoa_r>
1a007eb2:	9b03      	ldr	r3, [sp, #12]
1a007eb4:	2b47      	cmp	r3, #71	; 0x47
1a007eb6:	4607      	mov	r7, r0
1a007eb8:	f040 858d 	bne.w	1a0089d6 <_vfprintf_r+0x1b36>
1a007ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007ebe:	07db      	lsls	r3, r3, #31
1a007ec0:	f100 843b 	bmi.w	1a00873a <_vfprintf_r+0x189a>
1a007ec4:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a007ec6:	1bf3      	subs	r3, r6, r7
1a007ec8:	9312      	str	r3, [sp, #72]	; 0x48
1a007eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007ecc:	930e      	str	r3, [sp, #56]	; 0x38
1a007ece:	9b03      	ldr	r3, [sp, #12]
1a007ed0:	2b47      	cmp	r3, #71	; 0x47
1a007ed2:	f000 8293 	beq.w	1a0083fc <_vfprintf_r+0x155c>
1a007ed6:	9b03      	ldr	r3, [sp, #12]
1a007ed8:	2b46      	cmp	r3, #70	; 0x46
1a007eda:	f000 83fd 	beq.w	1a0086d8 <_vfprintf_r+0x1838>
1a007ede:	9903      	ldr	r1, [sp, #12]
1a007ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007ee2:	2941      	cmp	r1, #65	; 0x41
1a007ee4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a007ee8:	fa5f f388 	uxtb.w	r3, r8
1a007eec:	bf03      	ittte	eq
1a007eee:	330f      	addeq	r3, #15
1a007ef0:	b2db      	uxtbeq	r3, r3
1a007ef2:	2101      	moveq	r1, #1
1a007ef4:	2100      	movne	r1, #0
1a007ef6:	2a00      	cmp	r2, #0
1a007ef8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a007efc:	bfb8      	it	lt
1a007efe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a007f00:	9222      	str	r2, [sp, #136]	; 0x88
1a007f02:	bfb6      	itet	lt
1a007f04:	f1c3 0201 	rsblt	r2, r3, #1
1a007f08:	232b      	movge	r3, #43	; 0x2b
1a007f0a:	232d      	movlt	r3, #45	; 0x2d
1a007f0c:	2a09      	cmp	r2, #9
1a007f0e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a007f12:	f340 84c1 	ble.w	1a008898 <_vfprintf_r+0x19f8>
1a007f16:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a007f1a:	4620      	mov	r0, r4
1a007f1c:	4dbe      	ldr	r5, [pc, #760]	; (1a008218 <_vfprintf_r+0x1378>)
1a007f1e:	e001      	b.n	1a007f24 <_vfprintf_r+0x1084>
1a007f20:	4608      	mov	r0, r1
1a007f22:	461a      	mov	r2, r3
1a007f24:	fb85 3102 	smull	r3, r1, r5, r2
1a007f28:	17d3      	asrs	r3, r2, #31
1a007f2a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a007f2e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a007f32:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a007f36:	3130      	adds	r1, #48	; 0x30
1a007f38:	2a63      	cmp	r2, #99	; 0x63
1a007f3a:	f800 1c01 	strb.w	r1, [r0, #-1]
1a007f3e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a007f42:	dced      	bgt.n	1a007f20 <_vfprintf_r+0x1080>
1a007f44:	3330      	adds	r3, #48	; 0x30
1a007f46:	1e82      	subs	r2, r0, #2
1a007f48:	b2db      	uxtb	r3, r3
1a007f4a:	4294      	cmp	r4, r2
1a007f4c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a007f50:	f240 8544 	bls.w	1a0089dc <_vfprintf_r+0x1b3c>
1a007f54:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a007f58:	e001      	b.n	1a007f5e <_vfprintf_r+0x10be>
1a007f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007f5e:	f802 3b01 	strb.w	r3, [r2], #1
1a007f62:	42a1      	cmp	r1, r4
1a007f64:	d1f9      	bne.n	1a007f5a <_vfprintf_r+0x10ba>
1a007f66:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a007f6a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a007f6e:	1a1b      	subs	r3, r3, r0
1a007f70:	4413      	add	r3, r2
1a007f72:	aa24      	add	r2, sp, #144	; 0x90
1a007f74:	1a9b      	subs	r3, r3, r2
1a007f76:	9316      	str	r3, [sp, #88]	; 0x58
1a007f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007f7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a007f7c:	2b01      	cmp	r3, #1
1a007f7e:	eb03 0602 	add.w	r6, r3, r2
1a007f82:	f340 84ee 	ble.w	1a008962 <_vfprintf_r+0x1ac2>
1a007f86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007f88:	441e      	add	r6, r3
1a007f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007f8c:	2200      	movs	r2, #0
1a007f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a007f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a007f96:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a007f9a:	9302      	str	r3, [sp, #8]
1a007f9c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a007fa0:	920c      	str	r2, [sp, #48]	; 0x30
1a007fa2:	9303      	str	r3, [sp, #12]
1a007fa4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a007fa6:	2b00      	cmp	r3, #0
1a007fa8:	f040 824f 	bne.w	1a00844a <_vfprintf_r+0x15aa>
1a007fac:	4699      	mov	r9, r3
1a007fae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007fb2:	f7ff b94a 	b.w	1a00724a <_vfprintf_r+0x3aa>
1a007fb6:	9b08      	ldr	r3, [sp, #32]
1a007fb8:	1d1a      	adds	r2, r3, #4
1a007fba:	9b02      	ldr	r3, [sp, #8]
1a007fbc:	06d9      	lsls	r1, r3, #27
1a007fbe:	f100 8504 	bmi.w	1a0089ca <_vfprintf_r+0x1b2a>
1a007fc2:	9e02      	ldr	r6, [sp, #8]
1a007fc4:	4633      	mov	r3, r6
1a007fc6:	065b      	lsls	r3, r3, #25
1a007fc8:	f140 80ec 	bpl.w	1a0081a4 <_vfprintf_r+0x1304>
1a007fcc:	9b08      	ldr	r3, [sp, #32]
1a007fce:	9208      	str	r2, [sp, #32]
1a007fd0:	f9b3 4000 	ldrsh.w	r4, [r3]
1a007fd4:	17e5      	asrs	r5, r4, #31
1a007fd6:	4622      	mov	r2, r4
1a007fd8:	462b      	mov	r3, r5
1a007fda:	f7ff b8eb 	b.w	1a0071b4 <_vfprintf_r+0x314>
1a007fde:	4252      	negs	r2, r2
1a007fe0:	9206      	str	r2, [sp, #24]
1a007fe2:	9308      	str	r3, [sp, #32]
1a007fe4:	f7ff b8af 	b.w	1a007146 <_vfprintf_r+0x2a6>
1a007fe8:	aa28      	add	r2, sp, #160	; 0xa0
1a007fea:	9907      	ldr	r1, [sp, #28]
1a007fec:	9805      	ldr	r0, [sp, #20]
1a007fee:	f002 fe0f 	bl	1a00ac10 <__sprint_r>
1a007ff2:	2800      	cmp	r0, #0
1a007ff4:	f47f acec 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a007ff8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007ffa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007ffe:	f7ff b9cd 	b.w	1a00739c <_vfprintf_r+0x4fc>
1a008002:	4622      	mov	r2, r4
1a008004:	461c      	mov	r4, r3
1a008006:	4613      	mov	r3, r2
1a008008:	462a      	mov	r2, r5
1a00800a:	3201      	adds	r2, #1
1a00800c:	920a      	str	r2, [sp, #40]	; 0x28
1a00800e:	f106 0208 	add.w	r2, r6, #8
1a008012:	e9c6 3800 	strd	r3, r8, [r6]
1a008016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008018:	9329      	str	r3, [sp, #164]	; 0xa4
1a00801a:	4444      	add	r4, r8
1a00801c:	2b07      	cmp	r3, #7
1a00801e:	942a      	str	r4, [sp, #168]	; 0xa8
1a008020:	f340 8100 	ble.w	1a008224 <_vfprintf_r+0x1384>
1a008024:	aa28      	add	r2, sp, #160	; 0xa0
1a008026:	9907      	ldr	r1, [sp, #28]
1a008028:	9805      	ldr	r0, [sp, #20]
1a00802a:	f002 fdf1 	bl	1a00ac10 <__sprint_r>
1a00802e:	2800      	cmp	r0, #0
1a008030:	f47f acce 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a008034:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008038:	3301      	adds	r3, #1
1a00803a:	930a      	str	r3, [sp, #40]	; 0x28
1a00803c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a008040:	ae2b      	add	r6, sp, #172	; 0xac
1a008042:	e537      	b.n	1a007ab4 <_vfprintf_r+0xc14>
1a008044:	aa28      	add	r2, sp, #160	; 0xa0
1a008046:	9907      	ldr	r1, [sp, #28]
1a008048:	9805      	ldr	r0, [sp, #20]
1a00804a:	f002 fde1 	bl	1a00ac10 <__sprint_r>
1a00804e:	2800      	cmp	r0, #0
1a008050:	f47f acbe 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a008054:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008056:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00805a:	e409      	b.n	1a007870 <_vfprintf_r+0x9d0>
1a00805c:	f043 0320 	orr.w	r3, r3, #32
1a008060:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008064:	9302      	str	r3, [sp, #8]
1a008066:	f10a 0a01 	add.w	sl, sl, #1
1a00806a:	f7fe bf9d 	b.w	1a006fa8 <_vfprintf_r+0x108>
1a00806e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a008072:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008076:	9302      	str	r3, [sp, #8]
1a008078:	f10a 0a01 	add.w	sl, sl, #1
1a00807c:	f7fe bf94 	b.w	1a006fa8 <_vfprintf_r+0x108>
1a008080:	464e      	mov	r6, r9
1a008082:	2e06      	cmp	r6, #6
1a008084:	bf28      	it	cs
1a008086:	2606      	movcs	r6, #6
1a008088:	46b9      	mov	r9, r7
1a00808a:	970c      	str	r7, [sp, #48]	; 0x30
1a00808c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a008090:	9709      	str	r7, [sp, #36]	; 0x24
1a008092:	463a      	mov	r2, r7
1a008094:	9603      	str	r6, [sp, #12]
1a008096:	9408      	str	r4, [sp, #32]
1a008098:	4f60      	ldr	r7, [pc, #384]	; (1a00821c <_vfprintf_r+0x137c>)
1a00809a:	f7ff b8d6 	b.w	1a00724a <_vfprintf_r+0x3aa>
1a00809e:	463c      	mov	r4, r7
1a0080a0:	f7fe bf75 	b.w	1a006f8e <_vfprintf_r+0xee>
1a0080a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0080a6:	9907      	ldr	r1, [sp, #28]
1a0080a8:	9805      	ldr	r0, [sp, #20]
1a0080aa:	f002 fdb1 	bl	1a00ac10 <__sprint_r>
1a0080ae:	2800      	cmp	r0, #0
1a0080b0:	f47f ac8e 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0080b4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a0080b8:	ae2b      	add	r6, sp, #172	; 0xac
1a0080ba:	e4c9      	b.n	1a007a50 <_vfprintf_r+0xbb0>
1a0080bc:	aa28      	add	r2, sp, #160	; 0xa0
1a0080be:	9907      	ldr	r1, [sp, #28]
1a0080c0:	9805      	ldr	r0, [sp, #20]
1a0080c2:	f002 fda5 	bl	1a00ac10 <__sprint_r>
1a0080c6:	2800      	cmp	r0, #0
1a0080c8:	f47f ac82 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0080cc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a0080d0:	ae2b      	add	r6, sp, #172	; 0xac
1a0080d2:	930b      	str	r3, [sp, #44]	; 0x2c
1a0080d4:	e4c9      	b.n	1a007a6a <_vfprintf_r+0xbca>
1a0080d6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0080da:	f7fc fca3 	bl	1a004a24 <__retarget_lock_release_recursive>
1a0080de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0080e2:	e51d      	b.n	1a007b20 <_vfprintf_r+0xc80>
1a0080e4:	aa28      	add	r2, sp, #160	; 0xa0
1a0080e6:	9907      	ldr	r1, [sp, #28]
1a0080e8:	9805      	ldr	r0, [sp, #20]
1a0080ea:	f002 fd91 	bl	1a00ac10 <__sprint_r>
1a0080ee:	2800      	cmp	r0, #0
1a0080f0:	f47f ac6e 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0080f4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0080f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0080fa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0080fe:	f7ff b929 	b.w	1a007354 <_vfprintf_r+0x4b4>
1a008102:	46c1      	mov	r9, r8
1a008104:	e4fe      	b.n	1a007b04 <_vfprintf_r+0xc64>
1a008106:	aa28      	add	r2, sp, #160	; 0xa0
1a008108:	9907      	ldr	r1, [sp, #28]
1a00810a:	9805      	ldr	r0, [sp, #20]
1a00810c:	f002 fd80 	bl	1a00ac10 <__sprint_r>
1a008110:	2800      	cmp	r0, #0
1a008112:	f47f ac5d 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a008116:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00811a:	f7ff bb93 	b.w	1a007844 <_vfprintf_r+0x9a4>
1a00811e:	464b      	mov	r3, r9
1a008120:	3201      	adds	r2, #1
1a008122:	442c      	add	r4, r5
1a008124:	2a07      	cmp	r2, #7
1a008126:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00812a:	e9cb 3500 	strd	r3, r5, [fp]
1a00812e:	f77f a94a 	ble.w	1a0073c6 <_vfprintf_r+0x526>
1a008132:	e46d      	b.n	1a007a10 <_vfprintf_r+0xb70>
1a008134:	9a08      	ldr	r2, [sp, #32]
1a008136:	6812      	ldr	r2, [r2, #0]
1a008138:	9308      	str	r3, [sp, #32]
1a00813a:	9b04      	ldr	r3, [sp, #16]
1a00813c:	6013      	str	r3, [r2, #0]
1a00813e:	4657      	mov	r7, sl
1a008140:	f7ff b962 	b.w	1a007408 <_vfprintf_r+0x568>
1a008144:	2d10      	cmp	r5, #16
1a008146:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008148:	4b35      	ldr	r3, [pc, #212]	; (1a008220 <_vfprintf_r+0x1380>)
1a00814a:	dd50      	ble.n	1a0081ee <_vfprintf_r+0x134e>
1a00814c:	4619      	mov	r1, r3
1a00814e:	2610      	movs	r6, #16
1a008150:	4623      	mov	r3, r4
1a008152:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a008156:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00815a:	460c      	mov	r4, r1
1a00815c:	e004      	b.n	1a008168 <_vfprintf_r+0x12c8>
1a00815e:	f10b 0b08 	add.w	fp, fp, #8
1a008162:	3d10      	subs	r5, #16
1a008164:	2d10      	cmp	r5, #16
1a008166:	dd3f      	ble.n	1a0081e8 <_vfprintf_r+0x1348>
1a008168:	3201      	adds	r2, #1
1a00816a:	3310      	adds	r3, #16
1a00816c:	2a07      	cmp	r2, #7
1a00816e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a008172:	e9cb 4600 	strd	r4, r6, [fp]
1a008176:	ddf2      	ble.n	1a00815e <_vfprintf_r+0x12be>
1a008178:	aa28      	add	r2, sp, #160	; 0xa0
1a00817a:	4649      	mov	r1, r9
1a00817c:	4640      	mov	r0, r8
1a00817e:	f002 fd47 	bl	1a00ac10 <__sprint_r>
1a008182:	2800      	cmp	r0, #0
1a008184:	f47f acbe 	bne.w	1a007b04 <_vfprintf_r+0xc64>
1a008188:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00818c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008190:	e7e7      	b.n	1a008162 <_vfprintf_r+0x12c2>
1a008192:	4638      	mov	r0, r7
1a008194:	f7fd f8f4 	bl	1a005380 <strlen>
1a008198:	46a9      	mov	r9, r5
1a00819a:	4606      	mov	r6, r0
1a00819c:	f7ff b849 	b.w	1a007232 <_vfprintf_r+0x392>
1a0081a0:	46d9      	mov	r9, fp
1a0081a2:	e4af      	b.n	1a007b04 <_vfprintf_r+0xc64>
1a0081a4:	9e02      	ldr	r6, [sp, #8]
1a0081a6:	9b08      	ldr	r3, [sp, #32]
1a0081a8:	f416 7f00 	tst.w	r6, #512	; 0x200
1a0081ac:	d051      	beq.n	1a008252 <_vfprintf_r+0x13b2>
1a0081ae:	f993 4000 	ldrsb.w	r4, [r3]
1a0081b2:	9208      	str	r2, [sp, #32]
1a0081b4:	17e5      	asrs	r5, r4, #31
1a0081b6:	4622      	mov	r2, r4
1a0081b8:	462b      	mov	r3, r5
1a0081ba:	f7fe bffb 	b.w	1a0071b4 <_vfprintf_r+0x314>
1a0081be:	9e02      	ldr	r6, [sp, #8]
1a0081c0:	05b7      	lsls	r7, r6, #22
1a0081c2:	bf47      	ittee	mi
1a0081c4:	9208      	strmi	r2, [sp, #32]
1a0081c6:	b2e4      	uxtbmi	r4, r4
1a0081c8:	9e02      	ldrpl	r6, [sp, #8]
1a0081ca:	9208      	strpl	r2, [sp, #32]
1a0081cc:	2500      	movs	r5, #0
1a0081ce:	f7ff baae 	b.w	1a00772e <_vfprintf_r+0x88e>
1a0081d2:	9e02      	ldr	r6, [sp, #8]
1a0081d4:	9208      	str	r2, [sp, #32]
1a0081d6:	4633      	mov	r3, r6
1a0081d8:	059b      	lsls	r3, r3, #22
1a0081da:	bf4c      	ite	mi
1a0081dc:	b2e4      	uxtbmi	r4, r4
1a0081de:	9e02      	ldrpl	r6, [sp, #8]
1a0081e0:	2500      	movs	r5, #0
1a0081e2:	2301      	movs	r3, #1
1a0081e4:	f7ff b987 	b.w	1a0074f6 <_vfprintf_r+0x656>
1a0081e8:	4621      	mov	r1, r4
1a0081ea:	461c      	mov	r4, r3
1a0081ec:	460b      	mov	r3, r1
1a0081ee:	3201      	adds	r2, #1
1a0081f0:	442c      	add	r4, r5
1a0081f2:	2a07      	cmp	r2, #7
1a0081f4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0081f8:	e9cb 3500 	strd	r3, r5, [fp]
1a0081fc:	f300 80ef 	bgt.w	1a0083de <_vfprintf_r+0x153e>
1a008200:	f10b 0b08 	add.w	fp, fp, #8
1a008204:	e50e      	b.n	1a007c24 <_vfprintf_r+0xd84>
1a008206:	9805      	ldr	r0, [sp, #20]
1a008208:	aa28      	add	r2, sp, #160	; 0xa0
1a00820a:	4649      	mov	r1, r9
1a00820c:	f002 fd00 	bl	1a00ac10 <__sprint_r>
1a008210:	2800      	cmp	r0, #0
1a008212:	f43f a903 	beq.w	1a00741c <_vfprintf_r+0x57c>
1a008216:	e47a      	b.n	1a007b0e <_vfprintf_r+0xc6e>
1a008218:	66666667 	.word	0x66666667
1a00821c:	1a00b3ac 	.word	0x1a00b3ac
1a008220:	1a00b3e8 	.word	0x1a00b3e8
1a008224:	3301      	adds	r3, #1
1a008226:	930a      	str	r3, [sp, #40]	; 0x28
1a008228:	f102 0b08 	add.w	fp, r2, #8
1a00822c:	4616      	mov	r6, r2
1a00822e:	e441      	b.n	1a007ab4 <_vfprintf_r+0xc14>
1a008230:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008232:	18bd      	adds	r5, r7, r2
1a008234:	eba5 0509 	sub.w	r5, r5, r9
1a008238:	1ad3      	subs	r3, r2, r3
1a00823a:	429d      	cmp	r5, r3
1a00823c:	bfa8      	it	ge
1a00823e:	461d      	movge	r5, r3
1a008240:	e527      	b.n	1a007c92 <_vfprintf_r+0xdf2>
1a008242:	9a08      	ldr	r2, [sp, #32]
1a008244:	9308      	str	r3, [sp, #32]
1a008246:	6812      	ldr	r2, [r2, #0]
1a008248:	9b04      	ldr	r3, [sp, #16]
1a00824a:	8013      	strh	r3, [r2, #0]
1a00824c:	4657      	mov	r7, sl
1a00824e:	f7ff b8db 	b.w	1a007408 <_vfprintf_r+0x568>
1a008252:	681c      	ldr	r4, [r3, #0]
1a008254:	9208      	str	r2, [sp, #32]
1a008256:	17e5      	asrs	r5, r4, #31
1a008258:	9e02      	ldr	r6, [sp, #8]
1a00825a:	4622      	mov	r2, r4
1a00825c:	462b      	mov	r3, r5
1a00825e:	f7fe bfa9 	b.w	1a0071b4 <_vfprintf_r+0x314>
1a008262:	b2e4      	uxtb	r4, r4
1a008264:	2500      	movs	r5, #0
1a008266:	f7fe bf59 	b.w	1a00711c <_vfprintf_r+0x27c>
1a00826a:	2330      	movs	r3, #48	; 0x30
1a00826c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a008270:	2358      	movs	r3, #88	; 0x58
1a008272:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a008276:	9b02      	ldr	r3, [sp, #8]
1a008278:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00827c:	f043 0302 	orr.w	r3, r3, #2
1a008280:	930a      	str	r3, [sp, #40]	; 0x28
1a008282:	f300 82b7 	bgt.w	1a0087f4 <_vfprintf_r+0x1954>
1a008286:	2300      	movs	r3, #0
1a008288:	9309      	str	r3, [sp, #36]	; 0x24
1a00828a:	af3b      	add	r7, sp, #236	; 0xec
1a00828c:	9a02      	ldr	r2, [sp, #8]
1a00828e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a008290:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a008294:	9202      	str	r2, [sp, #8]
1a008296:	2b00      	cmp	r3, #0
1a008298:	f028 0220 	bic.w	r2, r8, #32
1a00829c:	9203      	str	r2, [sp, #12]
1a00829e:	f2c0 8188 	blt.w	1a0085b2 <_vfprintf_r+0x1712>
1a0082a2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a0082a6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a0082aa:	2300      	movs	r3, #0
1a0082ac:	931e      	str	r3, [sp, #120]	; 0x78
1a0082ae:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a0082b2:	f000 82d9 	beq.w	1a008868 <_vfprintf_r+0x19c8>
1a0082b6:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a0082ba:	f47f ade7 	bne.w	1a007e8c <_vfprintf_r+0xfec>
1a0082be:	a822      	add	r0, sp, #136	; 0x88
1a0082c0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0082c4:	f002 fb7c 	bl	1a00a9c0 <frexp>
1a0082c8:	2200      	movs	r2, #0
1a0082ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a0082ce:	ec51 0b10 	vmov	r0, r1, d0
1a0082d2:	f7fb fc13 	bl	1a003afc <__aeabi_dmul>
1a0082d6:	2200      	movs	r2, #0
1a0082d8:	2300      	movs	r3, #0
1a0082da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0082de:	f7fb fe75 	bl	1a003fcc <__aeabi_dcmpeq>
1a0082e2:	b108      	cbz	r0, 1a0082e8 <_vfprintf_r+0x1448>
1a0082e4:	2301      	movs	r3, #1
1a0082e6:	9322      	str	r3, [sp, #136]	; 0x88
1a0082e8:	4bb6      	ldr	r3, [pc, #728]	; (1a0085c4 <_vfprintf_r+0x1724>)
1a0082ea:	930b      	str	r3, [sp, #44]	; 0x2c
1a0082ec:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a0082f0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a0082f4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a0082f8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a0082fc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a008300:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008304:	970c      	str	r7, [sp, #48]	; 0x30
1a008306:	46ba      	mov	sl, r7
1a008308:	e003      	b.n	1a008312 <_vfprintf_r+0x1472>
1a00830a:	f7fb fe5f 	bl	1a003fcc <__aeabi_dcmpeq>
1a00830e:	bb20      	cbnz	r0, 1a00835a <_vfprintf_r+0x14ba>
1a008310:	46b2      	mov	sl, r6
1a008312:	2200      	movs	r2, #0
1a008314:	4bac      	ldr	r3, [pc, #688]	; (1a0085c8 <_vfprintf_r+0x1728>)
1a008316:	4640      	mov	r0, r8
1a008318:	4649      	mov	r1, r9
1a00831a:	f7fb fbef 	bl	1a003afc <__aeabi_dmul>
1a00831e:	4689      	mov	r9, r1
1a008320:	4680      	mov	r8, r0
1a008322:	f7fb fe9b 	bl	1a00405c <__aeabi_d2iz>
1a008326:	4607      	mov	r7, r0
1a008328:	f7fb fb7e 	bl	1a003a28 <__aeabi_i2d>
1a00832c:	4602      	mov	r2, r0
1a00832e:	460b      	mov	r3, r1
1a008330:	4640      	mov	r0, r8
1a008332:	4649      	mov	r1, r9
1a008334:	f7fb fa2a 	bl	1a00378c <__aeabi_dsub>
1a008338:	4656      	mov	r6, sl
1a00833a:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a00833e:	f806 4b01 	strb.w	r4, [r6], #1
1a008342:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a008346:	462c      	mov	r4, r5
1a008348:	4680      	mov	r8, r0
1a00834a:	4689      	mov	r9, r1
1a00834c:	f04f 0200 	mov.w	r2, #0
1a008350:	f04f 0300 	mov.w	r3, #0
1a008354:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a008358:	d1d7      	bne.n	1a00830a <_vfprintf_r+0x146a>
1a00835a:	4640      	mov	r0, r8
1a00835c:	4649      	mov	r1, r9
1a00835e:	2200      	movs	r2, #0
1a008360:	4b9a      	ldr	r3, [pc, #616]	; (1a0085cc <_vfprintf_r+0x172c>)
1a008362:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a008366:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a00836a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00836e:	463d      	mov	r5, r7
1a008370:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a008374:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a008376:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00837a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00837e:	f7fb fe4d 	bl	1a00401c <__aeabi_dcmpgt>
1a008382:	2800      	cmp	r0, #0
1a008384:	f040 8214 	bne.w	1a0087b0 <_vfprintf_r+0x1910>
1a008388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00838c:	2200      	movs	r2, #0
1a00838e:	4b8f      	ldr	r3, [pc, #572]	; (1a0085cc <_vfprintf_r+0x172c>)
1a008390:	f7fb fe1c 	bl	1a003fcc <__aeabi_dcmpeq>
1a008394:	b118      	cbz	r0, 1a00839e <_vfprintf_r+0x14fe>
1a008396:	462b      	mov	r3, r5
1a008398:	07db      	lsls	r3, r3, #31
1a00839a:	f100 8209 	bmi.w	1a0087b0 <_vfprintf_r+0x1910>
1a00839e:	2c00      	cmp	r4, #0
1a0083a0:	f6ff ad91 	blt.w	1a007ec6 <_vfprintf_r+0x1026>
1a0083a4:	1c63      	adds	r3, r4, #1
1a0083a6:	4433      	add	r3, r6
1a0083a8:	2230      	movs	r2, #48	; 0x30
1a0083aa:	f806 2b01 	strb.w	r2, [r6], #1
1a0083ae:	429e      	cmp	r6, r3
1a0083b0:	d1fb      	bne.n	1a0083aa <_vfprintf_r+0x150a>
1a0083b2:	e588      	b.n	1a007ec6 <_vfprintf_r+0x1026>
1a0083b4:	aa28      	add	r2, sp, #160	; 0xa0
1a0083b6:	9907      	ldr	r1, [sp, #28]
1a0083b8:	9805      	ldr	r0, [sp, #20]
1a0083ba:	f002 fc29 	bl	1a00ac10 <__sprint_r>
1a0083be:	2800      	cmp	r0, #0
1a0083c0:	f47f ab06 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0083c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0083c6:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0083ca:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0083ce:	f7ff bb12 	b.w	1a0079f6 <_vfprintf_r+0xb56>
1a0083d2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0083d6:	f7fc fb25 	bl	1a004a24 <__retarget_lock_release_recursive>
1a0083da:	f7fe be6a 	b.w	1a0070b2 <_vfprintf_r+0x212>
1a0083de:	aa28      	add	r2, sp, #160	; 0xa0
1a0083e0:	9907      	ldr	r1, [sp, #28]
1a0083e2:	9805      	ldr	r0, [sp, #20]
1a0083e4:	f002 fc14 	bl	1a00ac10 <__sprint_r>
1a0083e8:	2800      	cmp	r0, #0
1a0083ea:	f47f aaf1 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0083ee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0083f0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0083f4:	e416      	b.n	1a007c24 <_vfprintf_r+0xd84>
1a0083f6:	9e02      	ldr	r6, [sp, #8]
1a0083f8:	f7ff b9ad 	b.w	1a007756 <_vfprintf_r+0x8b6>
1a0083fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0083fe:	1cde      	adds	r6, r3, #3
1a008400:	db01      	blt.n	1a008406 <_vfprintf_r+0x1566>
1a008402:	4599      	cmp	r9, r3
1a008404:	da05      	bge.n	1a008412 <_vfprintf_r+0x1572>
1a008406:	f1a8 0802 	sub.w	r8, r8, #2
1a00840a:	f028 0320 	bic.w	r3, r8, #32
1a00840e:	9303      	str	r3, [sp, #12]
1a008410:	e565      	b.n	1a007ede <_vfprintf_r+0x103e>
1a008412:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008414:	4619      	mov	r1, r3
1a008416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008418:	4299      	cmp	r1, r3
1a00841a:	f300 8174 	bgt.w	1a008706 <_vfprintf_r+0x1866>
1a00841e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a008420:	07d4      	lsls	r4, r2, #31
1a008422:	f140 8254 	bpl.w	1a0088ce <_vfprintf_r+0x1a2e>
1a008426:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a008428:	189e      	adds	r6, r3, r2
1a00842a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00842c:	0558      	lsls	r0, r3, #21
1a00842e:	d503      	bpl.n	1a008438 <_vfprintf_r+0x1598>
1a008430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008432:	2b00      	cmp	r3, #0
1a008434:	f300 824d 	bgt.w	1a0088d2 <_vfprintf_r+0x1a32>
1a008438:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00843c:	9303      	str	r3, [sp, #12]
1a00843e:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008442:	2300      	movs	r3, #0
1a008444:	930c      	str	r3, [sp, #48]	; 0x30
1a008446:	930f      	str	r3, [sp, #60]	; 0x3c
1a008448:	e5ac      	b.n	1a007fa4 <_vfprintf_r+0x1104>
1a00844a:	222d      	movs	r2, #45	; 0x2d
1a00844c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a008450:	f04f 0900 	mov.w	r9, #0
1a008454:	f7fe befb 	b.w	1a00724e <_vfprintf_r+0x3ae>
1a008458:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00845a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00845e:	18fb      	adds	r3, r7, r3
1a008460:	930a      	str	r3, [sp, #40]	; 0x28
1a008462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008464:	970e      	str	r7, [sp, #56]	; 0x38
1a008466:	465a      	mov	r2, fp
1a008468:	464f      	mov	r7, r9
1a00846a:	4e59      	ldr	r6, [pc, #356]	; (1a0085d0 <_vfprintf_r+0x1730>)
1a00846c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a008470:	f8dd a014 	ldr.w	sl, [sp, #20]
1a008474:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a008478:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00847c:	4621      	mov	r1, r4
1a00847e:	2b00      	cmp	r3, #0
1a008480:	d032      	beq.n	1a0084e8 <_vfprintf_r+0x1648>
1a008482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008484:	2b00      	cmp	r3, #0
1a008486:	d16e      	bne.n	1a008566 <_vfprintf_r+0x16c6>
1a008488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00848a:	3b01      	subs	r3, #1
1a00848c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a008490:	930f      	str	r3, [sp, #60]	; 0x3c
1a008492:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008494:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a008496:	6010      	str	r0, [r2, #0]
1a008498:	3301      	adds	r3, #1
1a00849a:	4449      	add	r1, r9
1a00849c:	2b07      	cmp	r3, #7
1a00849e:	912a      	str	r1, [sp, #168]	; 0xa8
1a0084a0:	f8c2 9004 	str.w	r9, [r2, #4]
1a0084a4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0084a6:	dc62      	bgt.n	1a00856e <_vfprintf_r+0x16ce>
1a0084a8:	3208      	adds	r2, #8
1a0084aa:	980a      	ldr	r0, [sp, #40]	; 0x28
1a0084ac:	f898 3000 	ldrb.w	r3, [r8]
1a0084b0:	1bc5      	subs	r5, r0, r7
1a0084b2:	429d      	cmp	r5, r3
1a0084b4:	bfa8      	it	ge
1a0084b6:	461d      	movge	r5, r3
1a0084b8:	2d00      	cmp	r5, #0
1a0084ba:	dd0b      	ble.n	1a0084d4 <_vfprintf_r+0x1634>
1a0084bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0084be:	6017      	str	r7, [r2, #0]
1a0084c0:	3301      	adds	r3, #1
1a0084c2:	4429      	add	r1, r5
1a0084c4:	2b07      	cmp	r3, #7
1a0084c6:	912a      	str	r1, [sp, #168]	; 0xa8
1a0084c8:	6055      	str	r5, [r2, #4]
1a0084ca:	9329      	str	r3, [sp, #164]	; 0xa4
1a0084cc:	dc5a      	bgt.n	1a008584 <_vfprintf_r+0x16e4>
1a0084ce:	f898 3000 	ldrb.w	r3, [r8]
1a0084d2:	3208      	adds	r2, #8
1a0084d4:	2d00      	cmp	r5, #0
1a0084d6:	bfac      	ite	ge
1a0084d8:	1b5d      	subge	r5, r3, r5
1a0084da:	461d      	movlt	r5, r3
1a0084dc:	2d00      	cmp	r5, #0
1a0084de:	dc15      	bgt.n	1a00850c <_vfprintf_r+0x166c>
1a0084e0:	441f      	add	r7, r3
1a0084e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0084e4:	2b00      	cmp	r3, #0
1a0084e6:	d1cc      	bne.n	1a008482 <_vfprintf_r+0x15e2>
1a0084e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0084ea:	2b00      	cmp	r3, #0
1a0084ec:	d13b      	bne.n	1a008566 <_vfprintf_r+0x16c6>
1a0084ee:	46b9      	mov	r9, r7
1a0084f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0084f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a0084f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0084f8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0084fc:	18fb      	adds	r3, r7, r3
1a0084fe:	4599      	cmp	r9, r3
1a008500:	4693      	mov	fp, r2
1a008502:	460c      	mov	r4, r1
1a008504:	bf28      	it	cs
1a008506:	4699      	movcs	r9, r3
1a008508:	f7ff bb93 	b.w	1a007c32 <_vfprintf_r+0xd92>
1a00850c:	2d10      	cmp	r5, #16
1a00850e:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a008510:	dd1c      	ble.n	1a00854c <_vfprintf_r+0x16ac>
1a008512:	2410      	movs	r4, #16
1a008514:	e004      	b.n	1a008520 <_vfprintf_r+0x1680>
1a008516:	3d10      	subs	r5, #16
1a008518:	2d10      	cmp	r5, #16
1a00851a:	f102 0208 	add.w	r2, r2, #8
1a00851e:	dd15      	ble.n	1a00854c <_vfprintf_r+0x16ac>
1a008520:	3001      	adds	r0, #1
1a008522:	3110      	adds	r1, #16
1a008524:	2807      	cmp	r0, #7
1a008526:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a00852a:	e9c2 6400 	strd	r6, r4, [r2]
1a00852e:	ddf2      	ble.n	1a008516 <_vfprintf_r+0x1676>
1a008530:	aa28      	add	r2, sp, #160	; 0xa0
1a008532:	4659      	mov	r1, fp
1a008534:	4650      	mov	r0, sl
1a008536:	f002 fb6b 	bl	1a00ac10 <__sprint_r>
1a00853a:	2800      	cmp	r0, #0
1a00853c:	f47f ae30 	bne.w	1a0081a0 <_vfprintf_r+0x1300>
1a008540:	3d10      	subs	r5, #16
1a008542:	2d10      	cmp	r5, #16
1a008544:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a008548:	aa2b      	add	r2, sp, #172	; 0xac
1a00854a:	dce9      	bgt.n	1a008520 <_vfprintf_r+0x1680>
1a00854c:	3001      	adds	r0, #1
1a00854e:	4429      	add	r1, r5
1a008550:	2807      	cmp	r0, #7
1a008552:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a008556:	e9c2 6500 	strd	r6, r5, [r2]
1a00855a:	dc49      	bgt.n	1a0085f0 <_vfprintf_r+0x1750>
1a00855c:	f898 3000 	ldrb.w	r3, [r8]
1a008560:	3208      	adds	r2, #8
1a008562:	441f      	add	r7, r3
1a008564:	e7bd      	b.n	1a0084e2 <_vfprintf_r+0x1642>
1a008566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008568:	3b01      	subs	r3, #1
1a00856a:	930c      	str	r3, [sp, #48]	; 0x30
1a00856c:	e791      	b.n	1a008492 <_vfprintf_r+0x15f2>
1a00856e:	aa28      	add	r2, sp, #160	; 0xa0
1a008570:	4659      	mov	r1, fp
1a008572:	4650      	mov	r0, sl
1a008574:	f002 fb4c 	bl	1a00ac10 <__sprint_r>
1a008578:	2800      	cmp	r0, #0
1a00857a:	f47f ae11 	bne.w	1a0081a0 <_vfprintf_r+0x1300>
1a00857e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a008580:	aa2b      	add	r2, sp, #172	; 0xac
1a008582:	e792      	b.n	1a0084aa <_vfprintf_r+0x160a>
1a008584:	aa28      	add	r2, sp, #160	; 0xa0
1a008586:	4659      	mov	r1, fp
1a008588:	4650      	mov	r0, sl
1a00858a:	f002 fb41 	bl	1a00ac10 <__sprint_r>
1a00858e:	2800      	cmp	r0, #0
1a008590:	f47f ae06 	bne.w	1a0081a0 <_vfprintf_r+0x1300>
1a008594:	f898 3000 	ldrb.w	r3, [r8]
1a008598:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00859a:	aa2b      	add	r2, sp, #172	; 0xac
1a00859c:	e79a      	b.n	1a0084d4 <_vfprintf_r+0x1634>
1a00859e:	222d      	movs	r2, #45	; 0x2d
1a0085a0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0085a4:	f7ff b87d 	b.w	1a0076a2 <_vfprintf_r+0x802>
1a0085a8:	9b02      	ldr	r3, [sp, #8]
1a0085aa:	930a      	str	r3, [sp, #40]	; 0x28
1a0085ac:	2300      	movs	r3, #0
1a0085ae:	9309      	str	r3, [sp, #36]	; 0x24
1a0085b0:	9202      	str	r2, [sp, #8]
1a0085b2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a0085b6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a0085ba:	931d      	str	r3, [sp, #116]	; 0x74
1a0085bc:	232d      	movs	r3, #45	; 0x2d
1a0085be:	911c      	str	r1, [sp, #112]	; 0x70
1a0085c0:	931e      	str	r3, [sp, #120]	; 0x78
1a0085c2:	e674      	b.n	1a0082ae <_vfprintf_r+0x140e>
1a0085c4:	1a00b398 	.word	0x1a00b398
1a0085c8:	40300000 	.word	0x40300000
1a0085cc:	3fe00000 	.word	0x3fe00000
1a0085d0:	1a00b3e8 	.word	0x1a00b3e8
1a0085d4:	aa28      	add	r2, sp, #160	; 0xa0
1a0085d6:	9907      	ldr	r1, [sp, #28]
1a0085d8:	9805      	ldr	r0, [sp, #20]
1a0085da:	f002 fb19 	bl	1a00ac10 <__sprint_r>
1a0085de:	2800      	cmp	r0, #0
1a0085e0:	f47f a9f6 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0085e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0085e6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0085e8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0085ec:	f7ff bbeb 	b.w	1a007dc6 <_vfprintf_r+0xf26>
1a0085f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0085f2:	4659      	mov	r1, fp
1a0085f4:	4650      	mov	r0, sl
1a0085f6:	f002 fb0b 	bl	1a00ac10 <__sprint_r>
1a0085fa:	2800      	cmp	r0, #0
1a0085fc:	f47f add0 	bne.w	1a0081a0 <_vfprintf_r+0x1300>
1a008600:	f898 3000 	ldrb.w	r3, [r8]
1a008604:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a008606:	aa2b      	add	r2, sp, #172	; 0xac
1a008608:	441f      	add	r7, r3
1a00860a:	e76a      	b.n	1a0084e2 <_vfprintf_r+0x1642>
1a00860c:	aa28      	add	r2, sp, #160	; 0xa0
1a00860e:	9907      	ldr	r1, [sp, #28]
1a008610:	9805      	ldr	r0, [sp, #20]
1a008612:	f002 fafd 	bl	1a00ac10 <__sprint_r>
1a008616:	2800      	cmp	r0, #0
1a008618:	f47f a9da 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a00861c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00861e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008622:	f7ff baf7 	b.w	1a007c14 <_vfprintf_r+0xd74>
1a008626:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a008628:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a00862a:	1aff      	subs	r7, r7, r3
1a00862c:	461a      	mov	r2, r3
1a00862e:	4638      	mov	r0, r7
1a008630:	f002 f9fc 	bl	1a00aa2c <strncpy>
1a008634:	f898 3001 	ldrb.w	r3, [r8, #1]
1a008638:	b10b      	cbz	r3, 1a00863e <_vfprintf_r+0x179e>
1a00863a:	f108 0801 	add.w	r8, r8, #1
1a00863e:	220a      	movs	r2, #10
1a008640:	2300      	movs	r3, #0
1a008642:	4620      	mov	r0, r4
1a008644:	4629      	mov	r1, r5
1a008646:	f04f 0a00 	mov.w	sl, #0
1a00864a:	f7fb fd2f 	bl	1a0040ac <__aeabi_uldivmod>
1a00864e:	f7ff b8ab 	b.w	1a0077a8 <_vfprintf_r+0x908>
1a008652:	aa26      	add	r2, sp, #152	; 0x98
1a008654:	ab23      	add	r3, sp, #140	; 0x8c
1a008656:	e9cd 3200 	strd	r3, r2, [sp]
1a00865a:	2103      	movs	r1, #3
1a00865c:	ab22      	add	r3, sp, #136	; 0x88
1a00865e:	464a      	mov	r2, r9
1a008660:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008664:	9805      	ldr	r0, [sp, #20]
1a008666:	f000 fb03 	bl	1a008c70 <_dtoa_r>
1a00866a:	7803      	ldrb	r3, [r0, #0]
1a00866c:	2b30      	cmp	r3, #48	; 0x30
1a00866e:	4607      	mov	r7, r0
1a008670:	f000 8161 	beq.w	1a008936 <_vfprintf_r+0x1a96>
1a008674:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008676:	444b      	add	r3, r9
1a008678:	18fc      	adds	r4, r7, r3
1a00867a:	2200      	movs	r2, #0
1a00867c:	2300      	movs	r3, #0
1a00867e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a008682:	f7fb fca3 	bl	1a003fcc <__aeabi_dcmpeq>
1a008686:	b108      	cbz	r0, 1a00868c <_vfprintf_r+0x17ec>
1a008688:	4626      	mov	r6, r4
1a00868a:	e41c      	b.n	1a007ec6 <_vfprintf_r+0x1026>
1a00868c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00868e:	42a6      	cmp	r6, r4
1a008690:	f4bf ac19 	bcs.w	1a007ec6 <_vfprintf_r+0x1026>
1a008694:	2230      	movs	r2, #48	; 0x30
1a008696:	1c73      	adds	r3, r6, #1
1a008698:	9326      	str	r3, [sp, #152]	; 0x98
1a00869a:	7032      	strb	r2, [r6, #0]
1a00869c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00869e:	42b4      	cmp	r4, r6
1a0086a0:	d8f9      	bhi.n	1a008696 <_vfprintf_r+0x17f6>
1a0086a2:	e410      	b.n	1a007ec6 <_vfprintf_r+0x1026>
1a0086a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0086a6:	9907      	ldr	r1, [sp, #28]
1a0086a8:	9805      	ldr	r0, [sp, #20]
1a0086aa:	f002 fab1 	bl	1a00ac10 <__sprint_r>
1a0086ae:	2800      	cmp	r0, #0
1a0086b0:	f47f a98e 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a0086b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0086b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0086b8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0086bc:	f7ff bad1 	b.w	1a007c62 <_vfprintf_r+0xdc2>
1a0086c0:	464e      	mov	r6, r9
1a0086c2:	f8cd 900c 	str.w	r9, [sp, #12]
1a0086c6:	9408      	str	r4, [sp, #32]
1a0086c8:	4681      	mov	r9, r0
1a0086ca:	900c      	str	r0, [sp, #48]	; 0x30
1a0086cc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a0086d0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0086d4:	f7fe bdb9 	b.w	1a00724a <_vfprintf_r+0x3aa>
1a0086d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0086da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0086dc:	f003 0301 	and.w	r3, r3, #1
1a0086e0:	2a00      	cmp	r2, #0
1a0086e2:	ea43 0309 	orr.w	r3, r3, r9
1a0086e6:	f340 8142 	ble.w	1a00896e <_vfprintf_r+0x1ace>
1a0086ea:	2b00      	cmp	r3, #0
1a0086ec:	f040 8119 	bne.w	1a008922 <_vfprintf_r+0x1a82>
1a0086f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0086f2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0086f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0086f8:	055a      	lsls	r2, r3, #21
1a0086fa:	f100 80ec 	bmi.w	1a0088d6 <_vfprintf_r+0x1a36>
1a0086fe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008702:	9303      	str	r3, [sp, #12]
1a008704:	e69d      	b.n	1a008442 <_vfprintf_r+0x15a2>
1a008706:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a00870a:	189e      	adds	r6, r3, r2
1a00870c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00870e:	2b00      	cmp	r3, #0
1a008710:	f340 811e 	ble.w	1a008950 <_vfprintf_r+0x1ab0>
1a008714:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008718:	e7ed      	b.n	1a0086f6 <_vfprintf_r+0x1856>
1a00871a:	aa28      	add	r2, sp, #160	; 0xa0
1a00871c:	9907      	ldr	r1, [sp, #28]
1a00871e:	9805      	ldr	r0, [sp, #20]
1a008720:	f002 fa76 	bl	1a00ac10 <__sprint_r>
1a008724:	2800      	cmp	r0, #0
1a008726:	f47f a953 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a00872a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00872c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00872e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008730:	1ad3      	subs	r3, r2, r3
1a008732:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008736:	f7ff baac 	b.w	1a007c92 <_vfprintf_r+0xdf2>
1a00873a:	eb07 0409 	add.w	r4, r7, r9
1a00873e:	e79c      	b.n	1a00867a <_vfprintf_r+0x17da>
1a008740:	425d      	negs	r5, r3
1a008742:	3310      	adds	r3, #16
1a008744:	4ba7      	ldr	r3, [pc, #668]	; (1a0089e4 <_vfprintf_r+0x1b44>)
1a008746:	da63      	bge.n	1a008810 <_vfprintf_r+0x1970>
1a008748:	4619      	mov	r1, r3
1a00874a:	2610      	movs	r6, #16
1a00874c:	4623      	mov	r3, r4
1a00874e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a008752:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008756:	460c      	mov	r4, r1
1a008758:	e004      	b.n	1a008764 <_vfprintf_r+0x18c4>
1a00875a:	f10b 0b08 	add.w	fp, fp, #8
1a00875e:	3d10      	subs	r5, #16
1a008760:	2d10      	cmp	r5, #16
1a008762:	dd52      	ble.n	1a00880a <_vfprintf_r+0x196a>
1a008764:	3201      	adds	r2, #1
1a008766:	3310      	adds	r3, #16
1a008768:	2a07      	cmp	r2, #7
1a00876a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00876e:	e9cb 4600 	strd	r4, r6, [fp]
1a008772:	ddf2      	ble.n	1a00875a <_vfprintf_r+0x18ba>
1a008774:	aa28      	add	r2, sp, #160	; 0xa0
1a008776:	4649      	mov	r1, r9
1a008778:	4640      	mov	r0, r8
1a00877a:	f002 fa49 	bl	1a00ac10 <__sprint_r>
1a00877e:	2800      	cmp	r0, #0
1a008780:	f47f a9c0 	bne.w	1a007b04 <_vfprintf_r+0xc64>
1a008784:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a008788:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00878c:	e7e7      	b.n	1a00875e <_vfprintf_r+0x18be>
1a00878e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a008792:	07db      	lsls	r3, r3, #31
1a008794:	d407      	bmi.n	1a0087a6 <_vfprintf_r+0x1906>
1a008796:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00879a:	059f      	lsls	r7, r3, #22
1a00879c:	d403      	bmi.n	1a0087a6 <_vfprintf_r+0x1906>
1a00879e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0087a2:	f7fc f93f 	bl	1a004a24 <__retarget_lock_release_recursive>
1a0087a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0087aa:	9304      	str	r3, [sp, #16]
1a0087ac:	f7ff b9bb 	b.w	1a007b26 <_vfprintf_r+0xc86>
1a0087b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0087b2:	9326      	str	r3, [sp, #152]	; 0x98
1a0087b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0087b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a0087ba:	7bd9      	ldrb	r1, [r3, #15]
1a0087bc:	428a      	cmp	r2, r1
1a0087be:	4633      	mov	r3, r6
1a0087c0:	d109      	bne.n	1a0087d6 <_vfprintf_r+0x1936>
1a0087c2:	2030      	movs	r0, #48	; 0x30
1a0087c4:	f803 0c01 	strb.w	r0, [r3, #-1]
1a0087c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a0087ca:	1e5a      	subs	r2, r3, #1
1a0087cc:	9226      	str	r2, [sp, #152]	; 0x98
1a0087ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a0087d2:	4291      	cmp	r1, r2
1a0087d4:	d0f6      	beq.n	1a0087c4 <_vfprintf_r+0x1924>
1a0087d6:	2a39      	cmp	r2, #57	; 0x39
1a0087d8:	bf0b      	itete	eq
1a0087da:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a0087dc:	3201      	addne	r2, #1
1a0087de:	7a92      	ldrbeq	r2, [r2, #10]
1a0087e0:	b2d2      	uxtbne	r2, r2
1a0087e2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a0087e6:	f7ff bb6e 	b.w	1a007ec6 <_vfprintf_r+0x1026>
1a0087ea:	2330      	movs	r3, #48	; 0x30
1a0087ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0087f0:	2378      	movs	r3, #120	; 0x78
1a0087f2:	e53e      	b.n	1a008272 <_vfprintf_r+0x13d2>
1a0087f4:	f109 0101 	add.w	r1, r9, #1
1a0087f8:	9805      	ldr	r0, [sp, #20]
1a0087fa:	f7fc f915 	bl	1a004a28 <_malloc_r>
1a0087fe:	4607      	mov	r7, r0
1a008800:	2800      	cmp	r0, #0
1a008802:	f000 80d5 	beq.w	1a0089b0 <_vfprintf_r+0x1b10>
1a008806:	9009      	str	r0, [sp, #36]	; 0x24
1a008808:	e540      	b.n	1a00828c <_vfprintf_r+0x13ec>
1a00880a:	4621      	mov	r1, r4
1a00880c:	461c      	mov	r4, r3
1a00880e:	460b      	mov	r3, r1
1a008810:	3201      	adds	r2, #1
1a008812:	442c      	add	r4, r5
1a008814:	2a07      	cmp	r2, #7
1a008816:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00881a:	e9cb 3500 	strd	r3, r5, [fp]
1a00881e:	f77f aaea 	ble.w	1a007df6 <_vfprintf_r+0xf56>
1a008822:	aa28      	add	r2, sp, #160	; 0xa0
1a008824:	9907      	ldr	r1, [sp, #28]
1a008826:	9805      	ldr	r0, [sp, #20]
1a008828:	f002 f9f2 	bl	1a00ac10 <__sprint_r>
1a00882c:	2800      	cmp	r0, #0
1a00882e:	f47f a8cf 	bne.w	1a0079d0 <_vfprintf_r+0xb30>
1a008832:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a008836:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00883a:	f7ff b8df 	b.w	1a0079fc <_vfprintf_r+0xb5c>
1a00883e:	f109 0401 	add.w	r4, r9, #1
1a008842:	a926      	add	r1, sp, #152	; 0x98
1a008844:	ab23      	add	r3, sp, #140	; 0x8c
1a008846:	e9cd 3100 	strd	r3, r1, [sp]
1a00884a:	4622      	mov	r2, r4
1a00884c:	ab22      	add	r3, sp, #136	; 0x88
1a00884e:	2102      	movs	r1, #2
1a008850:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008854:	9805      	ldr	r0, [sp, #20]
1a008856:	f000 fa0b 	bl	1a008c70 <_dtoa_r>
1a00885a:	4607      	mov	r7, r0
1a00885c:	443c      	add	r4, r7
1a00885e:	e70c      	b.n	1a00867a <_vfprintf_r+0x17da>
1a008860:	f04f 0906 	mov.w	r9, #6
1a008864:	f7ff bb03 	b.w	1a007e6e <_vfprintf_r+0xfce>
1a008868:	a822      	add	r0, sp, #136	; 0x88
1a00886a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00886e:	f002 f8a7 	bl	1a00a9c0 <frexp>
1a008872:	2200      	movs	r2, #0
1a008874:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a008878:	ec51 0b10 	vmov	r0, r1, d0
1a00887c:	f7fb f93e 	bl	1a003afc <__aeabi_dmul>
1a008880:	2200      	movs	r2, #0
1a008882:	2300      	movs	r3, #0
1a008884:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a008888:	f7fb fba0 	bl	1a003fcc <__aeabi_dcmpeq>
1a00888c:	b108      	cbz	r0, 1a008892 <_vfprintf_r+0x19f2>
1a00888e:	2301      	movs	r3, #1
1a008890:	9322      	str	r3, [sp, #136]	; 0x88
1a008892:	4b55      	ldr	r3, [pc, #340]	; (1a0089e8 <_vfprintf_r+0x1b48>)
1a008894:	930b      	str	r3, [sp, #44]	; 0x2c
1a008896:	e529      	b.n	1a0082ec <_vfprintf_r+0x144c>
1a008898:	2900      	cmp	r1, #0
1a00889a:	d17b      	bne.n	1a008994 <_vfprintf_r+0x1af4>
1a00889c:	2330      	movs	r3, #48	; 0x30
1a00889e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a0088a2:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a0088a6:	3230      	adds	r2, #48	; 0x30
1a0088a8:	f803 2b01 	strb.w	r2, [r3], #1
1a0088ac:	aa24      	add	r2, sp, #144	; 0x90
1a0088ae:	1a9b      	subs	r3, r3, r2
1a0088b0:	9316      	str	r3, [sp, #88]	; 0x58
1a0088b2:	f7ff bb61 	b.w	1a007f78 <_vfprintf_r+0x10d8>
1a0088b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0088b8:	4f4c      	ldr	r7, [pc, #304]	; (1a0089ec <_vfprintf_r+0x1b4c>)
1a0088ba:	2b00      	cmp	r3, #0
1a0088bc:	bfb6      	itet	lt
1a0088be:	222d      	movlt	r2, #45	; 0x2d
1a0088c0:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a0088c4:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a0088c8:	4b49      	ldr	r3, [pc, #292]	; (1a0089f0 <_vfprintf_r+0x1b50>)
1a0088ca:	f7fe beec 	b.w	1a0076a6 <_vfprintf_r+0x806>
1a0088ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0088d0:	e5ab      	b.n	1a00842a <_vfprintf_r+0x158a>
1a0088d2:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0088d6:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0088d8:	2200      	movs	r2, #0
1a0088da:	920c      	str	r2, [sp, #48]	; 0x30
1a0088dc:	920f      	str	r2, [sp, #60]	; 0x3c
1a0088de:	7803      	ldrb	r3, [r0, #0]
1a0088e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0088e2:	2bff      	cmp	r3, #255	; 0xff
1a0088e4:	d00c      	beq.n	1a008900 <_vfprintf_r+0x1a60>
1a0088e6:	4293      	cmp	r3, r2
1a0088e8:	da0a      	bge.n	1a008900 <_vfprintf_r+0x1a60>
1a0088ea:	7841      	ldrb	r1, [r0, #1]
1a0088ec:	1ad2      	subs	r2, r2, r3
1a0088ee:	b1a1      	cbz	r1, 1a00891a <_vfprintf_r+0x1a7a>
1a0088f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0088f2:	3301      	adds	r3, #1
1a0088f4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0088f6:	460b      	mov	r3, r1
1a0088f8:	2bff      	cmp	r3, #255	; 0xff
1a0088fa:	f100 0001 	add.w	r0, r0, #1
1a0088fe:	d1f2      	bne.n	1a0088e6 <_vfprintf_r+0x1a46>
1a008900:	920e      	str	r2, [sp, #56]	; 0x38
1a008902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008906:	9018      	str	r0, [sp, #96]	; 0x60
1a008908:	4413      	add	r3, r2
1a00890a:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00890c:	fb02 6603 	mla	r6, r2, r3, r6
1a008910:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008914:	9303      	str	r3, [sp, #12]
1a008916:	f7ff bb45 	b.w	1a007fa4 <_vfprintf_r+0x1104>
1a00891a:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00891c:	3101      	adds	r1, #1
1a00891e:	910c      	str	r1, [sp, #48]	; 0x30
1a008920:	e7df      	b.n	1a0088e2 <_vfprintf_r+0x1a42>
1a008922:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a008924:	18d6      	adds	r6, r2, r3
1a008926:	444e      	add	r6, r9
1a008928:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00892c:	e6e3      	b.n	1a0086f6 <_vfprintf_r+0x1856>
1a00892e:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008932:	f7ff b8ec 	b.w	1a007b0e <_vfprintf_r+0xc6e>
1a008936:	2200      	movs	r2, #0
1a008938:	2300      	movs	r3, #0
1a00893a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00893e:	f7fb fb45 	bl	1a003fcc <__aeabi_dcmpeq>
1a008942:	2800      	cmp	r0, #0
1a008944:	f47f ae96 	bne.w	1a008674 <_vfprintf_r+0x17d4>
1a008948:	f1c9 0301 	rsb	r3, r9, #1
1a00894c:	9322      	str	r3, [sp, #136]	; 0x88
1a00894e:	e692      	b.n	1a008676 <_vfprintf_r+0x17d6>
1a008950:	f1c3 0301 	rsb	r3, r3, #1
1a008954:	441e      	add	r6, r3
1a008956:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00895a:	9303      	str	r3, [sp, #12]
1a00895c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008960:	e56f      	b.n	1a008442 <_vfprintf_r+0x15a2>
1a008962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008964:	07dd      	lsls	r5, r3, #31
1a008966:	f57f ab10 	bpl.w	1a007f8a <_vfprintf_r+0x10ea>
1a00896a:	f7ff bb0c 	b.w	1a007f86 <_vfprintf_r+0x10e6>
1a00896e:	b92b      	cbnz	r3, 1a00897c <_vfprintf_r+0x1adc>
1a008970:	2301      	movs	r3, #1
1a008972:	9303      	str	r3, [sp, #12]
1a008974:	461e      	mov	r6, r3
1a008976:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00897a:	e562      	b.n	1a008442 <_vfprintf_r+0x15a2>
1a00897c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00897e:	1c5e      	adds	r6, r3, #1
1a008980:	444e      	add	r6, r9
1a008982:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008986:	9303      	str	r3, [sp, #12]
1a008988:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00898c:	e559      	b.n	1a008442 <_vfprintf_r+0x15a2>
1a00898e:	465a      	mov	r2, fp
1a008990:	f7ff bb3f 	b.w	1a008012 <_vfprintf_r+0x1172>
1a008994:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a008998:	e785      	b.n	1a0088a6 <_vfprintf_r+0x1a06>
1a00899a:	9b08      	ldr	r3, [sp, #32]
1a00899c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a0089a0:	f853 0b04 	ldr.w	r0, [r3], #4
1a0089a4:	9308      	str	r3, [sp, #32]
1a0089a6:	4692      	mov	sl, r2
1a0089a8:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a0089ac:	f7fe bafc 	b.w	1a006fa8 <_vfprintf_r+0x108>
1a0089b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0089b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0089b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0089bc:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0089c0:	f7ff b8a5 	b.w	1a007b0e <_vfprintf_r+0xc6e>
1a0089c4:	461e      	mov	r6, r3
1a0089c6:	f7fe bc15 	b.w	1a0071f4 <_vfprintf_r+0x354>
1a0089ca:	461e      	mov	r6, r3
1a0089cc:	f7fe bc5e 	b.w	1a00728c <_vfprintf_r+0x3ec>
1a0089d0:	461e      	mov	r6, r3
1a0089d2:	f7fe bc48 	b.w	1a007266 <_vfprintf_r+0x3c6>
1a0089d6:	464c      	mov	r4, r9
1a0089d8:	443c      	add	r4, r7
1a0089da:	e64e      	b.n	1a00867a <_vfprintf_r+0x17da>
1a0089dc:	2302      	movs	r3, #2
1a0089de:	9316      	str	r3, [sp, #88]	; 0x58
1a0089e0:	f7ff baca 	b.w	1a007f78 <_vfprintf_r+0x10d8>
1a0089e4:	1a00b3e8 	.word	0x1a00b3e8
1a0089e8:	1a00b384 	.word	0x1a00b384
1a0089ec:	1a00b37c 	.word	0x1a00b37c
1a0089f0:	1a00b380 	.word	0x1a00b380

1a0089f4 <__sbprintf>:
1a0089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0089f8:	460c      	mov	r4, r1
1a0089fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a0089fe:	8989      	ldrh	r1, [r1, #12]
1a008a00:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a008a02:	89e5      	ldrh	r5, [r4, #14]
1a008a04:	9619      	str	r6, [sp, #100]	; 0x64
1a008a06:	f021 0102 	bic.w	r1, r1, #2
1a008a0a:	4606      	mov	r6, r0
1a008a0c:	69e0      	ldr	r0, [r4, #28]
1a008a0e:	f8ad 100c 	strh.w	r1, [sp, #12]
1a008a12:	4617      	mov	r7, r2
1a008a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a008a18:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a008a1a:	f8ad 500e 	strh.w	r5, [sp, #14]
1a008a1e:	4698      	mov	r8, r3
1a008a20:	ad1a      	add	r5, sp, #104	; 0x68
1a008a22:	2300      	movs	r3, #0
1a008a24:	9007      	str	r0, [sp, #28]
1a008a26:	a816      	add	r0, sp, #88	; 0x58
1a008a28:	9209      	str	r2, [sp, #36]	; 0x24
1a008a2a:	9306      	str	r3, [sp, #24]
1a008a2c:	9500      	str	r5, [sp, #0]
1a008a2e:	9504      	str	r5, [sp, #16]
1a008a30:	9102      	str	r1, [sp, #8]
1a008a32:	9105      	str	r1, [sp, #20]
1a008a34:	f7fb fff0 	bl	1a004a18 <__retarget_lock_init_recursive>
1a008a38:	4643      	mov	r3, r8
1a008a3a:	463a      	mov	r2, r7
1a008a3c:	4669      	mov	r1, sp
1a008a3e:	4630      	mov	r0, r6
1a008a40:	f7fe fa2e 	bl	1a006ea0 <_vfprintf_r>
1a008a44:	1e05      	subs	r5, r0, #0
1a008a46:	db07      	blt.n	1a008a58 <__sbprintf+0x64>
1a008a48:	4630      	mov	r0, r6
1a008a4a:	4669      	mov	r1, sp
1a008a4c:	f7fb fdbe 	bl	1a0045cc <_fflush_r>
1a008a50:	2800      	cmp	r0, #0
1a008a52:	bf18      	it	ne
1a008a54:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a008a58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a008a5c:	065b      	lsls	r3, r3, #25
1a008a5e:	d503      	bpl.n	1a008a68 <__sbprintf+0x74>
1a008a60:	89a3      	ldrh	r3, [r4, #12]
1a008a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008a66:	81a3      	strh	r3, [r4, #12]
1a008a68:	9816      	ldr	r0, [sp, #88]	; 0x58
1a008a6a:	f7fb ffd7 	bl	1a004a1c <__retarget_lock_close_recursive>
1a008a6e:	4628      	mov	r0, r5
1a008a70:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a008a78 <__swsetup_r>:
1a008a78:	b538      	push	{r3, r4, r5, lr}
1a008a7a:	4b32      	ldr	r3, [pc, #200]	; (1a008b44 <__swsetup_r+0xcc>)
1a008a7c:	681b      	ldr	r3, [r3, #0]
1a008a7e:	4605      	mov	r5, r0
1a008a80:	460c      	mov	r4, r1
1a008a82:	b10b      	cbz	r3, 1a008a88 <__swsetup_r+0x10>
1a008a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a008a86:	b312      	cbz	r2, 1a008ace <__swsetup_r+0x56>
1a008a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008a8c:	b293      	uxth	r3, r2
1a008a8e:	0718      	lsls	r0, r3, #28
1a008a90:	d525      	bpl.n	1a008ade <__swsetup_r+0x66>
1a008a92:	6920      	ldr	r0, [r4, #16]
1a008a94:	2800      	cmp	r0, #0
1a008a96:	d02d      	beq.n	1a008af4 <__swsetup_r+0x7c>
1a008a98:	f013 0201 	ands.w	r2, r3, #1
1a008a9c:	d007      	beq.n	1a008aae <__swsetup_r+0x36>
1a008a9e:	6963      	ldr	r3, [r4, #20]
1a008aa0:	2200      	movs	r2, #0
1a008aa2:	425b      	negs	r3, r3
1a008aa4:	61a3      	str	r3, [r4, #24]
1a008aa6:	60a2      	str	r2, [r4, #8]
1a008aa8:	b138      	cbz	r0, 1a008aba <__swsetup_r+0x42>
1a008aaa:	2000      	movs	r0, #0
1a008aac:	bd38      	pop	{r3, r4, r5, pc}
1a008aae:	0799      	lsls	r1, r3, #30
1a008ab0:	bf58      	it	pl
1a008ab2:	6962      	ldrpl	r2, [r4, #20]
1a008ab4:	60a2      	str	r2, [r4, #8]
1a008ab6:	2800      	cmp	r0, #0
1a008ab8:	d1f7      	bne.n	1a008aaa <__swsetup_r+0x32>
1a008aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a008abe:	061a      	lsls	r2, r3, #24
1a008ac0:	d5f4      	bpl.n	1a008aac <__swsetup_r+0x34>
1a008ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008ac6:	81a3      	strh	r3, [r4, #12]
1a008ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008acc:	bd38      	pop	{r3, r4, r5, pc}
1a008ace:	4618      	mov	r0, r3
1a008ad0:	f7fb fdd8 	bl	1a004684 <__sinit>
1a008ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008ad8:	b293      	uxth	r3, r2
1a008ada:	0718      	lsls	r0, r3, #28
1a008adc:	d4d9      	bmi.n	1a008a92 <__swsetup_r+0x1a>
1a008ade:	06d9      	lsls	r1, r3, #27
1a008ae0:	d528      	bpl.n	1a008b34 <__swsetup_r+0xbc>
1a008ae2:	0758      	lsls	r0, r3, #29
1a008ae4:	d412      	bmi.n	1a008b0c <__swsetup_r+0x94>
1a008ae6:	6920      	ldr	r0, [r4, #16]
1a008ae8:	f042 0308 	orr.w	r3, r2, #8
1a008aec:	81a3      	strh	r3, [r4, #12]
1a008aee:	b29b      	uxth	r3, r3
1a008af0:	2800      	cmp	r0, #0
1a008af2:	d1d1      	bne.n	1a008a98 <__swsetup_r+0x20>
1a008af4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a008af8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a008afc:	d0cc      	beq.n	1a008a98 <__swsetup_r+0x20>
1a008afe:	4628      	mov	r0, r5
1a008b00:	4621      	mov	r1, r4
1a008b02:	f001 f995 	bl	1a009e30 <__smakebuf_r>
1a008b06:	89a3      	ldrh	r3, [r4, #12]
1a008b08:	6920      	ldr	r0, [r4, #16]
1a008b0a:	e7c5      	b.n	1a008a98 <__swsetup_r+0x20>
1a008b0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a008b0e:	b151      	cbz	r1, 1a008b26 <__swsetup_r+0xae>
1a008b10:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a008b14:	4299      	cmp	r1, r3
1a008b16:	d004      	beq.n	1a008b22 <__swsetup_r+0xaa>
1a008b18:	4628      	mov	r0, r5
1a008b1a:	f7fb fe39 	bl	1a004790 <_free_r>
1a008b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008b22:	2300      	movs	r3, #0
1a008b24:	6323      	str	r3, [r4, #48]	; 0x30
1a008b26:	2300      	movs	r3, #0
1a008b28:	6920      	ldr	r0, [r4, #16]
1a008b2a:	6063      	str	r3, [r4, #4]
1a008b2c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a008b30:	6020      	str	r0, [r4, #0]
1a008b32:	e7d9      	b.n	1a008ae8 <__swsetup_r+0x70>
1a008b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a008b38:	2309      	movs	r3, #9
1a008b3a:	602b      	str	r3, [r5, #0]
1a008b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008b40:	81a2      	strh	r2, [r4, #12]
1a008b42:	bd38      	pop	{r3, r4, r5, pc}
1a008b44:	10000080 	.word	0x10000080

1a008b48 <quorem>:
1a008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008b4c:	6903      	ldr	r3, [r0, #16]
1a008b4e:	690f      	ldr	r7, [r1, #16]
1a008b50:	42bb      	cmp	r3, r7
1a008b52:	b083      	sub	sp, #12
1a008b54:	f2c0 8086 	blt.w	1a008c64 <quorem+0x11c>
1a008b58:	3f01      	subs	r7, #1
1a008b5a:	f101 0614 	add.w	r6, r1, #20
1a008b5e:	f100 0a14 	add.w	sl, r0, #20
1a008b62:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a008b66:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008b6a:	00bc      	lsls	r4, r7, #2
1a008b6c:	3301      	adds	r3, #1
1a008b6e:	9400      	str	r4, [sp, #0]
1a008b70:	eb06 0904 	add.w	r9, r6, r4
1a008b74:	429a      	cmp	r2, r3
1a008b76:	4454      	add	r4, sl
1a008b78:	fbb2 f8f3 	udiv	r8, r2, r3
1a008b7c:	9401      	str	r4, [sp, #4]
1a008b7e:	d33a      	bcc.n	1a008bf6 <quorem+0xae>
1a008b80:	2500      	movs	r5, #0
1a008b82:	462a      	mov	r2, r5
1a008b84:	46b6      	mov	lr, r6
1a008b86:	46d4      	mov	ip, sl
1a008b88:	f85e 4b04 	ldr.w	r4, [lr], #4
1a008b8c:	f8dc 3000 	ldr.w	r3, [ip]
1a008b90:	fa1f fb84 	uxth.w	fp, r4
1a008b94:	fb08 550b 	mla	r5, r8, fp, r5
1a008b98:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a008b9c:	0c24      	lsrs	r4, r4, #16
1a008b9e:	fb08 b404 	mla	r4, r8, r4, fp
1a008ba2:	b2ad      	uxth	r5, r5
1a008ba4:	1b55      	subs	r5, r2, r5
1a008ba6:	b2a2      	uxth	r2, r4
1a008ba8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a008bac:	fa15 f383 	uxtah	r3, r5, r3
1a008bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a008bb4:	b29b      	uxth	r3, r3
1a008bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a008bba:	45f1      	cmp	r9, lr
1a008bbc:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a008bc0:	f84c 3b04 	str.w	r3, [ip], #4
1a008bc4:	ea4f 4222 	mov.w	r2, r2, asr #16
1a008bc8:	d2de      	bcs.n	1a008b88 <quorem+0x40>
1a008bca:	9b00      	ldr	r3, [sp, #0]
1a008bcc:	f85a 3003 	ldr.w	r3, [sl, r3]
1a008bd0:	b98b      	cbnz	r3, 1a008bf6 <quorem+0xae>
1a008bd2:	9a01      	ldr	r2, [sp, #4]
1a008bd4:	1f13      	subs	r3, r2, #4
1a008bd6:	459a      	cmp	sl, r3
1a008bd8:	d20c      	bcs.n	1a008bf4 <quorem+0xac>
1a008bda:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a008bde:	b94b      	cbnz	r3, 1a008bf4 <quorem+0xac>
1a008be0:	f1a2 0308 	sub.w	r3, r2, #8
1a008be4:	e002      	b.n	1a008bec <quorem+0xa4>
1a008be6:	681a      	ldr	r2, [r3, #0]
1a008be8:	3b04      	subs	r3, #4
1a008bea:	b91a      	cbnz	r2, 1a008bf4 <quorem+0xac>
1a008bec:	459a      	cmp	sl, r3
1a008bee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008bf2:	d3f8      	bcc.n	1a008be6 <quorem+0x9e>
1a008bf4:	6107      	str	r7, [r0, #16]
1a008bf6:	4604      	mov	r4, r0
1a008bf8:	f001 fc34 	bl	1a00a464 <__mcmp>
1a008bfc:	2800      	cmp	r0, #0
1a008bfe:	db2d      	blt.n	1a008c5c <quorem+0x114>
1a008c00:	f108 0801 	add.w	r8, r8, #1
1a008c04:	4650      	mov	r0, sl
1a008c06:	2300      	movs	r3, #0
1a008c08:	f856 1b04 	ldr.w	r1, [r6], #4
1a008c0c:	6805      	ldr	r5, [r0, #0]
1a008c0e:	b28a      	uxth	r2, r1
1a008c10:	1a9a      	subs	r2, r3, r2
1a008c12:	0c0b      	lsrs	r3, r1, #16
1a008c14:	fa12 f285 	uxtah	r2, r2, r5
1a008c18:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a008c1c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a008c20:	b292      	uxth	r2, r2
1a008c22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a008c26:	45b1      	cmp	r9, r6
1a008c28:	f840 2b04 	str.w	r2, [r0], #4
1a008c2c:	ea4f 4323 	mov.w	r3, r3, asr #16
1a008c30:	d2ea      	bcs.n	1a008c08 <quorem+0xc0>
1a008c32:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008c36:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a008c3a:	b97a      	cbnz	r2, 1a008c5c <quorem+0x114>
1a008c3c:	1f1a      	subs	r2, r3, #4
1a008c3e:	4592      	cmp	sl, r2
1a008c40:	d20b      	bcs.n	1a008c5a <quorem+0x112>
1a008c42:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a008c46:	b942      	cbnz	r2, 1a008c5a <quorem+0x112>
1a008c48:	3b08      	subs	r3, #8
1a008c4a:	e002      	b.n	1a008c52 <quorem+0x10a>
1a008c4c:	681a      	ldr	r2, [r3, #0]
1a008c4e:	3b04      	subs	r3, #4
1a008c50:	b91a      	cbnz	r2, 1a008c5a <quorem+0x112>
1a008c52:	459a      	cmp	sl, r3
1a008c54:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008c58:	d3f8      	bcc.n	1a008c4c <quorem+0x104>
1a008c5a:	6127      	str	r7, [r4, #16]
1a008c5c:	4640      	mov	r0, r8
1a008c5e:	b003      	add	sp, #12
1a008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008c64:	2000      	movs	r0, #0
1a008c66:	b003      	add	sp, #12
1a008c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008c6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a008c70 <_dtoa_r>:
1a008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008c74:	ec57 6b10 	vmov	r6, r7, d0
1a008c78:	b097      	sub	sp, #92	; 0x5c
1a008c7a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a008c7c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a008c7e:	9102      	str	r1, [sp, #8]
1a008c80:	4682      	mov	sl, r0
1a008c82:	920a      	str	r2, [sp, #40]	; 0x28
1a008c84:	9307      	str	r3, [sp, #28]
1a008c86:	e9cd 6700 	strd	r6, r7, [sp]
1a008c8a:	b155      	cbz	r5, 1a008ca2 <_dtoa_r+0x32>
1a008c8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a008c8e:	606a      	str	r2, [r5, #4]
1a008c90:	2301      	movs	r3, #1
1a008c92:	4093      	lsls	r3, r2
1a008c94:	60ab      	str	r3, [r5, #8]
1a008c96:	4629      	mov	r1, r5
1a008c98:	f001 f9f8 	bl	1a00a08c <_Bfree>
1a008c9c:	2300      	movs	r3, #0
1a008c9e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a008ca2:	1e3e      	subs	r6, r7, #0
1a008ca4:	bfb4      	ite	lt
1a008ca6:	2301      	movlt	r3, #1
1a008ca8:	2300      	movge	r3, #0
1a008caa:	6023      	str	r3, [r4, #0]
1a008cac:	4b76      	ldr	r3, [pc, #472]	; (1a008e88 <_dtoa_r+0x218>)
1a008cae:	bfbc      	itt	lt
1a008cb0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a008cb4:	9601      	strlt	r6, [sp, #4]
1a008cb6:	43b3      	bics	r3, r6
1a008cb8:	f000 80ae 	beq.w	1a008e18 <_dtoa_r+0x1a8>
1a008cbc:	ed9d 7b00 	vldr	d7, [sp]
1a008cc0:	2200      	movs	r2, #0
1a008cc2:	2300      	movs	r3, #0
1a008cc4:	ec51 0b17 	vmov	r0, r1, d7
1a008cc8:	ed8d 7b04 	vstr	d7, [sp, #16]
1a008ccc:	f7fb f97e 	bl	1a003fcc <__aeabi_dcmpeq>
1a008cd0:	4605      	mov	r5, r0
1a008cd2:	b178      	cbz	r0, 1a008cf4 <_dtoa_r+0x84>
1a008cd4:	9a07      	ldr	r2, [sp, #28]
1a008cd6:	2301      	movs	r3, #1
1a008cd8:	6013      	str	r3, [r2, #0]
1a008cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008cdc:	2b00      	cmp	r3, #0
1a008cde:	f000 8313 	beq.w	1a009308 <_dtoa_r+0x698>
1a008ce2:	4b6a      	ldr	r3, [pc, #424]	; (1a008e8c <_dtoa_r+0x21c>)
1a008ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a008ce6:	6013      	str	r3, [r2, #0]
1a008ce8:	3b01      	subs	r3, #1
1a008cea:	9303      	str	r3, [sp, #12]
1a008cec:	9803      	ldr	r0, [sp, #12]
1a008cee:	b017      	add	sp, #92	; 0x5c
1a008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008cf4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a008cf8:	aa14      	add	r2, sp, #80	; 0x50
1a008cfa:	a915      	add	r1, sp, #84	; 0x54
1a008cfc:	ec48 7b10 	vmov	d0, r7, r8
1a008d00:	4650      	mov	r0, sl
1a008d02:	f001 fc47 	bl	1a00a594 <__d2b>
1a008d06:	0d34      	lsrs	r4, r6, #20
1a008d08:	4683      	mov	fp, r0
1a008d0a:	f040 809b 	bne.w	1a008e44 <_dtoa_r+0x1d4>
1a008d0e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a008d12:	442c      	add	r4, r5
1a008d14:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a008d18:	2b20      	cmp	r3, #32
1a008d1a:	f340 83bb 	ble.w	1a009494 <_dtoa_r+0x824>
1a008d1e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a008d22:	409e      	lsls	r6, r3
1a008d24:	9b00      	ldr	r3, [sp, #0]
1a008d26:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a008d2a:	fa23 f000 	lsr.w	r0, r3, r0
1a008d2e:	4330      	orrs	r0, r6
1a008d30:	f7fa fe6a 	bl	1a003a08 <__aeabi_ui2d>
1a008d34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a008d38:	2101      	movs	r1, #1
1a008d3a:	4602      	mov	r2, r0
1a008d3c:	3c01      	subs	r4, #1
1a008d3e:	910e      	str	r1, [sp, #56]	; 0x38
1a008d40:	4610      	mov	r0, r2
1a008d42:	4619      	mov	r1, r3
1a008d44:	2200      	movs	r2, #0
1a008d46:	4b52      	ldr	r3, [pc, #328]	; (1a008e90 <_dtoa_r+0x220>)
1a008d48:	f7fa fd20 	bl	1a00378c <__aeabi_dsub>
1a008d4c:	a348      	add	r3, pc, #288	; (adr r3, 1a008e70 <_dtoa_r+0x200>)
1a008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d52:	f7fa fed3 	bl	1a003afc <__aeabi_dmul>
1a008d56:	a348      	add	r3, pc, #288	; (adr r3, 1a008e78 <_dtoa_r+0x208>)
1a008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d5c:	f7fa fd18 	bl	1a003790 <__adddf3>
1a008d60:	4606      	mov	r6, r0
1a008d62:	4620      	mov	r0, r4
1a008d64:	460f      	mov	r7, r1
1a008d66:	f7fa fe5f 	bl	1a003a28 <__aeabi_i2d>
1a008d6a:	a345      	add	r3, pc, #276	; (adr r3, 1a008e80 <_dtoa_r+0x210>)
1a008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d70:	f7fa fec4 	bl	1a003afc <__aeabi_dmul>
1a008d74:	4602      	mov	r2, r0
1a008d76:	460b      	mov	r3, r1
1a008d78:	4630      	mov	r0, r6
1a008d7a:	4639      	mov	r1, r7
1a008d7c:	f7fa fd08 	bl	1a003790 <__adddf3>
1a008d80:	4606      	mov	r6, r0
1a008d82:	460f      	mov	r7, r1
1a008d84:	f7fb f96a 	bl	1a00405c <__aeabi_d2iz>
1a008d88:	2200      	movs	r2, #0
1a008d8a:	4681      	mov	r9, r0
1a008d8c:	2300      	movs	r3, #0
1a008d8e:	4630      	mov	r0, r6
1a008d90:	4639      	mov	r1, r7
1a008d92:	f7fb f925 	bl	1a003fe0 <__aeabi_dcmplt>
1a008d96:	2800      	cmp	r0, #0
1a008d98:	f040 82a9 	bne.w	1a0092ee <_dtoa_r+0x67e>
1a008d9c:	1b2c      	subs	r4, r5, r4
1a008d9e:	f1b9 0f16 	cmp.w	r9, #22
1a008da2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a008da6:	f200 8296 	bhi.w	1a0092d6 <_dtoa_r+0x666>
1a008daa:	4b3a      	ldr	r3, [pc, #232]	; (1a008e94 <_dtoa_r+0x224>)
1a008dac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a008db8:	f7fb f912 	bl	1a003fe0 <__aeabi_dcmplt>
1a008dbc:	2800      	cmp	r0, #0
1a008dbe:	d06f      	beq.n	1a008ea0 <_dtoa_r+0x230>
1a008dc0:	2300      	movs	r3, #0
1a008dc2:	f1b8 0f00 	cmp.w	r8, #0
1a008dc6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a008dca:	930d      	str	r3, [sp, #52]	; 0x34
1a008dcc:	f2c0 8289 	blt.w	1a0092e2 <_dtoa_r+0x672>
1a008dd0:	2300      	movs	r3, #0
1a008dd2:	9308      	str	r3, [sp, #32]
1a008dd4:	f1b9 0f00 	cmp.w	r9, #0
1a008dd8:	da68      	bge.n	1a008eac <_dtoa_r+0x23c>
1a008dda:	9b08      	ldr	r3, [sp, #32]
1a008ddc:	f8cd 9018 	str.w	r9, [sp, #24]
1a008de0:	eba3 0309 	sub.w	r3, r3, r9
1a008de4:	9308      	str	r3, [sp, #32]
1a008de6:	f1c9 0300 	rsb	r3, r9, #0
1a008dea:	930c      	str	r3, [sp, #48]	; 0x30
1a008dec:	9b02      	ldr	r3, [sp, #8]
1a008dee:	2b09      	cmp	r3, #9
1a008df0:	f04f 0900 	mov.w	r9, #0
1a008df4:	d862      	bhi.n	1a008ebc <_dtoa_r+0x24c>
1a008df6:	2b05      	cmp	r3, #5
1a008df8:	f340 834a 	ble.w	1a009490 <_dtoa_r+0x820>
1a008dfc:	3b04      	subs	r3, #4
1a008dfe:	9302      	str	r3, [sp, #8]
1a008e00:	2400      	movs	r4, #0
1a008e02:	9b02      	ldr	r3, [sp, #8]
1a008e04:	3b02      	subs	r3, #2
1a008e06:	2b03      	cmp	r3, #3
1a008e08:	f200 8641 	bhi.w	1a009a8e <_dtoa_r+0xe1e>
1a008e0c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a008e10:	04630466 	.word	0x04630466
1a008e14:	0456043b 	.word	0x0456043b
1a008e18:	9a07      	ldr	r2, [sp, #28]
1a008e1a:	f242 730f 	movw	r3, #9999	; 0x270f
1a008e1e:	6013      	str	r3, [r2, #0]
1a008e20:	9b00      	ldr	r3, [sp, #0]
1a008e22:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a008e26:	4333      	orrs	r3, r6
1a008e28:	d118      	bne.n	1a008e5c <_dtoa_r+0x1ec>
1a008e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008e2c:	2b00      	cmp	r3, #0
1a008e2e:	f000 8625 	beq.w	1a009a7c <_dtoa_r+0xe0c>
1a008e32:	4b19      	ldr	r3, [pc, #100]	; (1a008e98 <_dtoa_r+0x228>)
1a008e34:	9303      	str	r3, [sp, #12]
1a008e36:	3308      	adds	r3, #8
1a008e38:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a008e3a:	9803      	ldr	r0, [sp, #12]
1a008e3c:	6013      	str	r3, [r2, #0]
1a008e3e:	b017      	add	sp, #92	; 0x5c
1a008e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008e44:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a008e48:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a008e4c:	950e      	str	r5, [sp, #56]	; 0x38
1a008e4e:	463a      	mov	r2, r7
1a008e50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a008e54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a008e58:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a008e5a:	e771      	b.n	1a008d40 <_dtoa_r+0xd0>
1a008e5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008e5e:	2b00      	cmp	r3, #0
1a008e60:	f040 8400 	bne.w	1a009664 <_dtoa_r+0x9f4>
1a008e64:	4b0d      	ldr	r3, [pc, #52]	; (1a008e9c <_dtoa_r+0x22c>)
1a008e66:	9303      	str	r3, [sp, #12]
1a008e68:	e740      	b.n	1a008cec <_dtoa_r+0x7c>
1a008e6a:	bf00      	nop
1a008e6c:	f3af 8000 	nop.w
1a008e70:	636f4361 	.word	0x636f4361
1a008e74:	3fd287a7 	.word	0x3fd287a7
1a008e78:	8b60c8b3 	.word	0x8b60c8b3
1a008e7c:	3fc68a28 	.word	0x3fc68a28
1a008e80:	509f79fb 	.word	0x509f79fb
1a008e84:	3fd34413 	.word	0x3fd34413
1a008e88:	7ff00000 	.word	0x7ff00000
1a008e8c:	1a00b3b5 	.word	0x1a00b3b5
1a008e90:	3ff80000 	.word	0x3ff80000
1a008e94:	1a00b430 	.word	0x1a00b430
1a008e98:	1a00b3fc 	.word	0x1a00b3fc
1a008e9c:	1a00b3f8 	.word	0x1a00b3f8
1a008ea0:	f1b8 0f00 	cmp.w	r8, #0
1a008ea4:	f2c0 84b6 	blt.w	1a009814 <_dtoa_r+0xba4>
1a008ea8:	900d      	str	r0, [sp, #52]	; 0x34
1a008eaa:	9008      	str	r0, [sp, #32]
1a008eac:	2300      	movs	r3, #0
1a008eae:	930c      	str	r3, [sp, #48]	; 0x30
1a008eb0:	9b02      	ldr	r3, [sp, #8]
1a008eb2:	f8cd 9018 	str.w	r9, [sp, #24]
1a008eb6:	2b09      	cmp	r3, #9
1a008eb8:	44c8      	add	r8, r9
1a008eba:	d99c      	bls.n	1a008df6 <_dtoa_r+0x186>
1a008ebc:	2300      	movs	r3, #0
1a008ebe:	2401      	movs	r4, #1
1a008ec0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a008ec4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a008ec8:	9302      	str	r3, [sp, #8]
1a008eca:	9509      	str	r5, [sp, #36]	; 0x24
1a008ecc:	2100      	movs	r1, #0
1a008ece:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a008ed2:	950f      	str	r5, [sp, #60]	; 0x3c
1a008ed4:	4650      	mov	r0, sl
1a008ed6:	f001 f8b3 	bl	1a00a040 <_Balloc>
1a008eda:	2d0e      	cmp	r5, #14
1a008edc:	9003      	str	r0, [sp, #12]
1a008ede:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a008ee2:	f200 810a 	bhi.w	1a0090fa <_dtoa_r+0x48a>
1a008ee6:	2c00      	cmp	r4, #0
1a008ee8:	f000 8107 	beq.w	1a0090fa <_dtoa_r+0x48a>
1a008eec:	9906      	ldr	r1, [sp, #24]
1a008eee:	2900      	cmp	r1, #0
1a008ef0:	f340 8466 	ble.w	1a0097c0 <_dtoa_r+0xb50>
1a008ef4:	4bb1      	ldr	r3, [pc, #708]	; (1a0091bc <_dtoa_r+0x54c>)
1a008ef6:	f001 020f 	and.w	r2, r1, #15
1a008efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a008efe:	ed93 7b00 	vldr	d7, [r3]
1a008f02:	110c      	asrs	r4, r1, #4
1a008f04:	06e3      	lsls	r3, r4, #27
1a008f06:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a008f0a:	f140 8406 	bpl.w	1a00971a <_dtoa_r+0xaaa>
1a008f0e:	4bac      	ldr	r3, [pc, #688]	; (1a0091c0 <_dtoa_r+0x550>)
1a008f10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a008f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a008f18:	f7fa ff1a 	bl	1a003d50 <__aeabi_ddiv>
1a008f1c:	e9cd 0100 	strd	r0, r1, [sp]
1a008f20:	f004 040f 	and.w	r4, r4, #15
1a008f24:	2603      	movs	r6, #3
1a008f26:	b17c      	cbz	r4, 1a008f48 <_dtoa_r+0x2d8>
1a008f28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008f2c:	4da4      	ldr	r5, [pc, #656]	; (1a0091c0 <_dtoa_r+0x550>)
1a008f2e:	07e7      	lsls	r7, r4, #31
1a008f30:	d504      	bpl.n	1a008f3c <_dtoa_r+0x2cc>
1a008f32:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008f36:	f7fa fde1 	bl	1a003afc <__aeabi_dmul>
1a008f3a:	3601      	adds	r6, #1
1a008f3c:	1064      	asrs	r4, r4, #1
1a008f3e:	f105 0508 	add.w	r5, r5, #8
1a008f42:	d1f4      	bne.n	1a008f2e <_dtoa_r+0x2be>
1a008f44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a008f48:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008f4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a008f50:	f7fa fefe 	bl	1a003d50 <__aeabi_ddiv>
1a008f54:	e9cd 0100 	strd	r0, r1, [sp]
1a008f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a008f5a:	b153      	cbz	r3, 1a008f72 <_dtoa_r+0x302>
1a008f5c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a008f60:	2200      	movs	r2, #0
1a008f62:	4b98      	ldr	r3, [pc, #608]	; (1a0091c4 <_dtoa_r+0x554>)
1a008f64:	4620      	mov	r0, r4
1a008f66:	4629      	mov	r1, r5
1a008f68:	f7fb f83a 	bl	1a003fe0 <__aeabi_dcmplt>
1a008f6c:	2800      	cmp	r0, #0
1a008f6e:	f040 8521 	bne.w	1a0099b4 <_dtoa_r+0xd44>
1a008f72:	4630      	mov	r0, r6
1a008f74:	f7fa fd58 	bl	1a003a28 <__aeabi_i2d>
1a008f78:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008f7c:	f7fa fdbe 	bl	1a003afc <__aeabi_dmul>
1a008f80:	4b91      	ldr	r3, [pc, #580]	; (1a0091c8 <_dtoa_r+0x558>)
1a008f82:	2200      	movs	r2, #0
1a008f84:	f7fa fc04 	bl	1a003790 <__adddf3>
1a008f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008f8a:	4604      	mov	r4, r0
1a008f8c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a008f90:	2b00      	cmp	r3, #0
1a008f92:	f000 83f9 	beq.w	1a009788 <_dtoa_r+0xb18>
1a008f96:	9b06      	ldr	r3, [sp, #24]
1a008f98:	9312      	str	r3, [sp, #72]	; 0x48
1a008f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008f9c:	9310      	str	r3, [sp, #64]	; 0x40
1a008f9e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a008fa2:	4639      	mov	r1, r7
1a008fa4:	4630      	mov	r0, r6
1a008fa6:	f7fb f859 	bl	1a00405c <__aeabi_d2iz>
1a008faa:	9000      	str	r0, [sp, #0]
1a008fac:	f7fa fd3c 	bl	1a003a28 <__aeabi_i2d>
1a008fb0:	4602      	mov	r2, r0
1a008fb2:	460b      	mov	r3, r1
1a008fb4:	4630      	mov	r0, r6
1a008fb6:	4639      	mov	r1, r7
1a008fb8:	f7fa fbe8 	bl	1a00378c <__aeabi_dsub>
1a008fbc:	4b7f      	ldr	r3, [pc, #508]	; (1a0091bc <_dtoa_r+0x54c>)
1a008fbe:	9a00      	ldr	r2, [sp, #0]
1a008fc0:	460f      	mov	r7, r1
1a008fc2:	9910      	ldr	r1, [sp, #64]	; 0x40
1a008fc4:	4606      	mov	r6, r0
1a008fc6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a008fca:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a008fcc:	9903      	ldr	r1, [sp, #12]
1a008fce:	3230      	adds	r2, #48	; 0x30
1a008fd0:	e9cd 4500 	strd	r4, r5, [sp]
1a008fd4:	b2d5      	uxtb	r5, r2
1a008fd6:	1c4c      	adds	r4, r1, #1
1a008fd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a008fdc:	2800      	cmp	r0, #0
1a008fde:	f000 848d 	beq.w	1a0098fc <_dtoa_r+0xc8c>
1a008fe2:	2000      	movs	r0, #0
1a008fe4:	4979      	ldr	r1, [pc, #484]	; (1a0091cc <_dtoa_r+0x55c>)
1a008fe6:	f7fa feb3 	bl	1a003d50 <__aeabi_ddiv>
1a008fea:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008fee:	f7fa fbcd 	bl	1a00378c <__aeabi_dsub>
1a008ff2:	9b03      	ldr	r3, [sp, #12]
1a008ff4:	4632      	mov	r2, r6
1a008ff6:	701d      	strb	r5, [r3, #0]
1a008ff8:	463b      	mov	r3, r7
1a008ffa:	e9cd 0100 	strd	r0, r1, [sp]
1a008ffe:	f7fb f80d 	bl	1a00401c <__aeabi_dcmpgt>
1a009002:	2800      	cmp	r0, #0
1a009004:	f040 84ca 	bne.w	1a00999c <_dtoa_r+0xd2c>
1a009008:	4632      	mov	r2, r6
1a00900a:	463b      	mov	r3, r7
1a00900c:	2000      	movs	r0, #0
1a00900e:	496d      	ldr	r1, [pc, #436]	; (1a0091c4 <_dtoa_r+0x554>)
1a009010:	f7fa fbbc 	bl	1a00378c <__aeabi_dsub>
1a009014:	4602      	mov	r2, r0
1a009016:	460b      	mov	r3, r1
1a009018:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00901c:	f7fa fffe 	bl	1a00401c <__aeabi_dcmpgt>
1a009020:	2800      	cmp	r0, #0
1a009022:	f040 8526 	bne.w	1a009a72 <_dtoa_r+0xe02>
1a009026:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a009028:	2b01      	cmp	r3, #1
1a00902a:	d062      	beq.n	1a0090f2 <_dtoa_r+0x482>
1a00902c:	9a03      	ldr	r2, [sp, #12]
1a00902e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a009032:	4413      	add	r3, r2
1a009034:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a009038:	e9dd 8900 	ldrd	r8, r9, [sp]
1a00903c:	f8cd b000 	str.w	fp, [sp]
1a009040:	46d3      	mov	fp, sl
1a009042:	469a      	mov	sl, r3
1a009044:	e00c      	b.n	1a009060 <_dtoa_r+0x3f0>
1a009046:	2000      	movs	r0, #0
1a009048:	495e      	ldr	r1, [pc, #376]	; (1a0091c4 <_dtoa_r+0x554>)
1a00904a:	f7fa fb9f 	bl	1a00378c <__aeabi_dsub>
1a00904e:	4642      	mov	r2, r8
1a009050:	464b      	mov	r3, r9
1a009052:	f7fa ffc5 	bl	1a003fe0 <__aeabi_dcmplt>
1a009056:	2800      	cmp	r0, #0
1a009058:	f040 84eb 	bne.w	1a009a32 <_dtoa_r+0xdc2>
1a00905c:	45a2      	cmp	sl, r4
1a00905e:	d041      	beq.n	1a0090e4 <_dtoa_r+0x474>
1a009060:	4640      	mov	r0, r8
1a009062:	4649      	mov	r1, r9
1a009064:	2200      	movs	r2, #0
1a009066:	4b5a      	ldr	r3, [pc, #360]	; (1a0091d0 <_dtoa_r+0x560>)
1a009068:	f7fa fd48 	bl	1a003afc <__aeabi_dmul>
1a00906c:	2200      	movs	r2, #0
1a00906e:	4b58      	ldr	r3, [pc, #352]	; (1a0091d0 <_dtoa_r+0x560>)
1a009070:	4680      	mov	r8, r0
1a009072:	4689      	mov	r9, r1
1a009074:	4630      	mov	r0, r6
1a009076:	4639      	mov	r1, r7
1a009078:	f7fa fd40 	bl	1a003afc <__aeabi_dmul>
1a00907c:	460f      	mov	r7, r1
1a00907e:	4606      	mov	r6, r0
1a009080:	f7fa ffec 	bl	1a00405c <__aeabi_d2iz>
1a009084:	4605      	mov	r5, r0
1a009086:	f7fa fccf 	bl	1a003a28 <__aeabi_i2d>
1a00908a:	4602      	mov	r2, r0
1a00908c:	460b      	mov	r3, r1
1a00908e:	4630      	mov	r0, r6
1a009090:	4639      	mov	r1, r7
1a009092:	f7fa fb7b 	bl	1a00378c <__aeabi_dsub>
1a009096:	3530      	adds	r5, #48	; 0x30
1a009098:	b2ed      	uxtb	r5, r5
1a00909a:	4642      	mov	r2, r8
1a00909c:	464b      	mov	r3, r9
1a00909e:	f804 5b01 	strb.w	r5, [r4], #1
1a0090a2:	4606      	mov	r6, r0
1a0090a4:	460f      	mov	r7, r1
1a0090a6:	f7fa ff9b 	bl	1a003fe0 <__aeabi_dcmplt>
1a0090aa:	4632      	mov	r2, r6
1a0090ac:	463b      	mov	r3, r7
1a0090ae:	2800      	cmp	r0, #0
1a0090b0:	d0c9      	beq.n	1a009046 <_dtoa_r+0x3d6>
1a0090b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0090b4:	46da      	mov	sl, fp
1a0090b6:	3301      	adds	r3, #1
1a0090b8:	f8dd b000 	ldr.w	fp, [sp]
1a0090bc:	9306      	str	r3, [sp, #24]
1a0090be:	4659      	mov	r1, fp
1a0090c0:	4650      	mov	r0, sl
1a0090c2:	f000 ffe3 	bl	1a00a08c <_Bfree>
1a0090c6:	2300      	movs	r3, #0
1a0090c8:	7023      	strb	r3, [r4, #0]
1a0090ca:	9b07      	ldr	r3, [sp, #28]
1a0090cc:	461a      	mov	r2, r3
1a0090ce:	9b06      	ldr	r3, [sp, #24]
1a0090d0:	6013      	str	r3, [r2, #0]
1a0090d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0090d4:	2b00      	cmp	r3, #0
1a0090d6:	f43f ae09 	beq.w	1a008cec <_dtoa_r+0x7c>
1a0090da:	9803      	ldr	r0, [sp, #12]
1a0090dc:	601c      	str	r4, [r3, #0]
1a0090de:	b017      	add	sp, #92	; 0x5c
1a0090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0090e4:	46da      	mov	sl, fp
1a0090e6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a0090ea:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a0090ee:	f8dd b000 	ldr.w	fp, [sp]
1a0090f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a0090f6:	e9cd 3400 	strd	r3, r4, [sp]
1a0090fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0090fc:	2b00      	cmp	r3, #0
1a0090fe:	f2c0 80c9 	blt.w	1a009294 <_dtoa_r+0x624>
1a009102:	9a06      	ldr	r2, [sp, #24]
1a009104:	2a0e      	cmp	r2, #14
1a009106:	f300 80c5 	bgt.w	1a009294 <_dtoa_r+0x624>
1a00910a:	4b2c      	ldr	r3, [pc, #176]	; (1a0091bc <_dtoa_r+0x54c>)
1a00910c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a009110:	e9d3 8900 	ldrd	r8, r9, [r3]
1a009114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009116:	2b00      	cmp	r3, #0
1a009118:	da17      	bge.n	1a00914a <_dtoa_r+0x4da>
1a00911a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a00911c:	2f00      	cmp	r7, #0
1a00911e:	dc14      	bgt.n	1a00914a <_dtoa_r+0x4da>
1a009120:	f040 834b 	bne.w	1a0097ba <_dtoa_r+0xb4a>
1a009124:	2200      	movs	r2, #0
1a009126:	4b2b      	ldr	r3, [pc, #172]	; (1a0091d4 <_dtoa_r+0x564>)
1a009128:	4640      	mov	r0, r8
1a00912a:	4649      	mov	r1, r9
1a00912c:	f7fa fce6 	bl	1a003afc <__aeabi_dmul>
1a009130:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009134:	f7fa ff68 	bl	1a004008 <__aeabi_dcmpge>
1a009138:	2800      	cmp	r0, #0
1a00913a:	f000 83be 	beq.w	1a0098ba <_dtoa_r+0xc4a>
1a00913e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a009140:	463d      	mov	r5, r7
1a009142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009144:	9c03      	ldr	r4, [sp, #12]
1a009146:	43db      	mvns	r3, r3
1a009148:	e260      	b.n	1a00960c <_dtoa_r+0x99c>
1a00914a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00914e:	4642      	mov	r2, r8
1a009150:	464b      	mov	r3, r9
1a009152:	4620      	mov	r0, r4
1a009154:	4629      	mov	r1, r5
1a009156:	f7fa fdfb 	bl	1a003d50 <__aeabi_ddiv>
1a00915a:	f7fa ff7f 	bl	1a00405c <__aeabi_d2iz>
1a00915e:	9000      	str	r0, [sp, #0]
1a009160:	f7fa fc62 	bl	1a003a28 <__aeabi_i2d>
1a009164:	4642      	mov	r2, r8
1a009166:	464b      	mov	r3, r9
1a009168:	f7fa fcc8 	bl	1a003afc <__aeabi_dmul>
1a00916c:	4602      	mov	r2, r0
1a00916e:	460b      	mov	r3, r1
1a009170:	4620      	mov	r0, r4
1a009172:	4629      	mov	r1, r5
1a009174:	f7fa fb0a 	bl	1a00378c <__aeabi_dsub>
1a009178:	9b00      	ldr	r3, [sp, #0]
1a00917a:	9c03      	ldr	r4, [sp, #12]
1a00917c:	9a06      	ldr	r2, [sp, #24]
1a00917e:	3330      	adds	r3, #48	; 0x30
1a009180:	f804 3b01 	strb.w	r3, [r4], #1
1a009184:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009186:	3201      	adds	r2, #1
1a009188:	2b01      	cmp	r3, #1
1a00918a:	4606      	mov	r6, r0
1a00918c:	460f      	mov	r7, r1
1a00918e:	9206      	str	r2, [sp, #24]
1a009190:	d054      	beq.n	1a00923c <_dtoa_r+0x5cc>
1a009192:	2200      	movs	r2, #0
1a009194:	4b0e      	ldr	r3, [pc, #56]	; (1a0091d0 <_dtoa_r+0x560>)
1a009196:	f7fa fcb1 	bl	1a003afc <__aeabi_dmul>
1a00919a:	2200      	movs	r2, #0
1a00919c:	2300      	movs	r3, #0
1a00919e:	4606      	mov	r6, r0
1a0091a0:	460f      	mov	r7, r1
1a0091a2:	f7fa ff13 	bl	1a003fcc <__aeabi_dcmpeq>
1a0091a6:	2800      	cmp	r0, #0
1a0091a8:	d189      	bne.n	1a0090be <_dtoa_r+0x44e>
1a0091aa:	f8cd b000 	str.w	fp, [sp]
1a0091ae:	2501      	movs	r5, #1
1a0091b0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a0091b4:	f8cd a008 	str.w	sl, [sp, #8]
1a0091b8:	e019      	b.n	1a0091ee <_dtoa_r+0x57e>
1a0091ba:	bf00      	nop
1a0091bc:	1a00b430 	.word	0x1a00b430
1a0091c0:	1a00b408 	.word	0x1a00b408
1a0091c4:	3ff00000 	.word	0x3ff00000
1a0091c8:	401c0000 	.word	0x401c0000
1a0091cc:	3fe00000 	.word	0x3fe00000
1a0091d0:	40240000 	.word	0x40240000
1a0091d4:	40140000 	.word	0x40140000
1a0091d8:	f7fa fc90 	bl	1a003afc <__aeabi_dmul>
1a0091dc:	2200      	movs	r2, #0
1a0091de:	2300      	movs	r3, #0
1a0091e0:	4606      	mov	r6, r0
1a0091e2:	460f      	mov	r7, r1
1a0091e4:	f7fa fef2 	bl	1a003fcc <__aeabi_dcmpeq>
1a0091e8:	2800      	cmp	r0, #0
1a0091ea:	f040 835c 	bne.w	1a0098a6 <_dtoa_r+0xc36>
1a0091ee:	4642      	mov	r2, r8
1a0091f0:	464b      	mov	r3, r9
1a0091f2:	4630      	mov	r0, r6
1a0091f4:	4639      	mov	r1, r7
1a0091f6:	f7fa fdab 	bl	1a003d50 <__aeabi_ddiv>
1a0091fa:	f7fa ff2f 	bl	1a00405c <__aeabi_d2iz>
1a0091fe:	4682      	mov	sl, r0
1a009200:	f7fa fc12 	bl	1a003a28 <__aeabi_i2d>
1a009204:	4642      	mov	r2, r8
1a009206:	464b      	mov	r3, r9
1a009208:	f7fa fc78 	bl	1a003afc <__aeabi_dmul>
1a00920c:	4602      	mov	r2, r0
1a00920e:	460b      	mov	r3, r1
1a009210:	4630      	mov	r0, r6
1a009212:	4639      	mov	r1, r7
1a009214:	f7fa faba 	bl	1a00378c <__aeabi_dsub>
1a009218:	3501      	adds	r5, #1
1a00921a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a00921e:	45ab      	cmp	fp, r5
1a009220:	4606      	mov	r6, r0
1a009222:	460f      	mov	r7, r1
1a009224:	f04f 0200 	mov.w	r2, #0
1a009228:	4ba7      	ldr	r3, [pc, #668]	; (1a0094c8 <_dtoa_r+0x858>)
1a00922a:	f804 cb01 	strb.w	ip, [r4], #1
1a00922e:	d1d3      	bne.n	1a0091d8 <_dtoa_r+0x568>
1a009230:	f8dd b000 	ldr.w	fp, [sp]
1a009234:	f8cd a000 	str.w	sl, [sp]
1a009238:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00923c:	4632      	mov	r2, r6
1a00923e:	463b      	mov	r3, r7
1a009240:	4630      	mov	r0, r6
1a009242:	4639      	mov	r1, r7
1a009244:	f7fa faa4 	bl	1a003790 <__adddf3>
1a009248:	4642      	mov	r2, r8
1a00924a:	464b      	mov	r3, r9
1a00924c:	4606      	mov	r6, r0
1a00924e:	460f      	mov	r7, r1
1a009250:	f7fa fee4 	bl	1a00401c <__aeabi_dcmpgt>
1a009254:	b960      	cbnz	r0, 1a009270 <_dtoa_r+0x600>
1a009256:	4642      	mov	r2, r8
1a009258:	464b      	mov	r3, r9
1a00925a:	4630      	mov	r0, r6
1a00925c:	4639      	mov	r1, r7
1a00925e:	f7fa feb5 	bl	1a003fcc <__aeabi_dcmpeq>
1a009262:	2800      	cmp	r0, #0
1a009264:	f43f af2b 	beq.w	1a0090be <_dtoa_r+0x44e>
1a009268:	9b00      	ldr	r3, [sp, #0]
1a00926a:	07db      	lsls	r3, r3, #31
1a00926c:	f57f af27 	bpl.w	1a0090be <_dtoa_r+0x44e>
1a009270:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a009274:	9a03      	ldr	r2, [sp, #12]
1a009276:	1e63      	subs	r3, r4, #1
1a009278:	e004      	b.n	1a009284 <_dtoa_r+0x614>
1a00927a:	429a      	cmp	r2, r3
1a00927c:	f000 83c0 	beq.w	1a009a00 <_dtoa_r+0xd90>
1a009280:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a009284:	2d39      	cmp	r5, #57	; 0x39
1a009286:	f103 0401 	add.w	r4, r3, #1
1a00928a:	d0f6      	beq.n	1a00927a <_dtoa_r+0x60a>
1a00928c:	1c6a      	adds	r2, r5, #1
1a00928e:	b2d2      	uxtb	r2, r2
1a009290:	701a      	strb	r2, [r3, #0]
1a009292:	e714      	b.n	1a0090be <_dtoa_r+0x44e>
1a009294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a009296:	2a00      	cmp	r2, #0
1a009298:	d03c      	beq.n	1a009314 <_dtoa_r+0x6a4>
1a00929a:	9a02      	ldr	r2, [sp, #8]
1a00929c:	2a01      	cmp	r2, #1
1a00929e:	f340 8258 	ble.w	1a009752 <_dtoa_r+0xae2>
1a0092a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0092a4:	1e5e      	subs	r6, r3, #1
1a0092a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0092a8:	42b3      	cmp	r3, r6
1a0092aa:	f280 8234 	bge.w	1a009716 <_dtoa_r+0xaa6>
1a0092ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0092b0:	960c      	str	r6, [sp, #48]	; 0x30
1a0092b2:	1af3      	subs	r3, r6, r3
1a0092b4:	4499      	add	r9, r3
1a0092b6:	2600      	movs	r6, #0
1a0092b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0092ba:	2b00      	cmp	r3, #0
1a0092bc:	f2c0 82f8 	blt.w	1a0098b0 <_dtoa_r+0xc40>
1a0092c0:	9a08      	ldr	r2, [sp, #32]
1a0092c2:	4614      	mov	r4, r2
1a0092c4:	441a      	add	r2, r3
1a0092c6:	4498      	add	r8, r3
1a0092c8:	9208      	str	r2, [sp, #32]
1a0092ca:	2101      	movs	r1, #1
1a0092cc:	4650      	mov	r0, sl
1a0092ce:	f000 ff7d 	bl	1a00a1cc <__i2b>
1a0092d2:	4605      	mov	r5, r0
1a0092d4:	e021      	b.n	1a00931a <_dtoa_r+0x6aa>
1a0092d6:	2301      	movs	r3, #1
1a0092d8:	f1b8 0f00 	cmp.w	r8, #0
1a0092dc:	930d      	str	r3, [sp, #52]	; 0x34
1a0092de:	f6bf ad77 	bge.w	1a008dd0 <_dtoa_r+0x160>
1a0092e2:	f1c4 0301 	rsb	r3, r4, #1
1a0092e6:	9308      	str	r3, [sp, #32]
1a0092e8:	f04f 0800 	mov.w	r8, #0
1a0092ec:	e572      	b.n	1a008dd4 <_dtoa_r+0x164>
1a0092ee:	4648      	mov	r0, r9
1a0092f0:	f7fa fb9a 	bl	1a003a28 <__aeabi_i2d>
1a0092f4:	4632      	mov	r2, r6
1a0092f6:	463b      	mov	r3, r7
1a0092f8:	f7fa fe68 	bl	1a003fcc <__aeabi_dcmpeq>
1a0092fc:	2800      	cmp	r0, #0
1a0092fe:	f47f ad4d 	bne.w	1a008d9c <_dtoa_r+0x12c>
1a009302:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a009306:	e549      	b.n	1a008d9c <_dtoa_r+0x12c>
1a009308:	4b70      	ldr	r3, [pc, #448]	; (1a0094cc <_dtoa_r+0x85c>)
1a00930a:	9303      	str	r3, [sp, #12]
1a00930c:	9803      	ldr	r0, [sp, #12]
1a00930e:	b017      	add	sp, #92	; 0x5c
1a009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009314:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a009316:	9c08      	ldr	r4, [sp, #32]
1a009318:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00931a:	2c00      	cmp	r4, #0
1a00931c:	dd0c      	ble.n	1a009338 <_dtoa_r+0x6c8>
1a00931e:	f1b8 0f00 	cmp.w	r8, #0
1a009322:	dd09      	ble.n	1a009338 <_dtoa_r+0x6c8>
1a009324:	4544      	cmp	r4, r8
1a009326:	9a08      	ldr	r2, [sp, #32]
1a009328:	4623      	mov	r3, r4
1a00932a:	bfa8      	it	ge
1a00932c:	4643      	movge	r3, r8
1a00932e:	1ad2      	subs	r2, r2, r3
1a009330:	9208      	str	r2, [sp, #32]
1a009332:	1ae4      	subs	r4, r4, r3
1a009334:	eba8 0803 	sub.w	r8, r8, r3
1a009338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00933a:	b1d3      	cbz	r3, 1a009372 <_dtoa_r+0x702>
1a00933c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00933e:	2b00      	cmp	r3, #0
1a009340:	f000 8189 	beq.w	1a009656 <_dtoa_r+0x9e6>
1a009344:	2e00      	cmp	r6, #0
1a009346:	dd10      	ble.n	1a00936a <_dtoa_r+0x6fa>
1a009348:	4629      	mov	r1, r5
1a00934a:	4632      	mov	r2, r6
1a00934c:	4650      	mov	r0, sl
1a00934e:	f000 ffdf 	bl	1a00a310 <__pow5mult>
1a009352:	465a      	mov	r2, fp
1a009354:	4601      	mov	r1, r0
1a009356:	4605      	mov	r5, r0
1a009358:	4650      	mov	r0, sl
1a00935a:	f000 ff41 	bl	1a00a1e0 <__multiply>
1a00935e:	4659      	mov	r1, fp
1a009360:	4607      	mov	r7, r0
1a009362:	4650      	mov	r0, sl
1a009364:	f000 fe92 	bl	1a00a08c <_Bfree>
1a009368:	46bb      	mov	fp, r7
1a00936a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00936c:	1b9a      	subs	r2, r3, r6
1a00936e:	f040 8173 	bne.w	1a009658 <_dtoa_r+0x9e8>
1a009372:	2101      	movs	r1, #1
1a009374:	4650      	mov	r0, sl
1a009376:	f000 ff29 	bl	1a00a1cc <__i2b>
1a00937a:	f1b9 0f00 	cmp.w	r9, #0
1a00937e:	4607      	mov	r7, r0
1a009380:	f300 808e 	bgt.w	1a0094a0 <_dtoa_r+0x830>
1a009384:	9b02      	ldr	r3, [sp, #8]
1a009386:	2b01      	cmp	r3, #1
1a009388:	f340 8171 	ble.w	1a00966e <_dtoa_r+0x9fe>
1a00938c:	2600      	movs	r6, #0
1a00938e:	2001      	movs	r0, #1
1a009390:	f1b9 0f00 	cmp.w	r9, #0
1a009394:	f040 808f 	bne.w	1a0094b6 <_dtoa_r+0x846>
1a009398:	4440      	add	r0, r8
1a00939a:	f010 001f 	ands.w	r0, r0, #31
1a00939e:	d075      	beq.n	1a00948c <_dtoa_r+0x81c>
1a0093a0:	f1c0 0320 	rsb	r3, r0, #32
1a0093a4:	2b04      	cmp	r3, #4
1a0093a6:	f340 836d 	ble.w	1a009a84 <_dtoa_r+0xe14>
1a0093aa:	f1c0 001c 	rsb	r0, r0, #28
1a0093ae:	9b08      	ldr	r3, [sp, #32]
1a0093b0:	4403      	add	r3, r0
1a0093b2:	9308      	str	r3, [sp, #32]
1a0093b4:	4404      	add	r4, r0
1a0093b6:	4480      	add	r8, r0
1a0093b8:	9b08      	ldr	r3, [sp, #32]
1a0093ba:	2b00      	cmp	r3, #0
1a0093bc:	dd05      	ble.n	1a0093ca <_dtoa_r+0x75a>
1a0093be:	4659      	mov	r1, fp
1a0093c0:	461a      	mov	r2, r3
1a0093c2:	4650      	mov	r0, sl
1a0093c4:	f000 fff4 	bl	1a00a3b0 <__lshift>
1a0093c8:	4683      	mov	fp, r0
1a0093ca:	f1b8 0f00 	cmp.w	r8, #0
1a0093ce:	dd05      	ble.n	1a0093dc <_dtoa_r+0x76c>
1a0093d0:	4639      	mov	r1, r7
1a0093d2:	4642      	mov	r2, r8
1a0093d4:	4650      	mov	r0, sl
1a0093d6:	f000 ffeb 	bl	1a00a3b0 <__lshift>
1a0093da:	4607      	mov	r7, r0
1a0093dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0093de:	2b00      	cmp	r3, #0
1a0093e0:	f040 811e 	bne.w	1a009620 <_dtoa_r+0x9b0>
1a0093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0093e6:	2b00      	cmp	r3, #0
1a0093e8:	f340 80f5 	ble.w	1a0095d6 <_dtoa_r+0x966>
1a0093ec:	9b06      	ldr	r3, [sp, #24]
1a0093ee:	3301      	adds	r3, #1
1a0093f0:	9306      	str	r3, [sp, #24]
1a0093f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0093f4:	2b00      	cmp	r3, #0
1a0093f6:	d177      	bne.n	1a0094e8 <_dtoa_r+0x878>
1a0093f8:	9c03      	ldr	r4, [sp, #12]
1a0093fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0093fe:	2601      	movs	r6, #1
1a009400:	e003      	b.n	1a00940a <_dtoa_r+0x79a>
1a009402:	f000 fe4d 	bl	1a00a0a0 <__multadd>
1a009406:	3601      	adds	r6, #1
1a009408:	4683      	mov	fp, r0
1a00940a:	4639      	mov	r1, r7
1a00940c:	4658      	mov	r0, fp
1a00940e:	f7ff fb9b 	bl	1a008b48 <quorem>
1a009412:	4546      	cmp	r6, r8
1a009414:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a009418:	f804 9b01 	strb.w	r9, [r4], #1
1a00941c:	f04f 0300 	mov.w	r3, #0
1a009420:	f04f 020a 	mov.w	r2, #10
1a009424:	4659      	mov	r1, fp
1a009426:	4650      	mov	r0, sl
1a009428:	dbeb      	blt.n	1a009402 <_dtoa_r+0x792>
1a00942a:	2300      	movs	r3, #0
1a00942c:	9300      	str	r3, [sp, #0]
1a00942e:	4659      	mov	r1, fp
1a009430:	2201      	movs	r2, #1
1a009432:	4650      	mov	r0, sl
1a009434:	f000 ffbc 	bl	1a00a3b0 <__lshift>
1a009438:	4639      	mov	r1, r7
1a00943a:	4683      	mov	fp, r0
1a00943c:	f001 f812 	bl	1a00a464 <__mcmp>
1a009440:	2800      	cmp	r0, #0
1a009442:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a009446:	f340 816f 	ble.w	1a009728 <_dtoa_r+0xab8>
1a00944a:	1e63      	subs	r3, r4, #1
1a00944c:	9903      	ldr	r1, [sp, #12]
1a00944e:	e004      	b.n	1a00945a <_dtoa_r+0x7ea>
1a009450:	4299      	cmp	r1, r3
1a009452:	f000 8177 	beq.w	1a009744 <_dtoa_r+0xad4>
1a009456:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00945a:	2a39      	cmp	r2, #57	; 0x39
1a00945c:	f103 0401 	add.w	r4, r3, #1
1a009460:	d0f6      	beq.n	1a009450 <_dtoa_r+0x7e0>
1a009462:	3201      	adds	r2, #1
1a009464:	701a      	strb	r2, [r3, #0]
1a009466:	4639      	mov	r1, r7
1a009468:	4650      	mov	r0, sl
1a00946a:	f000 fe0f 	bl	1a00a08c <_Bfree>
1a00946e:	2d00      	cmp	r5, #0
1a009470:	f43f ae25 	beq.w	1a0090be <_dtoa_r+0x44e>
1a009474:	9900      	ldr	r1, [sp, #0]
1a009476:	b121      	cbz	r1, 1a009482 <_dtoa_r+0x812>
1a009478:	42a9      	cmp	r1, r5
1a00947a:	d002      	beq.n	1a009482 <_dtoa_r+0x812>
1a00947c:	4650      	mov	r0, sl
1a00947e:	f000 fe05 	bl	1a00a08c <_Bfree>
1a009482:	4629      	mov	r1, r5
1a009484:	4650      	mov	r0, sl
1a009486:	f000 fe01 	bl	1a00a08c <_Bfree>
1a00948a:	e618      	b.n	1a0090be <_dtoa_r+0x44e>
1a00948c:	201c      	movs	r0, #28
1a00948e:	e78e      	b.n	1a0093ae <_dtoa_r+0x73e>
1a009490:	2401      	movs	r4, #1
1a009492:	e4b6      	b.n	1a008e02 <_dtoa_r+0x192>
1a009494:	f1c3 0620 	rsb	r6, r3, #32
1a009498:	9b00      	ldr	r3, [sp, #0]
1a00949a:	fa03 f006 	lsl.w	r0, r3, r6
1a00949e:	e447      	b.n	1a008d30 <_dtoa_r+0xc0>
1a0094a0:	4601      	mov	r1, r0
1a0094a2:	464a      	mov	r2, r9
1a0094a4:	4650      	mov	r0, sl
1a0094a6:	f000 ff33 	bl	1a00a310 <__pow5mult>
1a0094aa:	9b02      	ldr	r3, [sp, #8]
1a0094ac:	2b01      	cmp	r3, #1
1a0094ae:	4607      	mov	r7, r0
1a0094b0:	f340 81b2 	ble.w	1a009818 <_dtoa_r+0xba8>
1a0094b4:	2600      	movs	r6, #0
1a0094b6:	693b      	ldr	r3, [r7, #16]
1a0094b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a0094bc:	6918      	ldr	r0, [r3, #16]
1a0094be:	f000 fe35 	bl	1a00a12c <__hi0bits>
1a0094c2:	f1c0 0020 	rsb	r0, r0, #32
1a0094c6:	e767      	b.n	1a009398 <_dtoa_r+0x728>
1a0094c8:	40240000 	.word	0x40240000
1a0094cc:	1a00b3b4 	.word	0x1a00b3b4
1a0094d0:	4629      	mov	r1, r5
1a0094d2:	2300      	movs	r3, #0
1a0094d4:	220a      	movs	r2, #10
1a0094d6:	4650      	mov	r0, sl
1a0094d8:	f000 fde2 	bl	1a00a0a0 <__multadd>
1a0094dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0094de:	2b00      	cmp	r3, #0
1a0094e0:	4605      	mov	r5, r0
1a0094e2:	f340 82c1 	ble.w	1a009a68 <_dtoa_r+0xdf8>
1a0094e6:	9309      	str	r3, [sp, #36]	; 0x24
1a0094e8:	2c00      	cmp	r4, #0
1a0094ea:	f300 810d 	bgt.w	1a009708 <_dtoa_r+0xa98>
1a0094ee:	2e00      	cmp	r6, #0
1a0094f0:	f040 81c5 	bne.w	1a00987e <_dtoa_r+0xc0e>
1a0094f4:	46a8      	mov	r8, r5
1a0094f6:	9b00      	ldr	r3, [sp, #0]
1a0094f8:	9902      	ldr	r1, [sp, #8]
1a0094fa:	9e03      	ldr	r6, [sp, #12]
1a0094fc:	f003 0201 	and.w	r2, r3, #1
1a009500:	920b      	str	r2, [sp, #44]	; 0x2c
1a009502:	430a      	orrs	r2, r1
1a009504:	920a      	str	r2, [sp, #40]	; 0x28
1a009506:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a009508:	1e73      	subs	r3, r6, #1
1a00950a:	441a      	add	r2, r3
1a00950c:	9209      	str	r2, [sp, #36]	; 0x24
1a00950e:	463c      	mov	r4, r7
1a009510:	4621      	mov	r1, r4
1a009512:	4658      	mov	r0, fp
1a009514:	f7ff fb18 	bl	1a008b48 <quorem>
1a009518:	4629      	mov	r1, r5
1a00951a:	9000      	str	r0, [sp, #0]
1a00951c:	4658      	mov	r0, fp
1a00951e:	f000 ffa1 	bl	1a00a464 <__mcmp>
1a009522:	4642      	mov	r2, r8
1a009524:	4607      	mov	r7, r0
1a009526:	4621      	mov	r1, r4
1a009528:	4650      	mov	r0, sl
1a00952a:	f000 ffb7 	bl	1a00a49c <__mdiff>
1a00952e:	9b00      	ldr	r3, [sp, #0]
1a009530:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a009534:	68c3      	ldr	r3, [r0, #12]
1a009536:	4681      	mov	r9, r0
1a009538:	2b00      	cmp	r3, #0
1a00953a:	d13e      	bne.n	1a0095ba <_dtoa_r+0x94a>
1a00953c:	4601      	mov	r1, r0
1a00953e:	4658      	mov	r0, fp
1a009540:	9208      	str	r2, [sp, #32]
1a009542:	f000 ff8f 	bl	1a00a464 <__mcmp>
1a009546:	4649      	mov	r1, r9
1a009548:	9004      	str	r0, [sp, #16]
1a00954a:	4650      	mov	r0, sl
1a00954c:	f000 fd9e 	bl	1a00a08c <_Bfree>
1a009550:	9b04      	ldr	r3, [sp, #16]
1a009552:	9a08      	ldr	r2, [sp, #32]
1a009554:	b91b      	cbnz	r3, 1a00955e <_dtoa_r+0x8ee>
1a009556:	990a      	ldr	r1, [sp, #40]	; 0x28
1a009558:	2900      	cmp	r1, #0
1a00955a:	f000 8271 	beq.w	1a009a40 <_dtoa_r+0xdd0>
1a00955e:	2f00      	cmp	r7, #0
1a009560:	f106 0901 	add.w	r9, r6, #1
1a009564:	f2c0 816e 	blt.w	1a009844 <_dtoa_r+0xbd4>
1a009568:	9902      	ldr	r1, [sp, #8]
1a00956a:	430f      	orrs	r7, r1
1a00956c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00956e:	4339      	orrs	r1, r7
1a009570:	f000 8168 	beq.w	1a009844 <_dtoa_r+0xbd4>
1a009574:	2b00      	cmp	r3, #0
1a009576:	f300 81a2 	bgt.w	1a0098be <_dtoa_r+0xc4e>
1a00957a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00957c:	7032      	strb	r2, [r6, #0]
1a00957e:	42b3      	cmp	r3, r6
1a009580:	f000 81a9 	beq.w	1a0098d6 <_dtoa_r+0xc66>
1a009584:	4659      	mov	r1, fp
1a009586:	2300      	movs	r3, #0
1a009588:	220a      	movs	r2, #10
1a00958a:	4650      	mov	r0, sl
1a00958c:	f000 fd88 	bl	1a00a0a0 <__multadd>
1a009590:	4545      	cmp	r5, r8
1a009592:	4683      	mov	fp, r0
1a009594:	4629      	mov	r1, r5
1a009596:	f04f 0300 	mov.w	r3, #0
1a00959a:	f04f 020a 	mov.w	r2, #10
1a00959e:	4650      	mov	r0, sl
1a0095a0:	d013      	beq.n	1a0095ca <_dtoa_r+0x95a>
1a0095a2:	f000 fd7d 	bl	1a00a0a0 <__multadd>
1a0095a6:	4641      	mov	r1, r8
1a0095a8:	4605      	mov	r5, r0
1a0095aa:	2300      	movs	r3, #0
1a0095ac:	220a      	movs	r2, #10
1a0095ae:	4650      	mov	r0, sl
1a0095b0:	f000 fd76 	bl	1a00a0a0 <__multadd>
1a0095b4:	464e      	mov	r6, r9
1a0095b6:	4680      	mov	r8, r0
1a0095b8:	e7aa      	b.n	1a009510 <_dtoa_r+0x8a0>
1a0095ba:	4601      	mov	r1, r0
1a0095bc:	4650      	mov	r0, sl
1a0095be:	9204      	str	r2, [sp, #16]
1a0095c0:	f000 fd64 	bl	1a00a08c <_Bfree>
1a0095c4:	2301      	movs	r3, #1
1a0095c6:	9a04      	ldr	r2, [sp, #16]
1a0095c8:	e7c9      	b.n	1a00955e <_dtoa_r+0x8ee>
1a0095ca:	f000 fd69 	bl	1a00a0a0 <__multadd>
1a0095ce:	464e      	mov	r6, r9
1a0095d0:	4605      	mov	r5, r0
1a0095d2:	4680      	mov	r8, r0
1a0095d4:	e79c      	b.n	1a009510 <_dtoa_r+0x8a0>
1a0095d6:	9b02      	ldr	r3, [sp, #8]
1a0095d8:	2b02      	cmp	r3, #2
1a0095da:	f340 8082 	ble.w	1a0096e2 <_dtoa_r+0xa72>
1a0095de:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0095e0:	2b00      	cmp	r3, #0
1a0095e2:	f47f adae 	bne.w	1a009142 <_dtoa_r+0x4d2>
1a0095e6:	4639      	mov	r1, r7
1a0095e8:	2205      	movs	r2, #5
1a0095ea:	4650      	mov	r0, sl
1a0095ec:	f000 fd58 	bl	1a00a0a0 <__multadd>
1a0095f0:	4601      	mov	r1, r0
1a0095f2:	4607      	mov	r7, r0
1a0095f4:	4658      	mov	r0, fp
1a0095f6:	f000 ff35 	bl	1a00a464 <__mcmp>
1a0095fa:	2800      	cmp	r0, #0
1a0095fc:	f77f ada1 	ble.w	1a009142 <_dtoa_r+0x4d2>
1a009600:	9c03      	ldr	r4, [sp, #12]
1a009602:	9b06      	ldr	r3, [sp, #24]
1a009604:	2231      	movs	r2, #49	; 0x31
1a009606:	f804 2b01 	strb.w	r2, [r4], #1
1a00960a:	3301      	adds	r3, #1
1a00960c:	3301      	adds	r3, #1
1a00960e:	4639      	mov	r1, r7
1a009610:	4650      	mov	r0, sl
1a009612:	9306      	str	r3, [sp, #24]
1a009614:	f000 fd3a 	bl	1a00a08c <_Bfree>
1a009618:	2d00      	cmp	r5, #0
1a00961a:	f47f af32 	bne.w	1a009482 <_dtoa_r+0x812>
1a00961e:	e54e      	b.n	1a0090be <_dtoa_r+0x44e>
1a009620:	4639      	mov	r1, r7
1a009622:	4658      	mov	r0, fp
1a009624:	f000 ff1e 	bl	1a00a464 <__mcmp>
1a009628:	2800      	cmp	r0, #0
1a00962a:	f6bf aedb 	bge.w	1a0093e4 <_dtoa_r+0x774>
1a00962e:	4659      	mov	r1, fp
1a009630:	2300      	movs	r3, #0
1a009632:	220a      	movs	r2, #10
1a009634:	4650      	mov	r0, sl
1a009636:	f000 fd33 	bl	1a00a0a0 <__multadd>
1a00963a:	9b06      	ldr	r3, [sp, #24]
1a00963c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a009640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a009642:	4683      	mov	fp, r0
1a009644:	2b00      	cmp	r3, #0
1a009646:	f47f af43 	bne.w	1a0094d0 <_dtoa_r+0x860>
1a00964a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00964c:	2b00      	cmp	r3, #0
1a00964e:	f340 8202 	ble.w	1a009a56 <_dtoa_r+0xde6>
1a009652:	9309      	str	r3, [sp, #36]	; 0x24
1a009654:	e6d0      	b.n	1a0093f8 <_dtoa_r+0x788>
1a009656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a009658:	4659      	mov	r1, fp
1a00965a:	4650      	mov	r0, sl
1a00965c:	f000 fe58 	bl	1a00a310 <__pow5mult>
1a009660:	4683      	mov	fp, r0
1a009662:	e686      	b.n	1a009372 <_dtoa_r+0x702>
1a009664:	4b9f      	ldr	r3, [pc, #636]	; (1a0098e4 <_dtoa_r+0xc74>)
1a009666:	9303      	str	r3, [sp, #12]
1a009668:	3303      	adds	r3, #3
1a00966a:	f7ff bbe5 	b.w	1a008e38 <_dtoa_r+0x1c8>
1a00966e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a009672:	2900      	cmp	r1, #0
1a009674:	f47f ae8a 	bne.w	1a00938c <_dtoa_r+0x71c>
1a009678:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00967c:	2b00      	cmp	r3, #0
1a00967e:	f000 80d5 	beq.w	1a00982c <_dtoa_r+0xbbc>
1a009682:	9e00      	ldr	r6, [sp, #0]
1a009684:	e683      	b.n	1a00938e <_dtoa_r+0x71e>
1a009686:	2301      	movs	r3, #1
1a009688:	930b      	str	r3, [sp, #44]	; 0x2c
1a00968a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00968c:	2800      	cmp	r0, #0
1a00968e:	dd46      	ble.n	1a00971e <_dtoa_r+0xaae>
1a009690:	900f      	str	r0, [sp, #60]	; 0x3c
1a009692:	9009      	str	r0, [sp, #36]	; 0x24
1a009694:	2100      	movs	r1, #0
1a009696:	2817      	cmp	r0, #23
1a009698:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00969c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00969e:	f77f ac19 	ble.w	1a008ed4 <_dtoa_r+0x264>
1a0096a2:	2201      	movs	r2, #1
1a0096a4:	2304      	movs	r3, #4
1a0096a6:	005b      	lsls	r3, r3, #1
1a0096a8:	f103 0614 	add.w	r6, r3, #20
1a0096ac:	42b0      	cmp	r0, r6
1a0096ae:	4611      	mov	r1, r2
1a0096b0:	f102 0201 	add.w	r2, r2, #1
1a0096b4:	d2f7      	bcs.n	1a0096a6 <_dtoa_r+0xa36>
1a0096b6:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a0096ba:	e40b      	b.n	1a008ed4 <_dtoa_r+0x264>
1a0096bc:	2301      	movs	r3, #1
1a0096be:	930b      	str	r3, [sp, #44]	; 0x2c
1a0096c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0096c2:	9a06      	ldr	r2, [sp, #24]
1a0096c4:	4413      	add	r3, r2
1a0096c6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0096c8:	3301      	adds	r3, #1
1a0096ca:	2b01      	cmp	r3, #1
1a0096cc:	4618      	mov	r0, r3
1a0096ce:	9309      	str	r3, [sp, #36]	; 0x24
1a0096d0:	bfb8      	it	lt
1a0096d2:	2001      	movlt	r0, #1
1a0096d4:	e7de      	b.n	1a009694 <_dtoa_r+0xa24>
1a0096d6:	2300      	movs	r3, #0
1a0096d8:	930b      	str	r3, [sp, #44]	; 0x2c
1a0096da:	e7f1      	b.n	1a0096c0 <_dtoa_r+0xa50>
1a0096dc:	2300      	movs	r3, #0
1a0096de:	930b      	str	r3, [sp, #44]	; 0x2c
1a0096e0:	e7d3      	b.n	1a00968a <_dtoa_r+0xa1a>
1a0096e2:	9b06      	ldr	r3, [sp, #24]
1a0096e4:	3301      	adds	r3, #1
1a0096e6:	9306      	str	r3, [sp, #24]
1a0096e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0096ea:	2b00      	cmp	r3, #0
1a0096ec:	f47f aefc 	bne.w	1a0094e8 <_dtoa_r+0x878>
1a0096f0:	4639      	mov	r1, r7
1a0096f2:	4658      	mov	r0, fp
1a0096f4:	f7ff fa28 	bl	1a008b48 <quorem>
1a0096f8:	9c03      	ldr	r4, [sp, #12]
1a0096fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0096fe:	2300      	movs	r3, #0
1a009700:	f804 9b01 	strb.w	r9, [r4], #1
1a009704:	9300      	str	r3, [sp, #0]
1a009706:	e692      	b.n	1a00942e <_dtoa_r+0x7be>
1a009708:	4629      	mov	r1, r5
1a00970a:	4622      	mov	r2, r4
1a00970c:	4650      	mov	r0, sl
1a00970e:	f000 fe4f 	bl	1a00a3b0 <__lshift>
1a009712:	4605      	mov	r5, r0
1a009714:	e6eb      	b.n	1a0094ee <_dtoa_r+0x87e>
1a009716:	1b9e      	subs	r6, r3, r6
1a009718:	e5ce      	b.n	1a0092b8 <_dtoa_r+0x648>
1a00971a:	2602      	movs	r6, #2
1a00971c:	e403      	b.n	1a008f26 <_dtoa_r+0x2b6>
1a00971e:	2501      	movs	r5, #1
1a009720:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a009724:	f7ff bbd2 	b.w	1a008ecc <_dtoa_r+0x25c>
1a009728:	d103      	bne.n	1a009732 <_dtoa_r+0xac2>
1a00972a:	f019 0f01 	tst.w	r9, #1
1a00972e:	f47f ae8c 	bne.w	1a00944a <_dtoa_r+0x7da>
1a009732:	1e63      	subs	r3, r4, #1
1a009734:	e001      	b.n	1a00973a <_dtoa_r+0xaca>
1a009736:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00973a:	2a30      	cmp	r2, #48	; 0x30
1a00973c:	f103 0401 	add.w	r4, r3, #1
1a009740:	d0f9      	beq.n	1a009736 <_dtoa_r+0xac6>
1a009742:	e690      	b.n	1a009466 <_dtoa_r+0x7f6>
1a009744:	9a06      	ldr	r2, [sp, #24]
1a009746:	3201      	adds	r2, #1
1a009748:	9206      	str	r2, [sp, #24]
1a00974a:	9a03      	ldr	r2, [sp, #12]
1a00974c:	2331      	movs	r3, #49	; 0x31
1a00974e:	7013      	strb	r3, [r2, #0]
1a009750:	e689      	b.n	1a009466 <_dtoa_r+0x7f6>
1a009752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a009754:	2a00      	cmp	r2, #0
1a009756:	f000 8126 	beq.w	1a0099a6 <_dtoa_r+0xd36>
1a00975a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00975e:	9a08      	ldr	r2, [sp, #32]
1a009760:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a009762:	4614      	mov	r4, r2
1a009764:	441a      	add	r2, r3
1a009766:	4498      	add	r8, r3
1a009768:	9208      	str	r2, [sp, #32]
1a00976a:	e5ae      	b.n	1a0092ca <_dtoa_r+0x65a>
1a00976c:	4630      	mov	r0, r6
1a00976e:	f7fa f95b 	bl	1a003a28 <__aeabi_i2d>
1a009772:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009776:	f7fa f9c1 	bl	1a003afc <__aeabi_dmul>
1a00977a:	2200      	movs	r2, #0
1a00977c:	4b5a      	ldr	r3, [pc, #360]	; (1a0098e8 <_dtoa_r+0xc78>)
1a00977e:	f7fa f807 	bl	1a003790 <__adddf3>
1a009782:	4604      	mov	r4, r0
1a009784:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a009788:	2200      	movs	r2, #0
1a00978a:	4b58      	ldr	r3, [pc, #352]	; (1a0098ec <_dtoa_r+0xc7c>)
1a00978c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009790:	f7f9 fffc 	bl	1a00378c <__aeabi_dsub>
1a009794:	4622      	mov	r2, r4
1a009796:	462b      	mov	r3, r5
1a009798:	4606      	mov	r6, r0
1a00979a:	460f      	mov	r7, r1
1a00979c:	f7fa fc3e 	bl	1a00401c <__aeabi_dcmpgt>
1a0097a0:	2800      	cmp	r0, #0
1a0097a2:	f040 8089 	bne.w	1a0098b8 <_dtoa_r+0xc48>
1a0097a6:	4622      	mov	r2, r4
1a0097a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a0097ac:	4630      	mov	r0, r6
1a0097ae:	4639      	mov	r1, r7
1a0097b0:	f7fa fc16 	bl	1a003fe0 <__aeabi_dcmplt>
1a0097b4:	2800      	cmp	r0, #0
1a0097b6:	f43f ac9c 	beq.w	1a0090f2 <_dtoa_r+0x482>
1a0097ba:	2700      	movs	r7, #0
1a0097bc:	463d      	mov	r5, r7
1a0097be:	e4c0      	b.n	1a009142 <_dtoa_r+0x4d2>
1a0097c0:	f000 80f5 	beq.w	1a0099ae <_dtoa_r+0xd3e>
1a0097c4:	9b06      	ldr	r3, [sp, #24]
1a0097c6:	425c      	negs	r4, r3
1a0097c8:	4b49      	ldr	r3, [pc, #292]	; (1a0098f0 <_dtoa_r+0xc80>)
1a0097ca:	f004 020f 	and.w	r2, r4, #15
1a0097ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0097d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0097da:	f7fa f98f 	bl	1a003afc <__aeabi_dmul>
1a0097de:	1124      	asrs	r4, r4, #4
1a0097e0:	e9cd 0100 	strd	r0, r1, [sp]
1a0097e4:	f000 80e3 	beq.w	1a0099ae <_dtoa_r+0xd3e>
1a0097e8:	4d42      	ldr	r5, [pc, #264]	; (1a0098f4 <_dtoa_r+0xc84>)
1a0097ea:	2300      	movs	r3, #0
1a0097ec:	2602      	movs	r6, #2
1a0097ee:	07e2      	lsls	r2, r4, #31
1a0097f0:	d505      	bpl.n	1a0097fe <_dtoa_r+0xb8e>
1a0097f2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0097f6:	f7fa f981 	bl	1a003afc <__aeabi_dmul>
1a0097fa:	3601      	adds	r6, #1
1a0097fc:	2301      	movs	r3, #1
1a0097fe:	1064      	asrs	r4, r4, #1
1a009800:	f105 0508 	add.w	r5, r5, #8
1a009804:	d1f3      	bne.n	1a0097ee <_dtoa_r+0xb7e>
1a009806:	2b00      	cmp	r3, #0
1a009808:	f43f aba6 	beq.w	1a008f58 <_dtoa_r+0x2e8>
1a00980c:	e9cd 0100 	strd	r0, r1, [sp]
1a009810:	f7ff bba2 	b.w	1a008f58 <_dtoa_r+0x2e8>
1a009814:	900d      	str	r0, [sp, #52]	; 0x34
1a009816:	e564      	b.n	1a0092e2 <_dtoa_r+0x672>
1a009818:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00981c:	2900      	cmp	r1, #0
1a00981e:	f47f ae49 	bne.w	1a0094b4 <_dtoa_r+0x844>
1a009822:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a009826:	2b00      	cmp	r3, #0
1a009828:	f47f ae44 	bne.w	1a0094b4 <_dtoa_r+0x844>
1a00982c:	4e32      	ldr	r6, [pc, #200]	; (1a0098f8 <_dtoa_r+0xc88>)
1a00982e:	4016      	ands	r6, r2
1a009830:	2e00      	cmp	r6, #0
1a009832:	f43f adac 	beq.w	1a00938e <_dtoa_r+0x71e>
1a009836:	9b08      	ldr	r3, [sp, #32]
1a009838:	3301      	adds	r3, #1
1a00983a:	9308      	str	r3, [sp, #32]
1a00983c:	f108 0801 	add.w	r8, r8, #1
1a009840:	2601      	movs	r6, #1
1a009842:	e5a4      	b.n	1a00938e <_dtoa_r+0x71e>
1a009844:	2b00      	cmp	r3, #0
1a009846:	4627      	mov	r7, r4
1a009848:	464c      	mov	r4, r9
1a00984a:	4691      	mov	r9, r2
1a00984c:	dd12      	ble.n	1a009874 <_dtoa_r+0xc04>
1a00984e:	4659      	mov	r1, fp
1a009850:	2201      	movs	r2, #1
1a009852:	4650      	mov	r0, sl
1a009854:	f000 fdac 	bl	1a00a3b0 <__lshift>
1a009858:	4639      	mov	r1, r7
1a00985a:	4683      	mov	fp, r0
1a00985c:	f000 fe02 	bl	1a00a464 <__mcmp>
1a009860:	2800      	cmp	r0, #0
1a009862:	f340 80df 	ble.w	1a009a24 <_dtoa_r+0xdb4>
1a009866:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00986a:	f000 80d0 	beq.w	1a009a0e <_dtoa_r+0xd9e>
1a00986e:	9b00      	ldr	r3, [sp, #0]
1a009870:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a009874:	9500      	str	r5, [sp, #0]
1a009876:	f886 9000 	strb.w	r9, [r6]
1a00987a:	4645      	mov	r5, r8
1a00987c:	e5f3      	b.n	1a009466 <_dtoa_r+0x7f6>
1a00987e:	6869      	ldr	r1, [r5, #4]
1a009880:	4650      	mov	r0, sl
1a009882:	f000 fbdd 	bl	1a00a040 <_Balloc>
1a009886:	692b      	ldr	r3, [r5, #16]
1a009888:	3302      	adds	r3, #2
1a00988a:	009a      	lsls	r2, r3, #2
1a00988c:	4604      	mov	r4, r0
1a00988e:	f105 010c 	add.w	r1, r5, #12
1a009892:	300c      	adds	r0, #12
1a009894:	f7fb fb80 	bl	1a004f98 <memcpy>
1a009898:	4621      	mov	r1, r4
1a00989a:	2201      	movs	r2, #1
1a00989c:	4650      	mov	r0, sl
1a00989e:	f000 fd87 	bl	1a00a3b0 <__lshift>
1a0098a2:	4680      	mov	r8, r0
1a0098a4:	e627      	b.n	1a0094f6 <_dtoa_r+0x886>
1a0098a6:	f8dd b000 	ldr.w	fp, [sp]
1a0098aa:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0098ae:	e406      	b.n	1a0090be <_dtoa_r+0x44e>
1a0098b0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a0098b4:	1a9c      	subs	r4, r3, r2
1a0098b6:	e508      	b.n	1a0092ca <_dtoa_r+0x65a>
1a0098b8:	2700      	movs	r7, #0
1a0098ba:	463d      	mov	r5, r7
1a0098bc:	e6a0      	b.n	1a009600 <_dtoa_r+0x990>
1a0098be:	2a39      	cmp	r2, #57	; 0x39
1a0098c0:	4627      	mov	r7, r4
1a0098c2:	464c      	mov	r4, r9
1a0098c4:	f000 80a3 	beq.w	1a009a0e <_dtoa_r+0xd9e>
1a0098c8:	f102 0901 	add.w	r9, r2, #1
1a0098cc:	9500      	str	r5, [sp, #0]
1a0098ce:	f886 9000 	strb.w	r9, [r6]
1a0098d2:	4645      	mov	r5, r8
1a0098d4:	e5c7      	b.n	1a009466 <_dtoa_r+0x7f6>
1a0098d6:	4627      	mov	r7, r4
1a0098d8:	9500      	str	r5, [sp, #0]
1a0098da:	464c      	mov	r4, r9
1a0098dc:	4645      	mov	r5, r8
1a0098de:	4691      	mov	r9, r2
1a0098e0:	e5a5      	b.n	1a00942e <_dtoa_r+0x7be>
1a0098e2:	bf00      	nop
1a0098e4:	1a00b3f8 	.word	0x1a00b3f8
1a0098e8:	401c0000 	.word	0x401c0000
1a0098ec:	40140000 	.word	0x40140000
1a0098f0:	1a00b430 	.word	0x1a00b430
1a0098f4:	1a00b408 	.word	0x1a00b408
1a0098f8:	7ff00000 	.word	0x7ff00000
1a0098fc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009900:	f7fa f8fc 	bl	1a003afc <__aeabi_dmul>
1a009904:	9b03      	ldr	r3, [sp, #12]
1a009906:	701d      	strb	r5, [r3, #0]
1a009908:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00990a:	2b01      	cmp	r3, #1
1a00990c:	e9cd 0100 	strd	r0, r1, [sp]
1a009910:	d023      	beq.n	1a00995a <_dtoa_r+0xcea>
1a009912:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a009914:	9a03      	ldr	r2, [sp, #12]
1a009916:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00991a:	4413      	add	r3, r2
1a00991c:	46c1      	mov	r9, r8
1a00991e:	4698      	mov	r8, r3
1a009920:	2200      	movs	r2, #0
1a009922:	4b64      	ldr	r3, [pc, #400]	; (1a009ab4 <_dtoa_r+0xe44>)
1a009924:	4630      	mov	r0, r6
1a009926:	4639      	mov	r1, r7
1a009928:	f7fa f8e8 	bl	1a003afc <__aeabi_dmul>
1a00992c:	460f      	mov	r7, r1
1a00992e:	4606      	mov	r6, r0
1a009930:	f7fa fb94 	bl	1a00405c <__aeabi_d2iz>
1a009934:	4605      	mov	r5, r0
1a009936:	f7fa f877 	bl	1a003a28 <__aeabi_i2d>
1a00993a:	3530      	adds	r5, #48	; 0x30
1a00993c:	4602      	mov	r2, r0
1a00993e:	460b      	mov	r3, r1
1a009940:	4630      	mov	r0, r6
1a009942:	4639      	mov	r1, r7
1a009944:	f7f9 ff22 	bl	1a00378c <__aeabi_dsub>
1a009948:	f804 5b01 	strb.w	r5, [r4], #1
1a00994c:	45a0      	cmp	r8, r4
1a00994e:	4606      	mov	r6, r0
1a009950:	460f      	mov	r7, r1
1a009952:	d1e5      	bne.n	1a009920 <_dtoa_r+0xcb0>
1a009954:	46c8      	mov	r8, r9
1a009956:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00995a:	4b57      	ldr	r3, [pc, #348]	; (1a009ab8 <_dtoa_r+0xe48>)
1a00995c:	2200      	movs	r2, #0
1a00995e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009962:	f7f9 ff15 	bl	1a003790 <__adddf3>
1a009966:	4632      	mov	r2, r6
1a009968:	463b      	mov	r3, r7
1a00996a:	f7fa fb39 	bl	1a003fe0 <__aeabi_dcmplt>
1a00996e:	2800      	cmp	r0, #0
1a009970:	d152      	bne.n	1a009a18 <_dtoa_r+0xda8>
1a009972:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009976:	2000      	movs	r0, #0
1a009978:	494f      	ldr	r1, [pc, #316]	; (1a009ab8 <_dtoa_r+0xe48>)
1a00997a:	f7f9 ff07 	bl	1a00378c <__aeabi_dsub>
1a00997e:	4632      	mov	r2, r6
1a009980:	463b      	mov	r3, r7
1a009982:	f7fa fb4b 	bl	1a00401c <__aeabi_dcmpgt>
1a009986:	2800      	cmp	r0, #0
1a009988:	f43f abb3 	beq.w	1a0090f2 <_dtoa_r+0x482>
1a00998c:	e000      	b.n	1a009990 <_dtoa_r+0xd20>
1a00998e:	4614      	mov	r4, r2
1a009990:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a009994:	2b30      	cmp	r3, #48	; 0x30
1a009996:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00999a:	d0f8      	beq.n	1a00998e <_dtoa_r+0xd1e>
1a00999c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00999e:	3301      	adds	r3, #1
1a0099a0:	9306      	str	r3, [sp, #24]
1a0099a2:	f7ff bb8c 	b.w	1a0090be <_dtoa_r+0x44e>
1a0099a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0099a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a0099ac:	e6d7      	b.n	1a00975e <_dtoa_r+0xaee>
1a0099ae:	2602      	movs	r6, #2
1a0099b0:	f7ff bad2 	b.w	1a008f58 <_dtoa_r+0x2e8>
1a0099b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0099b6:	2b00      	cmp	r3, #0
1a0099b8:	f43f aed8 	beq.w	1a00976c <_dtoa_r+0xafc>
1a0099bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a0099be:	2f00      	cmp	r7, #0
1a0099c0:	f77f ab97 	ble.w	1a0090f2 <_dtoa_r+0x482>
1a0099c4:	2200      	movs	r2, #0
1a0099c6:	4b3b      	ldr	r3, [pc, #236]	; (1a009ab4 <_dtoa_r+0xe44>)
1a0099c8:	4620      	mov	r0, r4
1a0099ca:	4629      	mov	r1, r5
1a0099cc:	f7fa f896 	bl	1a003afc <__aeabi_dmul>
1a0099d0:	4604      	mov	r4, r0
1a0099d2:	460d      	mov	r5, r1
1a0099d4:	1c70      	adds	r0, r6, #1
1a0099d6:	e9cd 4500 	strd	r4, r5, [sp]
1a0099da:	f7fa f825 	bl	1a003a28 <__aeabi_i2d>
1a0099de:	4622      	mov	r2, r4
1a0099e0:	462b      	mov	r3, r5
1a0099e2:	f7fa f88b 	bl	1a003afc <__aeabi_dmul>
1a0099e6:	4b35      	ldr	r3, [pc, #212]	; (1a009abc <_dtoa_r+0xe4c>)
1a0099e8:	2200      	movs	r2, #0
1a0099ea:	f7f9 fed1 	bl	1a003790 <__adddf3>
1a0099ee:	9b06      	ldr	r3, [sp, #24]
1a0099f0:	9710      	str	r7, [sp, #64]	; 0x40
1a0099f2:	3b01      	subs	r3, #1
1a0099f4:	4604      	mov	r4, r0
1a0099f6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0099fa:	9312      	str	r3, [sp, #72]	; 0x48
1a0099fc:	f7ff bacf 	b.w	1a008f9e <_dtoa_r+0x32e>
1a009a00:	9a06      	ldr	r2, [sp, #24]
1a009a02:	3201      	adds	r2, #1
1a009a04:	9206      	str	r2, [sp, #24]
1a009a06:	2231      	movs	r2, #49	; 0x31
1a009a08:	701a      	strb	r2, [r3, #0]
1a009a0a:	f7ff bb58 	b.w	1a0090be <_dtoa_r+0x44e>
1a009a0e:	2239      	movs	r2, #57	; 0x39
1a009a10:	9500      	str	r5, [sp, #0]
1a009a12:	7032      	strb	r2, [r6, #0]
1a009a14:	4645      	mov	r5, r8
1a009a16:	e518      	b.n	1a00944a <_dtoa_r+0x7da>
1a009a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009a1a:	3301      	adds	r3, #1
1a009a1c:	9306      	str	r3, [sp, #24]
1a009a1e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a009a22:	e427      	b.n	1a009274 <_dtoa_r+0x604>
1a009a24:	f47f af26 	bne.w	1a009874 <_dtoa_r+0xc04>
1a009a28:	f019 0f01 	tst.w	r9, #1
1a009a2c:	f47f af1b 	bne.w	1a009866 <_dtoa_r+0xbf6>
1a009a30:	e720      	b.n	1a009874 <_dtoa_r+0xc04>
1a009a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009a34:	3301      	adds	r3, #1
1a009a36:	46da      	mov	sl, fp
1a009a38:	9306      	str	r3, [sp, #24]
1a009a3a:	f8dd b000 	ldr.w	fp, [sp]
1a009a3e:	e419      	b.n	1a009274 <_dtoa_r+0x604>
1a009a40:	2a39      	cmp	r2, #57	; 0x39
1a009a42:	463b      	mov	r3, r7
1a009a44:	4691      	mov	r9, r2
1a009a46:	4627      	mov	r7, r4
1a009a48:	f106 0401 	add.w	r4, r6, #1
1a009a4c:	d0df      	beq.n	1a009a0e <_dtoa_r+0xd9e>
1a009a4e:	2b00      	cmp	r3, #0
1a009a50:	f73f af0d 	bgt.w	1a00986e <_dtoa_r+0xbfe>
1a009a54:	e70e      	b.n	1a009874 <_dtoa_r+0xc04>
1a009a56:	9b02      	ldr	r3, [sp, #8]
1a009a58:	2b02      	cmp	r3, #2
1a009a5a:	f77f ae49 	ble.w	1a0096f0 <_dtoa_r+0xa80>
1a009a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a009a60:	9309      	str	r3, [sp, #36]	; 0x24
1a009a62:	f8cd 8018 	str.w	r8, [sp, #24]
1a009a66:	e5ba      	b.n	1a0095de <_dtoa_r+0x96e>
1a009a68:	9b02      	ldr	r3, [sp, #8]
1a009a6a:	2b02      	cmp	r3, #2
1a009a6c:	dcf7      	bgt.n	1a009a5e <_dtoa_r+0xdee>
1a009a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a009a70:	e539      	b.n	1a0094e6 <_dtoa_r+0x876>
1a009a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009a74:	3301      	adds	r3, #1
1a009a76:	9306      	str	r3, [sp, #24]
1a009a78:	f7ff bbfc 	b.w	1a009274 <_dtoa_r+0x604>
1a009a7c:	4b10      	ldr	r3, [pc, #64]	; (1a009ac0 <_dtoa_r+0xe50>)
1a009a7e:	9303      	str	r3, [sp, #12]
1a009a80:	f7ff b934 	b.w	1a008cec <_dtoa_r+0x7c>
1a009a84:	f43f ac98 	beq.w	1a0093b8 <_dtoa_r+0x748>
1a009a88:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a009a8c:	e48f      	b.n	1a0093ae <_dtoa_r+0x73e>
1a009a8e:	2400      	movs	r4, #0
1a009a90:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a009a94:	4621      	mov	r1, r4
1a009a96:	4650      	mov	r0, sl
1a009a98:	f000 fad2 	bl	1a00a040 <_Balloc>
1a009a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a009aa0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a009aa4:	930f      	str	r3, [sp, #60]	; 0x3c
1a009aa6:	2301      	movs	r3, #1
1a009aa8:	9003      	str	r0, [sp, #12]
1a009aaa:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a009aae:	930b      	str	r3, [sp, #44]	; 0x2c
1a009ab0:	f7ff bb23 	b.w	1a0090fa <_dtoa_r+0x48a>
1a009ab4:	40240000 	.word	0x40240000
1a009ab8:	3fe00000 	.word	0x3fe00000
1a009abc:	401c0000 	.word	0x401c0000
1a009ac0:	1a00b3fc 	.word	0x1a00b3fc

1a009ac4 <__sfvwrite_r>:
1a009ac4:	6893      	ldr	r3, [r2, #8]
1a009ac6:	2b00      	cmp	r3, #0
1a009ac8:	f000 8102 	beq.w	1a009cd0 <__sfvwrite_r+0x20c>
1a009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009ad0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a009ad4:	b29b      	uxth	r3, r3
1a009ad6:	460c      	mov	r4, r1
1a009ad8:	0719      	lsls	r1, r3, #28
1a009ada:	b083      	sub	sp, #12
1a009adc:	4682      	mov	sl, r0
1a009ade:	4690      	mov	r8, r2
1a009ae0:	d535      	bpl.n	1a009b4e <__sfvwrite_r+0x8a>
1a009ae2:	6922      	ldr	r2, [r4, #16]
1a009ae4:	b39a      	cbz	r2, 1a009b4e <__sfvwrite_r+0x8a>
1a009ae6:	f013 0202 	ands.w	r2, r3, #2
1a009aea:	f8d8 6000 	ldr.w	r6, [r8]
1a009aee:	d03d      	beq.n	1a009b6c <__sfvwrite_r+0xa8>
1a009af0:	2700      	movs	r7, #0
1a009af2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009af6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009afa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a009dc8 <__sfvwrite_r+0x304>
1a009afe:	463d      	mov	r5, r7
1a009b00:	454d      	cmp	r5, r9
1a009b02:	462b      	mov	r3, r5
1a009b04:	463a      	mov	r2, r7
1a009b06:	bf28      	it	cs
1a009b08:	464b      	movcs	r3, r9
1a009b0a:	4661      	mov	r1, ip
1a009b0c:	4650      	mov	r0, sl
1a009b0e:	b1d5      	cbz	r5, 1a009b46 <__sfvwrite_r+0x82>
1a009b10:	47d8      	blx	fp
1a009b12:	2800      	cmp	r0, #0
1a009b14:	f340 80d2 	ble.w	1a009cbc <__sfvwrite_r+0x1f8>
1a009b18:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009b1c:	1a1b      	subs	r3, r3, r0
1a009b1e:	4407      	add	r7, r0
1a009b20:	1a2d      	subs	r5, r5, r0
1a009b22:	f8c8 3008 	str.w	r3, [r8, #8]
1a009b26:	2b00      	cmp	r3, #0
1a009b28:	f000 80b7 	beq.w	1a009c9a <__sfvwrite_r+0x1d6>
1a009b2c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009b30:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009b34:	454d      	cmp	r5, r9
1a009b36:	462b      	mov	r3, r5
1a009b38:	463a      	mov	r2, r7
1a009b3a:	bf28      	it	cs
1a009b3c:	464b      	movcs	r3, r9
1a009b3e:	4661      	mov	r1, ip
1a009b40:	4650      	mov	r0, sl
1a009b42:	2d00      	cmp	r5, #0
1a009b44:	d1e4      	bne.n	1a009b10 <__sfvwrite_r+0x4c>
1a009b46:	e9d6 7500 	ldrd	r7, r5, [r6]
1a009b4a:	3608      	adds	r6, #8
1a009b4c:	e7d8      	b.n	1a009b00 <__sfvwrite_r+0x3c>
1a009b4e:	4621      	mov	r1, r4
1a009b50:	4650      	mov	r0, sl
1a009b52:	f7fe ff91 	bl	1a008a78 <__swsetup_r>
1a009b56:	2800      	cmp	r0, #0
1a009b58:	f040 8130 	bne.w	1a009dbc <__sfvwrite_r+0x2f8>
1a009b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009b60:	f8d8 6000 	ldr.w	r6, [r8]
1a009b64:	b29b      	uxth	r3, r3
1a009b66:	f013 0202 	ands.w	r2, r3, #2
1a009b6a:	d1c1      	bne.n	1a009af0 <__sfvwrite_r+0x2c>
1a009b6c:	f013 0901 	ands.w	r9, r3, #1
1a009b70:	f040 80b0 	bne.w	1a009cd4 <__sfvwrite_r+0x210>
1a009b74:	68a7      	ldr	r7, [r4, #8]
1a009b76:	6820      	ldr	r0, [r4, #0]
1a009b78:	464d      	mov	r5, r9
1a009b7a:	2d00      	cmp	r5, #0
1a009b7c:	d054      	beq.n	1a009c28 <__sfvwrite_r+0x164>
1a009b7e:	059a      	lsls	r2, r3, #22
1a009b80:	f140 80bc 	bpl.w	1a009cfc <__sfvwrite_r+0x238>
1a009b84:	42af      	cmp	r7, r5
1a009b86:	46bb      	mov	fp, r7
1a009b88:	f200 80e7 	bhi.w	1a009d5a <__sfvwrite_r+0x296>
1a009b8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a009b90:	d02f      	beq.n	1a009bf2 <__sfvwrite_r+0x12e>
1a009b92:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a009b96:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a009b9a:	eba0 0b01 	sub.w	fp, r0, r1
1a009b9e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a009ba2:	1c68      	adds	r0, r5, #1
1a009ba4:	107f      	asrs	r7, r7, #1
1a009ba6:	4458      	add	r0, fp
1a009ba8:	42b8      	cmp	r0, r7
1a009baa:	463a      	mov	r2, r7
1a009bac:	bf84      	itt	hi
1a009bae:	4607      	movhi	r7, r0
1a009bb0:	463a      	movhi	r2, r7
1a009bb2:	055b      	lsls	r3, r3, #21
1a009bb4:	f140 80e9 	bpl.w	1a009d8a <__sfvwrite_r+0x2c6>
1a009bb8:	4611      	mov	r1, r2
1a009bba:	4650      	mov	r0, sl
1a009bbc:	f7fa ff34 	bl	1a004a28 <_malloc_r>
1a009bc0:	2800      	cmp	r0, #0
1a009bc2:	f000 80f5 	beq.w	1a009db0 <__sfvwrite_r+0x2ec>
1a009bc6:	465a      	mov	r2, fp
1a009bc8:	6921      	ldr	r1, [r4, #16]
1a009bca:	9001      	str	r0, [sp, #4]
1a009bcc:	f7fb f9e4 	bl	1a004f98 <memcpy>
1a009bd0:	89a2      	ldrh	r2, [r4, #12]
1a009bd2:	9b01      	ldr	r3, [sp, #4]
1a009bd4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a009bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a009bdc:	81a2      	strh	r2, [r4, #12]
1a009bde:	eba7 020b 	sub.w	r2, r7, fp
1a009be2:	eb03 000b 	add.w	r0, r3, fp
1a009be6:	6167      	str	r7, [r4, #20]
1a009be8:	6123      	str	r3, [r4, #16]
1a009bea:	6020      	str	r0, [r4, #0]
1a009bec:	60a2      	str	r2, [r4, #8]
1a009bee:	462f      	mov	r7, r5
1a009bf0:	46ab      	mov	fp, r5
1a009bf2:	465a      	mov	r2, fp
1a009bf4:	4649      	mov	r1, r9
1a009bf6:	f000 f9bb 	bl	1a009f70 <memmove>
1a009bfa:	68a2      	ldr	r2, [r4, #8]
1a009bfc:	6823      	ldr	r3, [r4, #0]
1a009bfe:	1bd2      	subs	r2, r2, r7
1a009c00:	445b      	add	r3, fp
1a009c02:	462f      	mov	r7, r5
1a009c04:	60a2      	str	r2, [r4, #8]
1a009c06:	6023      	str	r3, [r4, #0]
1a009c08:	2500      	movs	r5, #0
1a009c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009c0e:	1bdb      	subs	r3, r3, r7
1a009c10:	44b9      	add	r9, r7
1a009c12:	f8c8 3008 	str.w	r3, [r8, #8]
1a009c16:	2b00      	cmp	r3, #0
1a009c18:	d03f      	beq.n	1a009c9a <__sfvwrite_r+0x1d6>
1a009c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009c1e:	68a7      	ldr	r7, [r4, #8]
1a009c20:	6820      	ldr	r0, [r4, #0]
1a009c22:	b29b      	uxth	r3, r3
1a009c24:	2d00      	cmp	r5, #0
1a009c26:	d1aa      	bne.n	1a009b7e <__sfvwrite_r+0xba>
1a009c28:	e9d6 9500 	ldrd	r9, r5, [r6]
1a009c2c:	3608      	adds	r6, #8
1a009c2e:	e7a4      	b.n	1a009b7a <__sfvwrite_r+0xb6>
1a009c30:	f10b 0308 	add.w	r3, fp, #8
1a009c34:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a009c38:	469b      	mov	fp, r3
1a009c3a:	3308      	adds	r3, #8
1a009c3c:	2f00      	cmp	r7, #0
1a009c3e:	d0f9      	beq.n	1a009c34 <__sfvwrite_r+0x170>
1a009c40:	463a      	mov	r2, r7
1a009c42:	210a      	movs	r1, #10
1a009c44:	4630      	mov	r0, r6
1a009c46:	f000 f943 	bl	1a009ed0 <memchr>
1a009c4a:	2800      	cmp	r0, #0
1a009c4c:	d053      	beq.n	1a009cf6 <__sfvwrite_r+0x232>
1a009c4e:	3001      	adds	r0, #1
1a009c50:	eba0 0906 	sub.w	r9, r0, r6
1a009c54:	464b      	mov	r3, r9
1a009c56:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a009c5a:	6820      	ldr	r0, [r4, #0]
1a009c5c:	42bb      	cmp	r3, r7
1a009c5e:	bf28      	it	cs
1a009c60:	463b      	movcs	r3, r7
1a009c62:	4288      	cmp	r0, r1
1a009c64:	d903      	bls.n	1a009c6e <__sfvwrite_r+0x1aa>
1a009c66:	68a5      	ldr	r5, [r4, #8]
1a009c68:	4415      	add	r5, r2
1a009c6a:	42ab      	cmp	r3, r5
1a009c6c:	dc19      	bgt.n	1a009ca2 <__sfvwrite_r+0x1de>
1a009c6e:	429a      	cmp	r2, r3
1a009c70:	dc7d      	bgt.n	1a009d6e <__sfvwrite_r+0x2aa>
1a009c72:	4613      	mov	r3, r2
1a009c74:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a009c76:	69e1      	ldr	r1, [r4, #28]
1a009c78:	4632      	mov	r2, r6
1a009c7a:	4650      	mov	r0, sl
1a009c7c:	47a8      	blx	r5
1a009c7e:	1e05      	subs	r5, r0, #0
1a009c80:	dd1c      	ble.n	1a009cbc <__sfvwrite_r+0x1f8>
1a009c82:	ebb9 0905 	subs.w	r9, r9, r5
1a009c86:	d06b      	beq.n	1a009d60 <__sfvwrite_r+0x29c>
1a009c88:	2001      	movs	r0, #1
1a009c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009c8e:	1b5b      	subs	r3, r3, r5
1a009c90:	442e      	add	r6, r5
1a009c92:	1b7f      	subs	r7, r7, r5
1a009c94:	f8c8 3008 	str.w	r3, [r8, #8]
1a009c98:	bb13      	cbnz	r3, 1a009ce0 <__sfvwrite_r+0x21c>
1a009c9a:	2000      	movs	r0, #0
1a009c9c:	b003      	add	sp, #12
1a009c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009ca2:	4631      	mov	r1, r6
1a009ca4:	462a      	mov	r2, r5
1a009ca6:	f000 f963 	bl	1a009f70 <memmove>
1a009caa:	6823      	ldr	r3, [r4, #0]
1a009cac:	442b      	add	r3, r5
1a009cae:	6023      	str	r3, [r4, #0]
1a009cb0:	4621      	mov	r1, r4
1a009cb2:	4650      	mov	r0, sl
1a009cb4:	f7fa fc8a 	bl	1a0045cc <_fflush_r>
1a009cb8:	2800      	cmp	r0, #0
1a009cba:	d0e2      	beq.n	1a009c82 <__sfvwrite_r+0x1be>
1a009cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009cc8:	81a3      	strh	r3, [r4, #12]
1a009cca:	b003      	add	sp, #12
1a009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009cd0:	2000      	movs	r0, #0
1a009cd2:	4770      	bx	lr
1a009cd4:	4633      	mov	r3, r6
1a009cd6:	4691      	mov	r9, r2
1a009cd8:	4610      	mov	r0, r2
1a009cda:	4617      	mov	r7, r2
1a009cdc:	464e      	mov	r6, r9
1a009cde:	469b      	mov	fp, r3
1a009ce0:	2f00      	cmp	r7, #0
1a009ce2:	d0a5      	beq.n	1a009c30 <__sfvwrite_r+0x16c>
1a009ce4:	2800      	cmp	r0, #0
1a009ce6:	d1b5      	bne.n	1a009c54 <__sfvwrite_r+0x190>
1a009ce8:	463a      	mov	r2, r7
1a009cea:	210a      	movs	r1, #10
1a009cec:	4630      	mov	r0, r6
1a009cee:	f000 f8ef 	bl	1a009ed0 <memchr>
1a009cf2:	2800      	cmp	r0, #0
1a009cf4:	d1ab      	bne.n	1a009c4e <__sfvwrite_r+0x18a>
1a009cf6:	1c7b      	adds	r3, r7, #1
1a009cf8:	4699      	mov	r9, r3
1a009cfa:	e7ac      	b.n	1a009c56 <__sfvwrite_r+0x192>
1a009cfc:	6923      	ldr	r3, [r4, #16]
1a009cfe:	4283      	cmp	r3, r0
1a009d00:	d315      	bcc.n	1a009d2e <__sfvwrite_r+0x26a>
1a009d02:	6961      	ldr	r1, [r4, #20]
1a009d04:	42a9      	cmp	r1, r5
1a009d06:	d812      	bhi.n	1a009d2e <__sfvwrite_r+0x26a>
1a009d08:	4b2e      	ldr	r3, [pc, #184]	; (1a009dc4 <__sfvwrite_r+0x300>)
1a009d0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a009d0c:	429d      	cmp	r5, r3
1a009d0e:	bf94      	ite	ls
1a009d10:	462b      	movls	r3, r5
1a009d12:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a009d16:	464a      	mov	r2, r9
1a009d18:	fb93 f3f1 	sdiv	r3, r3, r1
1a009d1c:	4650      	mov	r0, sl
1a009d1e:	fb01 f303 	mul.w	r3, r1, r3
1a009d22:	69e1      	ldr	r1, [r4, #28]
1a009d24:	47b8      	blx	r7
1a009d26:	1e07      	subs	r7, r0, #0
1a009d28:	ddc8      	ble.n	1a009cbc <__sfvwrite_r+0x1f8>
1a009d2a:	1bed      	subs	r5, r5, r7
1a009d2c:	e76d      	b.n	1a009c0a <__sfvwrite_r+0x146>
1a009d2e:	42af      	cmp	r7, r5
1a009d30:	bf28      	it	cs
1a009d32:	462f      	movcs	r7, r5
1a009d34:	463a      	mov	r2, r7
1a009d36:	4649      	mov	r1, r9
1a009d38:	f000 f91a 	bl	1a009f70 <memmove>
1a009d3c:	68a3      	ldr	r3, [r4, #8]
1a009d3e:	6822      	ldr	r2, [r4, #0]
1a009d40:	1bdb      	subs	r3, r3, r7
1a009d42:	443a      	add	r2, r7
1a009d44:	60a3      	str	r3, [r4, #8]
1a009d46:	6022      	str	r2, [r4, #0]
1a009d48:	2b00      	cmp	r3, #0
1a009d4a:	d1ee      	bne.n	1a009d2a <__sfvwrite_r+0x266>
1a009d4c:	4621      	mov	r1, r4
1a009d4e:	4650      	mov	r0, sl
1a009d50:	f7fa fc3c 	bl	1a0045cc <_fflush_r>
1a009d54:	2800      	cmp	r0, #0
1a009d56:	d0e8      	beq.n	1a009d2a <__sfvwrite_r+0x266>
1a009d58:	e7b0      	b.n	1a009cbc <__sfvwrite_r+0x1f8>
1a009d5a:	462f      	mov	r7, r5
1a009d5c:	46ab      	mov	fp, r5
1a009d5e:	e748      	b.n	1a009bf2 <__sfvwrite_r+0x12e>
1a009d60:	4621      	mov	r1, r4
1a009d62:	4650      	mov	r0, sl
1a009d64:	f7fa fc32 	bl	1a0045cc <_fflush_r>
1a009d68:	2800      	cmp	r0, #0
1a009d6a:	d08e      	beq.n	1a009c8a <__sfvwrite_r+0x1c6>
1a009d6c:	e7a6      	b.n	1a009cbc <__sfvwrite_r+0x1f8>
1a009d6e:	461a      	mov	r2, r3
1a009d70:	4631      	mov	r1, r6
1a009d72:	9301      	str	r3, [sp, #4]
1a009d74:	f000 f8fc 	bl	1a009f70 <memmove>
1a009d78:	9b01      	ldr	r3, [sp, #4]
1a009d7a:	68a1      	ldr	r1, [r4, #8]
1a009d7c:	6822      	ldr	r2, [r4, #0]
1a009d7e:	1ac9      	subs	r1, r1, r3
1a009d80:	441a      	add	r2, r3
1a009d82:	60a1      	str	r1, [r4, #8]
1a009d84:	6022      	str	r2, [r4, #0]
1a009d86:	461d      	mov	r5, r3
1a009d88:	e77b      	b.n	1a009c82 <__sfvwrite_r+0x1be>
1a009d8a:	4650      	mov	r0, sl
1a009d8c:	f000 fc62 	bl	1a00a654 <_realloc_r>
1a009d90:	4603      	mov	r3, r0
1a009d92:	2800      	cmp	r0, #0
1a009d94:	f47f af23 	bne.w	1a009bde <__sfvwrite_r+0x11a>
1a009d98:	6921      	ldr	r1, [r4, #16]
1a009d9a:	4650      	mov	r0, sl
1a009d9c:	f7fa fcf8 	bl	1a004790 <_free_r>
1a009da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009da4:	220c      	movs	r2, #12
1a009da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a009daa:	f8ca 2000 	str.w	r2, [sl]
1a009dae:	e787      	b.n	1a009cc0 <__sfvwrite_r+0x1fc>
1a009db0:	230c      	movs	r3, #12
1a009db2:	f8ca 3000 	str.w	r3, [sl]
1a009db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009dba:	e781      	b.n	1a009cc0 <__sfvwrite_r+0x1fc>
1a009dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009dc0:	e76c      	b.n	1a009c9c <__sfvwrite_r+0x1d8>
1a009dc2:	bf00      	nop
1a009dc4:	7ffffffe 	.word	0x7ffffffe
1a009dc8:	7ffffc00 	.word	0x7ffffc00

1a009dcc <_localeconv_r>:
1a009dcc:	4800      	ldr	r0, [pc, #0]	; (1a009dd0 <_localeconv_r+0x4>)
1a009dce:	4770      	bx	lr
1a009dd0:	100009b0 	.word	0x100009b0

1a009dd4 <__swhatbuf_r>:
1a009dd4:	b570      	push	{r4, r5, r6, lr}
1a009dd6:	460c      	mov	r4, r1
1a009dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a009ddc:	2900      	cmp	r1, #0
1a009dde:	b096      	sub	sp, #88	; 0x58
1a009de0:	4615      	mov	r5, r2
1a009de2:	461e      	mov	r6, r3
1a009de4:	db14      	blt.n	1a009e10 <__swhatbuf_r+0x3c>
1a009de6:	466a      	mov	r2, sp
1a009de8:	f7f6 fc9f 	bl	1a00072a <_fstat_r>
1a009dec:	2800      	cmp	r0, #0
1a009dee:	db0f      	blt.n	1a009e10 <__swhatbuf_r+0x3c>
1a009df0:	9a01      	ldr	r2, [sp, #4]
1a009df2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a009df6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a009dfa:	fab2 f282 	clz	r2, r2
1a009dfe:	0952      	lsrs	r2, r2, #5
1a009e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a009e04:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a009e08:	6032      	str	r2, [r6, #0]
1a009e0a:	602b      	str	r3, [r5, #0]
1a009e0c:	b016      	add	sp, #88	; 0x58
1a009e0e:	bd70      	pop	{r4, r5, r6, pc}
1a009e10:	89a2      	ldrh	r2, [r4, #12]
1a009e12:	2300      	movs	r3, #0
1a009e14:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a009e18:	6033      	str	r3, [r6, #0]
1a009e1a:	d004      	beq.n	1a009e26 <__swhatbuf_r+0x52>
1a009e1c:	2240      	movs	r2, #64	; 0x40
1a009e1e:	4618      	mov	r0, r3
1a009e20:	602a      	str	r2, [r5, #0]
1a009e22:	b016      	add	sp, #88	; 0x58
1a009e24:	bd70      	pop	{r4, r5, r6, pc}
1a009e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a009e2a:	602b      	str	r3, [r5, #0]
1a009e2c:	b016      	add	sp, #88	; 0x58
1a009e2e:	bd70      	pop	{r4, r5, r6, pc}

1a009e30 <__smakebuf_r>:
1a009e30:	898a      	ldrh	r2, [r1, #12]
1a009e32:	0792      	lsls	r2, r2, #30
1a009e34:	460b      	mov	r3, r1
1a009e36:	d506      	bpl.n	1a009e46 <__smakebuf_r+0x16>
1a009e38:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a009e3c:	2101      	movs	r1, #1
1a009e3e:	601a      	str	r2, [r3, #0]
1a009e40:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a009e44:	4770      	bx	lr
1a009e46:	b570      	push	{r4, r5, r6, lr}
1a009e48:	b082      	sub	sp, #8
1a009e4a:	ab01      	add	r3, sp, #4
1a009e4c:	466a      	mov	r2, sp
1a009e4e:	460c      	mov	r4, r1
1a009e50:	4606      	mov	r6, r0
1a009e52:	f7ff ffbf 	bl	1a009dd4 <__swhatbuf_r>
1a009e56:	9900      	ldr	r1, [sp, #0]
1a009e58:	4605      	mov	r5, r0
1a009e5a:	4630      	mov	r0, r6
1a009e5c:	f7fa fde4 	bl	1a004a28 <_malloc_r>
1a009e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009e64:	b170      	cbz	r0, 1a009e84 <__smakebuf_r+0x54>
1a009e66:	4916      	ldr	r1, [pc, #88]	; (1a009ec0 <__smakebuf_r+0x90>)
1a009e68:	63f1      	str	r1, [r6, #60]	; 0x3c
1a009e6a:	9a01      	ldr	r2, [sp, #4]
1a009e6c:	9900      	ldr	r1, [sp, #0]
1a009e6e:	6020      	str	r0, [r4, #0]
1a009e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a009e74:	81a3      	strh	r3, [r4, #12]
1a009e76:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a009e7a:	b98a      	cbnz	r2, 1a009ea0 <__smakebuf_r+0x70>
1a009e7c:	432b      	orrs	r3, r5
1a009e7e:	81a3      	strh	r3, [r4, #12]
1a009e80:	b002      	add	sp, #8
1a009e82:	bd70      	pop	{r4, r5, r6, pc}
1a009e84:	059a      	lsls	r2, r3, #22
1a009e86:	d4fb      	bmi.n	1a009e80 <__smakebuf_r+0x50>
1a009e88:	f023 0303 	bic.w	r3, r3, #3
1a009e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a009e90:	f043 0302 	orr.w	r3, r3, #2
1a009e94:	2101      	movs	r1, #1
1a009e96:	81a3      	strh	r3, [r4, #12]
1a009e98:	6022      	str	r2, [r4, #0]
1a009e9a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a009e9e:	e7ef      	b.n	1a009e80 <__smakebuf_r+0x50>
1a009ea0:	4630      	mov	r0, r6
1a009ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a009ea6:	f7f6 fc45 	bl	1a000734 <_isatty_r>
1a009eaa:	b910      	cbnz	r0, 1a009eb2 <__smakebuf_r+0x82>
1a009eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009eb0:	e7e4      	b.n	1a009e7c <__smakebuf_r+0x4c>
1a009eb2:	89a3      	ldrh	r3, [r4, #12]
1a009eb4:	f023 0303 	bic.w	r3, r3, #3
1a009eb8:	f043 0301 	orr.w	r3, r3, #1
1a009ebc:	b21b      	sxth	r3, r3
1a009ebe:	e7dd      	b.n	1a009e7c <__smakebuf_r+0x4c>
1a009ec0:	1a004679 	.word	0x1a004679
1a009ec4:	ffffffff 	.word	0xffffffff
1a009ec8:	ffffffff 	.word	0xffffffff
1a009ecc:	ffffffff 	.word	0xffffffff

1a009ed0 <memchr>:
1a009ed0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009ed4:	2a10      	cmp	r2, #16
1a009ed6:	db2b      	blt.n	1a009f30 <memchr+0x60>
1a009ed8:	f010 0f07 	tst.w	r0, #7
1a009edc:	d008      	beq.n	1a009ef0 <memchr+0x20>
1a009ede:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009ee2:	3a01      	subs	r2, #1
1a009ee4:	428b      	cmp	r3, r1
1a009ee6:	d02d      	beq.n	1a009f44 <memchr+0x74>
1a009ee8:	f010 0f07 	tst.w	r0, #7
1a009eec:	b342      	cbz	r2, 1a009f40 <memchr+0x70>
1a009eee:	d1f6      	bne.n	1a009ede <memchr+0xe>
1a009ef0:	b4f0      	push	{r4, r5, r6, r7}
1a009ef2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a009ef6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a009efa:	f022 0407 	bic.w	r4, r2, #7
1a009efe:	f07f 0700 	mvns.w	r7, #0
1a009f02:	2300      	movs	r3, #0
1a009f04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a009f08:	3c08      	subs	r4, #8
1a009f0a:	ea85 0501 	eor.w	r5, r5, r1
1a009f0e:	ea86 0601 	eor.w	r6, r6, r1
1a009f12:	fa85 f547 	uadd8	r5, r5, r7
1a009f16:	faa3 f587 	sel	r5, r3, r7
1a009f1a:	fa86 f647 	uadd8	r6, r6, r7
1a009f1e:	faa5 f687 	sel	r6, r5, r7
1a009f22:	b98e      	cbnz	r6, 1a009f48 <memchr+0x78>
1a009f24:	d1ee      	bne.n	1a009f04 <memchr+0x34>
1a009f26:	bcf0      	pop	{r4, r5, r6, r7}
1a009f28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009f2c:	f002 0207 	and.w	r2, r2, #7
1a009f30:	b132      	cbz	r2, 1a009f40 <memchr+0x70>
1a009f32:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009f36:	3a01      	subs	r2, #1
1a009f38:	ea83 0301 	eor.w	r3, r3, r1
1a009f3c:	b113      	cbz	r3, 1a009f44 <memchr+0x74>
1a009f3e:	d1f8      	bne.n	1a009f32 <memchr+0x62>
1a009f40:	2000      	movs	r0, #0
1a009f42:	4770      	bx	lr
1a009f44:	3801      	subs	r0, #1
1a009f46:	4770      	bx	lr
1a009f48:	2d00      	cmp	r5, #0
1a009f4a:	bf06      	itte	eq
1a009f4c:	4635      	moveq	r5, r6
1a009f4e:	3803      	subeq	r0, #3
1a009f50:	3807      	subne	r0, #7
1a009f52:	f015 0f01 	tst.w	r5, #1
1a009f56:	d107      	bne.n	1a009f68 <memchr+0x98>
1a009f58:	3001      	adds	r0, #1
1a009f5a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a009f5e:	bf02      	ittt	eq
1a009f60:	3001      	addeq	r0, #1
1a009f62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a009f66:	3001      	addeq	r0, #1
1a009f68:	bcf0      	pop	{r4, r5, r6, r7}
1a009f6a:	3801      	subs	r0, #1
1a009f6c:	4770      	bx	lr
1a009f6e:	bf00      	nop

1a009f70 <memmove>:
1a009f70:	4288      	cmp	r0, r1
1a009f72:	b4f0      	push	{r4, r5, r6, r7}
1a009f74:	d90d      	bls.n	1a009f92 <memmove+0x22>
1a009f76:	188b      	adds	r3, r1, r2
1a009f78:	4283      	cmp	r3, r0
1a009f7a:	d90a      	bls.n	1a009f92 <memmove+0x22>
1a009f7c:	1884      	adds	r4, r0, r2
1a009f7e:	b132      	cbz	r2, 1a009f8e <memmove+0x1e>
1a009f80:	4622      	mov	r2, r4
1a009f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a009f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a009f8a:	4299      	cmp	r1, r3
1a009f8c:	d1f9      	bne.n	1a009f82 <memmove+0x12>
1a009f8e:	bcf0      	pop	{r4, r5, r6, r7}
1a009f90:	4770      	bx	lr
1a009f92:	2a0f      	cmp	r2, #15
1a009f94:	d80e      	bhi.n	1a009fb4 <memmove+0x44>
1a009f96:	4603      	mov	r3, r0
1a009f98:	1e54      	subs	r4, r2, #1
1a009f9a:	2a00      	cmp	r2, #0
1a009f9c:	d0f7      	beq.n	1a009f8e <memmove+0x1e>
1a009f9e:	3401      	adds	r4, #1
1a009fa0:	440c      	add	r4, r1
1a009fa2:	3b01      	subs	r3, #1
1a009fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a009fa8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a009fac:	42a1      	cmp	r1, r4
1a009fae:	d1f9      	bne.n	1a009fa4 <memmove+0x34>
1a009fb0:	bcf0      	pop	{r4, r5, r6, r7}
1a009fb2:	4770      	bx	lr
1a009fb4:	ea40 0301 	orr.w	r3, r0, r1
1a009fb8:	079b      	lsls	r3, r3, #30
1a009fba:	d13b      	bne.n	1a00a034 <memmove+0xc4>
1a009fbc:	f1a2 0710 	sub.w	r7, r2, #16
1a009fc0:	093f      	lsrs	r7, r7, #4
1a009fc2:	f101 0620 	add.w	r6, r1, #32
1a009fc6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a009fca:	f101 0310 	add.w	r3, r1, #16
1a009fce:	f100 0410 	add.w	r4, r0, #16
1a009fd2:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a009fd6:	f844 5c10 	str.w	r5, [r4, #-16]
1a009fda:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a009fde:	f844 5c0c 	str.w	r5, [r4, #-12]
1a009fe2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a009fe6:	f844 5c08 	str.w	r5, [r4, #-8]
1a009fea:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a009fee:	f844 5c04 	str.w	r5, [r4, #-4]
1a009ff2:	3310      	adds	r3, #16
1a009ff4:	42b3      	cmp	r3, r6
1a009ff6:	f104 0410 	add.w	r4, r4, #16
1a009ffa:	d1ea      	bne.n	1a009fd2 <memmove+0x62>
1a009ffc:	1c7b      	adds	r3, r7, #1
1a009ffe:	011b      	lsls	r3, r3, #4
1a00a000:	f012 0f0c 	tst.w	r2, #12
1a00a004:	4419      	add	r1, r3
1a00a006:	f002 050f 	and.w	r5, r2, #15
1a00a00a:	4403      	add	r3, r0
1a00a00c:	d015      	beq.n	1a00a03a <memmove+0xca>
1a00a00e:	3d04      	subs	r5, #4
1a00a010:	08ad      	lsrs	r5, r5, #2
1a00a012:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a00a016:	1f1c      	subs	r4, r3, #4
1a00a018:	460e      	mov	r6, r1
1a00a01a:	f856 7b04 	ldr.w	r7, [r6], #4
1a00a01e:	f844 7f04 	str.w	r7, [r4, #4]!
1a00a022:	4564      	cmp	r4, ip
1a00a024:	d1f9      	bne.n	1a00a01a <memmove+0xaa>
1a00a026:	3501      	adds	r5, #1
1a00a028:	00ad      	lsls	r5, r5, #2
1a00a02a:	442b      	add	r3, r5
1a00a02c:	4429      	add	r1, r5
1a00a02e:	f002 0203 	and.w	r2, r2, #3
1a00a032:	e7b1      	b.n	1a009f98 <memmove+0x28>
1a00a034:	1e54      	subs	r4, r2, #1
1a00a036:	4603      	mov	r3, r0
1a00a038:	e7b1      	b.n	1a009f9e <memmove+0x2e>
1a00a03a:	462a      	mov	r2, r5
1a00a03c:	e7ac      	b.n	1a009f98 <memmove+0x28>
1a00a03e:	bf00      	nop

1a00a040 <_Balloc>:
1a00a040:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00a042:	b570      	push	{r4, r5, r6, lr}
1a00a044:	4605      	mov	r5, r0
1a00a046:	460c      	mov	r4, r1
1a00a048:	b14b      	cbz	r3, 1a00a05e <_Balloc+0x1e>
1a00a04a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00a04e:	b180      	cbz	r0, 1a00a072 <_Balloc+0x32>
1a00a050:	6802      	ldr	r2, [r0, #0]
1a00a052:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00a056:	2300      	movs	r3, #0
1a00a058:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00a05c:	bd70      	pop	{r4, r5, r6, pc}
1a00a05e:	2221      	movs	r2, #33	; 0x21
1a00a060:	2104      	movs	r1, #4
1a00a062:	f000 fddf 	bl	1a00ac24 <_calloc_r>
1a00a066:	4603      	mov	r3, r0
1a00a068:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00a06a:	2800      	cmp	r0, #0
1a00a06c:	d1ed      	bne.n	1a00a04a <_Balloc+0xa>
1a00a06e:	2000      	movs	r0, #0
1a00a070:	bd70      	pop	{r4, r5, r6, pc}
1a00a072:	2101      	movs	r1, #1
1a00a074:	fa01 f604 	lsl.w	r6, r1, r4
1a00a078:	1d72      	adds	r2, r6, #5
1a00a07a:	4628      	mov	r0, r5
1a00a07c:	0092      	lsls	r2, r2, #2
1a00a07e:	f000 fdd1 	bl	1a00ac24 <_calloc_r>
1a00a082:	2800      	cmp	r0, #0
1a00a084:	d0f3      	beq.n	1a00a06e <_Balloc+0x2e>
1a00a086:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00a08a:	e7e4      	b.n	1a00a056 <_Balloc+0x16>

1a00a08c <_Bfree>:
1a00a08c:	b131      	cbz	r1, 1a00a09c <_Bfree+0x10>
1a00a08e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00a090:	684a      	ldr	r2, [r1, #4]
1a00a092:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00a096:	6008      	str	r0, [r1, #0]
1a00a098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00a09c:	4770      	bx	lr
1a00a09e:	bf00      	nop

1a00a0a0 <__multadd>:
1a00a0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00a0a2:	690c      	ldr	r4, [r1, #16]
1a00a0a4:	b083      	sub	sp, #12
1a00a0a6:	460d      	mov	r5, r1
1a00a0a8:	4606      	mov	r6, r0
1a00a0aa:	f101 0c14 	add.w	ip, r1, #20
1a00a0ae:	2700      	movs	r7, #0
1a00a0b0:	f8dc 0000 	ldr.w	r0, [ip]
1a00a0b4:	b281      	uxth	r1, r0
1a00a0b6:	fb02 3301 	mla	r3, r2, r1, r3
1a00a0ba:	0c19      	lsrs	r1, r3, #16
1a00a0bc:	0c00      	lsrs	r0, r0, #16
1a00a0be:	fb02 1000 	mla	r0, r2, r0, r1
1a00a0c2:	b29b      	uxth	r3, r3
1a00a0c4:	3701      	adds	r7, #1
1a00a0c6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00a0ca:	42bc      	cmp	r4, r7
1a00a0cc:	f84c 3b04 	str.w	r3, [ip], #4
1a00a0d0:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a00a0d4:	dcec      	bgt.n	1a00a0b0 <__multadd+0x10>
1a00a0d6:	b13b      	cbz	r3, 1a00a0e8 <__multadd+0x48>
1a00a0d8:	68aa      	ldr	r2, [r5, #8]
1a00a0da:	42a2      	cmp	r2, r4
1a00a0dc:	dd07      	ble.n	1a00a0ee <__multadd+0x4e>
1a00a0de:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00a0e2:	3401      	adds	r4, #1
1a00a0e4:	6153      	str	r3, [r2, #20]
1a00a0e6:	612c      	str	r4, [r5, #16]
1a00a0e8:	4628      	mov	r0, r5
1a00a0ea:	b003      	add	sp, #12
1a00a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a0ee:	6869      	ldr	r1, [r5, #4]
1a00a0f0:	9301      	str	r3, [sp, #4]
1a00a0f2:	3101      	adds	r1, #1
1a00a0f4:	4630      	mov	r0, r6
1a00a0f6:	f7ff ffa3 	bl	1a00a040 <_Balloc>
1a00a0fa:	692a      	ldr	r2, [r5, #16]
1a00a0fc:	3202      	adds	r2, #2
1a00a0fe:	f105 010c 	add.w	r1, r5, #12
1a00a102:	4607      	mov	r7, r0
1a00a104:	0092      	lsls	r2, r2, #2
1a00a106:	300c      	adds	r0, #12
1a00a108:	f7fa ff46 	bl	1a004f98 <memcpy>
1a00a10c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00a10e:	6869      	ldr	r1, [r5, #4]
1a00a110:	9b01      	ldr	r3, [sp, #4]
1a00a112:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00a116:	6028      	str	r0, [r5, #0]
1a00a118:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00a11c:	463d      	mov	r5, r7
1a00a11e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00a122:	3401      	adds	r4, #1
1a00a124:	6153      	str	r3, [r2, #20]
1a00a126:	612c      	str	r4, [r5, #16]
1a00a128:	e7de      	b.n	1a00a0e8 <__multadd+0x48>
1a00a12a:	bf00      	nop

1a00a12c <__hi0bits>:
1a00a12c:	0c02      	lsrs	r2, r0, #16
1a00a12e:	0412      	lsls	r2, r2, #16
1a00a130:	4603      	mov	r3, r0
1a00a132:	b9ca      	cbnz	r2, 1a00a168 <__hi0bits+0x3c>
1a00a134:	0403      	lsls	r3, r0, #16
1a00a136:	2010      	movs	r0, #16
1a00a138:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00a13c:	bf04      	itt	eq
1a00a13e:	021b      	lsleq	r3, r3, #8
1a00a140:	3008      	addeq	r0, #8
1a00a142:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00a146:	bf04      	itt	eq
1a00a148:	011b      	lsleq	r3, r3, #4
1a00a14a:	3004      	addeq	r0, #4
1a00a14c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00a150:	bf04      	itt	eq
1a00a152:	009b      	lsleq	r3, r3, #2
1a00a154:	3002      	addeq	r0, #2
1a00a156:	2b00      	cmp	r3, #0
1a00a158:	db05      	blt.n	1a00a166 <__hi0bits+0x3a>
1a00a15a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00a15e:	f100 0001 	add.w	r0, r0, #1
1a00a162:	bf08      	it	eq
1a00a164:	2020      	moveq	r0, #32
1a00a166:	4770      	bx	lr
1a00a168:	2000      	movs	r0, #0
1a00a16a:	e7e5      	b.n	1a00a138 <__hi0bits+0xc>

1a00a16c <__lo0bits>:
1a00a16c:	6803      	ldr	r3, [r0, #0]
1a00a16e:	f013 0207 	ands.w	r2, r3, #7
1a00a172:	4601      	mov	r1, r0
1a00a174:	d007      	beq.n	1a00a186 <__lo0bits+0x1a>
1a00a176:	07da      	lsls	r2, r3, #31
1a00a178:	d420      	bmi.n	1a00a1bc <__lo0bits+0x50>
1a00a17a:	0798      	lsls	r0, r3, #30
1a00a17c:	d522      	bpl.n	1a00a1c4 <__lo0bits+0x58>
1a00a17e:	085b      	lsrs	r3, r3, #1
1a00a180:	600b      	str	r3, [r1, #0]
1a00a182:	2001      	movs	r0, #1
1a00a184:	4770      	bx	lr
1a00a186:	b298      	uxth	r0, r3
1a00a188:	b9b0      	cbnz	r0, 1a00a1b8 <__lo0bits+0x4c>
1a00a18a:	0c1b      	lsrs	r3, r3, #16
1a00a18c:	2010      	movs	r0, #16
1a00a18e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00a192:	bf04      	itt	eq
1a00a194:	0a1b      	lsreq	r3, r3, #8
1a00a196:	3008      	addeq	r0, #8
1a00a198:	071a      	lsls	r2, r3, #28
1a00a19a:	bf04      	itt	eq
1a00a19c:	091b      	lsreq	r3, r3, #4
1a00a19e:	3004      	addeq	r0, #4
1a00a1a0:	079a      	lsls	r2, r3, #30
1a00a1a2:	bf04      	itt	eq
1a00a1a4:	089b      	lsreq	r3, r3, #2
1a00a1a6:	3002      	addeq	r0, #2
1a00a1a8:	07da      	lsls	r2, r3, #31
1a00a1aa:	d403      	bmi.n	1a00a1b4 <__lo0bits+0x48>
1a00a1ac:	085b      	lsrs	r3, r3, #1
1a00a1ae:	f100 0001 	add.w	r0, r0, #1
1a00a1b2:	d005      	beq.n	1a00a1c0 <__lo0bits+0x54>
1a00a1b4:	600b      	str	r3, [r1, #0]
1a00a1b6:	4770      	bx	lr
1a00a1b8:	4610      	mov	r0, r2
1a00a1ba:	e7e8      	b.n	1a00a18e <__lo0bits+0x22>
1a00a1bc:	2000      	movs	r0, #0
1a00a1be:	4770      	bx	lr
1a00a1c0:	2020      	movs	r0, #32
1a00a1c2:	4770      	bx	lr
1a00a1c4:	089b      	lsrs	r3, r3, #2
1a00a1c6:	600b      	str	r3, [r1, #0]
1a00a1c8:	2002      	movs	r0, #2
1a00a1ca:	4770      	bx	lr

1a00a1cc <__i2b>:
1a00a1cc:	b510      	push	{r4, lr}
1a00a1ce:	460c      	mov	r4, r1
1a00a1d0:	2101      	movs	r1, #1
1a00a1d2:	f7ff ff35 	bl	1a00a040 <_Balloc>
1a00a1d6:	2201      	movs	r2, #1
1a00a1d8:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00a1dc:	bd10      	pop	{r4, pc}
1a00a1de:	bf00      	nop

1a00a1e0 <__multiply>:
1a00a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a1e4:	690e      	ldr	r6, [r1, #16]
1a00a1e6:	6917      	ldr	r7, [r2, #16]
1a00a1e8:	42be      	cmp	r6, r7
1a00a1ea:	b083      	sub	sp, #12
1a00a1ec:	460c      	mov	r4, r1
1a00a1ee:	4615      	mov	r5, r2
1a00a1f0:	db05      	blt.n	1a00a1fe <__multiply+0x1e>
1a00a1f2:	463a      	mov	r2, r7
1a00a1f4:	462b      	mov	r3, r5
1a00a1f6:	4637      	mov	r7, r6
1a00a1f8:	460d      	mov	r5, r1
1a00a1fa:	4616      	mov	r6, r2
1a00a1fc:	461c      	mov	r4, r3
1a00a1fe:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a00a202:	eb07 0806 	add.w	r8, r7, r6
1a00a206:	4543      	cmp	r3, r8
1a00a208:	bfb8      	it	lt
1a00a20a:	3101      	addlt	r1, #1
1a00a20c:	f7ff ff18 	bl	1a00a040 <_Balloc>
1a00a210:	f100 0a14 	add.w	sl, r0, #20
1a00a214:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a00a218:	45ca      	cmp	sl, r9
1a00a21a:	9000      	str	r0, [sp, #0]
1a00a21c:	d205      	bcs.n	1a00a22a <__multiply+0x4a>
1a00a21e:	4653      	mov	r3, sl
1a00a220:	2100      	movs	r1, #0
1a00a222:	f843 1b04 	str.w	r1, [r3], #4
1a00a226:	4599      	cmp	r9, r3
1a00a228:	d8fb      	bhi.n	1a00a222 <__multiply+0x42>
1a00a22a:	f104 0e14 	add.w	lr, r4, #20
1a00a22e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a00a232:	f105 0314 	add.w	r3, r5, #20
1a00a236:	45de      	cmp	lr, fp
1a00a238:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00a23c:	d253      	bcs.n	1a00a2e6 <__multiply+0x106>
1a00a23e:	f8cd 8004 	str.w	r8, [sp, #4]
1a00a242:	4698      	mov	r8, r3
1a00a244:	e005      	b.n	1a00a252 <__multiply+0x72>
1a00a246:	0c09      	lsrs	r1, r1, #16
1a00a248:	d128      	bne.n	1a00a29c <__multiply+0xbc>
1a00a24a:	45f3      	cmp	fp, lr
1a00a24c:	f10a 0a04 	add.w	sl, sl, #4
1a00a250:	d947      	bls.n	1a00a2e2 <__multiply+0x102>
1a00a252:	f85e 1b04 	ldr.w	r1, [lr], #4
1a00a256:	b28e      	uxth	r6, r1
1a00a258:	2e00      	cmp	r6, #0
1a00a25a:	d0f4      	beq.n	1a00a246 <__multiply+0x66>
1a00a25c:	4645      	mov	r5, r8
1a00a25e:	4654      	mov	r4, sl
1a00a260:	2300      	movs	r3, #0
1a00a262:	f855 1b04 	ldr.w	r1, [r5], #4
1a00a266:	6820      	ldr	r0, [r4, #0]
1a00a268:	b28a      	uxth	r2, r1
1a00a26a:	fa1f fc80 	uxth.w	ip, r0
1a00a26e:	fb06 c202 	mla	r2, r6, r2, ip
1a00a272:	0c09      	lsrs	r1, r1, #16
1a00a274:	0c00      	lsrs	r0, r0, #16
1a00a276:	4413      	add	r3, r2
1a00a278:	fb06 0201 	mla	r2, r6, r1, r0
1a00a27c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a00a280:	b29b      	uxth	r3, r3
1a00a282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a286:	42af      	cmp	r7, r5
1a00a288:	f844 3b04 	str.w	r3, [r4], #4
1a00a28c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a00a290:	d8e7      	bhi.n	1a00a262 <__multiply+0x82>
1a00a292:	6023      	str	r3, [r4, #0]
1a00a294:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a00a298:	0c09      	lsrs	r1, r1, #16
1a00a29a:	d0d6      	beq.n	1a00a24a <__multiply+0x6a>
1a00a29c:	f8da 3000 	ldr.w	r3, [sl]
1a00a2a0:	4640      	mov	r0, r8
1a00a2a2:	461a      	mov	r2, r3
1a00a2a4:	4654      	mov	r4, sl
1a00a2a6:	f04f 0c00 	mov.w	ip, #0
1a00a2aa:	8805      	ldrh	r5, [r0, #0]
1a00a2ac:	0c12      	lsrs	r2, r2, #16
1a00a2ae:	fb01 2205 	mla	r2, r1, r5, r2
1a00a2b2:	4494      	add	ip, r2
1a00a2b4:	b29b      	uxth	r3, r3
1a00a2b6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00a2ba:	f844 3b04 	str.w	r3, [r4], #4
1a00a2be:	f850 3b04 	ldr.w	r3, [r0], #4
1a00a2c2:	6822      	ldr	r2, [r4, #0]
1a00a2c4:	0c1b      	lsrs	r3, r3, #16
1a00a2c6:	b295      	uxth	r5, r2
1a00a2c8:	fb01 5303 	mla	r3, r1, r3, r5
1a00a2cc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a00a2d0:	4287      	cmp	r7, r0
1a00a2d2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00a2d6:	d8e8      	bhi.n	1a00a2aa <__multiply+0xca>
1a00a2d8:	45f3      	cmp	fp, lr
1a00a2da:	6023      	str	r3, [r4, #0]
1a00a2dc:	f10a 0a04 	add.w	sl, sl, #4
1a00a2e0:	d8b7      	bhi.n	1a00a252 <__multiply+0x72>
1a00a2e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a00a2e6:	f1b8 0f00 	cmp.w	r8, #0
1a00a2ea:	dd0b      	ble.n	1a00a304 <__multiply+0x124>
1a00a2ec:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a00a2f0:	f1a9 0904 	sub.w	r9, r9, #4
1a00a2f4:	b11b      	cbz	r3, 1a00a2fe <__multiply+0x11e>
1a00a2f6:	e005      	b.n	1a00a304 <__multiply+0x124>
1a00a2f8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00a2fc:	b913      	cbnz	r3, 1a00a304 <__multiply+0x124>
1a00a2fe:	f1b8 0801 	subs.w	r8, r8, #1
1a00a302:	d1f9      	bne.n	1a00a2f8 <__multiply+0x118>
1a00a304:	9800      	ldr	r0, [sp, #0]
1a00a306:	f8c0 8010 	str.w	r8, [r0, #16]
1a00a30a:	b003      	add	sp, #12
1a00a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00a310 <__pow5mult>:
1a00a310:	f012 0303 	ands.w	r3, r2, #3
1a00a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00a318:	4614      	mov	r4, r2
1a00a31a:	4607      	mov	r7, r0
1a00a31c:	d12e      	bne.n	1a00a37c <__pow5mult+0x6c>
1a00a31e:	460d      	mov	r5, r1
1a00a320:	10a4      	asrs	r4, r4, #2
1a00a322:	d01c      	beq.n	1a00a35e <__pow5mult+0x4e>
1a00a324:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a00a326:	b396      	cbz	r6, 1a00a38e <__pow5mult+0x7e>
1a00a328:	07e3      	lsls	r3, r4, #31
1a00a32a:	f04f 0800 	mov.w	r8, #0
1a00a32e:	d406      	bmi.n	1a00a33e <__pow5mult+0x2e>
1a00a330:	1064      	asrs	r4, r4, #1
1a00a332:	d014      	beq.n	1a00a35e <__pow5mult+0x4e>
1a00a334:	6830      	ldr	r0, [r6, #0]
1a00a336:	b1a8      	cbz	r0, 1a00a364 <__pow5mult+0x54>
1a00a338:	4606      	mov	r6, r0
1a00a33a:	07e3      	lsls	r3, r4, #31
1a00a33c:	d5f8      	bpl.n	1a00a330 <__pow5mult+0x20>
1a00a33e:	4632      	mov	r2, r6
1a00a340:	4629      	mov	r1, r5
1a00a342:	4638      	mov	r0, r7
1a00a344:	f7ff ff4c 	bl	1a00a1e0 <__multiply>
1a00a348:	b1b5      	cbz	r5, 1a00a378 <__pow5mult+0x68>
1a00a34a:	686a      	ldr	r2, [r5, #4]
1a00a34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00a34e:	1064      	asrs	r4, r4, #1
1a00a350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00a354:	6029      	str	r1, [r5, #0]
1a00a356:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00a35a:	4605      	mov	r5, r0
1a00a35c:	d1ea      	bne.n	1a00a334 <__pow5mult+0x24>
1a00a35e:	4628      	mov	r0, r5
1a00a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00a364:	4632      	mov	r2, r6
1a00a366:	4631      	mov	r1, r6
1a00a368:	4638      	mov	r0, r7
1a00a36a:	f7ff ff39 	bl	1a00a1e0 <__multiply>
1a00a36e:	6030      	str	r0, [r6, #0]
1a00a370:	f8c0 8000 	str.w	r8, [r0]
1a00a374:	4606      	mov	r6, r0
1a00a376:	e7e0      	b.n	1a00a33a <__pow5mult+0x2a>
1a00a378:	4605      	mov	r5, r0
1a00a37a:	e7d9      	b.n	1a00a330 <__pow5mult+0x20>
1a00a37c:	3b01      	subs	r3, #1
1a00a37e:	4a0b      	ldr	r2, [pc, #44]	; (1a00a3ac <__pow5mult+0x9c>)
1a00a380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00a384:	2300      	movs	r3, #0
1a00a386:	f7ff fe8b 	bl	1a00a0a0 <__multadd>
1a00a38a:	4605      	mov	r5, r0
1a00a38c:	e7c8      	b.n	1a00a320 <__pow5mult+0x10>
1a00a38e:	2101      	movs	r1, #1
1a00a390:	4638      	mov	r0, r7
1a00a392:	f7ff fe55 	bl	1a00a040 <_Balloc>
1a00a396:	f240 2371 	movw	r3, #625	; 0x271
1a00a39a:	6143      	str	r3, [r0, #20]
1a00a39c:	2201      	movs	r2, #1
1a00a39e:	2300      	movs	r3, #0
1a00a3a0:	6102      	str	r2, [r0, #16]
1a00a3a2:	4606      	mov	r6, r0
1a00a3a4:	64b8      	str	r0, [r7, #72]	; 0x48
1a00a3a6:	6003      	str	r3, [r0, #0]
1a00a3a8:	e7be      	b.n	1a00a328 <__pow5mult+0x18>
1a00a3aa:	bf00      	nop
1a00a3ac:	1a00b4f8 	.word	0x1a00b4f8

1a00a3b0 <__lshift>:
1a00a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00a3b4:	690e      	ldr	r6, [r1, #16]
1a00a3b6:	460d      	mov	r5, r1
1a00a3b8:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00a3bc:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a00a3c0:	444e      	add	r6, r9
1a00a3c2:	1c74      	adds	r4, r6, #1
1a00a3c4:	429c      	cmp	r4, r3
1a00a3c6:	4690      	mov	r8, r2
1a00a3c8:	4607      	mov	r7, r0
1a00a3ca:	dd04      	ble.n	1a00a3d6 <__lshift+0x26>
1a00a3cc:	005b      	lsls	r3, r3, #1
1a00a3ce:	429c      	cmp	r4, r3
1a00a3d0:	f101 0101 	add.w	r1, r1, #1
1a00a3d4:	dcfa      	bgt.n	1a00a3cc <__lshift+0x1c>
1a00a3d6:	4638      	mov	r0, r7
1a00a3d8:	f7ff fe32 	bl	1a00a040 <_Balloc>
1a00a3dc:	f1b9 0f00 	cmp.w	r9, #0
1a00a3e0:	f100 0c14 	add.w	ip, r0, #20
1a00a3e4:	dd0e      	ble.n	1a00a404 <__lshift+0x54>
1a00a3e6:	f109 0905 	add.w	r9, r9, #5
1a00a3ea:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a00a3ee:	eb00 0109 	add.w	r1, r0, r9
1a00a3f2:	4663      	mov	r3, ip
1a00a3f4:	2200      	movs	r2, #0
1a00a3f6:	f843 2b04 	str.w	r2, [r3], #4
1a00a3fa:	428b      	cmp	r3, r1
1a00a3fc:	d1fb      	bne.n	1a00a3f6 <__lshift+0x46>
1a00a3fe:	f1a9 0914 	sub.w	r9, r9, #20
1a00a402:	44cc      	add	ip, r9
1a00a404:	6929      	ldr	r1, [r5, #16]
1a00a406:	f105 0314 	add.w	r3, r5, #20
1a00a40a:	f018 081f 	ands.w	r8, r8, #31
1a00a40e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a00a412:	d01d      	beq.n	1a00a450 <__lshift+0xa0>
1a00a414:	f1c8 0920 	rsb	r9, r8, #32
1a00a418:	2200      	movs	r2, #0
1a00a41a:	6819      	ldr	r1, [r3, #0]
1a00a41c:	fa01 f108 	lsl.w	r1, r1, r8
1a00a420:	4311      	orrs	r1, r2
1a00a422:	f84c 1b04 	str.w	r1, [ip], #4
1a00a426:	f853 2b04 	ldr.w	r2, [r3], #4
1a00a42a:	4573      	cmp	r3, lr
1a00a42c:	fa22 f209 	lsr.w	r2, r2, r9
1a00a430:	d3f3      	bcc.n	1a00a41a <__lshift+0x6a>
1a00a432:	f8cc 2000 	str.w	r2, [ip]
1a00a436:	2a00      	cmp	r2, #0
1a00a438:	bf18      	it	ne
1a00a43a:	4626      	movne	r6, r4
1a00a43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00a43e:	686a      	ldr	r2, [r5, #4]
1a00a440:	6106      	str	r6, [r0, #16]
1a00a442:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00a446:	6029      	str	r1, [r5, #0]
1a00a448:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00a450:	f1ac 0c04 	sub.w	ip, ip, #4
1a00a454:	f853 2b04 	ldr.w	r2, [r3], #4
1a00a458:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00a45c:	459e      	cmp	lr, r3
1a00a45e:	d8f9      	bhi.n	1a00a454 <__lshift+0xa4>
1a00a460:	e7ec      	b.n	1a00a43c <__lshift+0x8c>
1a00a462:	bf00      	nop

1a00a464 <__mcmp>:
1a00a464:	b430      	push	{r4, r5}
1a00a466:	690b      	ldr	r3, [r1, #16]
1a00a468:	4605      	mov	r5, r0
1a00a46a:	6900      	ldr	r0, [r0, #16]
1a00a46c:	1ac0      	subs	r0, r0, r3
1a00a46e:	d110      	bne.n	1a00a492 <__mcmp+0x2e>
1a00a470:	009b      	lsls	r3, r3, #2
1a00a472:	3514      	adds	r5, #20
1a00a474:	3114      	adds	r1, #20
1a00a476:	4419      	add	r1, r3
1a00a478:	442b      	add	r3, r5
1a00a47a:	e001      	b.n	1a00a480 <__mcmp+0x1c>
1a00a47c:	429d      	cmp	r5, r3
1a00a47e:	d208      	bcs.n	1a00a492 <__mcmp+0x2e>
1a00a480:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00a484:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00a488:	4294      	cmp	r4, r2
1a00a48a:	d0f7      	beq.n	1a00a47c <__mcmp+0x18>
1a00a48c:	d203      	bcs.n	1a00a496 <__mcmp+0x32>
1a00a48e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00a492:	bc30      	pop	{r4, r5}
1a00a494:	4770      	bx	lr
1a00a496:	2001      	movs	r0, #1
1a00a498:	bc30      	pop	{r4, r5}
1a00a49a:	4770      	bx	lr

1a00a49c <__mdiff>:
1a00a49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00a4a0:	460f      	mov	r7, r1
1a00a4a2:	690d      	ldr	r5, [r1, #16]
1a00a4a4:	6911      	ldr	r1, [r2, #16]
1a00a4a6:	1a6d      	subs	r5, r5, r1
1a00a4a8:	2d00      	cmp	r5, #0
1a00a4aa:	4690      	mov	r8, r2
1a00a4ac:	4684      	mov	ip, r0
1a00a4ae:	f107 0414 	add.w	r4, r7, #20
1a00a4b2:	f102 0614 	add.w	r6, r2, #20
1a00a4b6:	d114      	bne.n	1a00a4e2 <__mdiff+0x46>
1a00a4b8:	0089      	lsls	r1, r1, #2
1a00a4ba:	1863      	adds	r3, r4, r1
1a00a4bc:	4431      	add	r1, r6
1a00a4be:	e001      	b.n	1a00a4c4 <__mdiff+0x28>
1a00a4c0:	42a3      	cmp	r3, r4
1a00a4c2:	d95d      	bls.n	1a00a580 <__mdiff+0xe4>
1a00a4c4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a00a4c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00a4cc:	4290      	cmp	r0, r2
1a00a4ce:	d0f7      	beq.n	1a00a4c0 <__mdiff+0x24>
1a00a4d0:	d209      	bcs.n	1a00a4e6 <__mdiff+0x4a>
1a00a4d2:	4622      	mov	r2, r4
1a00a4d4:	463b      	mov	r3, r7
1a00a4d6:	4634      	mov	r4, r6
1a00a4d8:	4647      	mov	r7, r8
1a00a4da:	4616      	mov	r6, r2
1a00a4dc:	4698      	mov	r8, r3
1a00a4de:	2501      	movs	r5, #1
1a00a4e0:	e001      	b.n	1a00a4e6 <__mdiff+0x4a>
1a00a4e2:	dbf6      	blt.n	1a00a4d2 <__mdiff+0x36>
1a00a4e4:	2500      	movs	r5, #0
1a00a4e6:	4660      	mov	r0, ip
1a00a4e8:	6879      	ldr	r1, [r7, #4]
1a00a4ea:	f7ff fda9 	bl	1a00a040 <_Balloc>
1a00a4ee:	693f      	ldr	r7, [r7, #16]
1a00a4f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a00a4f4:	60c5      	str	r5, [r0, #12]
1a00a4f6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00a4fa:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00a4fe:	f100 0514 	add.w	r5, r0, #20
1a00a502:	2200      	movs	r2, #0
1a00a504:	e000      	b.n	1a00a508 <__mdiff+0x6c>
1a00a506:	460d      	mov	r5, r1
1a00a508:	f856 1b04 	ldr.w	r1, [r6], #4
1a00a50c:	f854 8b04 	ldr.w	r8, [r4], #4
1a00a510:	fa1f f981 	uxth.w	r9, r1
1a00a514:	fa12 f388 	uxtah	r3, r2, r8
1a00a518:	0c0a      	lsrs	r2, r1, #16
1a00a51a:	eba3 0309 	sub.w	r3, r3, r9
1a00a51e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a00a522:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00a526:	4629      	mov	r1, r5
1a00a528:	b29b      	uxth	r3, r3
1a00a52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a52e:	45b6      	cmp	lr, r6
1a00a530:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00a534:	f841 3b04 	str.w	r3, [r1], #4
1a00a538:	46a0      	mov	r8, r4
1a00a53a:	d8e4      	bhi.n	1a00a506 <__mdiff+0x6a>
1a00a53c:	45a4      	cmp	ip, r4
1a00a53e:	d916      	bls.n	1a00a56e <__mdiff+0xd2>
1a00a540:	460e      	mov	r6, r1
1a00a542:	f858 5b04 	ldr.w	r5, [r8], #4
1a00a546:	fa12 f385 	uxtah	r3, r2, r5
1a00a54a:	141a      	asrs	r2, r3, #16
1a00a54c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a00a550:	b29b      	uxth	r3, r3
1a00a552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a556:	45c4      	cmp	ip, r8
1a00a558:	f846 3b04 	str.w	r3, [r6], #4
1a00a55c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00a560:	d8ef      	bhi.n	1a00a542 <__mdiff+0xa6>
1a00a562:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a00a566:	1b2d      	subs	r5, r5, r4
1a00a568:	f025 0503 	bic.w	r5, r5, #3
1a00a56c:	440d      	add	r5, r1
1a00a56e:	b923      	cbnz	r3, 1a00a57a <__mdiff+0xde>
1a00a570:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a00a574:	3f01      	subs	r7, #1
1a00a576:	2b00      	cmp	r3, #0
1a00a578:	d0fa      	beq.n	1a00a570 <__mdiff+0xd4>
1a00a57a:	6107      	str	r7, [r0, #16]
1a00a57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00a580:	4660      	mov	r0, ip
1a00a582:	2100      	movs	r1, #0
1a00a584:	f7ff fd5c 	bl	1a00a040 <_Balloc>
1a00a588:	2201      	movs	r2, #1
1a00a58a:	2300      	movs	r3, #0
1a00a58c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00a590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00a594 <__d2b>:
1a00a594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00a598:	460f      	mov	r7, r1
1a00a59a:	b083      	sub	sp, #12
1a00a59c:	2101      	movs	r1, #1
1a00a59e:	ec55 4b10 	vmov	r4, r5, d0
1a00a5a2:	4616      	mov	r6, r2
1a00a5a4:	f7ff fd4c 	bl	1a00a040 <_Balloc>
1a00a5a8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00a5ac:	4681      	mov	r9, r0
1a00a5ae:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00a5b2:	f1b8 0f00 	cmp.w	r8, #0
1a00a5b6:	d001      	beq.n	1a00a5bc <__d2b+0x28>
1a00a5b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00a5bc:	2c00      	cmp	r4, #0
1a00a5be:	9301      	str	r3, [sp, #4]
1a00a5c0:	d02b      	beq.n	1a00a61a <__d2b+0x86>
1a00a5c2:	4668      	mov	r0, sp
1a00a5c4:	9400      	str	r4, [sp, #0]
1a00a5c6:	f7ff fdd1 	bl	1a00a16c <__lo0bits>
1a00a5ca:	b9d0      	cbnz	r0, 1a00a602 <__d2b+0x6e>
1a00a5cc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00a5d0:	f8c9 2014 	str.w	r2, [r9, #20]
1a00a5d4:	2b00      	cmp	r3, #0
1a00a5d6:	bf14      	ite	ne
1a00a5d8:	2102      	movne	r1, #2
1a00a5da:	2101      	moveq	r1, #1
1a00a5dc:	f8c9 3018 	str.w	r3, [r9, #24]
1a00a5e0:	f8c9 1010 	str.w	r1, [r9, #16]
1a00a5e4:	f1b8 0f00 	cmp.w	r8, #0
1a00a5e8:	d024      	beq.n	1a00a634 <__d2b+0xa0>
1a00a5ea:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a00a5ee:	eb08 0300 	add.w	r3, r8, r0
1a00a5f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00a5f6:	603b      	str	r3, [r7, #0]
1a00a5f8:	6030      	str	r0, [r6, #0]
1a00a5fa:	4648      	mov	r0, r9
1a00a5fc:	b003      	add	sp, #12
1a00a5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00a602:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00a606:	f1c0 0220 	rsb	r2, r0, #32
1a00a60a:	fa03 f202 	lsl.w	r2, r3, r2
1a00a60e:	430a      	orrs	r2, r1
1a00a610:	40c3      	lsrs	r3, r0
1a00a612:	9301      	str	r3, [sp, #4]
1a00a614:	f8c9 2014 	str.w	r2, [r9, #20]
1a00a618:	e7dc      	b.n	1a00a5d4 <__d2b+0x40>
1a00a61a:	a801      	add	r0, sp, #4
1a00a61c:	f7ff fda6 	bl	1a00a16c <__lo0bits>
1a00a620:	9b01      	ldr	r3, [sp, #4]
1a00a622:	f8c9 3014 	str.w	r3, [r9, #20]
1a00a626:	2101      	movs	r1, #1
1a00a628:	3020      	adds	r0, #32
1a00a62a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00a62e:	f1b8 0f00 	cmp.w	r8, #0
1a00a632:	d1da      	bne.n	1a00a5ea <__d2b+0x56>
1a00a634:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a00a638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00a63c:	6038      	str	r0, [r7, #0]
1a00a63e:	6918      	ldr	r0, [r3, #16]
1a00a640:	f7ff fd74 	bl	1a00a12c <__hi0bits>
1a00a644:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a00a648:	6030      	str	r0, [r6, #0]
1a00a64a:	4648      	mov	r0, r9
1a00a64c:	b003      	add	sp, #12
1a00a64e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00a652:	bf00      	nop

1a00a654 <_realloc_r>:
1a00a654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a658:	4617      	mov	r7, r2
1a00a65a:	2900      	cmp	r1, #0
1a00a65c:	f000 80bb 	beq.w	1a00a7d6 <_realloc_r+0x182>
1a00a660:	f107 040b 	add.w	r4, r7, #11
1a00a664:	4681      	mov	r9, r0
1a00a666:	460d      	mov	r5, r1
1a00a668:	f7fa fd80 	bl	1a00516c <__malloc_lock>
1a00a66c:	2c16      	cmp	r4, #22
1a00a66e:	d85e      	bhi.n	1a00a72e <_realloc_r+0xda>
1a00a670:	2410      	movs	r4, #16
1a00a672:	4622      	mov	r2, r4
1a00a674:	42a7      	cmp	r7, r4
1a00a676:	d85f      	bhi.n	1a00a738 <_realloc_r+0xe4>
1a00a678:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00a67c:	f02e 0603 	bic.w	r6, lr, #3
1a00a680:	f1a5 0808 	sub.w	r8, r5, #8
1a00a684:	4296      	cmp	r6, r2
1a00a686:	eb08 0a06 	add.w	sl, r8, r6
1a00a68a:	f280 8081 	bge.w	1a00a790 <_realloc_r+0x13c>
1a00a68e:	4bcb      	ldr	r3, [pc, #812]	; (1a00a9bc <_realloc_r+0x368>)
1a00a690:	f8da 0004 	ldr.w	r0, [sl, #4]
1a00a694:	6899      	ldr	r1, [r3, #8]
1a00a696:	4551      	cmp	r1, sl
1a00a698:	f000 80b5 	beq.w	1a00a806 <_realloc_r+0x1b2>
1a00a69c:	f020 0301 	bic.w	r3, r0, #1
1a00a6a0:	4453      	add	r3, sl
1a00a6a2:	685b      	ldr	r3, [r3, #4]
1a00a6a4:	07db      	lsls	r3, r3, #31
1a00a6a6:	f100 808a 	bmi.w	1a00a7be <_realloc_r+0x16a>
1a00a6aa:	f020 0003 	bic.w	r0, r0, #3
1a00a6ae:	1833      	adds	r3, r6, r0
1a00a6b0:	4293      	cmp	r3, r2
1a00a6b2:	f280 8112 	bge.w	1a00a8da <_realloc_r+0x286>
1a00a6b6:	f01e 0f01 	tst.w	lr, #1
1a00a6ba:	d10f      	bne.n	1a00a6dc <_realloc_r+0x88>
1a00a6bc:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00a6c0:	eba8 0b03 	sub.w	fp, r8, r3
1a00a6c4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a6c8:	f021 0103 	bic.w	r1, r1, #3
1a00a6cc:	4408      	add	r0, r1
1a00a6ce:	1983      	adds	r3, r0, r6
1a00a6d0:	4293      	cmp	r3, r2
1a00a6d2:	f280 8116 	bge.w	1a00a902 <_realloc_r+0x2ae>
1a00a6d6:	1873      	adds	r3, r6, r1
1a00a6d8:	4293      	cmp	r3, r2
1a00a6da:	da34      	bge.n	1a00a746 <_realloc_r+0xf2>
1a00a6dc:	4639      	mov	r1, r7
1a00a6de:	4648      	mov	r0, r9
1a00a6e0:	f7fa f9a2 	bl	1a004a28 <_malloc_r>
1a00a6e4:	4607      	mov	r7, r0
1a00a6e6:	b1e0      	cbz	r0, 1a00a722 <_realloc_r+0xce>
1a00a6e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00a6ec:	f023 0301 	bic.w	r3, r3, #1
1a00a6f0:	4443      	add	r3, r8
1a00a6f2:	f1a0 0208 	sub.w	r2, r0, #8
1a00a6f6:	4293      	cmp	r3, r2
1a00a6f8:	f000 80f7 	beq.w	1a00a8ea <_realloc_r+0x296>
1a00a6fc:	1f32      	subs	r2, r6, #4
1a00a6fe:	2a24      	cmp	r2, #36	; 0x24
1a00a700:	f200 80fb 	bhi.w	1a00a8fa <_realloc_r+0x2a6>
1a00a704:	2a13      	cmp	r2, #19
1a00a706:	6829      	ldr	r1, [r5, #0]
1a00a708:	f200 80c9 	bhi.w	1a00a89e <_realloc_r+0x24a>
1a00a70c:	4603      	mov	r3, r0
1a00a70e:	462a      	mov	r2, r5
1a00a710:	6019      	str	r1, [r3, #0]
1a00a712:	6851      	ldr	r1, [r2, #4]
1a00a714:	6059      	str	r1, [r3, #4]
1a00a716:	6892      	ldr	r2, [r2, #8]
1a00a718:	609a      	str	r2, [r3, #8]
1a00a71a:	4629      	mov	r1, r5
1a00a71c:	4648      	mov	r0, r9
1a00a71e:	f7fa f837 	bl	1a004790 <_free_r>
1a00a722:	4648      	mov	r0, r9
1a00a724:	f7fa fd28 	bl	1a005178 <__malloc_unlock>
1a00a728:	4638      	mov	r0, r7
1a00a72a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a72e:	f024 0407 	bic.w	r4, r4, #7
1a00a732:	2c00      	cmp	r4, #0
1a00a734:	4622      	mov	r2, r4
1a00a736:	da9d      	bge.n	1a00a674 <_realloc_r+0x20>
1a00a738:	230c      	movs	r3, #12
1a00a73a:	f8c9 3000 	str.w	r3, [r9]
1a00a73e:	2700      	movs	r7, #0
1a00a740:	4638      	mov	r0, r7
1a00a742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a746:	465f      	mov	r7, fp
1a00a748:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00a74c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00a750:	1f32      	subs	r2, r6, #4
1a00a752:	2a24      	cmp	r2, #36	; 0x24
1a00a754:	60c1      	str	r1, [r0, #12]
1a00a756:	eb0b 0a03 	add.w	sl, fp, r3
1a00a75a:	6088      	str	r0, [r1, #8]
1a00a75c:	f200 80d9 	bhi.w	1a00a912 <_realloc_r+0x2be>
1a00a760:	2a13      	cmp	r2, #19
1a00a762:	6829      	ldr	r1, [r5, #0]
1a00a764:	f240 80d3 	bls.w	1a00a90e <_realloc_r+0x2ba>
1a00a768:	f8cb 1008 	str.w	r1, [fp, #8]
1a00a76c:	6869      	ldr	r1, [r5, #4]
1a00a76e:	f8cb 100c 	str.w	r1, [fp, #12]
1a00a772:	2a1b      	cmp	r2, #27
1a00a774:	68a9      	ldr	r1, [r5, #8]
1a00a776:	f200 80e0 	bhi.w	1a00a93a <_realloc_r+0x2e6>
1a00a77a:	f10b 0210 	add.w	r2, fp, #16
1a00a77e:	3508      	adds	r5, #8
1a00a780:	6011      	str	r1, [r2, #0]
1a00a782:	6869      	ldr	r1, [r5, #4]
1a00a784:	6051      	str	r1, [r2, #4]
1a00a786:	68a9      	ldr	r1, [r5, #8]
1a00a788:	6091      	str	r1, [r2, #8]
1a00a78a:	461e      	mov	r6, r3
1a00a78c:	46d8      	mov	r8, fp
1a00a78e:	463d      	mov	r5, r7
1a00a790:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a00a794:	1b32      	subs	r2, r6, r4
1a00a796:	2a0f      	cmp	r2, #15
1a00a798:	f003 0301 	and.w	r3, r3, #1
1a00a79c:	d820      	bhi.n	1a00a7e0 <_realloc_r+0x18c>
1a00a79e:	4333      	orrs	r3, r6
1a00a7a0:	f8c8 3004 	str.w	r3, [r8, #4]
1a00a7a4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00a7a8:	f043 0301 	orr.w	r3, r3, #1
1a00a7ac:	f8ca 3004 	str.w	r3, [sl, #4]
1a00a7b0:	4648      	mov	r0, r9
1a00a7b2:	462f      	mov	r7, r5
1a00a7b4:	f7fa fce0 	bl	1a005178 <__malloc_unlock>
1a00a7b8:	4638      	mov	r0, r7
1a00a7ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a7be:	f01e 0f01 	tst.w	lr, #1
1a00a7c2:	d18b      	bne.n	1a00a6dc <_realloc_r+0x88>
1a00a7c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00a7c8:	eba8 0b03 	sub.w	fp, r8, r3
1a00a7cc:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a7d0:	f021 0103 	bic.w	r1, r1, #3
1a00a7d4:	e77f      	b.n	1a00a6d6 <_realloc_r+0x82>
1a00a7d6:	4611      	mov	r1, r2
1a00a7d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a7dc:	f7fa b924 	b.w	1a004a28 <_malloc_r>
1a00a7e0:	eb08 0104 	add.w	r1, r8, r4
1a00a7e4:	4323      	orrs	r3, r4
1a00a7e6:	f042 0201 	orr.w	r2, r2, #1
1a00a7ea:	f8c8 3004 	str.w	r3, [r8, #4]
1a00a7ee:	604a      	str	r2, [r1, #4]
1a00a7f0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00a7f4:	f043 0301 	orr.w	r3, r3, #1
1a00a7f8:	3108      	adds	r1, #8
1a00a7fa:	f8ca 3004 	str.w	r3, [sl, #4]
1a00a7fe:	4648      	mov	r0, r9
1a00a800:	f7f9 ffc6 	bl	1a004790 <_free_r>
1a00a804:	e7d4      	b.n	1a00a7b0 <_realloc_r+0x15c>
1a00a806:	f020 0003 	bic.w	r0, r0, #3
1a00a80a:	1831      	adds	r1, r6, r0
1a00a80c:	f104 0c10 	add.w	ip, r4, #16
1a00a810:	4561      	cmp	r1, ip
1a00a812:	da4f      	bge.n	1a00a8b4 <_realloc_r+0x260>
1a00a814:	f01e 0f01 	tst.w	lr, #1
1a00a818:	f47f af60 	bne.w	1a00a6dc <_realloc_r+0x88>
1a00a81c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a00a820:	eba8 0b01 	sub.w	fp, r8, r1
1a00a824:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a828:	f021 0103 	bic.w	r1, r1, #3
1a00a82c:	4408      	add	r0, r1
1a00a82e:	eb00 0a06 	add.w	sl, r0, r6
1a00a832:	45d4      	cmp	ip, sl
1a00a834:	f73f af4f 	bgt.w	1a00a6d6 <_realloc_r+0x82>
1a00a838:	465f      	mov	r7, fp
1a00a83a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00a83e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00a842:	1f32      	subs	r2, r6, #4
1a00a844:	2a24      	cmp	r2, #36	; 0x24
1a00a846:	60c1      	str	r1, [r0, #12]
1a00a848:	6088      	str	r0, [r1, #8]
1a00a84a:	f200 8099 	bhi.w	1a00a980 <_realloc_r+0x32c>
1a00a84e:	2a13      	cmp	r2, #19
1a00a850:	6829      	ldr	r1, [r5, #0]
1a00a852:	f240 8093 	bls.w	1a00a97c <_realloc_r+0x328>
1a00a856:	f8cb 1008 	str.w	r1, [fp, #8]
1a00a85a:	6869      	ldr	r1, [r5, #4]
1a00a85c:	f8cb 100c 	str.w	r1, [fp, #12]
1a00a860:	2a1b      	cmp	r2, #27
1a00a862:	68a9      	ldr	r1, [r5, #8]
1a00a864:	f200 8092 	bhi.w	1a00a98c <_realloc_r+0x338>
1a00a868:	f10b 0210 	add.w	r2, fp, #16
1a00a86c:	3508      	adds	r5, #8
1a00a86e:	6011      	str	r1, [r2, #0]
1a00a870:	6869      	ldr	r1, [r5, #4]
1a00a872:	6051      	str	r1, [r2, #4]
1a00a874:	68a9      	ldr	r1, [r5, #8]
1a00a876:	6091      	str	r1, [r2, #8]
1a00a878:	eb0b 0104 	add.w	r1, fp, r4
1a00a87c:	ebaa 0204 	sub.w	r2, sl, r4
1a00a880:	f042 0201 	orr.w	r2, r2, #1
1a00a884:	6099      	str	r1, [r3, #8]
1a00a886:	604a      	str	r2, [r1, #4]
1a00a888:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00a88c:	f003 0301 	and.w	r3, r3, #1
1a00a890:	431c      	orrs	r4, r3
1a00a892:	4648      	mov	r0, r9
1a00a894:	f8cb 4004 	str.w	r4, [fp, #4]
1a00a898:	f7fa fc6e 	bl	1a005178 <__malloc_unlock>
1a00a89c:	e750      	b.n	1a00a740 <_realloc_r+0xec>
1a00a89e:	6001      	str	r1, [r0, #0]
1a00a8a0:	686b      	ldr	r3, [r5, #4]
1a00a8a2:	6043      	str	r3, [r0, #4]
1a00a8a4:	2a1b      	cmp	r2, #27
1a00a8a6:	d83c      	bhi.n	1a00a922 <_realloc_r+0x2ce>
1a00a8a8:	f105 0208 	add.w	r2, r5, #8
1a00a8ac:	f100 0308 	add.w	r3, r0, #8
1a00a8b0:	68a9      	ldr	r1, [r5, #8]
1a00a8b2:	e72d      	b.n	1a00a710 <_realloc_r+0xbc>
1a00a8b4:	eb08 0004 	add.w	r0, r8, r4
1a00a8b8:	1b0a      	subs	r2, r1, r4
1a00a8ba:	f042 0201 	orr.w	r2, r2, #1
1a00a8be:	6098      	str	r0, [r3, #8]
1a00a8c0:	6042      	str	r2, [r0, #4]
1a00a8c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00a8c6:	f003 0301 	and.w	r3, r3, #1
1a00a8ca:	431c      	orrs	r4, r3
1a00a8cc:	4648      	mov	r0, r9
1a00a8ce:	f845 4c04 	str.w	r4, [r5, #-4]
1a00a8d2:	f7fa fc51 	bl	1a005178 <__malloc_unlock>
1a00a8d6:	462f      	mov	r7, r5
1a00a8d8:	e732      	b.n	1a00a740 <_realloc_r+0xec>
1a00a8da:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00a8de:	461e      	mov	r6, r3
1a00a8e0:	60ca      	str	r2, [r1, #12]
1a00a8e2:	eb08 0a03 	add.w	sl, r8, r3
1a00a8e6:	6091      	str	r1, [r2, #8]
1a00a8e8:	e752      	b.n	1a00a790 <_realloc_r+0x13c>
1a00a8ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00a8ee:	f023 0303 	bic.w	r3, r3, #3
1a00a8f2:	441e      	add	r6, r3
1a00a8f4:	eb08 0a06 	add.w	sl, r8, r6
1a00a8f8:	e74a      	b.n	1a00a790 <_realloc_r+0x13c>
1a00a8fa:	4629      	mov	r1, r5
1a00a8fc:	f7ff fb38 	bl	1a009f70 <memmove>
1a00a900:	e70b      	b.n	1a00a71a <_realloc_r+0xc6>
1a00a902:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00a906:	465f      	mov	r7, fp
1a00a908:	60ca      	str	r2, [r1, #12]
1a00a90a:	6091      	str	r1, [r2, #8]
1a00a90c:	e71c      	b.n	1a00a748 <_realloc_r+0xf4>
1a00a90e:	463a      	mov	r2, r7
1a00a910:	e736      	b.n	1a00a780 <_realloc_r+0x12c>
1a00a912:	4629      	mov	r1, r5
1a00a914:	4638      	mov	r0, r7
1a00a916:	461e      	mov	r6, r3
1a00a918:	46d8      	mov	r8, fp
1a00a91a:	f7ff fb29 	bl	1a009f70 <memmove>
1a00a91e:	463d      	mov	r5, r7
1a00a920:	e736      	b.n	1a00a790 <_realloc_r+0x13c>
1a00a922:	68ab      	ldr	r3, [r5, #8]
1a00a924:	6083      	str	r3, [r0, #8]
1a00a926:	68eb      	ldr	r3, [r5, #12]
1a00a928:	60c3      	str	r3, [r0, #12]
1a00a92a:	2a24      	cmp	r2, #36	; 0x24
1a00a92c:	d011      	beq.n	1a00a952 <_realloc_r+0x2fe>
1a00a92e:	f105 0210 	add.w	r2, r5, #16
1a00a932:	f100 0310 	add.w	r3, r0, #16
1a00a936:	6929      	ldr	r1, [r5, #16]
1a00a938:	e6ea      	b.n	1a00a710 <_realloc_r+0xbc>
1a00a93a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00a93e:	68e9      	ldr	r1, [r5, #12]
1a00a940:	f8cb 1014 	str.w	r1, [fp, #20]
1a00a944:	2a24      	cmp	r2, #36	; 0x24
1a00a946:	d00e      	beq.n	1a00a966 <_realloc_r+0x312>
1a00a948:	6929      	ldr	r1, [r5, #16]
1a00a94a:	f10b 0218 	add.w	r2, fp, #24
1a00a94e:	3510      	adds	r5, #16
1a00a950:	e716      	b.n	1a00a780 <_realloc_r+0x12c>
1a00a952:	692b      	ldr	r3, [r5, #16]
1a00a954:	6103      	str	r3, [r0, #16]
1a00a956:	696b      	ldr	r3, [r5, #20]
1a00a958:	6143      	str	r3, [r0, #20]
1a00a95a:	69a9      	ldr	r1, [r5, #24]
1a00a95c:	f105 0218 	add.w	r2, r5, #24
1a00a960:	f100 0318 	add.w	r3, r0, #24
1a00a964:	e6d4      	b.n	1a00a710 <_realloc_r+0xbc>
1a00a966:	692a      	ldr	r2, [r5, #16]
1a00a968:	f8cb 2018 	str.w	r2, [fp, #24]
1a00a96c:	696a      	ldr	r2, [r5, #20]
1a00a96e:	f8cb 201c 	str.w	r2, [fp, #28]
1a00a972:	69a9      	ldr	r1, [r5, #24]
1a00a974:	f10b 0220 	add.w	r2, fp, #32
1a00a978:	3518      	adds	r5, #24
1a00a97a:	e701      	b.n	1a00a780 <_realloc_r+0x12c>
1a00a97c:	463a      	mov	r2, r7
1a00a97e:	e776      	b.n	1a00a86e <_realloc_r+0x21a>
1a00a980:	4629      	mov	r1, r5
1a00a982:	4638      	mov	r0, r7
1a00a984:	f7ff faf4 	bl	1a009f70 <memmove>
1a00a988:	4b0c      	ldr	r3, [pc, #48]	; (1a00a9bc <_realloc_r+0x368>)
1a00a98a:	e775      	b.n	1a00a878 <_realloc_r+0x224>
1a00a98c:	f8cb 1010 	str.w	r1, [fp, #16]
1a00a990:	68e9      	ldr	r1, [r5, #12]
1a00a992:	f8cb 1014 	str.w	r1, [fp, #20]
1a00a996:	2a24      	cmp	r2, #36	; 0x24
1a00a998:	d004      	beq.n	1a00a9a4 <_realloc_r+0x350>
1a00a99a:	6929      	ldr	r1, [r5, #16]
1a00a99c:	f10b 0218 	add.w	r2, fp, #24
1a00a9a0:	3510      	adds	r5, #16
1a00a9a2:	e764      	b.n	1a00a86e <_realloc_r+0x21a>
1a00a9a4:	692a      	ldr	r2, [r5, #16]
1a00a9a6:	f8cb 2018 	str.w	r2, [fp, #24]
1a00a9aa:	696a      	ldr	r2, [r5, #20]
1a00a9ac:	f8cb 201c 	str.w	r2, [fp, #28]
1a00a9b0:	69a9      	ldr	r1, [r5, #24]
1a00a9b2:	f10b 0220 	add.w	r2, fp, #32
1a00a9b6:	3518      	adds	r5, #24
1a00a9b8:	e759      	b.n	1a00a86e <_realloc_r+0x21a>
1a00a9ba:	bf00      	nop
1a00a9bc:	100004b0 	.word	0x100004b0

1a00a9c0 <frexp>:
1a00a9c0:	ec53 2b10 	vmov	r2, r3, d0
1a00a9c4:	b570      	push	{r4, r5, r6, lr}
1a00a9c6:	4e16      	ldr	r6, [pc, #88]	; (1a00aa20 <frexp+0x60>)
1a00a9c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00a9cc:	2500      	movs	r5, #0
1a00a9ce:	42b1      	cmp	r1, r6
1a00a9d0:	4604      	mov	r4, r0
1a00a9d2:	6005      	str	r5, [r0, #0]
1a00a9d4:	dc21      	bgt.n	1a00aa1a <frexp+0x5a>
1a00a9d6:	ee10 6a10 	vmov	r6, s0
1a00a9da:	430e      	orrs	r6, r1
1a00a9dc:	d01d      	beq.n	1a00aa1a <frexp+0x5a>
1a00a9de:	4e11      	ldr	r6, [pc, #68]	; (1a00aa24 <frexp+0x64>)
1a00a9e0:	401e      	ands	r6, r3
1a00a9e2:	4618      	mov	r0, r3
1a00a9e4:	b966      	cbnz	r6, 1a00aa00 <frexp+0x40>
1a00a9e6:	4619      	mov	r1, r3
1a00a9e8:	2200      	movs	r2, #0
1a00a9ea:	ee10 0a10 	vmov	r0, s0
1a00a9ee:	4b0e      	ldr	r3, [pc, #56]	; (1a00aa28 <frexp+0x68>)
1a00a9f0:	f7f9 f884 	bl	1a003afc <__aeabi_dmul>
1a00a9f4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a00a9f8:	4602      	mov	r2, r0
1a00a9fa:	4608      	mov	r0, r1
1a00a9fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00aa00:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a00aa04:	1509      	asrs	r1, r1, #20
1a00aa06:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00aa0a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00aa0e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a00aa12:	4429      	add	r1, r5
1a00aa14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a00aa18:	6021      	str	r1, [r4, #0]
1a00aa1a:	ec43 2b10 	vmov	d0, r2, r3
1a00aa1e:	bd70      	pop	{r4, r5, r6, pc}
1a00aa20:	7fefffff 	.word	0x7fefffff
1a00aa24:	7ff00000 	.word	0x7ff00000
1a00aa28:	43500000 	.word	0x43500000

1a00aa2c <strncpy>:
1a00aa2c:	b470      	push	{r4, r5, r6}
1a00aa2e:	ea40 0401 	orr.w	r4, r0, r1
1a00aa32:	07a3      	lsls	r3, r4, #30
1a00aa34:	d127      	bne.n	1a00aa86 <strncpy+0x5a>
1a00aa36:	2a03      	cmp	r2, #3
1a00aa38:	d925      	bls.n	1a00aa86 <strncpy+0x5a>
1a00aa3a:	460b      	mov	r3, r1
1a00aa3c:	4606      	mov	r6, r0
1a00aa3e:	4619      	mov	r1, r3
1a00aa40:	f853 5b04 	ldr.w	r5, [r3], #4
1a00aa44:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a00aa48:	ea24 0405 	bic.w	r4, r4, r5
1a00aa4c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a00aa50:	d106      	bne.n	1a00aa60 <strncpy+0x34>
1a00aa52:	3a04      	subs	r2, #4
1a00aa54:	2a03      	cmp	r2, #3
1a00aa56:	f846 5b04 	str.w	r5, [r6], #4
1a00aa5a:	4619      	mov	r1, r3
1a00aa5c:	d8ef      	bhi.n	1a00aa3e <strncpy+0x12>
1a00aa5e:	b182      	cbz	r2, 1a00aa82 <strncpy+0x56>
1a00aa60:	4633      	mov	r3, r6
1a00aa62:	780c      	ldrb	r4, [r1, #0]
1a00aa64:	f803 4b01 	strb.w	r4, [r3], #1
1a00aa68:	1e55      	subs	r5, r2, #1
1a00aa6a:	b174      	cbz	r4, 1a00aa8a <strncpy+0x5e>
1a00aa6c:	4432      	add	r2, r6
1a00aa6e:	442e      	add	r6, r5
1a00aa70:	e005      	b.n	1a00aa7e <strncpy+0x52>
1a00aa72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a00aa76:	1af5      	subs	r5, r6, r3
1a00aa78:	f803 4b01 	strb.w	r4, [r3], #1
1a00aa7c:	b12c      	cbz	r4, 1a00aa8a <strncpy+0x5e>
1a00aa7e:	429a      	cmp	r2, r3
1a00aa80:	d1f7      	bne.n	1a00aa72 <strncpy+0x46>
1a00aa82:	bc70      	pop	{r4, r5, r6}
1a00aa84:	4770      	bx	lr
1a00aa86:	4606      	mov	r6, r0
1a00aa88:	e7e9      	b.n	1a00aa5e <strncpy+0x32>
1a00aa8a:	2d00      	cmp	r5, #0
1a00aa8c:	d0f9      	beq.n	1a00aa82 <strncpy+0x56>
1a00aa8e:	441d      	add	r5, r3
1a00aa90:	2200      	movs	r2, #0
1a00aa92:	f803 2b01 	strb.w	r2, [r3], #1
1a00aa96:	42ab      	cmp	r3, r5
1a00aa98:	d1fb      	bne.n	1a00aa92 <strncpy+0x66>
1a00aa9a:	bc70      	pop	{r4, r5, r6}
1a00aa9c:	4770      	bx	lr
1a00aa9e:	bf00      	nop

1a00aaa0 <__ssprint_r>:
1a00aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00aaa4:	6893      	ldr	r3, [r2, #8]
1a00aaa6:	b083      	sub	sp, #12
1a00aaa8:	4690      	mov	r8, r2
1a00aaaa:	2b00      	cmp	r3, #0
1a00aaac:	d06d      	beq.n	1a00ab8a <__ssprint_r+0xea>
1a00aaae:	6817      	ldr	r7, [r2, #0]
1a00aab0:	688d      	ldr	r5, [r1, #8]
1a00aab2:	4682      	mov	sl, r0
1a00aab4:	460c      	mov	r4, r1
1a00aab6:	6808      	ldr	r0, [r1, #0]
1a00aab8:	3708      	adds	r7, #8
1a00aaba:	e043      	b.n	1a00ab44 <__ssprint_r+0xa4>
1a00aabc:	89a3      	ldrh	r3, [r4, #12]
1a00aabe:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00aac2:	d02e      	beq.n	1a00ab22 <__ssprint_r+0x82>
1a00aac4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
1a00aac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a00aacc:	eba0 0b01 	sub.w	fp, r0, r1
1a00aad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1a00aad4:	eb0b 0006 	add.w	r0, fp, r6
1a00aad8:	106d      	asrs	r5, r5, #1
1a00aada:	3001      	adds	r0, #1
1a00aadc:	42a8      	cmp	r0, r5
1a00aade:	462a      	mov	r2, r5
1a00aae0:	bf84      	itt	hi
1a00aae2:	4605      	movhi	r5, r0
1a00aae4:	462a      	movhi	r2, r5
1a00aae6:	055b      	lsls	r3, r3, #21
1a00aae8:	d536      	bpl.n	1a00ab58 <__ssprint_r+0xb8>
1a00aaea:	4611      	mov	r1, r2
1a00aaec:	4650      	mov	r0, sl
1a00aaee:	f7f9 ff9b 	bl	1a004a28 <_malloc_r>
1a00aaf2:	2800      	cmp	r0, #0
1a00aaf4:	d03a      	beq.n	1a00ab6c <__ssprint_r+0xcc>
1a00aaf6:	465a      	mov	r2, fp
1a00aaf8:	6921      	ldr	r1, [r4, #16]
1a00aafa:	9001      	str	r0, [sp, #4]
1a00aafc:	f7fa fa4c 	bl	1a004f98 <memcpy>
1a00ab00:	89a2      	ldrh	r2, [r4, #12]
1a00ab02:	9b01      	ldr	r3, [sp, #4]
1a00ab04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a00ab08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00ab0c:	81a2      	strh	r2, [r4, #12]
1a00ab0e:	eba5 020b 	sub.w	r2, r5, fp
1a00ab12:	eb03 000b 	add.w	r0, r3, fp
1a00ab16:	6165      	str	r5, [r4, #20]
1a00ab18:	6123      	str	r3, [r4, #16]
1a00ab1a:	6020      	str	r0, [r4, #0]
1a00ab1c:	60a2      	str	r2, [r4, #8]
1a00ab1e:	4635      	mov	r5, r6
1a00ab20:	46b3      	mov	fp, r6
1a00ab22:	465a      	mov	r2, fp
1a00ab24:	4649      	mov	r1, r9
1a00ab26:	f7ff fa23 	bl	1a009f70 <memmove>
1a00ab2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00ab2e:	68a2      	ldr	r2, [r4, #8]
1a00ab30:	6820      	ldr	r0, [r4, #0]
1a00ab32:	1b55      	subs	r5, r2, r5
1a00ab34:	4458      	add	r0, fp
1a00ab36:	1b9e      	subs	r6, r3, r6
1a00ab38:	60a5      	str	r5, [r4, #8]
1a00ab3a:	6020      	str	r0, [r4, #0]
1a00ab3c:	f8c8 6008 	str.w	r6, [r8, #8]
1a00ab40:	b31e      	cbz	r6, 1a00ab8a <__ssprint_r+0xea>
1a00ab42:	3708      	adds	r7, #8
1a00ab44:	e957 9602 	ldrd	r9, r6, [r7, #-8]
1a00ab48:	46ab      	mov	fp, r5
1a00ab4a:	2e00      	cmp	r6, #0
1a00ab4c:	d0f9      	beq.n	1a00ab42 <__ssprint_r+0xa2>
1a00ab4e:	42ae      	cmp	r6, r5
1a00ab50:	d2b4      	bcs.n	1a00aabc <__ssprint_r+0x1c>
1a00ab52:	4635      	mov	r5, r6
1a00ab54:	46b3      	mov	fp, r6
1a00ab56:	e7e4      	b.n	1a00ab22 <__ssprint_r+0x82>
1a00ab58:	4650      	mov	r0, sl
1a00ab5a:	f7ff fd7b 	bl	1a00a654 <_realloc_r>
1a00ab5e:	4603      	mov	r3, r0
1a00ab60:	2800      	cmp	r0, #0
1a00ab62:	d1d4      	bne.n	1a00ab0e <__ssprint_r+0x6e>
1a00ab64:	6921      	ldr	r1, [r4, #16]
1a00ab66:	4650      	mov	r0, sl
1a00ab68:	f7f9 fe12 	bl	1a004790 <_free_r>
1a00ab6c:	230c      	movs	r3, #12
1a00ab6e:	f8ca 3000 	str.w	r3, [sl]
1a00ab72:	89a3      	ldrh	r3, [r4, #12]
1a00ab74:	2200      	movs	r2, #0
1a00ab76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00ab7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00ab7e:	81a3      	strh	r3, [r4, #12]
1a00ab80:	e9c8 2201 	strd	r2, r2, [r8, #4]
1a00ab84:	b003      	add	sp, #12
1a00ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00ab8a:	2000      	movs	r0, #0
1a00ab8c:	f8c8 0004 	str.w	r0, [r8, #4]
1a00ab90:	b003      	add	sp, #12
1a00ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00ab96:	bf00      	nop

1a00ab98 <__sprint_r.part.0>:
1a00ab98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ab9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a00ab9e:	049c      	lsls	r4, r3, #18
1a00aba0:	4693      	mov	fp, r2
1a00aba2:	d52d      	bpl.n	1a00ac00 <__sprint_r.part.0+0x68>
1a00aba4:	6893      	ldr	r3, [r2, #8]
1a00aba6:	6812      	ldr	r2, [r2, #0]
1a00aba8:	b343      	cbz	r3, 1a00abfc <__sprint_r.part.0+0x64>
1a00abaa:	460e      	mov	r6, r1
1a00abac:	4607      	mov	r7, r0
1a00abae:	f102 0908 	add.w	r9, r2, #8
1a00abb2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a00abb6:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a00abba:	d015      	beq.n	1a00abe8 <__sprint_r.part.0+0x50>
1a00abbc:	3d04      	subs	r5, #4
1a00abbe:	2400      	movs	r4, #0
1a00abc0:	e001      	b.n	1a00abc6 <__sprint_r.part.0+0x2e>
1a00abc2:	45a0      	cmp	r8, r4
1a00abc4:	d00e      	beq.n	1a00abe4 <__sprint_r.part.0+0x4c>
1a00abc6:	4632      	mov	r2, r6
1a00abc8:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a00abcc:	4638      	mov	r0, r7
1a00abce:	f000 f8a9 	bl	1a00ad24 <_fputwc_r>
1a00abd2:	1c43      	adds	r3, r0, #1
1a00abd4:	f104 0401 	add.w	r4, r4, #1
1a00abd8:	d1f3      	bne.n	1a00abc2 <__sprint_r.part.0+0x2a>
1a00abda:	2300      	movs	r3, #0
1a00abdc:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00abe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00abe4:	f8db 3008 	ldr.w	r3, [fp, #8]
1a00abe8:	f02a 0a03 	bic.w	sl, sl, #3
1a00abec:	eba3 030a 	sub.w	r3, r3, sl
1a00abf0:	f8cb 3008 	str.w	r3, [fp, #8]
1a00abf4:	f109 0908 	add.w	r9, r9, #8
1a00abf8:	2b00      	cmp	r3, #0
1a00abfa:	d1da      	bne.n	1a00abb2 <__sprint_r.part.0+0x1a>
1a00abfc:	2000      	movs	r0, #0
1a00abfe:	e7ec      	b.n	1a00abda <__sprint_r.part.0+0x42>
1a00ac00:	f7fe ff60 	bl	1a009ac4 <__sfvwrite_r>
1a00ac04:	2300      	movs	r3, #0
1a00ac06:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00ac0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00ac0e:	bf00      	nop

1a00ac10 <__sprint_r>:
1a00ac10:	6893      	ldr	r3, [r2, #8]
1a00ac12:	b10b      	cbz	r3, 1a00ac18 <__sprint_r+0x8>
1a00ac14:	f7ff bfc0 	b.w	1a00ab98 <__sprint_r.part.0>
1a00ac18:	b410      	push	{r4}
1a00ac1a:	4618      	mov	r0, r3
1a00ac1c:	6053      	str	r3, [r2, #4]
1a00ac1e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00ac22:	4770      	bx	lr

1a00ac24 <_calloc_r>:
1a00ac24:	b510      	push	{r4, lr}
1a00ac26:	fb02 f101 	mul.w	r1, r2, r1
1a00ac2a:	f7f9 fefd 	bl	1a004a28 <_malloc_r>
1a00ac2e:	4604      	mov	r4, r0
1a00ac30:	b168      	cbz	r0, 1a00ac4e <_calloc_r+0x2a>
1a00ac32:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00ac36:	f022 0203 	bic.w	r2, r2, #3
1a00ac3a:	3a04      	subs	r2, #4
1a00ac3c:	2a24      	cmp	r2, #36	; 0x24
1a00ac3e:	d818      	bhi.n	1a00ac72 <_calloc_r+0x4e>
1a00ac40:	2a13      	cmp	r2, #19
1a00ac42:	d806      	bhi.n	1a00ac52 <_calloc_r+0x2e>
1a00ac44:	4602      	mov	r2, r0
1a00ac46:	2300      	movs	r3, #0
1a00ac48:	e9c2 3300 	strd	r3, r3, [r2]
1a00ac4c:	6093      	str	r3, [r2, #8]
1a00ac4e:	4620      	mov	r0, r4
1a00ac50:	bd10      	pop	{r4, pc}
1a00ac52:	2300      	movs	r3, #0
1a00ac54:	2a1b      	cmp	r2, #27
1a00ac56:	e9c0 3300 	strd	r3, r3, [r0]
1a00ac5a:	d90f      	bls.n	1a00ac7c <_calloc_r+0x58>
1a00ac5c:	2a24      	cmp	r2, #36	; 0x24
1a00ac5e:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00ac62:	bf12      	itee	ne
1a00ac64:	f100 0210 	addne.w	r2, r0, #16
1a00ac68:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00ac6c:	f100 0218 	addeq.w	r2, r0, #24
1a00ac70:	e7e9      	b.n	1a00ac46 <_calloc_r+0x22>
1a00ac72:	2100      	movs	r1, #0
1a00ac74:	f7fa fa2a 	bl	1a0050cc <memset>
1a00ac78:	4620      	mov	r0, r4
1a00ac7a:	bd10      	pop	{r4, pc}
1a00ac7c:	f100 0208 	add.w	r2, r0, #8
1a00ac80:	e7e1      	b.n	1a00ac46 <_calloc_r+0x22>
1a00ac82:	bf00      	nop

1a00ac84 <__fputwc>:
1a00ac84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00ac88:	b082      	sub	sp, #8
1a00ac8a:	4680      	mov	r8, r0
1a00ac8c:	4689      	mov	r9, r1
1a00ac8e:	4614      	mov	r4, r2
1a00ac90:	f000 f87a 	bl	1a00ad88 <__locale_mb_cur_max>
1a00ac94:	2801      	cmp	r0, #1
1a00ac96:	d103      	bne.n	1a00aca0 <__fputwc+0x1c>
1a00ac98:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a00ac9c:	2bfe      	cmp	r3, #254	; 0xfe
1a00ac9e:	d933      	bls.n	1a00ad08 <__fputwc+0x84>
1a00aca0:	464a      	mov	r2, r9
1a00aca2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00aca6:	a901      	add	r1, sp, #4
1a00aca8:	4640      	mov	r0, r8
1a00acaa:	f000 f8e1 	bl	1a00ae70 <_wcrtomb_r>
1a00acae:	1c42      	adds	r2, r0, #1
1a00acb0:	4606      	mov	r6, r0
1a00acb2:	d02f      	beq.n	1a00ad14 <__fputwc+0x90>
1a00acb4:	b320      	cbz	r0, 1a00ad00 <__fputwc+0x7c>
1a00acb6:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00acba:	2500      	movs	r5, #0
1a00acbc:	f10d 0a04 	add.w	sl, sp, #4
1a00acc0:	e009      	b.n	1a00acd6 <__fputwc+0x52>
1a00acc2:	6823      	ldr	r3, [r4, #0]
1a00acc4:	1c5a      	adds	r2, r3, #1
1a00acc6:	6022      	str	r2, [r4, #0]
1a00acc8:	f883 c000 	strb.w	ip, [r3]
1a00accc:	3501      	adds	r5, #1
1a00acce:	42b5      	cmp	r5, r6
1a00acd0:	d216      	bcs.n	1a00ad00 <__fputwc+0x7c>
1a00acd2:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00acd6:	68a3      	ldr	r3, [r4, #8]
1a00acd8:	3b01      	subs	r3, #1
1a00acda:	2b00      	cmp	r3, #0
1a00acdc:	60a3      	str	r3, [r4, #8]
1a00acde:	daf0      	bge.n	1a00acc2 <__fputwc+0x3e>
1a00ace0:	69a7      	ldr	r7, [r4, #24]
1a00ace2:	42bb      	cmp	r3, r7
1a00ace4:	4661      	mov	r1, ip
1a00ace6:	4622      	mov	r2, r4
1a00ace8:	4640      	mov	r0, r8
1a00acea:	db02      	blt.n	1a00acf2 <__fputwc+0x6e>
1a00acec:	f1bc 0f0a 	cmp.w	ip, #10
1a00acf0:	d1e7      	bne.n	1a00acc2 <__fputwc+0x3e>
1a00acf2:	f000 f865 	bl	1a00adc0 <__swbuf_r>
1a00acf6:	1c43      	adds	r3, r0, #1
1a00acf8:	d1e8      	bne.n	1a00accc <__fputwc+0x48>
1a00acfa:	b002      	add	sp, #8
1a00acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00ad00:	4648      	mov	r0, r9
1a00ad02:	b002      	add	sp, #8
1a00ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00ad08:	fa5f fc89 	uxtb.w	ip, r9
1a00ad0c:	4606      	mov	r6, r0
1a00ad0e:	f88d c004 	strb.w	ip, [sp, #4]
1a00ad12:	e7d2      	b.n	1a00acba <__fputwc+0x36>
1a00ad14:	89a3      	ldrh	r3, [r4, #12]
1a00ad16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00ad1a:	81a3      	strh	r3, [r4, #12]
1a00ad1c:	b002      	add	sp, #8
1a00ad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00ad22:	bf00      	nop

1a00ad24 <_fputwc_r>:
1a00ad24:	b530      	push	{r4, r5, lr}
1a00ad26:	4605      	mov	r5, r0
1a00ad28:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00ad2a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00ad2e:	07c0      	lsls	r0, r0, #31
1a00ad30:	4614      	mov	r4, r2
1a00ad32:	b083      	sub	sp, #12
1a00ad34:	b29a      	uxth	r2, r3
1a00ad36:	d401      	bmi.n	1a00ad3c <_fputwc_r+0x18>
1a00ad38:	0590      	lsls	r0, r2, #22
1a00ad3a:	d51c      	bpl.n	1a00ad76 <_fputwc_r+0x52>
1a00ad3c:	0490      	lsls	r0, r2, #18
1a00ad3e:	d406      	bmi.n	1a00ad4e <_fputwc_r+0x2a>
1a00ad40:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00ad42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00ad46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00ad4a:	81a3      	strh	r3, [r4, #12]
1a00ad4c:	6662      	str	r2, [r4, #100]	; 0x64
1a00ad4e:	4628      	mov	r0, r5
1a00ad50:	4622      	mov	r2, r4
1a00ad52:	f7ff ff97 	bl	1a00ac84 <__fputwc>
1a00ad56:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00ad58:	07da      	lsls	r2, r3, #31
1a00ad5a:	4605      	mov	r5, r0
1a00ad5c:	d402      	bmi.n	1a00ad64 <_fputwc_r+0x40>
1a00ad5e:	89a3      	ldrh	r3, [r4, #12]
1a00ad60:	059b      	lsls	r3, r3, #22
1a00ad62:	d502      	bpl.n	1a00ad6a <_fputwc_r+0x46>
1a00ad64:	4628      	mov	r0, r5
1a00ad66:	b003      	add	sp, #12
1a00ad68:	bd30      	pop	{r4, r5, pc}
1a00ad6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00ad6c:	f7f9 fe5a 	bl	1a004a24 <__retarget_lock_release_recursive>
1a00ad70:	4628      	mov	r0, r5
1a00ad72:	b003      	add	sp, #12
1a00ad74:	bd30      	pop	{r4, r5, pc}
1a00ad76:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00ad78:	9101      	str	r1, [sp, #4]
1a00ad7a:	f7f9 fe51 	bl	1a004a20 <__retarget_lock_acquire_recursive>
1a00ad7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00ad82:	9901      	ldr	r1, [sp, #4]
1a00ad84:	b29a      	uxth	r2, r3
1a00ad86:	e7d9      	b.n	1a00ad3c <_fputwc_r+0x18>

1a00ad88 <__locale_mb_cur_max>:
1a00ad88:	4b01      	ldr	r3, [pc, #4]	; (1a00ad90 <__locale_mb_cur_max+0x8>)
1a00ad8a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a00ad8e:	4770      	bx	lr
1a00ad90:	100008c0 	.word	0x100008c0

1a00ad94 <__ascii_mbtowc>:
1a00ad94:	b082      	sub	sp, #8
1a00ad96:	b149      	cbz	r1, 1a00adac <__ascii_mbtowc+0x18>
1a00ad98:	b15a      	cbz	r2, 1a00adb2 <__ascii_mbtowc+0x1e>
1a00ad9a:	b16b      	cbz	r3, 1a00adb8 <__ascii_mbtowc+0x24>
1a00ad9c:	7813      	ldrb	r3, [r2, #0]
1a00ad9e:	600b      	str	r3, [r1, #0]
1a00ada0:	7812      	ldrb	r2, [r2, #0]
1a00ada2:	1c10      	adds	r0, r2, #0
1a00ada4:	bf18      	it	ne
1a00ada6:	2001      	movne	r0, #1
1a00ada8:	b002      	add	sp, #8
1a00adaa:	4770      	bx	lr
1a00adac:	a901      	add	r1, sp, #4
1a00adae:	2a00      	cmp	r2, #0
1a00adb0:	d1f3      	bne.n	1a00ad9a <__ascii_mbtowc+0x6>
1a00adb2:	4610      	mov	r0, r2
1a00adb4:	b002      	add	sp, #8
1a00adb6:	4770      	bx	lr
1a00adb8:	f06f 0001 	mvn.w	r0, #1
1a00adbc:	e7f4      	b.n	1a00ada8 <__ascii_mbtowc+0x14>
1a00adbe:	bf00      	nop

1a00adc0 <__swbuf_r>:
1a00adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00adc2:	460d      	mov	r5, r1
1a00adc4:	4614      	mov	r4, r2
1a00adc6:	4606      	mov	r6, r0
1a00adc8:	b110      	cbz	r0, 1a00add0 <__swbuf_r+0x10>
1a00adca:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00adcc:	2b00      	cmp	r3, #0
1a00adce:	d043      	beq.n	1a00ae58 <__swbuf_r+0x98>
1a00add0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00add4:	69a3      	ldr	r3, [r4, #24]
1a00add6:	60a3      	str	r3, [r4, #8]
1a00add8:	b291      	uxth	r1, r2
1a00adda:	0708      	lsls	r0, r1, #28
1a00addc:	d51b      	bpl.n	1a00ae16 <__swbuf_r+0x56>
1a00adde:	6923      	ldr	r3, [r4, #16]
1a00ade0:	b1cb      	cbz	r3, 1a00ae16 <__swbuf_r+0x56>
1a00ade2:	b2ed      	uxtb	r5, r5
1a00ade4:	0489      	lsls	r1, r1, #18
1a00ade6:	462f      	mov	r7, r5
1a00ade8:	d522      	bpl.n	1a00ae30 <__swbuf_r+0x70>
1a00adea:	6822      	ldr	r2, [r4, #0]
1a00adec:	6961      	ldr	r1, [r4, #20]
1a00adee:	1ad3      	subs	r3, r2, r3
1a00adf0:	4299      	cmp	r1, r3
1a00adf2:	dd29      	ble.n	1a00ae48 <__swbuf_r+0x88>
1a00adf4:	3301      	adds	r3, #1
1a00adf6:	68a1      	ldr	r1, [r4, #8]
1a00adf8:	1c50      	adds	r0, r2, #1
1a00adfa:	3901      	subs	r1, #1
1a00adfc:	60a1      	str	r1, [r4, #8]
1a00adfe:	6020      	str	r0, [r4, #0]
1a00ae00:	7015      	strb	r5, [r2, #0]
1a00ae02:	6962      	ldr	r2, [r4, #20]
1a00ae04:	429a      	cmp	r2, r3
1a00ae06:	d02a      	beq.n	1a00ae5e <__swbuf_r+0x9e>
1a00ae08:	89a3      	ldrh	r3, [r4, #12]
1a00ae0a:	07db      	lsls	r3, r3, #31
1a00ae0c:	d501      	bpl.n	1a00ae12 <__swbuf_r+0x52>
1a00ae0e:	2d0a      	cmp	r5, #10
1a00ae10:	d025      	beq.n	1a00ae5e <__swbuf_r+0x9e>
1a00ae12:	4638      	mov	r0, r7
1a00ae14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00ae16:	4621      	mov	r1, r4
1a00ae18:	4630      	mov	r0, r6
1a00ae1a:	f7fd fe2d 	bl	1a008a78 <__swsetup_r>
1a00ae1e:	bb20      	cbnz	r0, 1a00ae6a <__swbuf_r+0xaa>
1a00ae20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00ae24:	6923      	ldr	r3, [r4, #16]
1a00ae26:	b291      	uxth	r1, r2
1a00ae28:	b2ed      	uxtb	r5, r5
1a00ae2a:	0489      	lsls	r1, r1, #18
1a00ae2c:	462f      	mov	r7, r5
1a00ae2e:	d4dc      	bmi.n	1a00adea <__swbuf_r+0x2a>
1a00ae30:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00ae32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00ae36:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00ae3a:	81a2      	strh	r2, [r4, #12]
1a00ae3c:	6822      	ldr	r2, [r4, #0]
1a00ae3e:	6661      	str	r1, [r4, #100]	; 0x64
1a00ae40:	6961      	ldr	r1, [r4, #20]
1a00ae42:	1ad3      	subs	r3, r2, r3
1a00ae44:	4299      	cmp	r1, r3
1a00ae46:	dcd5      	bgt.n	1a00adf4 <__swbuf_r+0x34>
1a00ae48:	4621      	mov	r1, r4
1a00ae4a:	4630      	mov	r0, r6
1a00ae4c:	f7f9 fbbe 	bl	1a0045cc <_fflush_r>
1a00ae50:	b958      	cbnz	r0, 1a00ae6a <__swbuf_r+0xaa>
1a00ae52:	6822      	ldr	r2, [r4, #0]
1a00ae54:	2301      	movs	r3, #1
1a00ae56:	e7ce      	b.n	1a00adf6 <__swbuf_r+0x36>
1a00ae58:	f7f9 fc14 	bl	1a004684 <__sinit>
1a00ae5c:	e7b8      	b.n	1a00add0 <__swbuf_r+0x10>
1a00ae5e:	4621      	mov	r1, r4
1a00ae60:	4630      	mov	r0, r6
1a00ae62:	f7f9 fbb3 	bl	1a0045cc <_fflush_r>
1a00ae66:	2800      	cmp	r0, #0
1a00ae68:	d0d3      	beq.n	1a00ae12 <__swbuf_r+0x52>
1a00ae6a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00ae6e:	e7d0      	b.n	1a00ae12 <__swbuf_r+0x52>

1a00ae70 <_wcrtomb_r>:
1a00ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00ae72:	4c0b      	ldr	r4, [pc, #44]	; (1a00aea0 <_wcrtomb_r+0x30>)
1a00ae74:	b085      	sub	sp, #20
1a00ae76:	4606      	mov	r6, r0
1a00ae78:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00ae7c:	461f      	mov	r7, r3
1a00ae7e:	b121      	cbz	r1, 1a00ae8a <_wcrtomb_r+0x1a>
1a00ae80:	47a0      	blx	r4
1a00ae82:	1c43      	adds	r3, r0, #1
1a00ae84:	d006      	beq.n	1a00ae94 <_wcrtomb_r+0x24>
1a00ae86:	b005      	add	sp, #20
1a00ae88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00ae8a:	460a      	mov	r2, r1
1a00ae8c:	a901      	add	r1, sp, #4
1a00ae8e:	47a0      	blx	r4
1a00ae90:	1c43      	adds	r3, r0, #1
1a00ae92:	d1f8      	bne.n	1a00ae86 <_wcrtomb_r+0x16>
1a00ae94:	2200      	movs	r2, #0
1a00ae96:	238a      	movs	r3, #138	; 0x8a
1a00ae98:	603a      	str	r2, [r7, #0]
1a00ae9a:	6033      	str	r3, [r6, #0]
1a00ae9c:	b005      	add	sp, #20
1a00ae9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00aea0:	100008c0 	.word	0x100008c0

1a00aea4 <__ascii_wctomb>:
1a00aea4:	b149      	cbz	r1, 1a00aeba <__ascii_wctomb+0x16>
1a00aea6:	2aff      	cmp	r2, #255	; 0xff
1a00aea8:	d802      	bhi.n	1a00aeb0 <__ascii_wctomb+0xc>
1a00aeaa:	700a      	strb	r2, [r1, #0]
1a00aeac:	2001      	movs	r0, #1
1a00aeae:	4770      	bx	lr
1a00aeb0:	238a      	movs	r3, #138	; 0x8a
1a00aeb2:	6003      	str	r3, [r0, #0]
1a00aeb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00aeb8:	4770      	bx	lr
1a00aeba:	4608      	mov	r0, r1
1a00aebc:	4770      	bx	lr
1a00aebe:	bf00      	nop
1a00aec0:	6d617246 	.word	0x6d617246
1a00aec4:	61502065 	.word	0x61502065
1a00aec8:	72656b63 	.word	0x72656b63
1a00aecc:	00000000 	.word	0x00000000
1a00aed0:	6e697250 	.word	0x6e697250
1a00aed4:	75462074 	.word	0x75462074
1a00aed8:	6974636e 	.word	0x6974636e
1a00aedc:	ff006e6f 	.word	0xff006e6f
1a00aee0:	6d617246 	.word	0x6d617246
1a00aee4:	72502065 	.word	0x72502065
1a00aee8:	7365636f 	.word	0x7365636f
1a00aeec:	00726f73 	.word	0x00726f73
1a00aef0:	73257325 	.word	0x73257325
1a00aef4:	ff007325 	.word	0xff007325
1a00aef8:	6c707041 	.word	0x6c707041
1a00aefc:	74616369 	.word	0x74616369
1a00af00:	206e6f69 	.word	0x206e6f69
1a00af04:	6c6c614d 	.word	0x6c6c614d
1a00af08:	4620636f 	.word	0x4620636f
1a00af0c:	656c6961 	.word	0x656c6961
1a00af10:	6f482064 	.word	0x6f482064
1a00af14:	0d216b6f 	.word	0x0d216b6f
1a00af18:	00000000 	.word	0x00000000
1a00af1c:	7362696c 	.word	0x7362696c
1a00af20:	6572662f 	.word	0x6572662f
1a00af24:	6f747265 	.word	0x6f747265
1a00af28:	6f732f73 	.word	0x6f732f73
1a00af2c:	65637275 	.word	0x65637275
1a00af30:	6f6f682f 	.word	0x6f6f682f
1a00af34:	632e736b 	.word	0x632e736b
1a00af38:	ffffff00 	.word	0xffffff00
1a00af3c:	70410a0d 	.word	0x70410a0d
1a00af40:	63696c70 	.word	0x63696c70
1a00af44:	6f697461 	.word	0x6f697461
1a00af48:	7453206e 	.word	0x7453206e
1a00af4c:	206b6361 	.word	0x206b6361
1a00af50:	7265764f 	.word	0x7265764f
1a00af54:	776f6c66 	.word	0x776f6c66
1a00af58:	6f202121 	.word	0x6f202121
1a00af5c:	6154206e 	.word	0x6154206e
1a00af60:	203a6b73 	.word	0x203a6b73
1a00af64:	0a0d7325 	.word	0x0a0d7325
1a00af68:	ffffff00 	.word	0xffffff00
1a00af6c:	41760a0d 	.word	0x41760a0d
1a00af70:	72657373 	.word	0x72657373
1a00af74:	6c614374 	.word	0x6c614374
1a00af78:	2864656c 	.word	0x2864656c
1a00af7c:	200a0d29 	.word	0x200a0d29
1a00af80:	4c4c2020 	.word	0x4c4c2020
1a00af84:	20656e69 	.word	0x20656e69
1a00af88:	626d754e 	.word	0x626d754e
1a00af8c:	3d207265 	.word	0x3d207265
1a00af90:	0d642520 	.word	0x0d642520
1a00af94:	2020200a 	.word	0x2020200a
1a00af98:	656c6946 	.word	0x656c6946
1a00af9c:	6d614e20 	.word	0x6d614e20
1a00afa0:	203d2065 	.word	0x203d2065
1a00afa4:	0a0d7325 	.word	0x0a0d7325
1a00afa8:	ff000a0d 	.word	0xff000a0d
1a00afac:	454c4449 	.word	0x454c4449
1a00afb0:	ffffff00 	.word	0xffffff00
1a00afb4:	51726d54 	.word	0x51726d54
1a00afb8:	ffffff00 	.word	0xffffff00
1a00afbc:	20726d54 	.word	0x20726d54
1a00afc0:	00637653 	.word	0x00637653

1a00afc4 <ExtRateIn>:
1a00afc4:	00000000                                ....

1a00afc8 <GpioButtons>:
1a00afc8:	08000400 09010900                       ........

1a00afd0 <GpioLeds>:
1a00afd0:	01050005 0e000205 0c010b01              ............

1a00afdc <GpioPorts>:
1a00afdc:	03030003 0f050403 05031005 07030603     ................
1a00afec:	ffff0802                                ....

1a00aff0 <OscRateIn>:
1a00aff0:	00b71b00                                ....

1a00aff4 <InitClkStates>:
1a00aff4:	01010f01                                ....

1a00aff8 <pinmuxing>:
1a00aff8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00b008:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00b018:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00b028:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00b038:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00b048:	00d50301 00d50401 00160107 00560207     ..............V.
1a00b058:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00b068:	00570206                                ..W.

1a00b06c <UART_BClock>:
1a00b06c:	01a201c2 01620182                       ......b.

1a00b074 <UART_PClock>:
1a00b074:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00b084:	ffff00ff                                ....

1a00b088 <periph_to_base>:
1a00b088:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00b098:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00b0a8:	000100e0 01000100 01200003 00060120     .......... . ...
1a00b0b8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00b0c8:	01820013 00120182 01a201a2 01c20011     ................
1a00b0d8:	001001c2 01e201e2 0202000f 000e0202     ................
1a00b0e8:	02220222 0223000d 001c0223              "."...#.#...

1a00b0f4 <InitClkStates>:
1a00b0f4:	00010100 00010909 0001090a 01010701     ................
1a00b104:	00010902 00010906 0101090c 0001090d     ................
1a00b114:	0001090e 0001090f 00010910 00010911     ................
1a00b124:	00010912 00010913 00011114 00011119     ................
1a00b134:	0001111a 0001111b                       ........

1a00b13c <lpcUarts>:
1a00b13c:	40081000 06020406 00180205 40081000     ...@...........@
1a00b14c:	09070509 00180706 40082000 00000000     ......... .@....
1a00b15c:	00190000 400c1000 07060107 001a0602     .......@........
1a00b16c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00b17c:	02020302 001b0204                       ........

1a00b184 <gpioPinsInit>:
1a00b184:	02000104 00050701 05010d03 04080100     ................
1a00b194:	02020002 02000304 00000403 04070002     ................
1a00b1a4:	030c0300 09050402 05040103 04030208     ................
1a00b1b4:	04020305 06040504 0802000c 03000b06     ................
1a00b1c4:	00090607 07060503 060f0504 03030004     ................
1a00b1d4:	02000404 00050404 06040502 04060200     ................
1a00b1e4:	0c050408 05040a04 0003010e 14010a00     ................
1a00b1f4:	010f0000 0d000012 00001101 0010010c     ................
1a00b204:	07070300 000f0300 01000001 00000000     ................
1a00b214:	000a0600 08060603 06100504 04030005     ................
1a00b224:	03000106 04090400 04010d05 010b0000     ................
1a00b234:	0200000f 00000001 00010104 02010800     ................
1a00b244:	01090000 09010006 05040002 04010200     ................
1a00b254:	02020105 02020504 0e00000a 01000b02     ................
1a00b264:	000c020b ffff0c01                       ........

1a00b26c <_ctype_>:
1a00b26c:	20202000 20202020 28282020 20282828     .         ((((( 
1a00b27c:	20202020 20202020 20202020 20202020                     
1a00b28c:	10108820 10101010 10101010 10101010      ...............
1a00b29c:	04040410 04040404 10040404 10101010     ................
1a00b2ac:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a00b2bc:	01010101 01010101 01010101 10101010     ................
1a00b2cc:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00b2dc:	02020202 02020202 02020202 10101010     ................
1a00b2ec:	00000020 00000000 00000000 00000000      ...............
	...
1a00b36c:	ffffff00 ffff000a 00464e49 00666e69     ........INF.inf.
1a00b37c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
1a00b38c:	62613938 66656463 00000000 33323130     89abcdef....0123
1a00b39c:	37363534 42413938 46454443 00000000     456789ABCDEF....
1a00b3ac:	6c756e28 0000296c ffff0030              (null)..0...

1a00b3b8 <blanks.8678>:
1a00b3b8:	20202020 20202020 20202020 20202020                     

1a00b3c8 <zeroes.8679>:
1a00b3c8:	30303030 30303030 30303030 30303030     0000000000000000

1a00b3d8 <blanks.8693>:
1a00b3d8:	20202020 20202020 20202020 20202020                     

1a00b3e8 <zeroes.8694>:
1a00b3e8:	30303030 30303030 30303030 30303030     0000000000000000
1a00b3f8:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....

1a00b408 <__mprec_bigtens>:
1a00b408:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00b418:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00b428:	7f73bf3c 75154fdd                       <.s..O.u

1a00b430 <__mprec_tens>:
1a00b430:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00b440:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00b450:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00b460:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00b470:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00b480:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00b490:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00b4a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00b4b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00b4c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00b4d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00b4e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00b4f0:	79d99db4 44ea7843                       ...yCx.D

1a00b4f8 <p05.7442>:
1a00b4f8:	00000005 00000019 0000007d 00000043     ........}...C...
1a00b508:	49534f50 ffff0058 0000002e              POSIX.......
